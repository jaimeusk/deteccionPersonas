<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="16:BaseStationC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f5d8636a1c0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f5d86420560"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f5d86420560"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f5d8641daa0"/></to>
    </wire>
    <wire loc="19:BaseStationC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f5d86364a80"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f5d84f275c0"/></to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f5d84f275c0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f5d84ebb8d0"/></to>
    </wire>
    <wire loc="21:BaseStationC.nc">
      <from><interface-ref name="UartSend" scoped="" ref="0x7f5d86316ba0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f5d84f24600"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f5d84f24600"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f5d84ec4110"/></to>
    </wire>
    <wire loc="22:BaseStationC.nc">
      <from><interface-ref name="UartReceive" scoped="" ref="0x7f5d86311bc0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d84f23800"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f5d84f23800"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d84ec4e70"/></to>
    </wire>
    <wire loc="23:BaseStationC.nc">
      <from><interface-ref name="UartPacket" scoped="" ref="0x7f5d863076c0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f5d84f23e10"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f5d84f23e10"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f5d84ec2a40"/></to>
    </wire>
    <wire loc="24:BaseStationC.nc">
      <from><interface-ref name="UartAMPacket" scoped="" ref="0x7f5d862f88c0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f5d84f21ab0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f5d84f21ab0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f5d84ec3490"/></to>
    </wire>
    <wire loc="34:BaseStationC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f5d86309020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f5d84af2c30"/></to>
    </wire>
    <wire loc="65:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f5d84af2c30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f5d84072590"/></to>
    </wire>
    <wire loc="35:BaseStationC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f5d86309c90"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f5d84af18b0"/></to>
    </wire>
    <wire loc="66:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f5d84af18b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f5d84071270"/></to>
    </wire>
    <wire loc="36:BaseStationC.nc">
      <from><interface-ref name="AMControl" scoped="" ref="0x7f5d863696b0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f5d85f75760"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f5d85f75760"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f5d85f43cc0"/></to>
    </wire>
    <wire loc="37:BaseStationC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f5d862f5440"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f5d84af2020"/></to>
    </wire>
    <wire loc="64:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f5d84af2020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f5d84073920"/></to>
    </wire>
    <wire loc="38:BaseStationC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f5d862f40c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d84ae6910"/></to>
    </wire>
    <wire loc="54:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f5d84ae6910"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d85f71b20"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="40:BaseStationC.nc">
      <from><interface-ref name="TimerTramaTDMA" scoped="" ref="0x7f5d862f3270"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d84b8b060"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d84b8b060"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f5d85129610"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="41:BaseStationC.nc">
      <from><interface-ref name="TimerLeds" scoped="" ref="0x7f5d862e3650"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d84b85b00"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d84b85b00"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f5d85129610"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="43:BaseStationC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d862d1500"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d8624c5f0"/></to>
    </wire>
    <wire loc="51:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d8624c5f0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d86245020"/></to>
    </wire>
    <wire loc="73:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d8641ea10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d840c6020"/></to>
    </wire>
    <wire loc="59:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d8641ea10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d84ebb280"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d8641ea10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d84ffddd0"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d8641ea10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d85086b70"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d8641ea10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d850a4750"/></to>
    </wire>
    <wire loc="52:../../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d8641ea10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d850c1080"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d8641ea10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d8522e3a0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d8641ea10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d8532e620"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d8641ea10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d8541cc60"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d8641ea10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d85dbfc70"/></to>
    </wire>
    <wire loc="73:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d8641ea10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d843ea020"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateImplC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d8641ea10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d858ef020"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d8641ea10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d85e70510"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f5d86383140"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f5d868ca1e0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f5d868ca1e0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f5d8646f140"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f5d86383b60"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d86422960"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d86422960"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d8641acb0"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d863823a0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d8641ea10"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f5d86412b60"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f5d8640f390"/></to>
    </wire>
    <wire loc="50:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f5d8640e9f0"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f5d863f7390"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/telosb/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f5d863f7390"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d863dc280"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f5d8640d120"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d863f51a0"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f5d8640d800"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d8621dc40"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d863dc280"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d863c5ae0"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f5d863d5850"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f5d863c2180"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f5d86545c80"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f5d863c1320"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d8646e040"/></to>
    </wire>
    <wire loc="56:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f5d86469490"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f5d866a29a0"/></to>
    </wire>
    <wire loc="90:BaseStationP.nc">
      <from><interface-ref name="RadioSendTask" scoped="" ref="0x7f5d862c49e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:BaseStationP.nc">
      <from><interface-ref name="uartSendTask" scoped="" ref="0x7f5d862c59f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d8621dc40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d862488d0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f5d8623d7b0"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f5d86220360"/></to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f5d86220360"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85fa09e0"/></to>
    </wire>
    <wire loc="55:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f5d86243980"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f5d8621f6a0"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f5d8621f6a0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85f8a020"/></to>
    </wire>
    <wire loc="56:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f5d86242ca0"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f5d8621e9c0"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f5d8621e9c0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85f85630"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85f8fc50"/></from>
      <to><interface-ref name="Port54" scoped="" ref="0x7f5d861b0020"/></to>
    </wire>
    <wire loc="737:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f5d861b0020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8605a540"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85f892f0"/></from>
      <to><interface-ref name="Port55" scoped="" ref="0x7f5d861ae8a0"/></to>
    </wire>
    <wire loc="738:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f5d861ae8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86054b90"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85f837a0"/></from>
      <to><interface-ref name="Port56" scoped="" ref="0x7f5d861ab020"/></to>
    </wire>
    <wire loc="739:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f5d861ab020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8604e060"/></to>
    </wire>
    <wire loc="693:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f5d86202d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86109b90"/></to>
    </wire>
    <wire loc="706:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f5d861e9e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860d1060"/></to>
    </wire>
    <wire loc="844:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f5d8615e3d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860c1060"/></to>
    </wire>
    <wire loc="864:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f5d861643e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86023b90"/></to>
    </wire>
    <wire loc="845:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f5d8618c3f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860bc540"/></to>
    </wire>
    <wire loc="711:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f5d861e4e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860c7b90"/></to>
    </wire>
    <wire loc="724:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f5d861c9020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86090060"/></to>
    </wire>
    <wire loc="748:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f5d8619b020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8602d060"/></to>
    </wire>
    <wire loc="848:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f5d861873f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860b1060"/></to>
    </wire>
    <wire loc="858:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f5d861733e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86044b90"/></to>
    </wire>
    <wire loc="870:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f5d861543f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8601d060"/></to>
    </wire>
    <wire loc="696:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f5d861fa580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860f8b90"/></to>
    </wire>
    <wire loc="849:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f5d86185bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860ab540"/></to>
    </wire>
    <wire loc="701:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f5d861f5580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860ed540"/></to>
    </wire>
    <wire loc="714:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f5d861dc710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860b7b90"/></to>
    </wire>
    <wire loc="727:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f5d861c28a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8607f060"/></to>
    </wire>
    <wire loc="740:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f5d861a98a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86049540"/></to>
    </wire>
    <wire loc="751:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f5d861948a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8601d060"/></to>
    </wire>
    <wire loc="691:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f5d86207d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86113060"/></to>
    </wire>
    <wire loc="704:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f5d861eed50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860dd6d0"/></to>
    </wire>
    <wire loc="717:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f5d861d4e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860a6b90"/></to>
    </wire>
    <wire loc="843:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f5d8618fbc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860c1060"/></to>
    </wire>
    <wire loc="861:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f5d8616cbb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86034b90"/></to>
    </wire>
    <wire loc="868:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f5d86157bb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8601d060"/></to>
    </wire>
    <wire loc="854:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f5d8617bbc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8605f060"/></to>
    </wire>
    <wire loc="722:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f5d861cfe50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8609b740"/></to>
    </wire>
    <wire loc="735:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f5d861b5020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86065b90"/></to>
    </wire>
    <wire loc="746:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f5d861a1020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86039540"/></to>
    </wire>
    <wire loc="862:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f5d861693e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8602d060"/></to>
    </wire>
    <wire loc="851:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f5d861823e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8606f060"/></to>
    </wire>
    <wire loc="694:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f5d861ff580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86103060"/></to>
    </wire>
    <wire loc="707:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f5d861e6710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860cc540"/></to>
    </wire>
    <wire loc="744:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f5d861a6020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86044b90"/></to>
    </wire>
    <wire loc="712:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f5d861e1710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860c1060"/></to>
    </wire>
    <wire loc="725:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f5d861c78a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8608b540"/></to>
    </wire>
    <wire loc="749:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f5d861998a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86028540"/></to>
    </wire>
    <wire loc="853:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f5d8617d3f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86065b90"/></to>
    </wire>
    <wire loc="689:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f5d8620bcb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8611e540"/></to>
    </wire>
    <wire loc="702:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f5d861f3d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860e8b90"/></to>
    </wire>
    <wire loc="715:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f5d861dae50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860b1060"/></to>
    </wire>
    <wire loc="728:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f5d861bf020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8607a540"/></to>
    </wire>
    <wire loc="855:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f5d861783f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860a6b90"/></to>
    </wire>
    <wire loc="859:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f5d86171bb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8603e060"/></to>
    </wire>
    <wire loc="865:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f5d86162bb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8601d060"/></to>
    </wire>
    <wire loc="733:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f5d861ba020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8606f060"/></to>
    </wire>
    <wire loc="856:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f5d86176bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860a0060"/></to>
    </wire>
    <wire loc="692:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f5d86204580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8610e540"/></to>
    </wire>
    <wire loc="705:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f5d861eb710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860d8b90"/></to>
    </wire>
    <wire loc="718:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f5d861d1710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860a0060"/></to>
    </wire>
    <wire loc="852:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f5d86180bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8606a540"/></to>
    </wire>
    <wire loc="863:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f5d86167bb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86028540"/></to>
    </wire>
    <wire loc="723:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f5d861cc8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86096b90"/></to>
    </wire>
    <wire loc="736:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f5d861b38a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8605f060"/></to>
    </wire>
    <wire loc="747:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f5d8619f8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86034b90"/></to>
    </wire>
    <wire loc="695:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f5d861fdd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860fd540"/></to>
    </wire>
    <wire loc="745:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f5d861a48a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8603e060"/></to>
    </wire>
    <wire loc="700:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f5d861f8d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860f2060"/></to>
    </wire>
    <wire loc="713:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f5d861dfe50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860bc540"/></to>
    </wire>
    <wire loc="726:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f5d861c4020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86086b90"/></to>
    </wire>
    <wire loc="750:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f5d86196020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86023b90"/></to>
    </wire>
    <wire loc="690:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f5d86209580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86119b90"/></to>
    </wire>
    <wire loc="703:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f5d861f0580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860e2060"/></to>
    </wire>
    <wire loc="716:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f5d861d7710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860ab540"/></to>
    </wire>
    <wire loc="729:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f5d861bd8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86075b90"/></to>
    </wire>
    <wire loc="860:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f5d8616e3e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86039540"/></to>
    </wire>
    <wire loc="847:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f5d8615cba0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860b7b90"/></to>
    </wire>
    <wire loc="846:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f5d8618abc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860b7b90"/></to>
    </wire>
    <wire loc="734:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f5d861b88a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d8606a540"/></to>
    </wire>
    <wire loc="867:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f5d861593e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86023b90"/></to>
    </wire>
    <wire loc="871:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f5d86152bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d86049540"/></to>
    </wire>
    <wire loc="842:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f5d86191060"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d860c7b90"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f5d85f43cc0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f5d85f19020"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f5d85f727f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f5d85f42d20"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f5d85f42d20"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f5d84fbf020"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f5d85f70880"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f5d85f40c00"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f5d85f40c00"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f5d84fbedf0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f5d85f6f020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f5d85f3e8f0"/></to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f5d85f3e8f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f5d84fbca80"/></to>
    </wire>
    <wire loc="89:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f5d85f6a310"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f5d852aa550"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f5d852aa550"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f5d8529ba80"/></to>
    </wire>
    <wire loc="86:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f5d85f50130"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f5d85f32cb0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f5d85f32cb0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f5d85f05080"/></to>
    </wire>
    <wire loc="81:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f5d85f71b20"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d85f40020"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f5d85f40020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d84fbe210"/></to>
    </wire>
    <wire loc="85:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d85f6b080"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d85f3c990"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d85f3c990"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d85f06020"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f5d85f6fc90"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f5d85f3f2d0"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f5d85f3f2d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f5d84fbd470"/></to>
    </wire>
    <wire loc="90:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f5d85f5c3f0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f5d852a6660"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f5d852a6660"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f5d85298af0"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f5d85f19020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f5d84ff0b80"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f5d85f29e30"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f5d84fb98b0"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f5d85f1dd20"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f5d84fbbce0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d85f349b0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d85f07020"/></to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d85f07020"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d852af670"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f5d85f05080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f5d84ff0080"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d85f06020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f5d852ac6e0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f5d85f28020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f5d85f05b70"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f5d85f05b70"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f5d84fdc020"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f5d85f31c70"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f5d85f069d0"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f5d85f069d0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f5d852aba70"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioResource" scoped="" ref="0x7f5d84fb10f0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d85f18530"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f5d84fb8860"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f5d85f11a70"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7f5d85f11a70"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f5d85059c90"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f5d84fb7690"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f5d85f0a840"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7f5d85f0a840"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f5d85058a50"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f5d84fb34d0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f5d854d5b20"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d84fb7ce0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d852af670"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d852af670"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d852a1d20"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d84fb6b70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d852ab0c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d852ab0c0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d8529c640"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f5d84fb5610"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f5d85e79dc0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f5d85e79dc0"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f5d85e6f970"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7f5d84fb21f0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f5d85eff330"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f5d85eff330"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f5d85ef97e0"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d84fb1d30"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d8624c5f0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f5d84ff0b80"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f5d84fedd90"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f5d852aba70"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f5d8529b020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f5d84fdc020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f5d84fda410"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7f5d85059c90"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f5d8504fa20"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f5d84ff0080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f5d84fe92d0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f5d85f12690"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d850595e0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f5d850595e0"/></from>
      <to><interface-ref name="BareReceive" scoped="" ref="0x7f5d8504f370"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f5d852ac6e0"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f5d8529dc50"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d85f18530"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d8505cbe0"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d8505cbe0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d850517b0"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f5d85f08940"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d8505b8e0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f5d8505b8e0"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x7f5d850504d0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7f5d85f12d50"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7f5d85057170"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7f5d85057170"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7f5d8504c020"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7f5d85058a50"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f5d8504d840"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f5d84fedd90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f5d85f01390"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f5d85f01390"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f5d85efee70"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f5d850566b0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d850aa220"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f5d850aa220"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d850a7a10"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f5d850a8020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d84fdf350"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f5d84fdf350"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f5d84fdcd70"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f5d84fdcd70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d84ff5ce0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f5d84ff5ce0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f5d84fee860"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f5d84fee860"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d85f01e80"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f5d85f01e80"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d85efb990"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f5d85056020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d84ff2980"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f5d84ff2980"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f5d84fed690"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f5d84fed690"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d8508daa0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f5d8508daa0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d85089e30"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f5d8508a950"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d85f00b40"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f5d85f00b40"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d853327c0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f5d853327c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d8532c020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d85ef8640"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d85e89950"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d85e89950"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d85e70b80"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7f5d85ef1b50"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7f5d85e84bf0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7f5d85e84bf0"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7f5d85e6d740"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f5d85eed760"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f5d8542c6c0"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f5d85eed760"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f5d853355c0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f5d853355c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f5d8532eca0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f5d8542c6c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f5d8541a320"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7f5d85ee62a0"/></from>
      <to><interface-ref name="CC2420Transmit" scoped="" ref="0x7f5d85429020"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7f5d85429020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d8541abc0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7f5d85eee060"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f5d85429cb0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f5d85429cb0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f5d85419970"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d85ee3330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d852af670"/></to>
    </wire>
    <wire loc="73:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d85eda920"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d852ab0c0"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f5d85ee2420"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f5d850caa20"/></to>
    </wire>
    <wire loc="56:../../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f5d850caa20"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f5d850c0a20"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControlState" scoped="" ref="0x7f5d85ede110"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f5d850cdaa0"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f5d850cdaa0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f5d858f31d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d85ee2bf0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d8624c5f0"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="sendDone_task" scoped="" ref="0x7f5d85ed0b70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="stopDone_task" scoped="" ref="0x7f5d85ed2ba0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="startDone_task" scoped="" ref="0x7f5d85ed3c20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ReadRssi" scoped="" ref="0x7f5d85e750c0"/></from>
      <to><interface-ref name="ReadRssi" scoped="" ref="0x7f5d85e6cb40"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="StartupTimer" scoped="" ref="0x7f5d85e60d90"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f5d85dbc690"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7f5d85dbc690"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f5d85db65f0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f5d85e5d060"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f5d85b6b690"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f5d85b6b690"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b5d020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f5d85e5c380"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x7f5d85b67020"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f5d85b67020"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b4c020"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7f5d85e5b6a0"/></from>
      <to><interface-ref name="VREN" scoped="" ref="0x7f5d85b656a0"/></to>
    </wire>
    <wire loc="77:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7f5d85b656a0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b42b00"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7f5d85e590e0"/></from>
      <to><interface-ref name="InterruptCCA" scoped="" ref="0x7f5d85b23400"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7f5d85b23400"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f5d859c6680"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f5d85e431d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d8555fe20"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d8555fe20"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d859724d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f5d85e422b0"/></from>
      <to><interface-ref name="SRXON" scoped="" ref="0x7f5d8555c7b0"/></to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f5d8555c7b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f5d85e429c0"/></from>
      <to><interface-ref name="SRFOFF" scoped="" ref="0x7f5d8555aae0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f5d8555aae0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f5d85e44a40"/></from>
      <to><interface-ref name="SXOSCON" scoped="" ref="0x7f5d8555dad0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f5d8555dad0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f5d85e44120"/></from>
      <to><interface-ref name="SXOSCOFF" scoped="" ref="0x7f5d85559160"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f5d85559160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f5d85e48b00"/></from>
      <to><interface-ref name="FSCTRL" scoped="" ref="0x7f5d85551870"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f5d85551870"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f5d85e4f3d0"/></from>
      <to><interface-ref name="IOCFG0" scoped="" ref="0x7f5d8554e880"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f5d8554e880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f5d85e4fc80"/></from>
      <to><interface-ref name="IOCFG1" scoped="" ref="0x7f5d8554d0a0"/></to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f5d8554d0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f5d85e4b5f0"/></from>
      <to><interface-ref name="MDMCTRL0" scoped="" ref="0x7f5d85556e50"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f5d85556e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d85e47020"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d85554670"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d85554670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f5d85e54520"/></from>
      <to><interface-ref name="PANID" scoped="" ref="0x7f5d85540500"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f5d85540500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f5d85e4ca90"/></from>
      <to><interface-ref name="IEEEADR" scoped="" ref="0x7f5d85542ce0"/></to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f5d85542ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f5d85e478e0"/></from>
      <to><interface-ref name="RXCTRL1" scoped="" ref="0x7f5d85552e50"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f5d85552e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f5d85e461c0"/></from>
      <to><interface-ref name="RSSI" scoped="" ref="0x7f5d85554e50"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f5d85554e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f5d85e46a70"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7f5d85553e50"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f5d85553e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SyncResource" scoped="" ref="0x7f5d85e40d90"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d8552ea80"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d8552ea80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d859724d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RssiResource" scoped="" ref="0x7f5d85e40020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d855029e0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d855029e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d859724d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f5d85e51810"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f5d854d5b20"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f5d85e68020"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f5d854d4d20"/></to>
    </wire>
    <wire loc="23:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f5d854d4d20"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f5d854ba310"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="syncDone" scoped="" ref="0x7f5d85e35820"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="sync" scoped="" ref="0x7f5d85e36940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d85dbfc70"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d85db7d40"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d85db7d40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d846f2340"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7f5d85db65f0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f5d846f2b90"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d846f2340"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d846ea3d0"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f5d846f2b90"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f5d846e4020"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d846ea3d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d846cfca0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f5d846de780"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f5d846eac20"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f5d846eac20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f5d846ce5b0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f5d846e03d0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f5d85bf18c0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f5d85bf18c0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f5d85bd4cf0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d846ca710"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d846d49d0"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d846d49d0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d85d8ccd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d846c9da0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d846d2120"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d846d2120"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d85d83a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d846b60c0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d846d1440"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d846d1440"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d85d803f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d85d8ccd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f5d85d6ccd0"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f5d85d6ccd0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d85d16260"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d85d83a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f5d85d6a5a0"/></to>
    </wire>
    <wire loc="139:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f5d85d6a5a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d85cb46d0"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d85d803f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f5d85d69a20"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f5d85d69a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d85cb3ac0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d85d8ccd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f5d85d6ccd0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d85d83a40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f5d85d64d40"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f5d85d64d40"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d85ca4220"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d85d803f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f5d85d62160"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f5d85d62160"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d85ca3610"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d85d8ccd0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f5d85d6ccd0"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d85d83a40"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f5d85d60020"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f5d85d60020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d85c9c6d0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d85d803f0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f5d85d5f570"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f5d85d5f570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d85c9bac0"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d85d8ccd0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f5d85d6ccd0"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d85d83a40"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f5d85d5d410"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f5d85d5d410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d85c95b30"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d85d803f0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f5d85d5c890"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f5d85d5c890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d85c93020"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d85d8ccd0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f5d85d6ccd0"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d85d83a40"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f5d85d5a8c0"/></to>
    </wire>
    <wire loc="175:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f5d85d5a8c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d85c8c220"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d85d803f0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f5d85d59d40"/></to>
    </wire>
    <wire loc="176:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f5d85d59d40"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d85c8b610"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d85d8ccd0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f5d85d6ccd0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d85d83a40"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f5d85d57a50"/></to>
    </wire>
    <wire loc="182:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f5d85d57a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d85c856d0"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d85d803f0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f5d85d54020"/></to>
    </wire>
    <wire loc="183:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f5d85d54020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d85c84ac0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f5d85d6fa50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d85cbb220"/></to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f5d85d71a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d85cc2cb0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f5d85d5e3e0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d85c9a7a0"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f5d85d77bb0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d85cc2020"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f5d85d54da0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d85c837a0"/></to>
    </wire>
    <wire loc="112:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f5d85d7b280"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d85d106d0"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f5d85d65da0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d85caacb0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f5d85d65020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d85caa020"/></to>
    </wire>
    <wire loc="146:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f5d85d67a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d85cacb30"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f5d85d6dda0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d85cb92f0"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f5d85d5b890"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d85c93cb0"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f5d85d6d020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d85cba610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f5d85d7fa30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d85d1e3e0"/></to>
    </wire>
    <wire loc="119:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f5d85d78730"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d85cc4b30"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f5d85d72690"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d85cc97a0"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f5d85d61020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d85ca22f0"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f5d85d7a700"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d85ccaac0"/></to>
    </wire>
    <wire loc="177:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f5d85d58ae0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d85c8a2f0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f5d85d68a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d85cb17a0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f5d85d1b2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d85d1cbf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f5d85d1b940"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f5d85c7b3f0"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f5d85d1a020"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f5d85c7bb80"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d85cc8610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d85d1e3e0"/></to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d85cc7c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d85d1cbf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d85cc0b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d85d1e3e0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d85cbe2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d85d1cbf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d85cb8160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d85d1e3e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d85cb77a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d85d1cbf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f5d85d14100"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d85d15a60"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f5d85d14750"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f5d85c7a430"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f5d85d14da0"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f5d85c7abc0"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d85cb0610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d85d16260"/></to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d85cafc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d85d15a60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d85ca9b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d85d16260"/></to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d85ca72f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d85d15a60"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d85ca0160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d85d16260"/></to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d85c9f7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d85d15a60"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d85c99610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d85d16260"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d85c98c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d85d15a60"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d85c91b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d85d16260"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d85c8f2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d85d15a60"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d85c89160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d85d16260"/></to>
    </wire>
    <wire loc="179:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d85c887a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d85d15a60"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d85c82610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d85d16260"/></to>
    </wire>
    <wire loc="186:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d85c80c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d85d15a60"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f5d85bb60f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f5d85bef8e0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f5d85bef8e0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f5d85be8b80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d85bdac50"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f5d85d6ccd0"/></to>
    </wire>
    <wire loc="73:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7f5d85b6a9c0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b58630"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7f5d85b69cf0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b52b00"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7f5d85b6c3e0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b63a20"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7f5d85b66370"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b47630"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85b62c50"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f5d86202d50"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85b5c2f0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7f5d861c9020"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85b577a0"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f5d86204580"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85b51c60"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f5d8620bcb0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85b4b2f0"/></from>
      <to><interface-ref name="Port46" scoped="" ref="0x7f5d861bf020"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85b467a0"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7f5d861cc8a0"/></to>
    </wire>
    <wire loc="69:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85b41c60"/></from>
      <to><interface-ref name="Port45" scoped="" ref="0x7f5d861c28a0"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7f5d85b1f700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d85b1cc20"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f5d85b22060"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f5d859b7b70"/></to>
    </wire>
    <wire loc="53:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d85b09760"/></from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7f5d85d67a50"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430Capture" scoped="" ref="0x7f5d85b08a80"/></from>
      <to><interface-ref name="CaptureB1" scoped="" ref="0x7f5d85d65da0"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b07930"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7f5d861cc8a0"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7f5d859c52f0"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f5d85af4020"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f5d85af4020"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f5d85add3f0"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7f5d859b67a0"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f5d85af73d0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f5d85af73d0"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f5d85ae47a0"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f5d85ae83f0"/></from>
      <to><interface-ref name="Port26" scoped="" ref="0x7f5d85ad13f0"/></to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f5d85af1a30"/></from>
      <to><interface-ref name="Port17" scoped="" ref="0x7f5d85adad50"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f5d85aee020"/></from>
      <to><interface-ref name="Port21" scoped="" ref="0x7f5d85ad73f0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f5d85afda30"/></from>
      <to><interface-ref name="Port12" scoped="" ref="0x7f5d85ae0d50"/></to>
    </wire>
    <wire loc="80:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f5d85aeba30"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f5d85ad4d50"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f5d85af33f0"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x7f5d85adc710"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f5d85ae6710"/></from>
      <to><interface-ref name="Port27" scoped="" ref="0x7f5d85ad0710"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f5d85aed3f0"/></from>
      <to><interface-ref name="Port22" scoped="" ref="0x7f5d85ad6710"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f5d85af6d50"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f5d85ade020"/></to>
    </wire>
    <wire loc="81:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f5d85ae9020"/></from>
      <to><interface-ref name="Port25" scoped="" ref="0x7f5d85ad2100"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f5d85af2710"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x7f5d85adba30"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f5d85af0d50"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x7f5d85ad8020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f5d85afe710"/></from>
      <to><interface-ref name="Port11" scoped="" ref="0x7f5d85ae1a30"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f5d85aec710"/></from>
      <to><interface-ref name="Port23" scoped="" ref="0x7f5d85ad5a30"/></to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f5d8555c160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d85550880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f5d855470a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f5d8554e0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f5d8553c500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f5d8553e500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f5d8555a490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f5d85544880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f5d8553f500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f5d8554a880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f5d8554b0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d8555ea90"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d85971350"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d85971350"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d85969660"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f5d85559e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f5d85558490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f5d85543c80"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f5d85558be0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f5d8553fce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f5d855440a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f5d85553670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f5d855450a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f5d85547880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f5d85545880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f5d8553dce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f5d8553ece0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f5d8554b880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f5d855460a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f5d85540ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f5d8554d880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f5d8553cce0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f5d859702c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f5d8555d480"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f5d85556670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f5d85552670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f5d855490a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f5d85549880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d855500a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f5d855572f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f5d85556020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f5d855597b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f5d85542500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f5d8553d500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f5d8554a0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f5d85546880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f5d8555ce00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f5d8554c0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f5d85557940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f5d8554c880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f5d855430a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f5d8553b9b0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f5d859702c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Fifo" scoped="" ref="0x7f5d859702c0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f5d85967890"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d85966ba0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d85965a30"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d859724d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d85968510"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d859638b0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="WorkingState" scoped="" ref="0x7f5d85957b40"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f5d858f8770"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f5d858f8770"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f5d858f31d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f5d85962060"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d858d6c40"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d858d6c40"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d8446ba00"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f5d8595fc70"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f5d858d58f0"/></to>
    </wire>
    <wire loc="53:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f5d858d58f0"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f5d84469020"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f5d859572e0"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f5d85587020"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f5d85587020"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f5d84468120"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d85960a70"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d8624c5f0"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <from><interface-ref name="grant" scoped="" ref="0x7f5d85953bd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/system/StateImplC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f5d858f31d0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f5d858efb70"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f5d84468120"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f5d8586c850"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f5d84469020"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f5d8586f110"/></to>
    </wire>
    <wire loc="105:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d8446ba00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d85875d80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d8446a760"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d8445f2c0"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d8445f2c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d856f02c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f5d8586f110"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f5d857f4a10"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f5d84469630"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f5d8586f790"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f5d8586f790"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f5d857f3060"/></to>
    </wire>
    <wire loc="111:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f5d8586aa40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f5d844688c0"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d84450760"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d8586d8e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f5d8586b690"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d84461640"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d84461640"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d856f1020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f5d85866b40"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d8445ac10"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d8445ac10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f5d856f34d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d8586d8e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d857f4250"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f5d8586c850"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f5d857f3c50"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d85875d80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d857f5470"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f5d857f03e0"/></from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f5d8586aa40"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f5d857f15b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f5d8586b690"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f5d857eb480"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f5d85866b40"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f5d857f0a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d857e1020"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d857e1020"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f5d857d7700"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d857ebc20"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d8624c5f0"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <from><interface-ref name="signalDone_task" scoped="" ref="0x7f5d857e92f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f5d857d92c0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f5d857d2c20"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d857ddd10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f5d857d22d0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f5d857a3bb0"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f5d8618fbc0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f5d857a03e0"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7f5d8618c3f0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f5d8579ebb0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f5d8618abc0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f5d8579b3e0"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7f5d86185bc0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f5d85799bb0"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7f5d861873f0"/></to>
    </wire>
    <wire loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7f5d857a9d10"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f5d85646d40"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f5d84459440"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f5d856f23f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f5d84459a50"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f5d8564d020"/></to>
    </wire>
    <wire loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f5d8564d020"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f5d85646d40"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d8445e2b0"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d857e1020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d8445fa60"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d856f0ad0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d856f0ad0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d85659e80"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d856ef8a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d84450760"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d856f02c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d8565aa60"/></to>
    </wire>
    <wire loc="81:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d8565aa60"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d843e66c0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f5d856f34d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f5d856ecd60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d856f1020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d8565bca0"/></to>
    </wire>
    <wire loc="80:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d8565bca0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d843e7850"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7f5d856f23f0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f5d856eb710"/></to>
    </wire>
    <wire loc="83:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d85659e80"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d843e5a70"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d85658790"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d856ef8a0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d856dabf0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d85659e80"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f5d856ebd80"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d857ddd10"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f5d856da5e0"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f5d857d92c0"/></to>
    </wire>
    <wire loc="82:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d85659270"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d843e6e40"/></to>
    </wire>
    <wire loc="84:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d843e49d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d85658790"/></to>
    </wire>
    <wire loc="85:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f5d843e42d0"/></from>
      <to><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f5d85657020"/></to>
    </wire>
    <wire loc="87:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f5d843e32b0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f5d843ea630"/></to>
    </wire>
    <wire loc="155:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f5d843e0480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7f5d8563dbb0"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f5d857d7700"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f5d85638700"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f5d8618fbc0"/></to>
    </wire>
    <wire loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f5d85636e40"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f5d8618abc0"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f5d85521c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f5d8552cda0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f5d85525b50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d8551f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f5d85518e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f5d8551fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f5d8550b2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f5d8550e2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f5d8552a120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f5d85513670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f5d8550f2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f5d85524c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f5d85523c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f5d85519670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f5d8551ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f5d8551e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d8552d760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d85971350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f5d85529aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f5d85527120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f5d85512a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f5d85527870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f5d8550fad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f5d8552adc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f5d85514e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f5d85523480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d85524480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f5d8552c750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f5d85516e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f5d85517670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f5d85514670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f5d8550cad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f5d8550ead0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f5d8551a670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f5d85517e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f5d85510ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f5d8551d670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f5d8550bad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f5d859702c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f5d8552c100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f5d85525370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f5d85521480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f5d85519e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f5d8551ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f5d85518670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f5d85520670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f5d8552b450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d85520e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f5d85526020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f5d85526cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f5d855102f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f5d85511ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f5d85529450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f5d855112f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f5d8550c2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f5d8551ae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f5d85516670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f5d8552baa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f5d8552a770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f5d8551de50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f5d85526670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f5d8551c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f5d85513e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f5d8550a7a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f5d859702c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f5d854f5c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f5d85500da0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f5d854f8b50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d854f3670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f5d854ebe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f5d854f3e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f5d854df2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f5d854e12f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f5d854fd120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f5d854e7670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f5d854e22f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f5d854f7c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f5d854f6c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f5d854ed670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f5d854efe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f5d854f1670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d85501760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d85971350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f5d854fcaa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f5d854fb120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f5d854e6a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f5d854fb870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f5d854e2ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f5d854fddc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f5d854e8e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f5d854f6480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d854f7480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f5d85500750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f5d854e9e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f5d854ea670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f5d854e8670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f5d854e0ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f5d854e1ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f5d854ee670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f5d854eae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f5d854e3ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f5d854f0670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f5d854dfad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f5d859702c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f5d85500100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f5d854f8370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f5d854f5480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f5d854ede50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f5d854f1e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f5d854eb670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f5d854f4670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f5d854fe450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d854f4e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f5d854fa020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f5d854facc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f5d854e32f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f5d854e5ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f5d854fc450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f5d854e52f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f5d854e02f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f5d854eee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f5d854e9670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f5d854feaa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f5d854fd770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f5d854f0e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f5d854fa670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f5d854ef670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f5d854e7e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f5d854dd7a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f5d859702c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="21:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7f5d854b7880"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7f5d854ac020"/></to>
    </wire>
    <wire loc="20:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7f5d854ac020"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7f5d854a7140"/></to>
    </wire>
    <wire loc="16:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7f5d854a2bd0"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7f5d854abc50"/></to>
    </wire>
    <wire loc="21:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7f5d854abc50"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7f5d8548e150"/></to>
    </wire>
    <wire loc="17:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="PowerControl" scoped="" ref="0x7f5d854a6530"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f5d854381b0"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7f5d85492540"/></from>
      <to><interface-ref name="Gpio" scoped="" ref="0x7f5d85493590"/></to>
    </wire>
    <wire loc="11:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="Gpio" scoped="" ref="0x7f5d85493590"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f5d854419e0"/></to>
    </wire>
    <wire loc="18:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f5d85489950"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f5d85490ca0"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f5d85490ca0"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f5d85466a90"/></to>
    </wire>
    <wire loc="19:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7f5d8548e9f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x7f5d85492540"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f5d85455020"/></from>
      <to><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f5d8544f530"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f5d8544f530"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f5d8544be50"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d85448020"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x7f5d85d7fa30"/></to>
    </wire>
    <wire loc="9:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85440c50"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f5d861eed50"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="EnergyIndicator" scoped="" ref="0x7f5d85425990"/></from>
      <to><interface-ref name="EnergyIndicator" scoped="" ref="0x7f5d85418900"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ByteIndicator" scoped="" ref="0x7f5d85427150"/></from>
      <to><interface-ref name="ByteIndicator" scoped="" ref="0x7f5d854170f0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="BackoffTimer" scoped="" ref="0x7f5d85417ae0"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f5d85dbc690"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7f5d8540b500"/></from>
      <to><interface-ref name="CCA" scoped="" ref="0x7f5d85b6c3e0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f5d85405820"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f5d85b6b690"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7f5d85403b40"/></from>
      <to><interface-ref name="SFD" scoped="" ref="0x7f5d85b66370"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7f5d8540c880"/></from>
      <to><interface-ref name="CaptureSFD" scoped="" ref="0x7f5d85b1f700"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f5d85401020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d85366c30"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d85366c30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d859724d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d85401d10"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d853658f0"/></to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d853658f0"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d85971350"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f5d853fe6d0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7f5d853642f0"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f5d853642f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f5d853fede0"/></from>
      <to><interface-ref name="STXON" scoped="" ref="0x7f5d85363cc0"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f5d85363cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f5d853fd530"/></from>
      <to><interface-ref name="STXONCCA" scoped="" ref="0x7f5d85361370"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f5d85361370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f5d853fdc60"/></from>
      <to><interface-ref name="SFLUSHTX" scoped="" ref="0x7f5d85360d00"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f5d85360d00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f5d853ffe00"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7f5d8535ac60"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f5d8535ac60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f5d85400780"/></from>
      <to><interface-ref name="TXFIFO" scoped="" ref="0x7f5d853417a0"/></to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f5d853417a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f5d859702c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f5d853ff550"/></from>
      <to><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f5d853462f0"/></to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f5d853462f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d853fc3e0"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d8535b480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d8535b480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d853fb5e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d85358e50"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d85358e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d853fa020"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d85357670"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d85357670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f5d853fce80"/></from>
      <to><interface-ref name="STXENC" scoped="" ref="0x7f5d8535e7b0"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f5d8535e7b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f5d853f99c0"/></from>
      <to><interface-ref name="TXNONCE" scoped="" ref="0x7f5d85344ad0"/></to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f5d85344ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f5d853fa890"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7f5d853452f0"/></to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f5d853452f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f5d853f9130"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7f5d85345ad0"/></to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f5d85345ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7f5d853f3d40"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7f5d85335df0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7f5d85335df0"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7f5d8532d550"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d85413d00"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d852af670"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d85412bb0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d852ab0c0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f5d85411950"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f5d852aa550"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f5d85406be0"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f5d852a2480"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f5d852a2480"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f5d852948b0"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d853f66c0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d8624c5f0"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f5d85359c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f5d85363020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f5d8535cc70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f5d8534fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f5d85357e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f5d853432f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f5d8534b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f5d8535bc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f5d85351670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f5d85353e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f5d85355670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f5d8535f370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f5d8534aa70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f5d8535fac0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f5d85346ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f5d85360060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f5d8534ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f5d8535a480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f5d85364940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f5d8534de50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f5d8534e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f5d8534c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f5d85352670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f5d8534ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f5d85347ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f5d85354670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f5d85343ad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f5d859702c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f5d8535c490"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f5d85359480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f5d85351e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f5d85355e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f5d8534f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f5d85358670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f5d85363670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f5d8535e160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f5d8535ee00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f5d853472f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f5d85349ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f5d853606b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f5d853492f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f5d853442f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f5d85352e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f5d8534d670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f5d853619c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f5d85354e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f5d85353670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f5d8534be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketIndicator" scoped="" ref="0x7f5d85331020"/></from>
      <to><interface-ref name="PacketIndicator" scoped="" ref="0x7f5d8532c7c0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d85317150"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d8624c5f0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f5d8532b020"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f5d85b6b690"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7f5d8532a380"/></from>
      <to><interface-ref name="FIFO" scoped="" ref="0x7f5d85b6a9c0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7f5d853296b0"/></from>
      <to><interface-ref name="FIFOP" scoped="" ref="0x7f5d85b69cf0"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f5d85328a50"/></from>
      <to><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f5d85b22060"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f5d853276e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d85119250"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d85119250"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d859724d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f5d85326530"/></from>
      <to><interface-ref name="RXFIFO" scoped="" ref="0x7f5d850f5120"/></to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f5d850f5120"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f5d859702c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f5d85325ad0"/></from>
      <to><interface-ref name="SFLUSHRX" scoped="" ref="0x7f5d85114d00"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f5d85114d00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f5d853253a0"/></from>
      <to><interface-ref name="SACK" scoped="" ref="0x7f5d851139c0"/></to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f5d851139c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d85324330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d852af670"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d853231e0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d852ab0c0"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f5d85320d70"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f5d852aa550"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f5d85323b90"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f5d85e79dc0"/></to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d8531b3e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d8510a500"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d8510a500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d8531bcb0"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d8510ace0"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d8510ace0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f5d8531db10"/></from>
      <to><interface-ref name="SRXDEC" scoped="" ref="0x7f5d851127b0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f5d851127b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f5d853196d0"/></from>
      <to><interface-ref name="RXNONCE" scoped="" ref="0x7f5d850f7900"/></to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f5d850f7900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f5d8531a590"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7f5d850f9900"/></to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f5d850f9900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f5d8531ae00"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7f5d850f8120"/></to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f5d850f8120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f5d85318020"/></from>
      <to><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f5d850f9120"/></to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f5d850f9120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f5d853188b0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7f5d85118990"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f5d85118990"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <from><interface-ref name="receiveDone_task" scoped="" ref="0x7f5d8530b9d0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f5d8523da60"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f5d85bf18c0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTime32khz" scoped="" ref="0x7f5d8528e820"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f5d8523e790"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f5d85290b80"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f5d85227610"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f5d85227610"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f5d8513ca20"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f5d8522c1d0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d8514b8e0"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d8514b8e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d84240bc0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d8522e3a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d851f8020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d851f8020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d842b19d0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f5d85143020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d851cb2f0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f5d851c6850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f5d851f8870"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f5d851f8870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f5d842aa5f0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f5d8513bd20"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f5d85217b70"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f5d85217b70"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f5d8520f610"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d842b19d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d84294360"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f5d842a4d20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f5d842b0260"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f5d842b0260"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f5d84294bf0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f5d842a79b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f5d85217b70"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d8428fdd0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d8429a020"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d8429a020"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d85d8ccd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d8428d440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d84299760"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d84299760"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d85d83a40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d8428b760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d84298a80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d84298a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d85d803f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f5d8520cb90"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f5d85bef8e0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f5d851c29c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f5d84239180"/></from>
      <to><interface-ref name="TimerFrom" scoped="" ref="0x7f5d85143020"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimeSkew" scoped="" ref="0x7f5d842338b0"/></from>
      <to><interface-ref name="TimeSkew" scoped="" ref="0x7f5d8513e450"/></to>
    </wire>
    <wire loc="68:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f5d84234410"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f5d86412b60"/></to>
    </wire>
    <wire loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f5d84232020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d85132ce0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f5d85129610"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f5d85129610"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f5d8522c1d0"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f5d8510c2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f5d85116670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f5d8510f2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f5d85102500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f5d85109500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f5d851159c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f5d850ffce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f5d850fa900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f5d8510e2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f5d8510d2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f5d85105ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f5d85106500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f5d85109ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d85118020"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d85971350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f5d85113370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f5d850fc120"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f5d85112160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f5d851146b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f5d850ff500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f5d8510ead0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d8510fad0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f5d85116020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f5d85100500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f5d85102ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f5d85100ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f5d850f7120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f5d85106ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f5d85101500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f5d850fa120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f5d85108ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f5d85110ae0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f5d8510dad0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f5d85103500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f5d85108500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f5d85103ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f5d8510ccd0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f5d85116cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f5d85110490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f5d850fb900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f5d850fb120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f5d850fc900"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f5d850f8900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f5d85105500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f5d85101ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f5d85115370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f5d85114060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f5d85107500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f5d85112e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f5d85107ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f5d850fe500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f5d850f5db0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f5d859702c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x7f5d850c9920"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x7f5d850c1940"/></to>
    </wire>
    <wire loc="54:../../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d850cf990"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d850c1080"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f5d850a4e60"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f5d850a8020"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f5d850a3ae0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f5d850a5690"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f5d850a5690"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f5d858f31d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f5d850a28f0"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f5d850caa20"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d850a1170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d852ab0c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="DuplicateReceive" scoped="" ref="0x7f5d8508a200"/></from>
      <to><interface-ref name="DuplicateReceive" scoped="" ref="0x7f5d85086570"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f5d850853f0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f5d8508a950"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d85085a70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d852ab0c0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f5d8504cd70"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f5d850566b0"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f5d8504bb10"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f5d85056020"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d8504a2f0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d852af670"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d85049170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d852ab0c0"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f5d85049b70"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f5d84ffc410"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <from><interface-ref name="grantTask" scoped="" ref="0x7f5d8501ddb0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SendState" scoped="" ref="0x7f5d84fef800"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f5d84feb580"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f5d84feb580"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f5d858f31d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d84fd71c0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d85f06020"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f5d84ebb8d0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f5d84eae2f0"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d84f1f1a0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d84ec1720"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d84ebb280"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d84eb1c70"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d84eb6dc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d84f1fb20"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f5d84ec0120"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d84eb8480"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f5d84ec0d70"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d84eb9940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f5d84eb64a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7f5d84b9ca30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f5d84eb8480"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d84d7d830"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f5d84eb9940"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d84d7d110"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7f5d84d7c760"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f5d84eb64a0"/></to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d84eab8e0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d84eb6dc0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d84d79590"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d84eb6dc0"/></to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d84d71cc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d84eb6dc0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f5d84d7b0e0"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f5d84ea45c0"/></to>
    </wire>
    <wire loc="75:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7f5d84d7b9d0"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7f5d84ea7130"/></to>
    </wire>
    <wire loc="77:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7f5d84e9e8e0"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7f5d84d75b60"/></to>
    </wire>
    <wire loc="78:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f5d84e9d060"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f5d84d4b080"/></to>
    </wire>
    <wire loc="17:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f5d84d4b080"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f5d84baf080"/></to>
    </wire>
    <wire loc="80:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f5d84d68d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f5d84d4b890"/></to>
    </wire>
    <wire loc="13:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f5d84d4b890"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f5d84bb5440"/></to>
    </wire>
    <wire loc="332:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7f5d84e47e40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7f5d84e7ed10"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7f5d84e49400"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f5d84e420c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7f5d84d78c50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7f5d84d77480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="14:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f5d84d49020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f5d84bb4440"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f5d84bb4440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f5d84d34020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f5d84bb5440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f5d84d37860"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="18:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d84bb3020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d84baf8e0"/></to>
    </wire>
    <wire loc="19:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d84bad020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d84bb6020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d84bb6020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d84d397a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d84bb6c70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d84132a90"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d84132a90"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d84bf9510"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d84d32450"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d84bb3020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d8412cbe0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d84d38a30"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f5d84d331d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d84133e00"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d84133e00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d84bfa280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f5d84d311d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d8412c440"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d8412c440"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f5d84bfc510"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d84d38a30"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d84cc6dc0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f5d84d34020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f5d84cc3890"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f5d84d37860"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f5d84cc46d0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d84d397a0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d84cc6020"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d84cc13e0"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d84d32450"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f5d84cc25b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f5d84d331d0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f5d84cbc5b0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f5d84d311d0"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f5d84cc1a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d84cacd30"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d84cacd30"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f5d84ca53c0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f5d84cbb020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f5d84c167c0"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f5d84c167c0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f5d85bef8e0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d84cb8120"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d8624c5f0"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d84ca9860"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f5d84ca0020"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f5d84cac500"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f5d84ca89c0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f5d84ca08f0"/></from>
      <to><interface-ref name="SIMO1" scoped="" ref="0x7f5d86180bc0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f5d84c9d020"/></from>
      <to><interface-ref name="SOMI1" scoped="" ref="0x7f5d8617d3f0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f5d84c9b890"/></from>
      <to><interface-ref name="UCLK1" scoped="" ref="0x7f5d8617bbc0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f5d84c98020"/></from>
      <to><interface-ref name="URXD1" scoped="" ref="0x7f5d86176bc0"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f5d84c96890"/></from>
      <to><interface-ref name="UTXD1" scoped="" ref="0x7f5d861783f0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d84131a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d84cacd30"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d841312b0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d84bf9d20"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d84bf9d20"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d84bec060"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d84bf8af0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d8412cbe0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d84bf9510"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d84beebd0"/></to>
    </wire>
    <wire loc="81:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d84beebd0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d840c26c0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f5d84bfc510"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f5d84bf6230"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d84bfa280"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d84befe30"/></to>
    </wire>
    <wire loc="80:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d84befe30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d840c3850"/></to>
    </wire>
    <wire loc="83:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d84bec060"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d840c1a70"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f5d84bf52f0"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d84ca9860"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d84bec950"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d84bf8af0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d84bf3120"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d84bec060"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d84be6d50"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d84bed400"/></to>
    </wire>
    <wire loc="82:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d84bed400"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d840c2e40"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f5d84be6020"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f5d84cac500"/></to>
    </wire>
    <wire loc="84:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d840c09d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d84bec950"/></to>
    </wire>
    <wire loc="85:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f5d840c02d0"/></from>
      <to><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f5d84beb0f0"/></to>
    </wire>
    <wire loc="87:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f5d840bf2b0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f5d840c6630"/></to>
    </wire>
    <wire loc="155:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f5d840bd480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f5d840886a0"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f5d84be6020"/></to>
    </wire>
    <wire loc="82:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f5d84088e00"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f5d84be6780"/></to>
    </wire>
    <wire loc="84:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d84087410"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d84be6d50"/></to>
    </wire>
    <wire loc="85:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d84086060"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d84bcf990"/></to>
    </wire>
    <wire loc="63:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f5d84073920"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f5d84066390"/></to>
    </wire>
    <wire loc="64:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f5d84072590"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f5d85f6f020"/></to>
    </wire>
    <wire loc="65:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f5d84071270"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f5d85f6fc90"/></to>
    </wire>
    <wire loc="67:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f5d84aef020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f5d840708f0"/></to>
    </wire>
    <wire loc="66:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f5d840708f0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d85f6b080"/></to>
    </wire>
    <wire loc="60:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f5d84065060"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d84b59930"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f5d84065c70"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f5d85f6fc90"/></to>
    </wire>
    <wire loc="53:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f5d84b59930"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d84b09df0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f5d84b07400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f5d85f727f0"/></to>
    </wire>
    <wire loc="55:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f5d84b06060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f5d85f6fc90"/></to>
    </wire>
    <wire loc="56:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f5d84b05720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f5d85f6f020"/></to>
    </wire>
    <wire loc="184:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f5d84b04480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f5d84b04c60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f5d84ae5020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f5d85f6f020"/></to>
    </wire>
    <wire loc="56:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f5d84ae5c30"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f5d85f6fc90"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="41:../../../tos/platforms/telosa/PlatformC.nc">
      <documentation loc="35:../../../tos/platforms/telosa/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/telosa/PlatformP.nc" safe="">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="1:../../../tos/platforms/telosb/MotePlatformC.nc" safe="">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/telosb/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="200:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/x1xxx/McuSleepC.nc" safe="">
      <documentation loc="36:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MoteClockP" loc="38:../../../tos/platforms/telosb/MoteClockP.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockP.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="65:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="45:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="33:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="53:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="BaseStationP" loc="15:BaseStationP.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../../tos/system/LedsC.nc">
      <documentation loc="34:../../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="40:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="37:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; Digital pin i/o abstraction, TI MSP430 processors.</short>
        <long>&#10; Digital pin i/o abstraction, TI MSP430 processors.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @author Joao Goncalves &#60;joao.m.goncalves@ist.utl.pt>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="79(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="79(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="79(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="79(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="79(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="79(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="79(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="79(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="79(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="79(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="79(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="79(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="79(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="79(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="79(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="79(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="79(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="79(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="79(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="79(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="79(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="79(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="79(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="79(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="79(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="79(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="79(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="79(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="79(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="79(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="79(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="79(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="79(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="79(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="79(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="79(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="79(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="79(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="79(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="79(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="79(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="79(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="79(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="79(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="79(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="79(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="79(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="79(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="59:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <documentation loc="49:../../../tos/platforms/telosa/ActiveMessageC.nc">
        <short>&#10;&#10; The Active Message layer on the Telos platform.</short>
        <long>&#10;&#10; The Active Message layer on the Telos platform. This is a naming wrapper&#10; around the CC2420 Active Message layer.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.9 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ActiveMessageC" loc="53:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="CC2420RadioC" loc="41:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <documentation loc="24:../../../tos/chips/cc2420/CC2420RadioC.nc">
        <short>&#10; Radio wiring for the CC2420.</short>
        <long>&#10; Radio wiring for the CC2420.  This layer seperates the common&#10; wiring of the lower-layer components of the CC2420 stack and makes&#10; them available to clients like the AM stack and the IEEE802.15.4&#10; stack.&#10;&#10; This component provides the highest-level internal interface to&#10; other components of the CC2420 stack.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10; @author Stephen Dawson-Haggerty&#10; @version $Revision: 1.2 $ $Date: 2009/08/20 01:37:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaC" loc="42:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
        <short>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.</short>
        <long>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-05-14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaP" loc="37:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.12 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ControlC" loc="42:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
        <short>&#10; Implementation for configuring a ChipCon CC2420 radio.</short>
        <long>&#10; Implementation for configuring a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/05/14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ControlP" loc="42:../../../tos/chips/cc2420/control/CC2420ControlP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Urs Hunkeler (ReadRssi implementation)&#10; @version $Revision: 1.7 $ $Date: 2008/06/24 04:07:28 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="AlarmMultiplexC" loc="43:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
        <short>&#10; A component that multiplexes the use of an alarm.</short>
        <long>&#10; A component that multiplexes the use of an alarm. The assumption is&#10; that its use is mutually exclusive and users check whether the&#10; events are for them.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm" loc="40(AlarmMultiplexC.Alarm):../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420AlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C):../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer" loc="37(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC" loc="48:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <documentation loc="36:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="41(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="41(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="41(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="41(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="41(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="41(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="41(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="41(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="41(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="41(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="41(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="41(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm" loc="43(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C" loc="41:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
        <short>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C.Transform" loc="54(Counter32khz32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform" loc="51(AlarmMultiplexC.Alarm.Alarm32khz32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
        <short>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420PinsC.CCAM" loc="42(HplCC2420PinsC.CCAM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.CSNM" loc="42(HplCC2420PinsC.CSNM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOM" loc="42(HplCC2420PinsC.FIFOM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOPM" loc="42(HplCC2420PinsC.FIFOPM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.RSTNM" loc="42(HplCC2420PinsC.RSTNM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.SFDM" loc="42(HplCC2420PinsC.SFDM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.VRENM" loc="42(HplCC2420PinsC.VRENM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
        <short>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420InterruptsC.CaptureSFDC" loc="47(HplCC2420InterruptsC.CaptureSFDC):../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; The default for GpioCapture is CCIxA.  Other channels are available&#10; (like B) but they need to be hardcoded in another module.  See&#10; tos/platforms/exp5438_2520/hardware/cc2520/P81SfdCaptureC.nc&#10;&#10; Lower levels have been modified to support being able to change&#10; CCIS in the control registers.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="GpioCaptureC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430InterruptC" loc="39:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for GPIO interrupts.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430InterruptP" loc="51:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc" safe="">
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptCCAC" loc="50(HplCC2420InterruptsC.InterruptCCAC):../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptFIFOPC" loc="50(HplCC2420InterruptsC.InterruptFIFOPC):../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="CC2420ControlC.Spi" loc="39(CC2420ControlC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC" loc="37:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:16 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420SpiP" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Roman Lim&#10; @author Razvan Musaloie-E.&#10; @author Jeonggil Ko&#10; @version $Revision: 1.4 $ $Date: 2008-06-23 20:25:15 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.WorkingStateC" loc="65(CC2420SpiWireC.WorkingStateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="StateImplC" loc="64:../../../tos/system/StateImplC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="StateImplP" loc="64:../../../tos/system/StateImplP.nc" safe="">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC" loc="40(CC2420SpiWireC.HplCC2420SpiC):../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC" loc="79(CC2420SpiWireC.HplCC2420SpiC.SpiC):../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Spi0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P" loc="71:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P.SpiP" loc="73(Msp430SpiNoDma0P.SpiP):../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430SpiNoDmaP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
        <short>&#10; An HPL abstraction of USART0 on the MSP430.</short>
        <long>&#10; An HPL abstraction of USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="54:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC" loc="39(CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="56(Msp430UsartShare0P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="96(Msp430UsartShare0P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420ControlC.SyncSpiC" loc="39(CC2420ControlC.SyncSpiC):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ControlC.RssiResource" loc="39(CC2420ControlC.RssiResource):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LocalIeeeEui64C" loc="11:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <configuration/>
    </component>
    <component qname="LocalIeeeEui64P" loc="3:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <module/>
    </component>
    <component qname="Ds2411C" loc="7:../../../tos/chips/ds2411/Ds2411C.nc">
      <configuration/>
    </component>
    <component qname="Ds2411P" loc="9:../../../tos/chips/ds2411/Ds2411P.nc">
      <module/>
    </component>
    <component qname="OneWireMasterC" loc="6:../../../tos/lib/onewire/OneWireMasterC.nc">
      <documentation loc="1:../../../tos/lib/onewire/OneWireMasterC.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10;</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="OneWireMasterP" loc="9:../../../tos/lib/onewire/OneWireMasterP.nc">
      <documentation loc="2:../../../tos/lib/onewire/OneWireMasterP.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10; Only supports one device on the 1-wire bus.</short>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="39:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="BusyWaitMicroC.BusyWaitCounterC" loc="52(BusyWaitMicroC.BusyWaitCounterC):../../../tos/lib/timer/BusyWaitCounterC.nc">
      <documentation loc="36:../../../tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="BusyWaitCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f0460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f5d862f07d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430CounterMicroC" loc="44:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
        <short>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.</short>
        <long>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.   If your base clock is in units of binary hertz then 1 uis, decimal&#10; hertz it will be 1us.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430CounterMicroC.Counter" loc="42(Msp430CounterMicroC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f0460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f5d862f07d0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplDs2411C" loc="1:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <configuration/>
    </component>
    <component qname="HplDs2411C.MspGpio" loc="42(HplDs2411C.MspGpio):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="Ds2411PowerControlC" loc="12:../../../tos/chips/ds2411/Ds2411PowerControlC.nc">
      <module/>
    </component>
    <component qname="CC2420TransmitC" loc="41:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
        <short>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TransmitP" loc="46:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420TransmitC.Spi" loc="39(CC2420TransmitC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC" loc="39:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
        <short>&#10; Implementation of the receive path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the receive path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveP" loc="45:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Jung Il Choi&#10; @author JeongGil Ko&#10; @author Razvan Musaloiu-E&#10; @version $Revision: 1.21 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC" loc="38:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420PacketP" loc="43:../../../tos/chips/cc2420/packet/CC2420PacketP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC.CounterToLocalTimeC" loc="46(CC2420PacketC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="55(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC.VT" loc="61(HilTimerMilliC.VirtualizeTimerC.VT):../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerImplP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d851bd530"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CC2420PacketC.DummyTimer" loc="44(CC2420PacketC.DummyTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC.Spi" loc="39(CC2420ReceiveC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RandomC" loc="43:../../../tos/system/RandomC.nc">
      <documentation loc="33:../../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420CsmaC.StateC" loc="65(CC2420CsmaC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueSendC" loc="38:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
        <short>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; </short>
        <long>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueSendP" loc="38:../../../tos/chips/cc2420/unique/UniqueSendP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
        <short>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.</short>
        <long>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="UniqueSendC.StateC" loc="65(UniqueSendC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueReceiveC" loc="40:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
        <short>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; This should sit at the bottom of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueReceiveP" loc="41:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
        <short> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC" loc="62:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
        <short>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.</short>
        <long>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.  They do not include the network byte &#10; responsible for identifying the packing as being sourced from a TinyOS&#10; network.&#10;&#10; TinyOS I-Frames are interoperability packets that do include a network&#10; byte as defined by 6LowPAN specifications.  The I-Frame header type is&#10; the default packet header used in TinyOS networks.&#10;&#10; Since either packet header is acceptable, this layer must do some &#10; preprocessing (sorry) to figure out whether or not it needs to include &#10; the functionality to process I-frames.  If I-Frames are used, then&#10; the network byte is added on the way out and checked on the way in.&#10; If the packet came from a network different from a TinyOS network, the&#10; user may access it through the DispatchP's NonTinyosReceive[] Receive &#10; interface and process it in a different radio stack.&#10;&#10; If T-Frames are used instead, this layer is simply pass-through wiring to the&#10; layer beneath.  &#10;&#10; Define &#34;CC2420_IFRAME_TYPE&#34; to use the interoperability frame and &#10; this layer&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TinyosNetworkP" loc="44:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
        <short>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.</short>
        <long>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.  Filters incoming packets that are not&#10; TinyOS network compatible.  Provides the 6LowpanSnoop interface to&#10; sniff for packets that were not originated from TinyOS.&#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC.FcfsResourceQueueC" loc="42(CC2420TinyosNetworkC.FcfsResourceQueueC):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DummyLplC" loc="41:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Sleep interval is always 0, and duty cycle is always 100%&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="DummyLplP" loc="39:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Wakeup interval is always 0 (always on)&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="DummyLplC.StateC" loc="65(DummyLplC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyC" loc="38:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
        <short>&#10; Dummy configuration for PacketLink Layer&#10; </short>
        <long>&#10; Dummy configuration for PacketLink Layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyP" loc="38:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <documentation loc="32:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
        <short>&#10; Dummy module for Packet Link layer&#10; </short>
        <long>&#10; Dummy module for Packet Link layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ActiveMessageP" loc="46:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc" safe="">
      <documentation loc="33:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
        <short>&#10; Active message implementation on top of the CC2420 radio.</short>
        <long>&#10; Active message implementation on top of the CC2420 radio. This&#10; implementation uses the 16-bit addressing mode of 802.15.4: the&#10; only additional byte it adds is the AM id byte, as the first byte&#10; of the data payload.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.22 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="2:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
        <short>&#10; An implementation of the UART on USART1 for the MSP430.</short>
        <long>&#10; An implementation of the UART on USART1 for the MSP430.&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire81@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Uart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P" loc="39:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P.UartP" loc="44(Msp430Uart1P.UartP):../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <documentation loc="36:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart1C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <documentation loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
        <short>&#10; An HPL abstraction of USART1 on the MSP430.</short>
        <long>&#10; An HPL abstraction of USART1 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart1P" loc="59:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="40(PlatformSerialC.UartC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P" loc="38:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.UsartShareP" loc="37(Msp430UsartShare1P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC" loc="56(Msp430UsartShare1P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart1.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Queue" loc="42(Msp430UsartShare1P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="2">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Arbiter" loc="96(Msp430UsartShare1P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC" loc="67(Msp430UsartShare1P.PowerManagerC):../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC.PowerManager" loc="58(Msp430UsartShare1P.PowerManagerC.PowerManager):../../../tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:../../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="TelosSerialP" loc="1:../../../tos/platforms/telosa/TelosSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BaseStationC.TimerTramaTDMA" loc="44(BaseStationC.TimerTramaTDMA):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BaseStationC.TimerLeds" loc="44(BaseStationC.TimerLeds):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BaseStationC.AMSenderC" loc="47(BaseStationC.AMSenderC):../../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:17">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BaseStationC.AMSenderC.SenderC" loc="47(BaseStationC.AMSenderC.SenderC):../../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BaseStationC.AMSenderC.SenderC.AMQueueEntryP" loc="43(BaseStationC.AMSenderC.SenderC.AMQueueEntryP):../../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:../../../tos/system/AMQueueP.nc">
      <documentation loc="33:../../../tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):../../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BaseStationC.AMReceiverC" loc="43(BaseStationC.AMReceiverC):../../../tos/system/AMReceiverC.nc">
      <documentation loc="33:../../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:17">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f5d8614c810" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f5d8614cbc0" loc="81:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f5d8614b020" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f5d8614b3d0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f5d8614b740" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HplCC2420AlarmC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz32C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430TimerP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f5d85d4f930" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f5d85d4fcd0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f5d85d4e0d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f5d85d4e450" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f5d85d4e7d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f5d85d4eb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f5d85d4d020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f5d85d4d3b0" loc="49:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f5d85d4d780" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f5d85d12c80" loc="42:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f5d85d0f0d0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f5d85c2ccb0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f5d85c2ccb0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f5d85be9a40" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f5d85be9a40"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f5d85bd3570" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f5d85bd3570"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f5d85bd3d40" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f5d85bd3d40"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f5d85bd2160" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f5d85bd2160"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f5d85bd2940" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f5d85bd2940"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f5d85bd2d10" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f5d85bd1540" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f5d85bd1540"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f5d85bb0620" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f5d85bb0620"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f5d85bb0df0" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f5d85bb0df0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f5d85baf220" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f5d85baf220"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f5d85bafa00" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f5d85bafa00"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f5d85bafdd0" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="GpioCaptureC" loc="47:../../../tos/chips/msp430/timer/GpioCaptureC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; The default for GpioCapture is CCIxA.  Other channels are available&#10; (like B) but they need to be hardcoded in another module.  See&#10; tos/platforms/exp5438_2520/hardware/cc2520/P81SfdCaptureC.nc&#10;&#10; Lower levels have been modified to support being able to change&#10; CCIS in the control registers.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430InterruptC" loc="50:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="CC2420SpiC" loc="39:../../../tos/chips/cc2420/spi/CC2420SpiC.nc" abstract="">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="StateC" loc="65:../../../tos/system/StateC.nc" abstract="">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplCC2420SpiC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Spi0C" loc="79:../../../tos/chips/msp430/usart/Msp430Spi0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDmaP" loc="73:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc" abstract="">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="56:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f5d856d45e0" loc="56:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f5d856c99b0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="96:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f5d856adcc0" loc="96:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="BusyWaitCounterC" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc" abstract="">
      <documentation loc="36:../../../tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d85463020" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d85463020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f5d854637b0" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d854637b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d8523fd00" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d8523fd00"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d851f3cc0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d851f3cc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d851bd530" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d851bd530"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f5d851bd880" loc="56:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="VirtualizeTimerImplP" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d851af980" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d851af980"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f5d851afcd0" loc="62:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart1C" loc="42:../../../tos/chips/msp430/usart/Msp430Uart1C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
        <short>&#10; An implementation of the UART on USART1 for the MSP430.</short>
        <long>&#10; An implementation of the UART on USART1 for the MSP430.&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire81@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="44:../../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <documentation loc="36:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart1C" loc="40:../../../tos/chips/msp430/usart/Msp430Usart1C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:../../../tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:../../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:../../../tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:../../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f5d84b7c360" loc="47:../../../tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:../../../tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:../../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f5d84b74140" loc="47:../../../tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f5d84b6d020" loc="43:../../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7f5d84b55c80" loc="45:../../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMReceiverC" loc="43:../../../tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="33:../../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f5d84aeb330" loc="43:../../../tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7f5d8641ea10" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d8641ea10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d8641ed90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f5d86420560" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f5d86420560"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f5d864208e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d86422960" loc="42:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d86422960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d86422ce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f5d86412b60" loc="43:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f5d86412b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f5d8641bca0"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f5d8641be30"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f5d8641b340"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f5d8641b4d0"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f5d8641b660"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f5d8641b7f0"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f5d8641b980"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f5d8641bb10"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f5d8641b020"/>
        <function-ref name="node_id" scoped="" ref="0x7f5d8641b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f5d8640d120" loc="7:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f5d8640d120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d8640d4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d8641acb0" loc="4:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d8641acb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d8640f0a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f5d8640e9f0" loc="6:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f5d8640e9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d8640ed70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f5d8640d800" loc="8:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f5d8640d800"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d8640db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f5d8640f390" loc="5:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f5d8640f390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f5d8640e4d0"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f5d8640e660"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f5d8640fa30"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f5d8640fbc0"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f5d8640fd50"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f5d8640e020"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f5d8640e1b0"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f5d8640e340"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f5d8640f710"/>
        <function-ref name="node_id" scoped="" ref="0x7f5d8640f8a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d863f51a0" loc="2:../../../tos/platforms/telosb/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d863f51a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d863f5520"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f5d863f7390" loc="39:../../../tos/platforms/telosb/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f5d863f7390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d863f7710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f5d863d5850" loc="40:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f5d863d5850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f5d863db7f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f5d863d5d60"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f5d863db020"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f5d863db1b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f5d863d5bd0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f5d863db340"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f5d863db4d0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f5d863db660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d863dc280" loc="39:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d863dc280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d863dc600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f5d863c2180" loc="203:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f5d863c2180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f5d863c1020"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f5d863c2690"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f5d863c2820"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f5d863c29b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f5d863c2500"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f5d863c2b40"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f5d863c2cd0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f5d863c2e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f5d863c1320" loc="204:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f5d863c1320"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f5d863c16a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d863c5ae0" loc="202:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d863c5ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d863c5e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f5d86545c80" loc="55:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f5d86545c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f5d867200a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f5d866a29a0" loc="51:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f5d866a29a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f5d866a2d20"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f5d867bd020"/>
        <function-ref name="sleep" scoped="" ref="0x7f5d867bd1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f5d865e33d0" loc="52:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f5d865e33d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f5d865e3750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430ClockInit" ref="0x7f5d86390240" loc="39:../../../tos/platforms/telosb/MoteClockP.nc">
      <component-ref qname="MoteClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f5d86390240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f5d8638f1b0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f5d86390750"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f5d863908e0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f5d86390a70"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f5d863905c0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f5d86390c00"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f5d86390d90"/>
        <function-ref name="initClocks" scoped="" ref="0x7f5d8638f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f5d863823a0" loc="69:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d863823a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d86382720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f5d8641daa0" loc="66:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f5d8641daa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f5d8641de20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f5d86383b60" loc="68:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f5d86383b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d86382020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f5d86383140" loc="67:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f5d86383140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d863834c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f5d86383650"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f5d863837e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f5d868bd940" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f5d868bd940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d868bdcc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d868bde50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f5d868ca1e0" loc="46:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f5d868ca1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d868ca560"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f5d868ca6f0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f5d868ca880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f5d8646e040" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f5d8646e040"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d8646e3c0"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d8646e550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f5d86469490" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f5d86469490"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f5d86469810"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f5d864699a0"/>
        <function-ref name="sleep" scoped="" ref="0x7f5d86469b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f5d8646f140" loc="54:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f5d8646f140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d8646f4c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f5d8646f650"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f5d8646f7e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMControl" ref="0x7f5d863696b0" loc="19:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMControl" scoped="" ref="0x7f5d863696b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d86369a30"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d86369bc0"/>
        <function-ref name="start" scoped="" ref="0x7f5d86369d50"/>
        <function-ref name="stop" scoped="" ref="0x7f5d86368020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSendTask" ref="0x7f5d862c49e0" loc="90:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioSendTask" scoped="" ref="0x7f5d862c49e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d862c4d60"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d862c2020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f5d8636a1c0" loc="17:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f5d8636a1c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f5d8636a540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f5d86364a80" loc="18:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f5d86364a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d86364e00"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d86369020"/>
        <function-ref name="start" scoped="" ref="0x7f5d863691b0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d86369340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartReceive" ref="0x7f5d86311bc0" loc="22:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartReceive" scoped="" ref="0x7f5d86311bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d86317020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f5d86309020" loc="29:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d86309020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d863093a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d86309530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d863096c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d86309850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d863099e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f5d862f5440" loc="31:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d862f5440"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d862f57c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d862f5950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d862f5ae0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d862f5c70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d862f5e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerTramaTDMA" ref="0x7f5d862f3270" loc="34:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerTramaTDMA" scoped="" ref="0x7f5d862f3270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d862e46e0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d862f2cb0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d862e5a70"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d862e55f0"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d862e3020"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d862e4b60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d862e5170"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d862f3e60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d862e40d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d862f2360"/>
        <function-ref name="stop" scoped="" ref="0x7f5d862f2830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="uartSendTask" ref="0x7f5d862c59f0" loc="89:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="uartSendTask" scoped="" ref="0x7f5d862c59f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d862c5d70"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d862c4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x7f5d862f40c0" loc="32:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d862f40c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d862f4440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d862d1500" loc="36:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d862d1500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d862d1880"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d862d1a10"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d862d1ba0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d862d1d30"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d862dc020"/>
        <function-ref name="get" scoped="" ref="0x7f5d862dc1b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d862dc340"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d862dc980"/>
        <function-ref name="set" scoped="" ref="0x7f5d862dc4d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d862dc660"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d862dc7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartPacket" ref="0x7f5d863076c0" loc="23:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartPacket" scoped="" ref="0x7f5d863076c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d86307a40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d86307bd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d86307d60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d86315020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d863151b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartSend" ref="0x7f5d86316ba0" loc="21:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartSend" scoped="" ref="0x7f5d86316ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d86363020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d863631b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d86363340"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d863634d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d86363660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartAMPacket" ref="0x7f5d862f88c0" loc="24:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartAMPacket" scoped="" ref="0x7f5d862f88c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d862f8c40"/>
        <function-ref name="source" scoped="" ref="0x7f5d862f8dd0"/>
        <function-ref name="address" scoped="" ref="0x7f5d86312020"/>
        <function-ref name="destination" scoped="" ref="0x7f5d863121b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d86312340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d863124d0"/>
        <function-ref name="type" scoped="" ref="0x7f5d86312660"/>
        <function-ref name="setType" scoped="" ref="0x7f5d863127f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d86312980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d86312b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d86312ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f5d86309c90" loc="30:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d86309c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d862f60a0"/>
        <function-ref name="source" scoped="" ref="0x7f5d862f6230"/>
        <function-ref name="address" scoped="" ref="0x7f5d862f63c0"/>
        <function-ref name="destination" scoped="" ref="0x7f5d862f6550"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d862f66e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d862f6870"/>
        <function-ref name="type" scoped="" ref="0x7f5d862f6a00"/>
        <function-ref name="setType" scoped="" ref="0x7f5d862f6b90"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d862f6d20"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d862f5020"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d862f51b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerLeds" ref="0x7f5d862e3650" loc="35:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerLeds" scoped="" ref="0x7f5d862e3650"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d862dfc40"/>
        <function-ref name="fired" scoped="" ref="0x7f5d862e01e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d862df020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d862e0ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d862de590"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d862de110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d862e0660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d862e1390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d862df630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d862e1860"/>
        <function-ref name="stop" scoped="" ref="0x7f5d862e1d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f5d8624c5f0" loc="46:../../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d8624c5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d8624c970"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d8624cb00"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d8624cc90"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d8624ce20"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d86249020"/>
        <function-ref name="get" scoped="" ref="0x7f5d862491b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d86249340"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d86249980"/>
        <function-ref name="set" scoped="" ref="0x7f5d862494d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d86249660"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d862497f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f5d8623d7b0" loc="50:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f5d8623d7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8623db30"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8623dcc0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8623de50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86243020"/>
        <function-ref name="get" scoped="" ref="0x7f5d862431b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86243340"/>
        <function-ref name="set" scoped="" ref="0x7f5d862434d0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86243660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d862488d0" loc="46:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d862488d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d86248c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f5d86243980" loc="51:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f5d86243980"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86243d00"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86242020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d862421b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86242340"/>
        <function-ref name="get" scoped="" ref="0x7f5d862424d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86242660"/>
        <function-ref name="set" scoped="" ref="0x7f5d862427f0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86242980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f5d86245020" loc="47:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d86245020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d862453a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d86245530"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d862456c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d86245850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d862459e0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86245b70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d86245d00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d862444d0"/>
        <function-ref name="set" scoped="" ref="0x7f5d86244020"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d862441b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d86244340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f5d86242ca0" loc="52:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f5d86242ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8623c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8623c230"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8623c3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8623c550"/>
        <function-ref name="get" scoped="" ref="0x7f5d8623c6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8623c870"/>
        <function-ref name="set" scoped="" ref="0x7f5d8623ca00"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8623cb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f5d86220360" loc="41:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f5d86220360"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d862206e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86220870"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86220a00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86220b90"/>
        <function-ref name="get" scoped="" ref="0x7f5d86220d20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8621f020"/>
        <function-ref name="set" scoped="" ref="0x7f5d8621f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8621f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f5d8621f6a0" loc="42:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f5d8621f6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8621fa20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8621fbb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8621fd40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8621e020"/>
        <function-ref name="get" scoped="" ref="0x7f5d8621e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8621e340"/>
        <function-ref name="set" scoped="" ref="0x7f5d8621e4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8621e660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f5d8621dc40" loc="44:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d8621dc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d8621c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f5d8621e9c0" loc="43:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f5d8621e9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8621ed40"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8621d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8621d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8621d340"/>
        <function-ref name="get" scoped="" ref="0x7f5d8621d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8621d660"/>
        <function-ref name="set" scoped="" ref="0x7f5d8621d7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8621d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f5d86202d50" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f5d86202d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86201100"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86201290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86201420"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861ff1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86201740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d862018d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86201a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86201bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86201d80"/>
        <function-ref name="get" scoped="" ref="0x7f5d86200020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d862001b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86200340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d862004d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86200760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d862008f0"/>
        <function-ref name="set" scoped="" ref="0x7f5d86200a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86200c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d862015b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86200da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861ff020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f5d861e9e50" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f5d861e9e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861e8210"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861e83a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861e8530"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861e6340"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861e8850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861e89e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861e8b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861e8d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861e7020"/>
        <function-ref name="get" scoped="" ref="0x7f5d861e71b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861e7340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861e74d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861e7660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861e78f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861e7a80"/>
        <function-ref name="set" scoped="" ref="0x7f5d861e7c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861e7da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861e86c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861e6020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861e61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f5d8615e3d0" loc="205:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f5d8615e3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8615e750"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8615e8e0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8615ea70"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8615c7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8615ed90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8615d020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8615d1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8615d340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8615d4d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8615d660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8615d7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8615d980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8615db10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8615dda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8615c020"/>
        <function-ref name="set" scoped="" ref="0x7f5d8615c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8615c340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8615ec00"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8615c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8615c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f5d861643e0" loc="201:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f5d861643e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86164760"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861648f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86164a80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861627f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86164da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86163020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861631b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86163340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861634d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86163660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861637f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86163980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86163b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86163da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86162020"/>
        <function-ref name="set" scoped="" ref="0x7f5d861621b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86162340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86164c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861624d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86162660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f5d8618c3f0" loc="183:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f5d8618c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8618c770"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8618c900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8618ca90"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8618a7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8618cdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8618b020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8618b1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8618b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8618b4d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8618b660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8618b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8618b980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8618bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8618bda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8618a020"/>
        <function-ref name="set" scoped="" ref="0x7f5d8618a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8618a340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8618cc20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8618a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8618a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f5d861e4e50" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f5d861e4e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861e3210"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861e33a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861e3530"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861e1340"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861e3850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861e39e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861e3b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861e3d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861e2020"/>
        <function-ref name="get" scoped="" ref="0x7f5d861e21b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861e2340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861e24d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861e2660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861e28f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861e2a80"/>
        <function-ref name="set" scoped="" ref="0x7f5d861e2c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861e2da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861e36c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861e1020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861e11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f5d861c9020" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f5d861c9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861c93a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861c9530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861c96c0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861c74d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861c99e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861c9b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861c9d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861c8020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861c81b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861c8340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861c84d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861c8660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861c87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861c8a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861c8c10"/>
        <function-ref name="set" scoped="" ref="0x7f5d861c8da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861c7020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861c9850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861c71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861c7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f5d861b0020" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f5d861b0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861b03a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861b0530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861b06c0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861ae4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861b09e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861b0b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861b0d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861af020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861af1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861af340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861af4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861af660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861af7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861afa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861afc10"/>
        <function-ref name="set" scoped="" ref="0x7f5d861afda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861ae020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861b0850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861ae1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861ae340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f5d8619b020" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f5d8619b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8619b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8619b530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8619b6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861994d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8619b9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8619bb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8619bd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8619a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8619a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8619a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8619a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8619a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8619a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8619aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8619ac10"/>
        <function-ref name="set" scoped="" ref="0x7f5d8619ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86199020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8619b850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861991b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86199340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f5d861873f0" loc="185:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f5d861873f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86187770"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86187900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86187a90"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861857f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86187db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86186020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861861b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86186340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861864d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86186660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861867f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86186980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86186b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86186da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86185020"/>
        <function-ref name="set" scoped="" ref="0x7f5d861851b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86185340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86187c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861854d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86185660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f5d861733e0" loc="195:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f5d861733e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86173760"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861738f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86173a80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861717f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86173da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86172020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861721b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86172340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861724d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86172660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861727f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86172980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86172b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86172da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86171020"/>
        <function-ref name="set" scoped="" ref="0x7f5d861711b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86171340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86173c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861714d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86171660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f5d861543f0" loc="211:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f5d861543f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86154770"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86154900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86154a90"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861527f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86154db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86153020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861531b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86153340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861534d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86153660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861537f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86153980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86153b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86153da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86152020"/>
        <function-ref name="set" scoped="" ref="0x7f5d861521b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86152340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86154c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861524d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86152660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f5d861fa580" loc="57:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f5d861fa580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861fa900"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861faa90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861fac20"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861f8980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861f9020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861f91b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861f9340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861f94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861f9660"/>
        <function-ref name="get" scoped="" ref="0x7f5d861f97f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861f9980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861f9b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861f9ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861f8020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861f81b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d861f8340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861f84d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861fadb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861f8660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861f87f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f5d86185bc0" loc="186:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f5d86185bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86184020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861841b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86184340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86182020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86184660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861847f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86184980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86184b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86184ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86184e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86183020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861831b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86183340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861835d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86183760"/>
        <function-ref name="set" scoped="" ref="0x7f5d861838f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86183a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861844d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86183c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86183da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f5d861f5580" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f5d861f5580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861f5900"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861f5a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861f5c20"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861f3980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861f4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861f41b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861f4340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861f44d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861f4660"/>
        <function-ref name="get" scoped="" ref="0x7f5d861f47f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861f4980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861f4b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861f4ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861f3020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861f31b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d861f3340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861f34d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861f5db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861f3660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861f37f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f5d861dc710" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f5d861dc710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861dca90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861dcc20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861dcdb0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861daa80"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861db1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861db340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861db4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861db660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861db7f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861db980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861dbb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861dbca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861dbe30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861da120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861da2b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d861da440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861da5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861db020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861da760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861da8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f5d861c28a0" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f5d861c28a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861c2c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861c2db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861c1020"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861c0c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861c1340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861c14d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861c1660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861c17f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861c1980"/>
        <function-ref name="get" scoped="" ref="0x7f5d861c1b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861c1ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861c1e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861c0020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861c02b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861c0440"/>
        <function-ref name="set" scoped="" ref="0x7f5d861c05d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861c0760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861c11b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861c08f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861c0a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f5d861a98a0" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f5d861a98a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861a9c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861a9db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861a8020"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861a7c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861a8340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861a84d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861a8660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861a87f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861a8980"/>
        <function-ref name="get" scoped="" ref="0x7f5d861a8b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861a8ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861a8e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861a7020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861a72b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861a7440"/>
        <function-ref name="set" scoped="" ref="0x7f5d861a75d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861a7760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861a81b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861a78f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861a7a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f5d861948a0" loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f5d861948a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86194c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86194db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86193020"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86192c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86193340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861934d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86193660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861937f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86193980"/>
        <function-ref name="get" scoped="" ref="0x7f5d86193b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86193ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86193e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86192020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861922b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86192440"/>
        <function-ref name="set" scoped="" ref="0x7f5d861925d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86192760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861931b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861928f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86192a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f5d86207d50" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f5d86207d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86206100"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86206290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86206420"/>
        <function-ref name="clr" scoped="" ref="0x7f5d862041b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86206740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d862068d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86206a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86206bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86206d80"/>
        <function-ref name="get" scoped="" ref="0x7f5d86205020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d862051b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86205340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d862054d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86205760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d862058f0"/>
        <function-ref name="set" scoped="" ref="0x7f5d86205a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86205c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d862065b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86205da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86204020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f5d861eed50" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f5d861eed50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861ed210"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861ed3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861ed530"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861eb340"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861ed850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861ed9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861edb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861edd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861ec020"/>
        <function-ref name="get" scoped="" ref="0x7f5d861ec1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861ec340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861ec4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861ec660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861ec8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861eca80"/>
        <function-ref name="set" scoped="" ref="0x7f5d861ecc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861ecda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861ed6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861eb020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861eb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f5d861d4e50" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f5d861d4e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861d3210"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861d33a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861d3530"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861d1340"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861d3850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861d39e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861d3b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861d3d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861d2020"/>
        <function-ref name="get" scoped="" ref="0x7f5d861d21b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861d2340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861d24d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861d2660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861d28f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861d2a80"/>
        <function-ref name="set" scoped="" ref="0x7f5d861d2c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861d2da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861d36c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861d1020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861d11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f5d8618fbc0" loc="182:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f5d8618fbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8618e020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8618e1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8618e340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8618c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8618e660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8618e7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8618e980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8618eb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8618eca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8618ee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8618d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8618d1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8618d340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8618d5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8618d760"/>
        <function-ref name="set" scoped="" ref="0x7f5d8618d8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8618da80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8618e4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8618dc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8618dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f5d8616cbb0" loc="198:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f5d8616cbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8616b020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8616b1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8616b340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86169020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8616b660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8616b7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8616b980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8616bb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8616bca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8616be30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8616a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8616a1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8616a340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8616a5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8616a760"/>
        <function-ref name="set" scoped="" ref="0x7f5d8616a8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8616aa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8616b4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8616ac10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8616ada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f5d86157bb0" loc="209:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f5d86157bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86156020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861561b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86156340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86154020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86156660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861567f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86156980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86156b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86156ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86156e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86155020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861551b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86155340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861555d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86155760"/>
        <function-ref name="set" scoped="" ref="0x7f5d861558f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86155a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861564d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86155c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86155da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f5d8617bbc0" loc="191:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f5d8617bbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8617a020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8617a1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8617a340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86178020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8617a660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8617a7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8617a980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8617ab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8617aca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8617ae30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86179020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861791b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86179340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861795d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86179760"/>
        <function-ref name="set" scoped="" ref="0x7f5d861798f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86179a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8617a4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86179c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86179da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f5d861cfe50" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f5d861cfe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861ce410"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861ce5a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861ce730"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861cc4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861cea50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861cebe0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861ced70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861cd020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861cd1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861cd340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861cd4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861cd660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861cd7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861cda80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861cdc10"/>
        <function-ref name="set" scoped="" ref="0x7f5d861cdda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861cc020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861ce8c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861cc1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861cc340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f5d861b5020" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f5d861b5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861b53a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861b5530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861b56c0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861b34d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861b59e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861b5b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861b5d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861b4020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861b41b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861b4340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861b44d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861b4660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861b47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861b4a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861b4c10"/>
        <function-ref name="set" scoped="" ref="0x7f5d861b4da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861b3020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861b5850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861b31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861b3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f5d861a1020" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f5d861a1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861a13a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861a1530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861a16c0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8619f4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861a19e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861a1b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861a1d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861a0020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861a01b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861a0340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861a04d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861a0660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861a07f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861a0a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861a0c10"/>
        <function-ref name="set" scoped="" ref="0x7f5d861a0da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8619f020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861a1850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8619f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8619f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f5d861693e0" loc="199:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f5d861693e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86169760"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861698f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86169a80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861677f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86169da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86168020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861681b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86168340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861684d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86168660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861687f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86168980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86168b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86168da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86167020"/>
        <function-ref name="set" scoped="" ref="0x7f5d861671b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86167340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86169c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861674d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86167660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f5d861823e0" loc="188:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f5d861823e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86182760"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861828f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86182a80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861807f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86182da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86181020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861811b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86181340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861814d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86181660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861817f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86181980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86181b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86181da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86180020"/>
        <function-ref name="set" scoped="" ref="0x7f5d861801b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86180340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86182c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861804d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86180660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f5d861ff580" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f5d861ff580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861ff900"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861ffa90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861ffc20"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861fd980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861fe020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861fe1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861fe340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861fe4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861fe660"/>
        <function-ref name="get" scoped="" ref="0x7f5d861fe7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861fe980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861feb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861feca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861fd020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861fd1b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d861fd340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861fd4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861ffdb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861fd660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861fd7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f5d861e6710" loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f5d861e6710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861e6a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861e6c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861e6db0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861e4a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861e51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861e5340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861e54d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861e5660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861e57f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861e5980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861e5b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861e5ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861e5e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861e4120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861e42b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d861e4440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861e45d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861e5020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861e4760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861e48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f5d861a6020" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f5d861a6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861a63a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861a6530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861a66c0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861a44d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861a69e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861a6b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861a6d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861a5020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861a51b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861a5340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861a54d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861a5660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861a57f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861a5a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861a5c10"/>
        <function-ref name="set" scoped="" ref="0x7f5d861a5da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861a4020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861a6850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861a41b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861a4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f5d861e1710" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f5d861e1710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861e1a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861e1c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861e1db0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861dfa80"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861e01b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861e0340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861e04d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861e0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861e07f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861e0980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861e0b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861e0ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861e0e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861df120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861df2b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d861df440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861df5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861e0020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861df760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861df8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f5d861c78a0" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f5d861c78a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861c7c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861c7db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861c6020"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861c5c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861c6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861c64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861c6660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861c67f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861c6980"/>
        <function-ref name="get" scoped="" ref="0x7f5d861c6b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861c6ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861c6e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861c5020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861c52b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861c5440"/>
        <function-ref name="set" scoped="" ref="0x7f5d861c55d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861c5760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861c61b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861c58f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861c5a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f5d861ae8a0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f5d861ae8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861aec20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861aedb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861ad020"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861acc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861ad340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861ad4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861ad660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861ad7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861ad980"/>
        <function-ref name="get" scoped="" ref="0x7f5d861adb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861adca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861ade30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861ac020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861ac2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861ac440"/>
        <function-ref name="set" scoped="" ref="0x7f5d861ac5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861ac760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861ad1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861ac8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861aca80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f5d861998a0" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f5d861998a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86199c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86199db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86198020"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86197c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86198340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861984d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86198660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861987f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86198980"/>
        <function-ref name="get" scoped="" ref="0x7f5d86198b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86198ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86198e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86197020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861972b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86197440"/>
        <function-ref name="set" scoped="" ref="0x7f5d861975d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86197760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861981b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861978f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86197a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f5d8617d3f0" loc="190:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f5d8617d3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8617d770"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8617d900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8617da90"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8617b7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8617ddb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8617c020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8617c1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8617c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8617c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8617c660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8617c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8617c980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8617cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8617cda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8617b020"/>
        <function-ref name="set" scoped="" ref="0x7f5d8617b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8617b340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8617dc20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8617b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8617b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f5d8620bcb0" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f5d8620bcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d862180a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86218230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d862183c0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d862091b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d862186e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86218870"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86218a00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86218b90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86218d20"/>
        <function-ref name="get" scoped="" ref="0x7f5d86217020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d862171b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86217340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d862174d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86217760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d862178f0"/>
        <function-ref name="set" scoped="" ref="0x7f5d86217a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86217c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86218550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86217da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86209020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f5d861f3d50" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f5d861f3d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861f2100"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861f2290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861f2420"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861f01b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861f2740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861f28d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861f2a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861f2bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861f2d80"/>
        <function-ref name="get" scoped="" ref="0x7f5d861f1020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861f11b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861f1340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861f14d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861f1760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861f18f0"/>
        <function-ref name="set" scoped="" ref="0x7f5d861f1a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861f1c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861f25b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861f1da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861f0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f5d861dae50" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f5d861dae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861d9210"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861d93a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861d9530"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861d7340"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861d9850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861d99e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861d9b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861d9d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861d8020"/>
        <function-ref name="get" scoped="" ref="0x7f5d861d81b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861d8340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861d84d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861d8660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861d88f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861d8a80"/>
        <function-ref name="set" scoped="" ref="0x7f5d861d8c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861d8da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861d96c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861d7020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861d71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f5d861bf020" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f5d861bf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861bf3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861bf530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861bf6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861bd4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861bf9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861bfb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861bfd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861be020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861be1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861be340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861be4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861be660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861be7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861bea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861bec10"/>
        <function-ref name="set" scoped="" ref="0x7f5d861beda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861bd020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861bf850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861bd1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861bd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f5d861783f0" loc="192:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f5d861783f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86178770"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86178900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86178a90"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861767f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86178db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86177020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861771b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86177340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861774d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86177660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861777f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86177980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86177b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86177da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86176020"/>
        <function-ref name="set" scoped="" ref="0x7f5d861761b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86176340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86178c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861764d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86176660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f5d86171bb0" loc="196:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f5d86171bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86170020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861701b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86170340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8616e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86170660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861707f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86170980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86170b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86170ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86170e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8616f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8616f1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8616f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8616f5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8616f760"/>
        <function-ref name="set" scoped="" ref="0x7f5d8616f8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8616fa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861704d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8616fc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8616fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f5d86162bb0" loc="202:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f5d86162bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86160020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861601b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86160340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8615e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86160660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861607f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86160980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86160b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86160ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86160e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8615f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8615f1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8615f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8615f5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8615f760"/>
        <function-ref name="set" scoped="" ref="0x7f5d8615f8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8615fa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861604d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8615fc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8615fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f5d861ba020" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f5d861ba020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861ba3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861ba530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861ba6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861b84d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861ba9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861bab70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861bad00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861b9020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861b91b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861b9340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861b94d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861b9660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861b97f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861b9a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861b9c10"/>
        <function-ref name="set" scoped="" ref="0x7f5d861b9da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861b8020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861ba850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861b81b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861b8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f5d86176bc0" loc="193:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f5d86176bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86175020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861751b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86175340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86173020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86175660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861757f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86175980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86175b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86175ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86175e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86174020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861741b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86174340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861745d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86174760"/>
        <function-ref name="set" scoped="" ref="0x7f5d861748f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86174a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861754d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86174c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86174da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f5d86204580" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f5d86204580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86204900"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86204a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86204c20"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86202980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86203020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d862031b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86203340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d862034d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86203660"/>
        <function-ref name="get" scoped="" ref="0x7f5d862037f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86203980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86203b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86203ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86202020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d862021b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d86202340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d862024d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86204db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86202660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d862027f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f5d861eb710" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f5d861eb710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861eba90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861ebc20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861ebdb0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861e9a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861ea1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861ea340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861ea4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861ea660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861ea7f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861ea980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861eab10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861eaca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861eae30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861e9120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861e92b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d861e9440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861e95d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861ea020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861e9760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861e98f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f5d861d1710" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f5d861d1710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861d1a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861d1c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861d1db0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861cfa80"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861d01b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861d0340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861d04d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861d0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861d07f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861d0980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861d0b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861d0ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861d0e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861cf120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861cf2b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d861cf440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861cf5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861d0020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861cf760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861cf8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f5d86180bc0" loc="189:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f5d86180bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8617f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8617f1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8617f340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8617d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8617f660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8617f7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8617f980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8617fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8617fca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8617fe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8617e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8617e1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8617e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8617e5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8617e760"/>
        <function-ref name="set" scoped="" ref="0x7f5d8617e8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8617ea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8617f4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8617ec10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8617eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f5d86167bb0" loc="200:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f5d86167bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86166020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861661b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86166340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86164020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86166660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861667f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86166980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86166b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86166ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86166e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86165020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861651b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86165340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861655d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86165760"/>
        <function-ref name="set" scoped="" ref="0x7f5d861658f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86165a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861664d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86165c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86165da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f5d861cc8a0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f5d861cc8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861ccc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861ccdb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861cb020"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861cac10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861cb340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861cb4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861cb660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861cb7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861cb980"/>
        <function-ref name="get" scoped="" ref="0x7f5d861cbb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861cbca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861cbe30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861ca020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861ca2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861ca440"/>
        <function-ref name="set" scoped="" ref="0x7f5d861ca5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861ca760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861cb1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861ca8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861caa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f5d861b38a0" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f5d861b38a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861b3c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861b3db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861b2020"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861b1c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861b2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861b24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861b2660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861b27f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861b2980"/>
        <function-ref name="get" scoped="" ref="0x7f5d861b2b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861b2ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861b2e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861b1020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861b12b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861b1440"/>
        <function-ref name="set" scoped="" ref="0x7f5d861b15d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861b1760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861b21b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861b18f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861b1a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f5d8619f8a0" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f5d8619f8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8619fc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8619fdb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8619e020"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8619dc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8619e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8619e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8619e660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8619e7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8619e980"/>
        <function-ref name="get" scoped="" ref="0x7f5d8619eb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8619eca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8619ee30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8619d020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8619d2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8619d440"/>
        <function-ref name="set" scoped="" ref="0x7f5d8619d5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8619d760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8619e1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8619d8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8619da80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f5d861fdd50" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f5d861fdd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861fc100"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861fc290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861fc420"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861fa1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861fc740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861fc8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861fca60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861fcbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861fcd80"/>
        <function-ref name="get" scoped="" ref="0x7f5d861fb020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861fb1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861fb340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861fb4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861fb760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861fb8f0"/>
        <function-ref name="set" scoped="" ref="0x7f5d861fba80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861fbc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861fc5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861fbda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861fa020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f5d861a48a0" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f5d861a48a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861a4c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861a4db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861a3020"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861a2c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861a3340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861a34d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861a3660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861a37f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861a3980"/>
        <function-ref name="get" scoped="" ref="0x7f5d861a3b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861a3ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861a3e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861a2020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861a22b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861a2440"/>
        <function-ref name="set" scoped="" ref="0x7f5d861a25d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861a2760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861a31b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861a28f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861a2a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f5d861f8d50" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f5d861f8d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861f7100"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861f7290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861f7420"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861f51b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861f7740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861f78d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861f7a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861f7bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861f7d80"/>
        <function-ref name="get" scoped="" ref="0x7f5d861f6020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861f61b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861f6340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861f64d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861f6760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861f68f0"/>
        <function-ref name="set" scoped="" ref="0x7f5d861f6a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861f6c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861f75b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861f6da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861f5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f5d861dfe50" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f5d861dfe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861de210"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861de3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861de530"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861dc340"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861de850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861de9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861deb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861ded00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861dd020"/>
        <function-ref name="get" scoped="" ref="0x7f5d861dd1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861dd340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861dd4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861dd660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861dd8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861dda80"/>
        <function-ref name="set" scoped="" ref="0x7f5d861ddc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861ddda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861de6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861dc020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861dc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f5d861c4020" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f5d861c4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861c43a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861c4530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861c46c0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861c24d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861c49e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861c4b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861c4d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861c3020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861c31b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861c3340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861c34d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861c3660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861c37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861c3a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861c3c10"/>
        <function-ref name="set" scoped="" ref="0x7f5d861c3da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861c2020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861c4850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861c21b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861c2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f5d861ab020" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f5d861ab020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861ab3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861ab530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861ab6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861a94d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861ab9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861abb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861abd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861aa020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861aa1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861aa340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861aa4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861aa660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861aa7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861aaa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861aac10"/>
        <function-ref name="set" scoped="" ref="0x7f5d861aada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861a9020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861ab850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861a91b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861a9340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f5d86196020" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f5d86196020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861963a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86196530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861966c0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861944d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861969e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86196b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86196d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86195020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861951b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86195340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861954d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86195660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861957f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86195a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86195c10"/>
        <function-ref name="set" scoped="" ref="0x7f5d86195da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86194020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86196850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861941b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86194340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f5d86209580" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f5d86209580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86209900"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86209a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86209c20"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86207980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86208020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d862081b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86208340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d862084d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86208660"/>
        <function-ref name="get" scoped="" ref="0x7f5d862087f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86208980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86208b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86208ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86207020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d862071b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d86207340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d862074d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86209db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86207660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d862077f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f5d861f0580" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f5d861f0580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861f0900"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861f0a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861f0c20"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861ee980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861ef020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861ef1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861ef340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861ef4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861ef660"/>
        <function-ref name="get" scoped="" ref="0x7f5d861ef7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861ef980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861efb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861efca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861ee020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861ee1b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d861ee340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861ee4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861f0db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861ee660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861ee7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f5d861d7710" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f5d861d7710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861d7a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861d7c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861d7db0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861d4a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861d51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861d5340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861d54d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861d5660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861d57f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d861d5980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861d5b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861d5ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861d5e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861d4120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861d42b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d861d4440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861d45d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861d5020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861d4760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861d48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f5d861bd8a0" loc="90:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f5d861bd8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861bdc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861bddb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861bc020"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861bbc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861bc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861bc4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861bc660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861bc7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861bc980"/>
        <function-ref name="get" scoped="" ref="0x7f5d861bcb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861bcca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861bce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861bb020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861bb2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861bb440"/>
        <function-ref name="set" scoped="" ref="0x7f5d861bb5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861bb760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861bc1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861bb8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861bba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f5d8616e3e0" loc="197:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f5d8616e3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8616e760"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8616e8f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8616ea80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8616c7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8616eda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8616d020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8616d1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8616d340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8616d4d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8616d660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8616d7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8616d980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8616db10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8616dda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8616c020"/>
        <function-ref name="set" scoped="" ref="0x7f5d8616c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8616c340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8616ec10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8616c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8616c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f5d8615cba0" loc="206:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f5d8615cba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8615b020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8615b1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8615b340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86159020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8615b660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8615b7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8615b980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8615bb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8615bca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8615be30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8615a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8615a1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8615a340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8615a5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8615a760"/>
        <function-ref name="set" scoped="" ref="0x7f5d8615a8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8615aa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8615b4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8615ac10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8615ada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f5d8618abc0" loc="184:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f5d8618abc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86189020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861891b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86189340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86187020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86189660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861897f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86189980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86189b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86189ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86189e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86188020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861881b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86188340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861885d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86188760"/>
        <function-ref name="set" scoped="" ref="0x7f5d861888f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86188a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861894d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86188c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86188da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f5d861b88a0" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f5d861b88a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861b8c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861b8db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d861b7020"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861b6c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d861b7340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861b74d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861b7660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d861b77f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861b7980"/>
        <function-ref name="get" scoped="" ref="0x7f5d861b7b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861b7ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861b7e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861b6020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861b62b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d861b6440"/>
        <function-ref name="set" scoped="" ref="0x7f5d861b65d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d861b6760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861b71b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861b68f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861b6a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f5d861593e0" loc="208:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f5d861593e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86159760"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861598f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86159a80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861577f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86159da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86158020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861581b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86158340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861584d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86158660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861587f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86158980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86158b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86158da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86157020"/>
        <function-ref name="set" scoped="" ref="0x7f5d861571b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86157340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86159c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d861574d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86157660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f5d86152bc0" loc="212:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f5d86152bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86151020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861511b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86151340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8614f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86151660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861517f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86151980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86151b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86151ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86151e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86150020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861501b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86150340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861505d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86150760"/>
        <function-ref name="set" scoped="" ref="0x7f5d861508f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86150a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861514d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86150c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86150da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f5d86191060" loc="181:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f5d86191060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861917e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86191970"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86191b00"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8618f7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86191e20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86190020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d861901b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86190340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861904d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86190660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861907f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86190980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86190b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86190da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8618f020"/>
        <function-ref name="set" scoped="" ref="0x7f5d8618f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8618f340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86191c90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8618f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8618f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d8611e540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d8611e540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8611e8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8611ea50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8611ebe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8611c980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8611d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8611d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8611d340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8611d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8611d660"/>
        <function-ref name="get" scoped="" ref="0x7f5d8611d7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8611d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8611db10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8611dca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8611c020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8611c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d8611c340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8611c4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8611c660"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8611ed70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8611c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86119b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86119b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86118020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861181b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86118340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86116020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86118660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861187f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86118980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86118b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86118ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86118e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86117020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861171b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86117340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861175d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86117760"/>
        <function-ref name="set" scoped="" ref="0x7f5d861178f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86117a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86117c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861184d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86117da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86113060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86113060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861133e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86113570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86113700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861114d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86113a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86113bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86113d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86112020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861121b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86112340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861124d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86112660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861127f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86112a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86112c10"/>
        <function-ref name="set" scoped="" ref="0x7f5d86112da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86111020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861111b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86113890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86111340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d8610e540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d8610e540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8610e8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8610ea50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8610ebe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8610c980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8610d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8610d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8610d340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8610d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8610d660"/>
        <function-ref name="get" scoped="" ref="0x7f5d8610d7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8610d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8610db10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8610dca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8610c020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8610c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d8610c340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8610c4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8610c660"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8610ed70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8610c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86109b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86109b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86108020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d861081b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86108340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86106020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86108660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d861087f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86108980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86108b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86108ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86108e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86107020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d861071b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86107340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d861075d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86107760"/>
        <function-ref name="set" scoped="" ref="0x7f5d861078f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86107a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86107c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d861084d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86107da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86103060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86103060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d861033e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86103570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86103700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d861004d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86103a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86103bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86103d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86101020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d861011b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86101340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d861014d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86101660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d861017f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86101a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86101c10"/>
        <function-ref name="set" scoped="" ref="0x7f5d86101da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86100020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d861001b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86103890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86100340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860fd540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860fd540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860fd8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860fda50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860fdbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860fb980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860fc020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860fc1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860fc340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860fc4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860fc660"/>
        <function-ref name="get" scoped="" ref="0x7f5d860fc7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860fc980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860fcb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860fcca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860fb020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860fb1b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d860fb340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860fb4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860fb660"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860fdd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860fb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860f8b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860f8b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860f7020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860f71b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860f7340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860f5020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860f7660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860f77f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860f7980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860f7b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860f7ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d860f7e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860f6020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860f61b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860f6340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860f65d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860f6760"/>
        <function-ref name="set" scoped="" ref="0x7f5d860f68f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860f6a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860f6c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860f74d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860f6da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860f2060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860f2060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860f23e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860f2570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860f2700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860f04d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860f2a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860f2bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860f2d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860f1020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860f11b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d860f1340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860f14d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860f1660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860f17f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860f1a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860f1c10"/>
        <function-ref name="set" scoped="" ref="0x7f5d860f1da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860f0020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860f01b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860f2890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860f0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860ed540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860ed540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860ed8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860eda50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860edbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860eb980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860ec020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860ec1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860ec340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860ec4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860ec660"/>
        <function-ref name="get" scoped="" ref="0x7f5d860ec7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860ec980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860ecb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860ecca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860eb020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860eb1b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d860eb340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860eb4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860eb660"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860edd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860eb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860e8b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860e8b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860e7020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860e71b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860e7340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860e5020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860e7660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860e77f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860e7980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860e7b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860e7ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d860e7e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860e6020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860e61b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860e6340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860e65d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860e6760"/>
        <function-ref name="set" scoped="" ref="0x7f5d860e68f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860e6a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860e6c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860e74d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860e6da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860e2060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860e2060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860e23e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860e2570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860e2700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860e04d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860e2a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860e2bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860e2d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860e1020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860e11b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d860e1340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860e14d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860e1660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860e17f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860e1a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860e1c10"/>
        <function-ref name="set" scoped="" ref="0x7f5d860e1da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860e0020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860e01b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860e2890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860e0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860dd6d0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860dd6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860dda50"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860ddbe0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860ddd70"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860dba80"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860dc1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860dc340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860dc4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860dc660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860dc7f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d860dc980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860dcb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860dcca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860dce30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860db120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860db2b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d860db440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860db5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860db760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860dc020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860db8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860d8b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860d8b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860d6020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860d61b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860d6340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860d4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860d6660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860d67f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860d6980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860d6b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860d6ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d860d6e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860d5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860d51b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860d5340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860d55d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860d5760"/>
        <function-ref name="set" scoped="" ref="0x7f5d860d58f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860d5a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860d5c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860d64d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860d5da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860d1060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860d1060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860d13e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860d1570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860d1700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860cf4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860d1a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860d1bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860d1d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860d0020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860d01b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d860d0340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860d04d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860d0660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860d07f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860d0a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860d0c10"/>
        <function-ref name="set" scoped="" ref="0x7f5d860d0da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860cf020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860cf1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860d1890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860cf340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860cc540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860cc540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860cc8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860cca50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860ccbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860ca980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860cb020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860cb1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860cb340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860cb4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860cb660"/>
        <function-ref name="get" scoped="" ref="0x7f5d860cb7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860cb980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860cbb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860cbca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860ca020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860ca1b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d860ca340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860ca4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860ca660"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860ccd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860ca7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860c7b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860c7b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860c6020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860c61b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860c6340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860c4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860c6660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860c67f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860c6980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860c6b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860c6ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d860c6e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860c5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860c51b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860c5340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860c55d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860c5760"/>
        <function-ref name="set" scoped="" ref="0x7f5d860c58f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860c5a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860c5c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860c64d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860c5da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860c1060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860c1060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860c13e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860c1570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860c1700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860bf4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860c1a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860c1bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860c1d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860c0020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860c01b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d860c0340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860c04d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860c0660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860c07f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860c0a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860c0c10"/>
        <function-ref name="set" scoped="" ref="0x7f5d860c0da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860bf020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860bf1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860c1890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860bf340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860bc540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860bc540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860bc8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860bca50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860bcbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860ba980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860bb020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860bb1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860bb340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860bb4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860bb660"/>
        <function-ref name="get" scoped="" ref="0x7f5d860bb7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860bb980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860bbb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860bbca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860ba020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860ba1b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d860ba340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860ba4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860ba660"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860bcd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860ba7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860b7b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860b7b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860b6020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860b61b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860b6340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860b4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860b6660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860b67f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860b6980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860b6b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860b6ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d860b6e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860b5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860b51b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860b5340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860b55d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860b5760"/>
        <function-ref name="set" scoped="" ref="0x7f5d860b58f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860b5a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860b5c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860b64d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860b5da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860b1060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860b1060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860b13e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860b1570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860b1700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860af4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860b1a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860b1bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860b1d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860b0020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860b01b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d860b0340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860b04d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860b0660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860b07f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860b0a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860b0c10"/>
        <function-ref name="set" scoped="" ref="0x7f5d860b0da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860af020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860af1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860b1890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860af340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860ab540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860ab540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860ab8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860aba50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860abbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860a9980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860aa020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860aa1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860aa340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860aa4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860aa660"/>
        <function-ref name="get" scoped="" ref="0x7f5d860aa7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860aa980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860aab10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860aaca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860a9020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860a91b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d860a9340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860a94d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860a9660"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860abd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860a97f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860a6b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860a6b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860a5020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860a51b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860a5340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d860a3020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860a5660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860a57f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860a5980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860a5b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d860a5ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d860a5e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d860a4020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860a41b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d860a4340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860a45d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860a4760"/>
        <function-ref name="set" scoped="" ref="0x7f5d860a48f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860a4a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d860a4c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860a54d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860a4da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d860a0060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d860a0060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860a03e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860a0570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d860a0700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8609e4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d860a0a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860a0bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d860a0d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8609f020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8609f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8609f340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8609f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8609f660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8609f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8609fa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8609fc10"/>
        <function-ref name="set" scoped="" ref="0x7f5d8609fda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8609e020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8609e1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860a0890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8609e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d8609b740" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d8609b740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8609bac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8609bc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8609bde0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86099a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8609a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8609a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8609a4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8609a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8609a7f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8609a980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8609ab10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8609aca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8609ae30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86099120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860992b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d86099440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860995d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86099760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8609a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860998f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86096b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86096b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86095020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860951b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86095340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86093020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86095660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860957f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86095980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86095b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86095ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86095e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86094020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860941b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86094340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860945d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86094760"/>
        <function-ref name="set" scoped="" ref="0x7f5d860948f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86094a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86094c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860954d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86094da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86090060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86090060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860903e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86090570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86090700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8608e4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86090a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d86090bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86090d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8608f020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8608f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8608f340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8608f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8608f660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8608f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8608fa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8608fc10"/>
        <function-ref name="set" scoped="" ref="0x7f5d8608fda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8608e020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8608e1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86090890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8608e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d8608b540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d8608b540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8608b8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8608ba50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8608bbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86089980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8608a020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8608a1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8608a340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8608a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8608a660"/>
        <function-ref name="get" scoped="" ref="0x7f5d8608a7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8608a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8608ab10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8608aca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86089020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860891b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d86089340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860894d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86089660"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8608bd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860897f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86086b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86086b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86084020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860841b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86084340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86082020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86084660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860847f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86084980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86084b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86084ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86084e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86083020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860831b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86083340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860835d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86083760"/>
        <function-ref name="set" scoped="" ref="0x7f5d860838f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86083a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86083c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860844d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86083da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d8607f060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d8607f060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8607f3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8607f570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8607f700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8607d4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8607fa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8607fbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8607fd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8607e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8607e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8607e340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8607e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8607e660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8607e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8607ea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8607ec10"/>
        <function-ref name="set" scoped="" ref="0x7f5d8607eda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8607d020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8607d1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8607f890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8607d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d8607a540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d8607a540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8607a8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8607aa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8607abe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86078980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86079020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860791b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86079340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860794d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86079660"/>
        <function-ref name="get" scoped="" ref="0x7f5d860797f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86079980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86079b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86079ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86078020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860781b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d86078340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860784d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86078660"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8607ad70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860787f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86075b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86075b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86074020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860741b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86074340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86072020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86074660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860747f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86074980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86074b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86074ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86074e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86073020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860731b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86073340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860735d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86073760"/>
        <function-ref name="set" scoped="" ref="0x7f5d860738f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86073a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86073c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860744d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86073da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d8606f060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d8606f060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8606f3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8606f570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8606f700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8606d4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8606fa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8606fbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8606fd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8606e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8606e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8606e340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8606e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8606e660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8606e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8606ea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8606ec10"/>
        <function-ref name="set" scoped="" ref="0x7f5d8606eda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8606d020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8606d1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8606f890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8606d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d8606a540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d8606a540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8606a8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8606aa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8606abe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86068980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86069020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860691b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86069340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860694d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86069660"/>
        <function-ref name="get" scoped="" ref="0x7f5d860697f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86069980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86069b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86069ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86068020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860681b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d86068340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860684d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86068660"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8606ad70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860687f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86065b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86065b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86064020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860641b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86064340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86062020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86064660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860647f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86064980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86064b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86064ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86064e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86063020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860631b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86063340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860635d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86063760"/>
        <function-ref name="set" scoped="" ref="0x7f5d860638f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86063a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86063c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860644d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86063da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d8605f060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d8605f060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8605f3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8605f570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8605f700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8605d4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8605fa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8605fbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8605fd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8605e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8605e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8605e340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8605e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8605e660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8605e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8605ea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8605ec10"/>
        <function-ref name="set" scoped="" ref="0x7f5d8605eda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8605d020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8605d1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8605f890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8605d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d8605a540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d8605a540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8605a8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8605aa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8605abe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86057980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86058020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860581b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86058340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860584d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86058660"/>
        <function-ref name="get" scoped="" ref="0x7f5d860587f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86058980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86058b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86058ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86057020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860571b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d86057340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860574d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86057660"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8605ad70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860577f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86054b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86054b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86053020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860531b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86053340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86051020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86053660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860537f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86053980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86053b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86053ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86053e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86052020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860521b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86052340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860525d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86052760"/>
        <function-ref name="set" scoped="" ref="0x7f5d860528f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86052a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86052c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860534d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86052da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d8604e060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d8604e060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8604e3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8604e570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8604e700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8604c4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8604ea20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8604ebb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8604ed40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8604d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8604d1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8604d340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8604d4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8604d660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8604d7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8604da80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8604dc10"/>
        <function-ref name="set" scoped="" ref="0x7f5d8604dda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8604c020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8604c1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8604e890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8604c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86049540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86049540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860498c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86049a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86049be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86047980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86048020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860481b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86048340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860484d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86048660"/>
        <function-ref name="get" scoped="" ref="0x7f5d860487f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86048980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86048b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86048ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86047020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860471b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d86047340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860474d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86047660"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86049d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860477f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86044b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86044b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86043020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860431b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86043340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86041020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86043660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860437f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86043980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86043b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86043ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86043e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86042020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860421b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86042340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860425d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86042760"/>
        <function-ref name="set" scoped="" ref="0x7f5d860428f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86042a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86042c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860434d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86042da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d8603e060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d8603e060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8603e3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8603e570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8603e700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8603c4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8603ea20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8603ebb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8603ed40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8603d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8603d1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8603d340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8603d4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8603d660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8603d7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8603da80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8603dc10"/>
        <function-ref name="set" scoped="" ref="0x7f5d8603dda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8603c020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8603c1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8603e890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8603c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86039540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86039540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860398c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86039a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86039be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86037980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86038020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860381b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86038340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860384d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86038660"/>
        <function-ref name="get" scoped="" ref="0x7f5d860387f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86038980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86038b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86038ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86037020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860371b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d86037340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860374d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86037660"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86039d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860377f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86034b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86034b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86033020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860331b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86033340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86031020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86033660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860337f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86033980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86033b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86033ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86033e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86032020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860321b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86032340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860325d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86032760"/>
        <function-ref name="set" scoped="" ref="0x7f5d860328f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86032a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86032c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860334d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86032da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d8602d060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d8602d060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8602d3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8602d570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8602d700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8602b4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8602da20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8602dbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8602dd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8602c020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8602c1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8602c340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8602c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8602c660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8602c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8602ca80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8602cc10"/>
        <function-ref name="set" scoped="" ref="0x7f5d8602cda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8602b020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8602b1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8602d890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8602b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86028540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86028540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d860288c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d86028a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86028be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86026980"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86027020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860271b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86027340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d860274d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86027660"/>
        <function-ref name="get" scoped="" ref="0x7f5d860277f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86027980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d86027b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86027ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d86026020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d860261b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d86026340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d860264d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86026660"/>
        <function-ref name="clr" scoped="" ref="0x7f5d86028d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d860267f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d86023b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d86023b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d86022020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d860221b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d86022340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d86020020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d86022660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d860227f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d86022980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d86022b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d86022ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d86022e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d86021020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d860211b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d86021340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d860215d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d86021760"/>
        <function-ref name="set" scoped="" ref="0x7f5d860218f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d86021a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d86021c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d860224d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d86021da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d8601d060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d8601d060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8601d3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8601d570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8601d700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8601b4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8601da20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8601dbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8601dd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8601c020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8601c1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8601c340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8601c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8601c660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8601c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8601ca80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8601cc10"/>
        <function-ref name="set" scoped="" ref="0x7f5d8601cda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8601b020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8601b1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8601d890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8601b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f5d85f8fc50" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85f8fc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85f8e020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85f8e1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d85f8e340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d85f8c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85f8e660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85f8e7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d85f8e980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d85f8eb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85f8eca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85f8ee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d85f8d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d85f8d1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d85f8d340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d85f8d5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d85f8d760"/>
        <function-ref name="set" scoped="" ref="0x7f5d85f8d8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d85f8da80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d85f8dc10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85f8e4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d85f8dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f5d85fa09e0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85fa09e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85fa0d60"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85f8f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85f8f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85f8f340"/>
        <function-ref name="get" scoped="" ref="0x7f5d85f8f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85f8f660"/>
        <function-ref name="set" scoped="" ref="0x7f5d85f8f7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85f8f980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f5d85f892f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85f892f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85f89670"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85f89800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d85f89990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d85f87660"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85f89cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85f89e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d85f88020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d85f881b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85f88340"/>
        <function-ref name="get" scoped="" ref="0x7f5d85f884d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d85f88660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d85f887f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d85f88980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d85f88c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d85f88da0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85f87020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d85f871b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d85f87340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85f89b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d85f874d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f5d85f8a020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85f8a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85f8a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85f8a530"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85f8a6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85f8a850"/>
        <function-ref name="get" scoped="" ref="0x7f5d85f8a9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85f8ab70"/>
        <function-ref name="set" scoped="" ref="0x7f5d85f8ad00"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85f89020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f5d85f837a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85f837a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85f83b20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85f83cb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d85f83e40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d85f81a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85f821b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85f82340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d85f824d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d85f82660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85f827f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85f82980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d85f82b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d85f82ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d85f82e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d85f81120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d85f812b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85f81440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d85f815d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d85f81760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85f82020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d85f818f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f5d85f85630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85f85630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85f859b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85f85b40"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85f85cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85f85e60"/>
        <function-ref name="get" scoped="" ref="0x7f5d85f83020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85f831b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85f83340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85f834d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f5d85f75760" loc="61:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f5d85f75760"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d85f75ae0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d85f75c70"/>
        <function-ref name="start" scoped="" ref="0x7f5d85f75e00"/>
        <function-ref name="stop" scoped="" ref="0x7f5d85f72020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f5d85f727f0" loc="63:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d85f727f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d85f72b70"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85f72d00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d85f71020"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d85f711b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d85f71340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f5d85f70880" loc="65:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f5d85f70880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d85f70c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f5d85f6f020" loc="67:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d85f6f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85f6f3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d85f6f530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85f6f6c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d85f6f850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d85f6f9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f5d85f6a310" loc="70:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f5d85f6a310"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f5d85f5e880"/>
        <function-ref name="clear" scoped="" ref="0x7f5d85f5d020"/>
        <function-ref name="isValid" scoped="" ref="0x7f5d85f5e150"/>
        <function-ref name="set" scoped="" ref="0x7f5d85f5d750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f5d85f50130" loc="72:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f5d85f50130"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f5d85f504b0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f5d85f50640"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f5d85f507d0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f5d85f50960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d85f71b20" loc="64:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d85f71b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d85f70020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f5d85f6b080" loc="69:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d85f6b080"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f5d85f6b400"/>
        <function-ref name="noAck" scoped="" ref="0x7f5d85f6b590"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f5d85f6b720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f5d85f6fc90" loc="68:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d85f6fc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d85f6e0a0"/>
        <function-ref name="source" scoped="" ref="0x7f5d85f6e230"/>
        <function-ref name="address" scoped="" ref="0x7f5d85f6e3c0"/>
        <function-ref name="destination" scoped="" ref="0x7f5d85f6e550"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d85f6e6e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d85f6e870"/>
        <function-ref name="type" scoped="" ref="0x7f5d85f6ea00"/>
        <function-ref name="setType" scoped="" ref="0x7f5d85f6eb90"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d85f6ed20"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d85f6d020"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d85f6d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f5d85f5c3f0" loc="71:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f5d85f5c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f5d85f5a970"/>
        <function-ref name="clear" scoped="" ref="0x7f5d85f590d0"/>
        <function-ref name="isValid" scoped="" ref="0x7f5d85f5a240"/>
        <function-ref name="set" scoped="" ref="0x7f5d85f59800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f5d85f43cc0" loc="55:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f5d85f43cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d85f420a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d85f42230"/>
        <function-ref name="start" scoped="" ref="0x7f5d85f423c0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d85f42550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f5d85f29e30" loc="64:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f5d85f29e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f5d85f321e0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f5d85f32370"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f5d85f32500"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f5d85f32690"/>
        <function-ref name="setCca" scoped="" ref="0x7f5d85f32820"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f5d85f329b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f5d85f1dd20" loc="67:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7f5d85f1dd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f5d85f271c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f5d85f3e8f0" loc="60:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d85f3e8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85f3ec70"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d85f3ee00"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85f3d020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d85f3d1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d85f3d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f5d85f42d20" loc="56:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d85f42d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d85f410e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85f41270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d85f41400"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d85f41590"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d85f41720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f5d85f40c00" loc="58:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f5d85f40c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d85f3f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f5d85f349b0" loc="61:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d85f349b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f5d85f34d30"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f5d85f3c020"/>
        <function-ref name="getRssi" scoped="" ref="0x7f5d85f3c1b0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f5d85f3c340"/>
        <function-ref name="getPower" scoped="" ref="0x7f5d85f3c4d0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f5d85f3c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f5d85f32cb0" loc="65:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f5d85f32cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f5d85f300a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f5d85f30230"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f5d85f303c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f5d85f30550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d85f40020" loc="57:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d85f40020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d85f403a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f5d85f3c990" loc="62:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d85f3c990"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f5d85f3cd10"/>
        <function-ref name="noAck" scoped="" ref="0x7f5d85f3b020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f5d85f3b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f5d85f28020" loc="66:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f5d85f28020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f5d85f283a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f5d85f28530"/>
        <function-ref name="getRetries" scoped="" ref="0x7f5d85f286c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f5d85f28850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f5d85f289e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f5d85f3f2d0" loc="59:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d85f3f2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d85f3f650"/>
        <function-ref name="source" scoped="" ref="0x7f5d85f3f7e0"/>
        <function-ref name="address" scoped="" ref="0x7f5d85f3f970"/>
        <function-ref name="destination" scoped="" ref="0x7f5d85f3fb00"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d85f3fc90"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d85f3fe20"/>
        <function-ref name="type" scoped="" ref="0x7f5d85f3e020"/>
        <function-ref name="setType" scoped="" ref="0x7f5d85f3e1b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d85f3e340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d85f3e4d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d85f3e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f5d85f31c70" loc="63:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f5d85f31c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f5d85f33020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f5d85f19020" loc="43:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f5d85f19020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d85f193a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d85f19530"/>
        <function-ref name="start" scoped="" ref="0x7f5d85f196c0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d85f19850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f5d85f069d0" loc="55:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f5d85f069d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f5d85f06d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f5d85f05b70" loc="57:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f5d85f05b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f5d85f04020"/>
        <function-ref name="setRetries" scoped="" ref="0x7f5d85f041b0"/>
        <function-ref name="getRetries" scoped="" ref="0x7f5d85f04340"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f5d85f044d0"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f5d85f04660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f5d85f07020" loc="53:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d85f07020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f5d85f073a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f5d85f07530"/>
        <function-ref name="getRssi" scoped="" ref="0x7f5d85f076c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f5d85f07850"/>
        <function-ref name="getPower" scoped="" ref="0x7f5d85f079e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f5d85f07b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f5d85f11a70" loc="50:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f5d85f11a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d85f11df0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85f0a020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d85f0a1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d85f0a340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d85f0a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f5d85f05080" loc="56:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f5d85f05080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f5d85f05400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f5d85f05590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f5d85f05720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f5d85f058b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f5d85f12690" loc="47:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7f5d85f12690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d85f12a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f5d85f06020" loc="54:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d85f06020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f5d85f063a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f5d85f06530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f5d85f066c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d85f18530" loc="45:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d85f18530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d85f188b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d85f18a40"/>
        <function-ref name="request" scoped="" ref="0x7f5d85f18bd0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85f18d60"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d85f13020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f5d85f08940" loc="46:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7f5d85f08940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d85f08cc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85f08e50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d85f12020"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d85f121b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d85f12340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f5d85f12d50" loc="48:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f5d85f12d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85f11100"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d85f11290"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85f11420"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d85f115b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d85f11740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f5d85f0a840" loc="51:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f5d85f0a840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d85f0abc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f5d85f01390" loc="44:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f5d85f01390"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d85f01710"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d85f018a0"/>
        <function-ref name="start" scoped="" ref="0x7f5d85f01a30"/>
        <function-ref name="stop" scoped="" ref="0x7f5d85f01bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f5d85eff330" loc="47:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f5d85eff330"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f5d85eff6b0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f5d85eff840"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f5d85eff9d0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f5d85effb60"/>
        <function-ref name="setCca" scoped="" ref="0x7f5d85effcf0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f5d85effe80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d85f01e80" loc="45:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d85f01e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d85f00220"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85f003b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d85f00540"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d85f006d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d85f00860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d85f00b40" loc="46:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d85f00b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d85eff020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f5d85efee70" loc="39:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f5d85efee70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d85efb220"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d85efb3b0"/>
        <function-ref name="start" scoped="" ref="0x7f5d85efb540"/>
        <function-ref name="stop" scoped="" ref="0x7f5d85efb6d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f5d85ef97e0" loc="41:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f5d85ef97e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f5d85ef9b60"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f5d85ef9cf0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f5d85ef9e80"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f5d85ef8030"/>
        <function-ref name="setCca" scoped="" ref="0x7f5d85ef81c0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f5d85ef8350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7f5d85eee060" loc="47:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7f5d85eee060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f5d85eee3e0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f5d85eee570"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f5d85eee700"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f5d85eee890"/>
        <function-ref name="setCca" scoped="" ref="0x7f5d85eeea20"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f5d85eeebb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f5d85ee3330" loc="50:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d85ee3330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f5d85ee36b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f5d85ee3840"/>
        <function-ref name="getRssi" scoped="" ref="0x7f5d85ee39d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f5d85ee3b60"/>
        <function-ref name="getPower" scoped="" ref="0x7f5d85ee3cf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f5d85ee3e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Transmit" ref="0x7f5d85ee62a0" loc="46:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7f5d85ee62a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d85ee6620"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d85ee67b0"/>
        <function-ref name="modify" scoped="" ref="0x7f5d85ee6940"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d85ee6ad0"/>
        <function-ref name="resend" scoped="" ref="0x7f5d85ee6c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d85efb990" loc="40:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d85efb990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d85efbd10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85ef9020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d85ef91b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d85ef9340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d85ef94d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f5d85ee2420" loc="48:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f5d85ee2420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f5d85ee27a0"/>
        <function-ref name="rand32" scoped="" ref="0x7f5d85ee2930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f5d85eed760" loc="45:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7f5d85eed760"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d85eedae0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d85eedc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f5d85eda920" loc="51:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d85eda920"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85edaca0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f5d85edae30"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f5d85ee0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Power" ref="0x7f5d85ef1b50" loc="44:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f5d85ef1b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f5d85ef6020"/>
        <function-ref name="rfOff" scoped="" ref="0x7f5d85ef61b0"/>
        <function-ref name="rxOn" scoped="" ref="0x7f5d85ef6340"/>
        <function-ref name="startVReg" scoped="" ref="0x7f5d85ef64d0"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f5d85ef6660"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f5d85ef67f0"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f5d85ef6980"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f5d85ef6b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d85ee2bf0" loc="49:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d85ee2bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d85ee4020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d85ee41b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d85ee4340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d85ee44d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d85ee4660"/>
        <function-ref name="get" scoped="" ref="0x7f5d85ee47f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d85ee4980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d85ee3020"/>
        <function-ref name="set" scoped="" ref="0x7f5d85ee4b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d85ee4ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d85ee4e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f5d85ef8640" loc="43:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d85ef8640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d85ef89c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d85ef8b50"/>
        <function-ref name="request" scoped="" ref="0x7f5d85ef8ce0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85ef8e70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d85ef7030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControlState" ref="0x7f5d85ede110" loc="52:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControlState" scoped="" ref="0x7f5d85ede110"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f5d85ede590"/>
        <function-ref name="toIdle" scoped="" ref="0x7f5d85ede720"/>
        <function-ref name="isState" scoped="" ref="0x7f5d85ede8b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f5d85edea40"/>
        <function-ref name="requestState" scoped="" ref="0x7f5d85edebd0"/>
        <function-ref name="forceState" scoped="" ref="0x7f5d85eded60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendDone_task" ref="0x7f5d85ed0b70" loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sendDone_task" scoped="" ref="0x7f5d85ed0b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d85ecf020"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d85ecf1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDone_task" ref="0x7f5d85ed2ba0" loc="75:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDone_task" scoped="" ref="0x7f5d85ed2ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d85ed0020"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d85ed01b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDone_task" ref="0x7f5d85ed3c20" loc="74:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDone_task" scoped="" ref="0x7f5d85ed3c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d85ed2020"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d85ed21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7f5d85e79dc0" loc="45:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f5d85e79dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f5d85e85180"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f5d85e85310"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f5d85e854a0"/>
        <function-ref name="syncDone" scoped="" ref="0x7f5d85e85630"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f5d85e857c0"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f5d85e85950"/>
        <function-ref name="setChannel" scoped="" ref="0x7f5d85e85ae0"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f5d85e85c70"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f5d85e85e00"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f5d85e84020"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f5d85e841b0"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f5d85e84340"/>
        <function-ref name="sync" scoped="" ref="0x7f5d85e844d0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f5d85e84760"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f5d85e848f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7f5d85e750c0" loc="47:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7f5d85e750c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85e75cb0"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d85e74170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7f5d85e84bf0" loc="46:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f5d85e84bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f5d85e77020"/>
        <function-ref name="rfOff" scoped="" ref="0x7f5d85e771b0"/>
        <function-ref name="rxOn" scoped="" ref="0x7f5d85e77340"/>
        <function-ref name="startVReg" scoped="" ref="0x7f5d85e774d0"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f5d85e77660"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f5d85e777f0"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f5d85e77980"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f5d85e77b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d85e89950" loc="44:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d85e89950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d85e89cd0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d85e89e60"/>
        <function-ref name="request" scoped="" ref="0x7f5d85e86020"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85e861b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d85e86340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7f5d85e6f970" loc="46:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f5d85e6f970"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f5d85e6fcf0"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f5d85e6fe80"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f5d85e6e030"/>
        <function-ref name="syncDone" scoped="" ref="0x7f5d85e6e1c0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f5d85e6e350"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f5d85e6e4e0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f5d85e6e670"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f5d85e6e800"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f5d85e6e990"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f5d85e6eb20"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f5d85e6ecb0"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f5d85e6ee40"/>
        <function-ref name="sync" scoped="" ref="0x7f5d85e6d020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f5d85e6d2b0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f5d85e6d440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXCTRL1" ref="0x7f5d85e478e0" loc="66:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f5d85e478e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85e47c60"/>
        <function-ref name="write" scoped="" ref="0x7f5d85e47df0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalIeeeEui64" ref="0x7f5d85e68020" loc="50:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f5d85e68020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f5d85e683a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StartupTimer" ref="0x7f5d85e60d90" loc="52:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StartupTimer" scoped="" ref="0x7f5d85e60d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d85e5e670"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85e665d0"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d85e5e020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d85e66a90"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d85e5eb30"/>
        <function-ref name="start" scoped="" ref="0x7f5d85e67bc0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d85e66110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL0" ref="0x7f5d85e4b5f0" loc="64:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f5d85e4b5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85e4b970"/>
        <function-ref name="write" scoped="" ref="0x7f5d85e4bb00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x7f5d85e5c380" loc="54:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7f5d85e5c380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85e5c700"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85e5c890"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85e5ca20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85e5cbb0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85e5cd40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85e5b020"/>
        <function-ref name="set" scoped="" ref="0x7f5d85e5b1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85e5b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7f5d85e6cb40" loc="48:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7f5d85e6cb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85e6a750"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d85e6abd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="syncDone" ref="0x7f5d85e35820" loc="126:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="syncDone" scoped="" ref="0x7f5d85e35820"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d85e35ba0"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d85e35d30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSI" ref="0x7f5d85e461c0" loc="67:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f5d85e461c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85e46540"/>
        <function-ref name="write" scoped="" ref="0x7f5d85e466d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7f5d85e46a70" loc="68:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f5d85e46a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85e46df0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85e45020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG0" ref="0x7f5d85e4f3d0" loc="62:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f5d85e4f3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85e4f750"/>
        <function-ref name="write" scoped="" ref="0x7f5d85e4f8e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f5d85e51810" loc="57:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f5d85e51810"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f5d85e51b90"/>
        <function-ref name="changed" scoped="" ref="0x7f5d85e51d20"/>
        <function-ref name="amGroup" scoped="" ref="0x7f5d85e58020"/>
        <function-ref name="setAddress" scoped="" ref="0x7f5d85e581b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f5d85e5d060" loc="53:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f5d85e5d060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85e5d3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85e5d570"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85e5d700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85e5d890"/>
        <function-ref name="get" scoped="" ref="0x7f5d85e5da20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85e5dbb0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85e5dd40"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85e5c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCOFF" ref="0x7f5d85e44120" loc="71:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f5d85e44120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85e446a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VREN" ref="0x7f5d85e5b6a0" loc="55:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7f5d85e5b6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85e5ba20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85e5bbb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85e5bd40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85e5a020"/>
        <function-ref name="get" scoped="" ref="0x7f5d85e5a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85e5a340"/>
        <function-ref name="set" scoped="" ref="0x7f5d85e5a4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85e5a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d85e70510" loc="44:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d85e70510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d85e70890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7f5d85e47020" loc="65:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d85e47020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85e473a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85e47530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCON" ref="0x7f5d85e44a40" loc="72:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f5d85e44a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85e44dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f5d85e431d0" loc="74:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f5d85e431d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d85e43550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d85e436e0"/>
        <function-ref name="request" scoped="" ref="0x7f5d85e43870"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85e43a00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d85e43b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SyncResource" ref="0x7f5d85e40d90" loc="76:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SyncResource" scoped="" ref="0x7f5d85e40d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d85e3f180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d85e3f310"/>
        <function-ref name="request" scoped="" ref="0x7f5d85e3f4a0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85e3f630"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d85e3f7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7f5d85e6d740" loc="47:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f5d85e6d740"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f5d85e6dac0"/>
        <function-ref name="rfOff" scoped="" ref="0x7f5d85e6dc50"/>
        <function-ref name="rxOn" scoped="" ref="0x7f5d85e6dde0"/>
        <function-ref name="startVReg" scoped="" ref="0x7f5d85e6c020"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f5d85e6c1b0"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f5d85e6c340"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f5d85e6c4d0"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f5d85e6c660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG1" ref="0x7f5d85e4fc80" loc="63:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f5d85e4fc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85e4b0a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85e4b230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FSCTRL" ref="0x7f5d85e48b00" loc="61:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f5d85e48b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85e48e80"/>
        <function-ref name="write" scoped="" ref="0x7f5d85e4f030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXON" ref="0x7f5d85e422b0" loc="69:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f5d85e422b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85e42630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d85e3fa80" loc="78:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d85e3fa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d85e3fe00"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d85e3e020"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d85e3e1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d85e3e340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d85e3e4d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85e3e660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d85e3e7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d85e3ee30"/>
        <function-ref name="set" scoped="" ref="0x7f5d85e3e980"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d85e3eb10"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d85e3eca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sync" ref="0x7f5d85e36940" loc="125:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sync" scoped="" ref="0x7f5d85e36940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d85e36cc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d85e36e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d85e70b80" loc="45:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d85e70b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d85e6f020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d85e6f1b0"/>
        <function-ref name="request" scoped="" ref="0x7f5d85e6f340"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85e6f4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d85e6f660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PANID" ref="0x7f5d85e54520" loc="60:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f5d85e54520"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85e548a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85e54a30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IEEEADR" ref="0x7f5d85e4ca90" loc="59:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f5d85e4ca90"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85e54020"/>
        <function-ref name="write" scoped="" ref="0x7f5d85e541b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptCCA" ref="0x7f5d85e590e0" loc="56:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7f5d85e590e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85e59460"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85e595f0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f5d85e59780"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f5d85e59910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiResource" ref="0x7f5d85e40020" loc="75:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RssiResource" scoped="" ref="0x7f5d85e40020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d85e403a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d85e40530"/>
        <function-ref name="request" scoped="" ref="0x7f5d85e406c0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85e40850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d85e409e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRFOFF" ref="0x7f5d85e429c0" loc="70:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f5d85e429c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85e42d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d85dbfc70" loc="45:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d85dbfc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d85dbc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7f5d85dbc690" loc="46:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7f5d85dbc690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d85db8020"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85dba020"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d85dba9a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d85dba4e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d85db84e0"/>
        <function-ref name="start" scoped="" ref="0x7f5d85dbb5b0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d85dbbac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d85db7d40" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d85db7d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d85db60e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7f5d85db65f0" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7f5d85db65f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d85b71e50"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85b72e00"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d85b71800"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d85b71340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d85b70340"/>
        <function-ref name="start" scoped="" ref="0x7f5d85b72430"/>
        <function-ref name="stop" scoped="" ref="0x7f5d85b72940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f5d846f2b90" loc="44:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f5d846f2b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d846ee4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d846f04e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d846f0e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d846f09a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d846ee9a0"/>
        <function-ref name="start" scoped="" ref="0x7f5d846f19d0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d846f0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d846f2340" loc="43:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d846f2340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d846f26c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f5d846eac20" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f5d846eac20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d846e74e0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d846e84e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d846e8e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d846e89a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d846e79a0"/>
        <function-ref name="start" scoped="" ref="0x7f5d846e9a80"/>
        <function-ref name="stop" scoped="" ref="0x7f5d846e8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d846ea3d0" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d846ea3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d846ea750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f5d846d1440" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d846d1440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d846d17c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d846d1950"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d846d1ae0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d846d1c70"/>
        <function-ref name="fired" scoped="" ref="0x7f5d846d1e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f5d846d49d0" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d846d49d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d846d4d50"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d846d3020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d846d31b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d846d3340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d846d34d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d846d3660"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d846d37f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d846d3980"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d846d3b10"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d846d3ca0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d846d3e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f5d846d2120" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d846d2120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d846d24a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d846d2630"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d846d27c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d846d2950"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d846d2ae0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d846d2c70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d846d2e00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d846d1020"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d846d11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f5d85d803f0" loc="52:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d85d803f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d80770"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85d80900"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85d80a90"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85d80c20"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85d80db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f5d85d8ccd0" loc="50:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d85d8ccd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85d840a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85d84230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d843c0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85d84550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d846e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85d84870"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85d84a00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85d84b90"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85d84d20"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85d83020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85d831b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f5d85d83a40" loc="51:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d85d83a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85d83dc0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85d81020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d811b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85d81340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85d814d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d81660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85d817f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85d81980"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85d81b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f5d85d6fa50" loc="56:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f5d85d6fa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85d6fdd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85d6e020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d6e1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85d6e340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85d6e4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d6e660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85d6e7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85d6e980"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85d6eb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f5d85d6a5a0" loc="61:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f5d85d6a5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85d6a920"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85d6aab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d6ac40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85d6add0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85d69020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d691b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85d69340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85d694d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85d69660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f5d85d71a20" loc="55:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f5d85d71a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d71da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85d6f020"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85d6f1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85d6f340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85d6f4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85d6f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f5d85d5e3e0" loc="73:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f5d85d5e3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d5e760"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85d5e8f0"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85d5ea80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85d5ec10"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85d5eda0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85d5d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f5d85d77bb0" loc="54:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f5d85d77bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d71020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85d711b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85d71340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85d714d0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85d71660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f5d85d5f570" loc="72:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f5d85d5f570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d5f8f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85d5fa80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85d5fc10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85d5fda0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85d5e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f5d85d54da0" loc="82:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f5d85d54da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d53180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85d53310"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85d534a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85d53630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85d537c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85d53950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f5d85d5d410" loc="74:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f5d85d5d410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85d5d790"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85d5d920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d5dab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85d5dc40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85d5ddd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d5c020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85d5c1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85d5c340"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85d5c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f5d85d7b280" loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f5d85d7b280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85d7b600"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85d7b790"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d7b920"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85d7bab0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85d7bc40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d7bdd0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85d7a020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85d7a1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85d7a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f5d85d65da0" loc="66:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f5d85d65da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d64180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85d64310"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85d644a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85d64630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85d647c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85d64950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f5d85d65020" loc="65:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f5d85d65020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d653a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85d65530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85d656c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85d65850"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85d659e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f5d85d67a50" loc="64:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f5d85d67a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85d67dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85d66020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d661b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85d66340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85d664d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d66660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85d667f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85d66980"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85d66b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f5d85d6dda0" loc="58:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f5d85d6dda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d6c180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85d6c310"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85d6c4a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85d6c630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85d6c7c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85d6c950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f5d85d5b890" loc="76:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f5d85d5b890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d5bc10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85d5bda0"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85d5a020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85d5a1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85d5a340"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85d5a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f5d85d64d40" loc="67:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f5d85d64d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85d630e0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85d63270"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d63400"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85d63590"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85d63720"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d638b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85d63a40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85d63bd0"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85d63d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f5d85d6d020" loc="57:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f5d85d6d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d6d3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85d6d530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85d6d6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85d6d850"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85d6d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f5d85d7fa30" loc="49:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f5d85d7fa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85d7fdb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85d7c020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d7c1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85d7c340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d7c4d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85d7c660"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85d7c7f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85d7c980"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85d7cb10"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85d7cca0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85d7ce30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f5d85d5c890" loc="75:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f5d85d5c890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d5ce10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85d5b020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85d5b1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85d5b340"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85d5b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f5d85d78730" loc="53:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f5d85d78730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85d78ab0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85d78c40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d78dd0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85d77020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85d771b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d77340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85d774d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85d77660"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85d777f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f5d85d5a8c0" loc="77:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f5d85d5a8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85d5ac40"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85d5add0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d59020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85d591b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85d59340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d594d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85d59660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85d597f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85d59980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f5d85d72690" loc="52:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f5d85d72690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d72a10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85d72ba0"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85d72d30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85d78020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85d781b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85d78340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f5d85d61020" loc="69:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f5d85d61020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d613a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85d61530"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85d616c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85d61850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85d619e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85d61b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f5d85d7a700" loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f5d85d7a700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d7aa80"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85d7ac10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85d7ada0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85d79020"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85d791b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f5d85d62160" loc="68:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f5d85d62160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d624e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85d62670"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85d62800"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85d62990"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85d62b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f5d85d58ae0" loc="79:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f5d85d58ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d58e60"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85d57020"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85d571b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85d57340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85d574d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85d57660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f5d85d60020" loc="71:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f5d85d60020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85d603a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85d60530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d606c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85d60850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85d609e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d60b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85d60d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85d5f020"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85d5f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f5d85d6ccd0" loc="60:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f5d85d6ccd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85d6b0a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85d6b230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d6b3c0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85d6b550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d6b6e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85d6b870"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85d6ba00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85d6bb90"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85d6bd20"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85d6a020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85d6a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f5d85d68a20" loc="63:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f5d85d68a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d68da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85d67020"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85d671b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85d67340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85d674d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85d67660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f5d85d59d40" loc="78:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f5d85d59d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d580e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85d58270"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85d58400"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85d58590"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85d58720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f5d85d54020" loc="81:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f5d85d54020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d543a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85d54530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85d546c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85d54850"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85d549e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f5d85d69a20" loc="62:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f5d85d69a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85d68020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85d681b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85d68340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85d684d0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85d68660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f5d85d57a50" loc="80:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f5d85d57a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85d57dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85d55020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d551b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85d55340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85d554d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d55660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85d557f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85d55980"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85d55b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f5d85d1b940" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f5d85d1b940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85d1bcc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f5d85d1b2f0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f5d85d1b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85d1b670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f5d85d1a020" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f5d85d1a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85d1a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f5d85d1cbf0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d85d1cbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85d1b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f5d85d1e3e0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d85d1e3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85d1e760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85d1e8f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d1ea80"/>
        <function-ref name="get" scoped="" ref="0x7f5d85d1ec10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d1eda0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85d1c020"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85d1c1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85d1c340"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85d1c4d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85d1c660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85d1c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f5d85d14750" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f5d85d14750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85d14ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f5d85d14100" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f5d85d14100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85d14480"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f5d85d14da0" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f5d85d14da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85d13180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f5d85d15a60" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d85d15a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85d15e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f5d85d16260" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d85d16260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85d165e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85d16770"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d16900"/>
        <function-ref name="get" scoped="" ref="0x7f5d85d16a90"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85d16c20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85d16db0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85d15020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85d151b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85d15340"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85d154d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85d15660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d85cc97a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d85cc97a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85cc9b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85cc9cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85cc9e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85cc8020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85cc81b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85cc8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d85d106d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d85d106d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85d10a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85d10be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85d10d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85cca020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85cca1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85cca340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85cca4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85cca660"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85cca7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d85cc7c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d85cc7c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85cc6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d85ccaac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d85ccaac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85ccae40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85cc9020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85cc91b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85cc9340"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85cc94d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d85cc8610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d85cc8610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85cc8990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85cc8b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85cc8cb0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85cc8e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85cc7020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85cc71b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85cc7340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85cc74d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85cc7660"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85cc77f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85cc7980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d85cc2cb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d85cc2cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85cc00a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85cc0230"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85cc03c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85cc0550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85cc06e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85cc0870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d85cc4b30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d85cc4b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85cc3020"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85cc31b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85cc3340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85cc34d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85cc3660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85cc37f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85cc3980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85cc3b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85cc3ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d85cbe2f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d85cbe2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85cbe670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d85cc2020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d85cc2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85cc23a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85cc2530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85cc26c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85cc2850"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85cc29e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d85cc0b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d85cc0b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85cbf020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85cbf1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85cbf340"/>
        <function-ref name="get" scoped="" ref="0x7f5d85cbf4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85cbf660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85cbf7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85cbf980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85cbfb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85cbfca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85cbfe30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85cbe020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d85cb92f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d85cb92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85cb9670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85cb9800"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85cb9990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85cb9b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85cb9cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85cb9e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d85cbb220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d85cbb220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85cbb5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85cbb730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85cbb8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85cbba50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85cbbbe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85cbbd70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85cba020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85cba1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85cba340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d85cb77a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d85cb77a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85cb7b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d85cba610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d85cba610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85cba990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85cbab20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85cbacb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85cbae40"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85cb9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d85cb8160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d85cb8160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85cb84e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85cb8670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85cb8800"/>
        <function-ref name="get" scoped="" ref="0x7f5d85cb8990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85cb8b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85cb8cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85cb8e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85cb7020"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85cb71b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85cb7340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85cb74d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d85cb17a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d85cb17a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85cb1b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85cb1cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85cb1e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85cb0020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85cb01b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85cb0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d85cb46d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d85cb46d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85cb4a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85cb4be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85cb4d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85cb3020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85cb31b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85cb3340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85cb34d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85cb3660"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85cb37f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d85cafc50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d85cafc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85cae020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d85cb3ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d85cb3ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85cb3e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85cb1020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85cb11b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85cb1340"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85cb14d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d85cb0610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d85cb0610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85cb0990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85cb0b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85cb0cb0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85cb0e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85caf020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85caf1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85caf340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85caf4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85caf660"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85caf7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85caf980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d85caacb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d85caacb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85ca90a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85ca9230"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85ca93c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85ca9550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85ca96e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85ca9870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d85cacb30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d85cacb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85cab020"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85cab1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85cab340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85cab4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85cab660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85cab7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85cab980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85cabb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85cabca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d85ca72f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d85ca72f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85ca7670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d85caa020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d85caa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85caa3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85caa530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85caa6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85caa850"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85caa9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d85ca9b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d85ca9b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ca8020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85ca81b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85ca8340"/>
        <function-ref name="get" scoped="" ref="0x7f5d85ca84d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85ca8660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85ca87f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85ca8980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85ca8b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85ca8ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85ca8e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85ca7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d85ca22f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d85ca22f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85ca2670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85ca2800"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85ca2990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85ca2b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85ca2cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85ca2e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d85ca4220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d85ca4220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85ca45a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85ca4730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85ca48c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85ca4a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85ca4be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85ca4d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85ca3020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85ca31b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85ca3340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d85c9f7a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d85c9f7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85c9fb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d85ca3610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d85ca3610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85ca3990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85ca3b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85ca3cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85ca3e40"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ca2020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d85ca0160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d85ca0160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ca04e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85ca0670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85ca0800"/>
        <function-ref name="get" scoped="" ref="0x7f5d85ca0990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85ca0b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85ca0cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85ca0e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85c9f020"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85c9f1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85c9f340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85c9f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d85c9a7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d85c9a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85c9ab20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85c9acb0"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85c9ae40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85c99020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85c991b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85c99340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d85c9c6d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d85c9c6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85c9ca50"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85c9cbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85c9cd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85c9b020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85c9b1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85c9b340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85c9b4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85c9b660"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85c9b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d85c98c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d85c98c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85c97020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d85c9bac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d85c9bac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85c9be40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85c9a020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85c9a1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85c9a340"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85c9a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d85c99610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d85c99610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85c99990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85c99b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85c99cb0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85c99e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85c98020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85c981b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85c98340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85c984d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85c98660"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85c987f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85c98980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d85c93cb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d85c93cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85c910a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85c91230"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85c913c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85c91550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85c916e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85c91870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d85c95b30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d85c95b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85c94020"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85c941b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85c94340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85c944d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85c94660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85c947f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85c94980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85c94b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85c94ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d85c8f2f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d85c8f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85c8f670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d85c93020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d85c93020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85c933a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85c93530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85c936c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85c93850"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85c939e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d85c91b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d85c91b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85c90020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85c901b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85c90340"/>
        <function-ref name="get" scoped="" ref="0x7f5d85c904d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85c90660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85c907f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85c90980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85c90b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85c90ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85c90e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85c8f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d85c8a2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d85c8a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85c8a670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85c8a800"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85c8a990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85c8ab20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85c8acb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85c8ae40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d85c8c220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d85c8c220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85c8c5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85c8c730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85c8c8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85c8ca50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85c8cbe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85c8cd70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85c8b020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85c8b1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85c8b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d85c887a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d85c887a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85c88b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d85c8b610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d85c8b610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85c8b990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85c8bb20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85c8bcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85c8be40"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85c8a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d85c89160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d85c89160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85c894e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85c89670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85c89800"/>
        <function-ref name="get" scoped="" ref="0x7f5d85c89990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85c89b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85c89cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85c89e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85c88020"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85c881b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85c88340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85c884d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d85c837a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d85c837a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85c83b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85c83cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85c83e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85c82020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85c821b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85c82340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d85c856d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d85c856d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85c85a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85c85be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85c85d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85c84020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85c841b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85c84340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85c844d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85c84660"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85c847f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d85c80c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d85c80c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85c7f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d85c84ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d85c84ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85c84e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d85c83020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d85c831b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d85c83340"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85c834d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d85c82610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d85c82610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85c82990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85c82b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85c82cb0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85c82e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85c80020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85c801b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85c80340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85c804d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85c80660"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85c807f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85c80980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f5d85c7abc0" loc="7:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f5d85c7abc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85c79020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f5d85c7b3f0" loc="4:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f5d85c7b3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85c7b770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f5d85c7bb80" loc="5:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f5d85c7bb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85c7a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f5d85c7a430" loc="6:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f5d85c7a430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85c7a7b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f5d846b60c0" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d846b60c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d846b6440"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d846b65d0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d846b6760"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d846b68f0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d846b6a80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f5d846ca710" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d846ca710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d846caa90"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d846cac20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d846cadb0"/>
        <function-ref name="get" scoped="" ref="0x7f5d846c9020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d846c91b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d846c9340"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d846c94d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d846c9660"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d846c97f0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d846c9980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d846c9b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f5d846ce5b0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f5d846ce5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d846cbdf0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d846cddf0"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d846cb7a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d846cb2e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d846ca2e0"/>
        <function-ref name="start" scoped="" ref="0x7f5d846cd420"/>
        <function-ref name="stop" scoped="" ref="0x7f5d846cd930"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d846cfca0" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d846cfca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d846ce0a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f5d846c9da0" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d846c9da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d846c8180"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d846c8310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d846c84a0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d846c8630"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d846c87c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d846c8950"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d846c8ae0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d846c8c70"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d846c8e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f5d85bf18c0" loc="43:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <component-ref qname="Counter32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d85bf18c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d85bf5700"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85bf00d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85bf5bc0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85bf0590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f5d85bef8e0" loc="43:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f5d85bef8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d85bec780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85beb150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85becc40"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85beb610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f5d85bdac50" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d85bdac50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85bd9020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85bd91b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85bd9340"/>
        <function-ref name="get" scoped="" ref="0x7f5d85bd94d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85bd9660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85bd97f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85bd9980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85bd9b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85bd9ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85bd9e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d85bd8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f5d85be8b80" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d85be8b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d85be79b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85bda360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85be7e70"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85bda820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f5d85bb60f0" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f5d85bb60f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d85bb5020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85bb59a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85bb54e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85bb5e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f5d85bd4cf0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d85bd4cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d85bb9b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85bb8550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85bb8090"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85bb8a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f5d846e4020" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f5d846e4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d846e1870"/>
        <function-ref name="fired" scoped="" ref="0x7f5d846e2840"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d846e1220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d846e2d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d846e1d30"/>
        <function-ref name="start" scoped="" ref="0x7f5d846e4e30"/>
        <function-ref name="stop" scoped="" ref="0x7f5d846e2380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f5d846de780" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f5d846de780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d846da020"/>
        <function-ref name="fired" scoped="" ref="0x7f5d846db020"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d846db9a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d846db4e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d846da4e0"/>
        <function-ref name="start" scoped="" ref="0x7f5d846dc5d0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d846dcae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f5d846e03d0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d846e03d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d846df240"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d846dfbc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d846df700"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d846de0d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFO" ref="0x7f5d85b6a9c0" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7f5d85b6a9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b6ad40"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b69020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b691b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b69340"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b694d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b69660"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b697f0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b69980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFOP" ref="0x7f5d85b69cf0" loc="45:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7f5d85b69cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b680a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b68230"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b683c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b68550"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b686e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b68870"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b68a00"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b68b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x7f5d85b67020" loc="46:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7f5d85b67020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b673a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b67530"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b676c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b67850"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b679e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b67b70"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b67d00"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b66020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CSN" ref="0x7f5d85b6b690" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f5d85b6b690"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b6ba10"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b6bba0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b6bd30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b6a020"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b6a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b6a340"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b6a4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b6a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VREN" ref="0x7f5d85b656a0" loc="48:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7f5d85b656a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b65a20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b65bb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b65d40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b64020"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b641b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b64340"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b644d0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b64660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CCA" ref="0x7f5d85b6c3e0" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7f5d85b6c3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b6c760"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b6c8f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b6ca80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b6cc10"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b6cda0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b6b020"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b6b1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b6b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFD" ref="0x7f5d85b66370" loc="47:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7f5d85b66370"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b666f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b66880"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b66a10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b66ba0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b66d30"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b65020"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b651b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b65340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f5d85b62c50" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85b62c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b61020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b611b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d85b61340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d85b5f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b61660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b617f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d85b61980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d85b61b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b61ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b61e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d85b60020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d85b601b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d85b60340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d85b605d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d85b60760"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b608f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d85b60a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d85b60c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b614d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d85b60da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f5d85b63a20" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b63a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b63da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b62020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b621b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b62340"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b624d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b62660"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b627f0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b62980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f5d85b5c2f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85b5c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b5c670"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b5c800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d85b5c990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d85b5a660"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b5ccb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b5ce40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d85b5b020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d85b5b1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b5b340"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b5b4d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d85b5b660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d85b5b7f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d85b5b980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d85b5bc10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d85b5bda0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b5a020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d85b5a1b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d85b5a340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b5cb20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d85b5a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f5d85b5d020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b5d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b5d3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b5d530"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b5d6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b5d850"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b5d9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b5db70"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b5dd00"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b5c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f5d85b577a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85b577a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b57b20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b57cb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d85b57e40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d85b55a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b561b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b56340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d85b564d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d85b56660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b567f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b56980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d85b56b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d85b56ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d85b56e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d85b55120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d85b552b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b55440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d85b555d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d85b55760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b56020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d85b558f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f5d85b58630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b58630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b589b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b58b40"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b58cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b58e60"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b57020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b571b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b57340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b574d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f5d85b51c60" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85b51c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b50020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b501b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d85b50340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d85b4e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b50660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b507f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d85b50980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d85b50b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b50ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b50e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d85b4f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d85b4f1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d85b4f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d85b4f5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d85b4f760"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b4f8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d85b4fa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d85b4fc10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b504d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d85b4fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f5d85b52b00" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b52b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b52e80"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b51030"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b511c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b51350"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b514e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b51670"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b51800"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b51990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f5d85b4b2f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85b4b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b4b670"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b4b800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d85b4b990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d85b49660"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b4bcb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b4be40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d85b4a020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d85b4a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b4a340"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b4a4d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d85b4a660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d85b4a7f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d85b4a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d85b4ac10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d85b4ada0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b49020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d85b491b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d85b49340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b4bb20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d85b494d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f5d85b4c020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b4c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b4c3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b4c530"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b4c6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b4c850"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b4c9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b4cb70"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b4cd00"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b4b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f5d85b467a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85b467a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b46b20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b46cb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d85b46e40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d85b44a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b451b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b45340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d85b454d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d85b45660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b457f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b45980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d85b45b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d85b45ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d85b45e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d85b44120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d85b442b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b44440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d85b445d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d85b44760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b45020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d85b448f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f5d85b47630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b47630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b479b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b47b40"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b47cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b47e60"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b46020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b461b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b46340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b464d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f5d85b41c60" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85b41c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b40020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b401b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d85b40340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d85b3e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b40660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b407f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d85b40980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d85b40b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b40ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b40e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d85b3f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d85b3f1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d85b3f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d85b3f5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d85b3f760"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b3f8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d85b3fa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d85b3fc10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b404d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d85b3fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f5d85b42b00" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b42b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b42e80"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b41030"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b411c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b41350"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b414e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b41670"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b41800"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b41990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureSFD" ref="0x7f5d85b1f700" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7f5d85b1f700"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f5d85b1fa80"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85b1fc10"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85b1fda0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f5d85b23020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptCCA" ref="0x7f5d85b23400" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7f5d85b23400"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85b23780"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85b23910"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f5d85b23aa0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f5d85b23c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptFIFOP" ref="0x7f5d85b22060" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f5d85b22060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85b223e0"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85b22570"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f5d85b22700"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f5d85b22890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Capture" ref="0x7f5d85b08a80" loc="50:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Capture" scoped="" ref="0x7f5d85b08a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d85b08e00"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d85b07020"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85b071b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85b07340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85b074d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d85b07660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d85b1cc20" loc="48:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d85b1cc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f5d85b09020"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85b091b0"/>
        <function-ref name="captured" scoped="" ref="0x7f5d85b09340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f5d85b094d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f5d85b09760" loc="49:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d85b09760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d85b09ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d85b09c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d85b09e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d85b08020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d85b081b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d85b08340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d85b084d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d85b08660"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d85b087f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GeneralIO" ref="0x7f5d85b07930" loc="51:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f5d85b07930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85b07cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85b07e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d85b06020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d85b05c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85b06340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85b064d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d85b06660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d85b067f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85b06980"/>
        <function-ref name="get" scoped="" ref="0x7f5d85b06b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d85b06ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d85b06e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d85b05020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d85b052b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d85b05440"/>
        <function-ref name="set" scoped="" ref="0x7f5d85b055d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d85b05760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d85b058f0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85b061b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d85b05a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f5d85af4020" loc="46:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f5d85af4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85af43a0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85af4530"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85af46c0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85af4850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85af49e0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85af4b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85af4d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85af3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f5d85ae83f0" loc="58:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f5d85ae83f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ae8770"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ae8900"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ae8a90"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85ae8c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85ae8db0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85ae6020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85ae61b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85ae6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f5d85af1a30" loc="49:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f5d85af1a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85af1db0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85af0020"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85af01b0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85af0340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85af04d0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85af0660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85af07f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85af0980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f5d85aee020" loc="53:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f5d85aee020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85aee3a0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85aee530"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85aee6c0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85aee850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85aee9e0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85aeeb70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85aeed00"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85aed020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f5d85afda30" loc="44:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f5d85afda30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85afddb0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85af6020"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85af61b0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85af6340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85af64d0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85af6660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85af67f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85af6980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f5d85aeba30" loc="56:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f5d85aeba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85aea020"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85aea1b0"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85aea340"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85aea4d0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85aea660"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85aea7f0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85aea980"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85aeab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f5d85af33f0" loc="47:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f5d85af33f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85af3770"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85af3900"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85af3a90"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85af3c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85af3db0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85af2020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85af21b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85af2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f5d85ae6710" loc="59:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f5d85ae6710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ae6a90"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ae6c20"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ae6db0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85ae5020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85ae51b0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85ae5340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85ae54d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85ae5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f5d85af73d0" loc="42:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f5d85af73d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85af7750"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85af78e0"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85af7a70"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85af7c00"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85af7d90"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85afe020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85afe1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85afe340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f5d85aed3f0" loc="54:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f5d85aed3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85aed770"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85aed900"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85aeda90"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85aedc20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85aeddb0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85aec020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85aec1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85aec340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f5d85af6d50" loc="45:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f5d85af6d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85af5100"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85af5290"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85af5420"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85af55b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85af5740"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85af58d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85af5a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85af5bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f5d85ae9020" loc="57:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f5d85ae9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ae93a0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ae9530"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ae96c0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85ae9850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85ae99e0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85ae9b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85ae9d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85ae8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f5d85af2710" loc="48:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f5d85af2710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85af2a90"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85af2c20"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85af2db0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85af1020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85af11b0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85af1340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85af14d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85af1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f5d85af0d50" loc="52:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f5d85af0d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85aef100"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85aef290"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85aef420"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85aef5b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85aef740"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85aef8d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85aefa60"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85aefbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f5d85afe710" loc="43:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f5d85afe710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85afea90"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85afec20"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85afedb0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85afd020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85afd1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85afd340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85afd4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85afd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f5d85aec710" loc="55:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f5d85aec710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85aeca90"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85aecc20"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85aecdb0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85aeb020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85aeb1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85aeb340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85aeb4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85aeb660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f5d85add3f0" loc="58:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f5d85add3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85add770"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85add900"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85adda90"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85addc20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85adddb0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85adc020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85adc1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85adc340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f5d85ad13f0" loc="70:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f5d85ad13f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ad1770"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ad1900"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ad1a90"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85ad1c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85ad1db0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85ad0020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85ad01b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85ad0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f5d85adad50" loc="61:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f5d85adad50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ad9100"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ad9290"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ad9420"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85ad95b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85ad9740"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85ad98d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85ad9a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85ad9bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f5d85ad73f0" loc="65:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f5d85ad73f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ad7770"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ad7900"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ad7a90"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85ad7c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85ad7db0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85ad6020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85ad61b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85ad6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f5d85ae0d50" loc="56:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f5d85ae0d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85adf100"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85adf290"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85adf420"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85adf5b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85adf740"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85adf8d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85adfa60"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85adfbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f5d85ad4d50" loc="68:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f5d85ad4d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ad3210"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ad33a0"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ad3530"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85ad36c0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85ad3850"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85ad39e0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85ad3b70"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85ad3d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f5d85adc710" loc="59:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f5d85adc710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85adca90"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85adcc20"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85adcdb0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85adb020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85adb1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85adb340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85adb4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85adb660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f5d85ad0710" loc="71:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f5d85ad0710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ad0a90"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ad0c20"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ad0db0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85acf020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85acf1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85acf340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85acf4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85acf660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f5d85ae47a0" loc="54:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f5d85ae47a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ae4b20"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ae4cb0"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ae4e40"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85ae1020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85ae11b0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85ae1340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85ae14d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85ae1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f5d85ad6710" loc="66:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f5d85ad6710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ad6a90"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ad6c20"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ad6db0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85ad5020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85ad51b0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85ad5340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85ad54d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85ad5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f5d85ade020" loc="57:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f5d85ade020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ade3a0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ade530"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ade6c0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85ade850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85ade9e0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85adeb70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85aded00"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85add020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f5d85ad2100" loc="69:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f5d85ad2100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ad2480"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ad2610"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ad27a0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85ad2930"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85ad2ac0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85ad2c50"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85ad2de0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85ad1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f5d85adba30" loc="60:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f5d85adba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85adbdb0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ada020"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ada1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85ada340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85ada4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85ada660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85ada7f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85ada980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f5d85ad8020" loc="64:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f5d85ad8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ad83a0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ad8530"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ad86c0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85ad8850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85ad89e0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85ad8b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85ad8d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85ad7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f5d85ae1a30" loc="55:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f5d85ae1a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ae1db0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ae0020"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ae01b0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85ae0340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85ae04d0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85ae0660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85ae07f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85ae0980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f5d85ad5a30" loc="67:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f5d85ad5a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85ad5db0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85ad4020"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85ad41b0"/>
        <function-ref name="edge" scoped="" ref="0x7f5d85ad4340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d85ad44d0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d85ad4660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d85ad47f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d85ad4980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7f5d859c52f0" loc="52:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7f5d859c52f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d859c5670"/>
        <function-ref name="fired" scoped="" ref="0x7f5d859c5800"/>
        <function-ref name="disable" scoped="" ref="0x7f5d859c5990"/>
        <function-ref name="edge" scoped="" ref="0x7f5d859c5b20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d859c5cb0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d859c5e40"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d859b8020"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d859b81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f5d859c6680" loc="51:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f5d859c6680"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d859c6a00"/>
        <function-ref name="disable" scoped="" ref="0x7f5d859c6b90"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f5d859c6d20"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f5d859c5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7f5d859b67a0" loc="52:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7f5d859b67a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d859b6b20"/>
        <function-ref name="fired" scoped="" ref="0x7f5d859b6cb0"/>
        <function-ref name="disable" scoped="" ref="0x7f5d859b6e40"/>
        <function-ref name="edge" scoped="" ref="0x7f5d859b5020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f5d859b51b0"/>
        <function-ref name="enable" scoped="" ref="0x7f5d859b5340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f5d859b54d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f5d859b5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f5d859b7b70" loc="51:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f5d859b7b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d859b6020"/>
        <function-ref name="disable" scoped="" ref="0x7f5d859b61b0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f5d859b6340"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f5d859b64d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f5d85552e50" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f5d85552e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85551410"/>
        <function-ref name="write" scoped="" ref="0x7f5d855515a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f5d8555c160" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f5d8555c160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8555c4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f5d85556e50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f5d85556e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85554210"/>
        <function-ref name="write" scoped="" ref="0x7f5d855543a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f5d85550880" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d85550880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85550c00"/>
        <function-ref name="write" scoped="" ref="0x7f5d85550d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f5d855470a0" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f5d855470a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85547420"/>
        <function-ref name="write" scoped="" ref="0x7f5d855475b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f5d8554e0a0" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f5d8554e0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8554e420"/>
        <function-ref name="write" scoped="" ref="0x7f5d8554e5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f5d8553c500" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f5d8553c500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8553c880"/>
        <function-ref name="write" scoped="" ref="0x7f5d8553ca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f5d8553e500" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f5d8553e500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8553e880"/>
        <function-ref name="write" scoped="" ref="0x7f5d8553ea10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f5d8555a490" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f5d8555a490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8555a810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f5d85544880" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f5d85544880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85544c00"/>
        <function-ref name="write" scoped="" ref="0x7f5d85544d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f5d8553f500" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f5d8553f500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8553f880"/>
        <function-ref name="write" scoped="" ref="0x7f5d8553fa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f5d85554e50" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f5d85554e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85553210"/>
        <function-ref name="write" scoped="" ref="0x7f5d855533a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f5d85553e50" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f5d85553e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85552210"/>
        <function-ref name="write" scoped="" ref="0x7f5d855523a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f5d8554a880" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f5d8554a880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8554ac00"/>
        <function-ref name="write" scoped="" ref="0x7f5d8554ad90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f5d8554b0a0" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f5d8554b0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8554b420"/>
        <function-ref name="write" scoped="" ref="0x7f5d8554b5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f5d8554e880" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f5d8554e880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8554ec00"/>
        <function-ref name="write" scoped="" ref="0x7f5d8554ed90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f5d8555ea90" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d8555ea90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f5d8555ee10"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f5d8555d020"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f5d8555d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f5d85559e00" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f5d85559e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d855581c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f5d85558490" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f5d85558490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85558910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f5d85543c80" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f5d85543c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d855420a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85542230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f5d85558be0" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f5d85558be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85557020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f5d8553fce0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f5d8553fce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8553e0a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8553e230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f5d85559160" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f5d85559160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d855594e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f5d855440a0" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f5d855440a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85544420"/>
        <function-ref name="write" scoped="" ref="0x7f5d855445b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f5d85553670" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f5d85553670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d855539f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85553b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f5d85554670" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d85554670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d855549f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85554b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f5d8555dad0" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f5d8555dad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8555de50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f5d855450a0" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f5d855450a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85545420"/>
        <function-ref name="write" scoped="" ref="0x7f5d855455b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f5d85547880" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f5d85547880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85547c00"/>
        <function-ref name="write" scoped="" ref="0x7f5d85547d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f5d85545880" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f5d85545880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85545c00"/>
        <function-ref name="write" scoped="" ref="0x7f5d85545d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f5d8553dce0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f5d8553dce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8553c0a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8553c230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f5d8553ece0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f5d8553ece0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8553d0a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8553d230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f5d8554b880" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f5d8554b880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8554bc00"/>
        <function-ref name="write" scoped="" ref="0x7f5d8554bd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f5d855460a0" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f5d855460a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85546420"/>
        <function-ref name="write" scoped="" ref="0x7f5d855465b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f5d85540ce0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f5d85540ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8553f0a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8553f230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f5d8554d880" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f5d8554d880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8554dc00"/>
        <function-ref name="write" scoped="" ref="0x7f5d8554dd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f5d8553cce0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f5d8553cce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f5d8553b0a0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f5d8553b230"/>
        <function-ref name="write" scoped="" ref="0x7f5d8553b3c0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f5d8553b550"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d8553b6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f5d8555d480" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f5d8555d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8555d800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f5d85556670" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f5d85556670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d855569f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85556b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f5d85552670" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f5d85552670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d855529f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85552b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f5d855490a0" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f5d855490a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85549420"/>
        <function-ref name="write" scoped="" ref="0x7f5d855495b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f5d8554d0a0" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f5d8554d0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8554d420"/>
        <function-ref name="write" scoped="" ref="0x7f5d8554d5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f5d85549880" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f5d85549880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85549c00"/>
        <function-ref name="write" scoped="" ref="0x7f5d85549d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f5d85551870" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f5d85551870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85551bf0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85551d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f5d8555c7b0" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f5d8555c7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8555cb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f5d855500a0" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d855500a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85550420"/>
        <function-ref name="write" scoped="" ref="0x7f5d855505b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d8555fe20" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d8555fe20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d8555e1c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d8555e350"/>
        <function-ref name="request" scoped="" ref="0x7f5d8555e4e0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d8555e670"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d8555e800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f5d855572f0" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f5d855572f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85557670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f5d85556020" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f5d85556020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d855563a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f5d85540500" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f5d85540500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85540880"/>
        <function-ref name="write" scoped="" ref="0x7f5d85540a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f5d85542ce0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f5d85542ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d855400a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85540230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f5d855597b0" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f5d855597b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85559b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f5d85542500" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f5d85542500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85542880"/>
        <function-ref name="write" scoped="" ref="0x7f5d85542a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f5d8553d500" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f5d8553d500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8553d880"/>
        <function-ref name="write" scoped="" ref="0x7f5d8553da10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f5d8554a0a0" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f5d8554a0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8554a420"/>
        <function-ref name="write" scoped="" ref="0x7f5d8554a5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f5d85546880" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f5d85546880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85546c00"/>
        <function-ref name="write" scoped="" ref="0x7f5d85546d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f5d8555ce00" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f5d8555ce00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8555a1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f5d8555aae0" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f5d8555aae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8555ae60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f5d8554c0a0" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f5d8554c0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8554c420"/>
        <function-ref name="write" scoped="" ref="0x7f5d8554c5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f5d85557940" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f5d85557940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85557cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f5d8554c880" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f5d8554c880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8554cc00"/>
        <function-ref name="write" scoped="" ref="0x7f5d8554cd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f5d855430a0" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f5d855430a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85543820"/>
        <function-ref name="write" scoped="" ref="0x7f5d855439b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f5d8553b9b0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f5d8553b9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f5d8553bd30"/>
        <function-ref name="writeDone" scoped="" ref="0x7f5d85539020"/>
        <function-ref name="write" scoped="" ref="0x7f5d855391b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f5d85539340"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d855394d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7f5d859702c0" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7f5d859702c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f5d85970640"/>
        <function-ref name="writeDone" scoped="" ref="0x7f5d859707d0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85970960"/>
        <function-ref name="beginRead" scoped="" ref="0x7f5d85970af0"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d85970c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f5d85971350" loc="40:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d85971350"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f5d859716d0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f5d85971860"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f5d859719f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7f5d8596f540" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7f5d8596f540"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8596f8c0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8596fa50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7f5d8596e370" loc="43:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7f5d8596e370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8596e6f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8596e880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d859724d0" loc="39:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d859724d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d85972850"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d859729e0"/>
        <function-ref name="request" scoped="" ref="0x7f5d85972b70"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85972d00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d85971020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7f5d8596c1d0" loc="44:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7f5d8596c1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8596c550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiPacket" ref="0x7f5d859572e0" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f5d859572e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d85957660"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d859577f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7f5d85967890" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7f5d85967890"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f5d85967c10"/>
        <function-ref name="writeDone" scoped="" ref="0x7f5d85967da0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85966020"/>
        <function-ref name="beginRead" scoped="" ref="0x7f5d859661b0"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d85966340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f5d85969660" loc="44:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d85969660"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f5d859699e0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f5d85969b70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f5d85969d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiByte" ref="0x7f5d8595fc70" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f5d8595fc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f5d85961020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="WorkingState" ref="0x7f5d85957b40" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="WorkingState" scoped="" ref="0x7f5d85957b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f5d85960020"/>
        <function-ref name="toIdle" scoped="" ref="0x7f5d859601b0"/>
        <function-ref name="isState" scoped="" ref="0x7f5d85960340"/>
        <function-ref name="isIdle" scoped="" ref="0x7f5d859604d0"/>
        <function-ref name="requestState" scoped="" ref="0x7f5d85960660"/>
        <function-ref name="forceState" scoped="" ref="0x7f5d859607f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f5d85962060" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f5d85962060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d859623e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d85962570"/>
        <function-ref name="request" scoped="" ref="0x7f5d85962700"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85962890"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d85962a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7f5d85966ba0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7f5d85966ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85965020"/>
        <function-ref name="write" scoped="" ref="0x7f5d859651b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7f5d85965a30" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7f5d85965a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85965db0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85963020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d85960a70" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d85960a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d85960df0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d8595e020"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d8595e1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d8595e340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d8595e4d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8595e660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d8595e7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d8595ee30"/>
        <function-ref name="set" scoped="" ref="0x7f5d8595e980"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d8595eb10"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d8595eca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d85968510" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d85968510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d85968890"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d85968a20"/>
        <function-ref name="request" scoped="" ref="0x7f5d85968bb0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85968d40"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d85967020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grant" ref="0x7f5d85953bd0" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grant" scoped="" ref="0x7f5d85953bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d85952020"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d859521b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7f5d859638b0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7f5d859638b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85963c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f5d858f8770" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="CC2420SpiWireC.WorkingStateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f5d858f8770"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f5d858f8af0"/>
        <function-ref name="toIdle" scoped="" ref="0x7f5d858f8c80"/>
        <function-ref name="isState" scoped="" ref="0x7f5d858f8e10"/>
        <function-ref name="isIdle" scoped="" ref="0x7f5d858f4020"/>
        <function-ref name="requestState" scoped="" ref="0x7f5d858f41b0"/>
        <function-ref name="forceState" scoped="" ref="0x7f5d858f4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f5d858f31d0" loc="66:../../../tos/system/StateImplC.nc">
      <component-ref qname="StateImplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f5d858f31d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f5d858f3550"/>
        <function-ref name="toIdle" scoped="" ref="0x7f5d858f36e0"/>
        <function-ref name="isState" scoped="" ref="0x7f5d858f3870"/>
        <function-ref name="isIdle" scoped="" ref="0x7f5d858f3a00"/>
        <function-ref name="requestState" scoped="" ref="0x7f5d858f3b90"/>
        <function-ref name="forceState" scoped="" ref="0x7f5d858f3d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d858ef020" loc="66:../../../tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d858ef020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d858ef3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f5d858efb70" loc="67:../../../tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f5d858efb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f5d858ed020"/>
        <function-ref name="toIdle" scoped="" ref="0x7f5d858ed1b0"/>
        <function-ref name="isState" scoped="" ref="0x7f5d858ed340"/>
        <function-ref name="isIdle" scoped="" ref="0x7f5d858ed4d0"/>
        <function-ref name="requestState" scoped="" ref="0x7f5d858ed660"/>
        <function-ref name="forceState" scoped="" ref="0x7f5d858ed7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f5d85587020" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f5d85587020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d855873a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d85587530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f5d858d58f0" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f5d858d58f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f5d858d5c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d858d6c40" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d858d6c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d858d5020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d858d51b0"/>
        <function-ref name="request" scoped="" ref="0x7f5d858d5340"/>
        <function-ref name="granted" scoped="" ref="0x7f5d858d54d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d858d5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f5d8446a760" loc="82:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d8446a760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f5d8446aae0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d8446ac70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f5d84468120" loc="87:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f5d84468120"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d844684a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84468630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f5d844688c0" loc="89:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f5d844688c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f5d84468c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f5d84469020" loc="83:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f5d84469020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f5d844693a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d8446ba00" loc="81:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d8446ba00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d8446bd80"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d8446a020"/>
        <function-ref name="request" scoped="" ref="0x7f5d8446a1b0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d8446a340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d8446a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f5d84469630" loc="85:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f5d84469630"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f5d844699b0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f5d84469b40"/>
        <function-ref name="splitRead" scoped="" ref="0x7f5d84469cd0"/>
        <function-ref name="write" scoped="" ref="0x7f5d84469e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f5d8586d8e0" loc="74:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d8586d8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d8586dc60"/>
        <function-ref name="configure" scoped="" ref="0x7f5d8586ddf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f5d8586c850" loc="77:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f5d8586c850"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d8586cbd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d8586cd60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f5d8586aa40" loc="80:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f5d8586aa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f5d8586adc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f5d8586f110" loc="75:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f5d8586f110"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f5d8586f490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f5d8586b690" loc="79:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f5d8586b690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d8586ba10"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d8586bba0"/>
        <function-ref name="request" scoped="" ref="0x7f5d8586bd30"/>
        <function-ref name="granted" scoped="" ref="0x7f5d8586a020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d8586a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d85875d80" loc="73:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d85875d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d85871180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d85871310"/>
        <function-ref name="request" scoped="" ref="0x7f5d858714a0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85871630"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d858717c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f5d8586f790" loc="76:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f5d8586f790"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f5d8586fb10"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f5d8586fca0"/>
        <function-ref name="splitRead" scoped="" ref="0x7f5d8586fe30"/>
        <function-ref name="write" scoped="" ref="0x7f5d8586c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f5d85866b40" loc="81:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f5d85866b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d85868020"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d858681b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f5d857f4250" loc="76:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d857f4250"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d857f45f0"/>
        <function-ref name="configure" scoped="" ref="0x7f5d857f4780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f5d857f3c50" loc="79:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f5d857f3c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d857f1020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d857f11b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f5d857f03e0" loc="82:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f5d857f03e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f5d857f0780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f5d857f4a10" loc="77:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f5d857f4a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f5d857f4d90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f5d857f0a50" loc="83:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f5d857f0a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f5d857f0dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f5d857ef020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f5d857ef1b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f5d857ef340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f5d857ef4d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f5d857ef660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f5d857ef7f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f5d857ef980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f5d857efb10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f5d857efca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f5d857efe30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f5d857ee020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f5d857ee1b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f5d857ee440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f5d857ee5d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f5d857ee760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f5d857ee8f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f5d857eea80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f5d857eec10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f5d857eeda0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f5d857ed020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f5d857ed1b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f5d857ed340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f5d857ed4d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d857ed660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f5d857ed9f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f5d857edb80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f5d857edd10"/>
        <function-ref name="tx" scoped="" ref="0x7f5d857ec020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f5d857ec1b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f5d857ec340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f5d857ec4d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f5d857ec660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f5d857ec7f0"/>
        <function-ref name="rx" scoped="" ref="0x7f5d857ec980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f5d857ecb10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f5d857ecca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f5d857ece30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f5d857eb020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f5d857eb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d857ebc20" loc="85:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d857ebc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d857ea020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d857ea1b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d857ea340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d857ea4d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d857ea660"/>
        <function-ref name="get" scoped="" ref="0x7f5d857ea7f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d857ea980"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d857e9020"/>
        <function-ref name="set" scoped="" ref="0x7f5d857eaca0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d857eab10"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d857eae30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f5d857f15b0" loc="81:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f5d857f15b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d857f1950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d857f1ae0"/>
        <function-ref name="request" scoped="" ref="0x7f5d857f1c70"/>
        <function-ref name="granted" scoped="" ref="0x7f5d857f1e00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d857f0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d857f5470" loc="75:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d857f5470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d857f5810"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d857f59a0"/>
        <function-ref name="request" scoped="" ref="0x7f5d857f5b30"/>
        <function-ref name="granted" scoped="" ref="0x7f5d857f5cc0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d857f5e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f5d857f3060" loc="78:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f5d857f3060"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f5d857f33e0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f5d857f3570"/>
        <function-ref name="splitRead" scoped="" ref="0x7f5d857f3700"/>
        <function-ref name="write" scoped="" ref="0x7f5d857f3890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f5d857eb480" loc="84:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f5d857eb480"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d857eb800"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d857eb990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalDone_task" ref="0x7f5d857e92f0" loc="102:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalDone_task" scoped="" ref="0x7f5d857e92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d857e9670"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d857e9800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f5d857d92c0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f5d857d92c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d857d9640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f5d857ddd10" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d857ddd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d857dc0e0"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d857dc270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f5d857e1020" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d857e1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f5d857e13a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f5d857e1530"/>
        <function-ref name="setUctl" scoped="" ref="0x7f5d857e16c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f5d857e1850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f5d857e19e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f5d857e1b70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f5d857e1d00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f5d857e0020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f5d857e01b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f5d857e0340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f5d857e04d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f5d857e0660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f5d857e07f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f5d857e0a80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f5d857e0c10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f5d857e0da0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f5d857df020"/>
        <function-ref name="isUart" scoped="" ref="0x7f5d857df1b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f5d857df340"/>
        <function-ref name="isSpi" scoped="" ref="0x7f5d857df4d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f5d857df660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f5d857df7f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f5d857df980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f5d857dfb10"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d857dfca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f5d857de220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f5d857de3b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f5d857de540"/>
        <function-ref name="tx" scoped="" ref="0x7f5d857de6d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f5d857de860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f5d857de9f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f5d857deb80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f5d857ded10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f5d857dd020"/>
        <function-ref name="rx" scoped="" ref="0x7f5d857dd1b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f5d857dd340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f5d857dd4d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f5d857dd660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f5d857dd7f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f5d857dd980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f5d8579ebb0" loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f5d8579ebb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8579d020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8579d1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8579d340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8579b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8579d660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8579d7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8579d980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8579db10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8579dca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8579de30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8579c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8579c1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8579c340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8579c5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8579c760"/>
        <function-ref name="set" scoped="" ref="0x7f5d8579c8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8579ca80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8579d4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8579cc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8579cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f5d857d22d0" loc="56:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f5d857d22d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d857d2650"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d857d27e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f5d8579b3e0" loc="63:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f5d8579b3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8579b760"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8579b8f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8579ba80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d857997f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8579bda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8579a020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8579a1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8579a340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8579a4d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8579a660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8579a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8579a980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8579ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8579ada0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d85799020"/>
        <function-ref name="set" scoped="" ref="0x7f5d857991b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d85799340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8579bc10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d857994d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d85799660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f5d85799bb0" loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f5d85799bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85798020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d857981b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d85798340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85796020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85798660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d857987f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d85798980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d85798b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85798ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85798e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d85797020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d857971b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d85797340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d857975d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d85797760"/>
        <function-ref name="set" scoped="" ref="0x7f5d857978f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d85797a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d857984d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d85797c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d85797da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f5d857d7700" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f5d857d7700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f5d857d7a80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f5d857d7c10"/>
        <function-ref name="setUctl" scoped="" ref="0x7f5d857d7da0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f5d857d6020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f5d857d61b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f5d857d6340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f5d857d64d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f5d857d6660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f5d857d67f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f5d857d6980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f5d857d6b10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f5d857d6ca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f5d857d6e30"/>
        <function-ref name="getUbr" scoped="" ref="0x7f5d857d5120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f5d857d52b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f5d857d5440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f5d857d55d0"/>
        <function-ref name="isUart" scoped="" ref="0x7f5d857d5760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f5d857d58f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f5d857d5a80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f5d857d5c10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f5d857d5da0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f5d857d4020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f5d857d41b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d857d4340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f5d857d46d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f5d857d4860"/>
        <function-ref name="setUbr" scoped="" ref="0x7f5d857d49f0"/>
        <function-ref name="tx" scoped="" ref="0x7f5d857d4b80"/>
        <function-ref name="getUctl" scoped="" ref="0x7f5d857d4d10"/>
        <function-ref name="disableUart" scoped="" ref="0x7f5d857d3020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f5d857d31b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f5d857d3340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f5d857d34d0"/>
        <function-ref name="rx" scoped="" ref="0x7f5d857d3660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f5d857d37f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f5d857d3980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f5d857d3b10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f5d857d3ca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f5d857d3e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7f5d857a9d10" loc="59:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f5d857a9d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f5d857cf0e0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f5d857cf270"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f5d857cf400"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f5d857cf590"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f5d857cf720"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f5d857cf8b0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f5d857cfa40"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f5d857cfbd0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d857cfd60"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f5d857ce020"/>
        <function-ref name="getData" scoped="" ref="0x7f5d857ce1b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f5d857ce340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f5d857ce4d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f5d857ce760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f5d857ce8f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f5d857cea80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f5d857cec10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f5d857ceda0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f5d857a7020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f5d857a71b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f5d857a7340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f5d857a74d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f5d857a7660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f5d857a77f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f5d857a7980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f5d857a7d10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f5d857a6020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f5d857a61b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f5d857a6340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f5d857a64d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f5d857a6660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f5d857a67f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f5d857a6980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f5d857a6b10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f5d857a6ca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f5d857a6e30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f5d857a5020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f5d857a51b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f5d857a5340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f5d857a54d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f5d857a5660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f5d857a57f0"/>
        <function-ref name="setData" scoped="" ref="0x7f5d857a5980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f5d857a5b10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f5d857a5ca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f5d857a5e30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f5d857a4020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f5d857a41b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f5d857a4340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f5d857a48d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f5d857a4a60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f5d857a4bf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f5d857a4d80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f5d857a3020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f5d857a31b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f5d857a3340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f5d857a34d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f5d857a3660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f5d857a37f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f5d857a03e0" loc="61:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f5d857a03e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d857a0760"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d857a08f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d857a0a80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8579e7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d857a0da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8579f020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8579f1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8579f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8579f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8579f660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8579f7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8579f980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8579fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8579fda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8579e020"/>
        <function-ref name="set" scoped="" ref="0x7f5d8579e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8579e340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d857a0c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8579e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8579e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f5d857d2c20" loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f5d857d2c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d857d1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f5d857a3bb0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f5d857a3bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d857a2020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d857a21b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d857a2340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d857a0020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d857a2660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d857a27f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d857a2980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d857a2b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d857a2ca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d857a2e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d857a1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d857a11b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d857a1340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d857a15d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d857a1760"/>
        <function-ref name="set" scoped="" ref="0x7f5d857a18f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d857a1a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d857a24d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d857a1c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d857a1da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f5d8445f2c0" loc="42:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d8445f2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f5d8445f640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d8445f7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f5d84459440" loc="46:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f5d84459440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d844597c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f5d84450760" loc="51:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d84450760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d84450ae0"/>
        <function-ref name="configure" scoped="" ref="0x7f5d84450c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f5d84459a50" loc="48:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f5d84459a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f5d84459dd0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f5d84458020"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f5d844581b0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f5d84458340"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f5d844584d0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f5d84458660"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f5d844587f0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f5d84458980"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d84458b10"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f5d84458ca0"/>
        <function-ref name="getData" scoped="" ref="0x7f5d84458e30"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f5d84457020"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f5d844571b0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f5d84457440"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f5d844575d0"/>
        <function-ref name="getIV" scoped="" ref="0x7f5d84457760"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f5d844578f0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f5d84457a80"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f5d84457c10"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f5d84457da0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f5d84456020"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f5d844561b0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f5d84456340"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f5d844564d0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f5d84456660"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f5d844569f0"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f5d84456b80"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f5d84456d10"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f5d84455020"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f5d844551b0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f5d84455340"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f5d844554d0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f5d84455660"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f5d844557f0"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f5d84455980"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f5d84455b10"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f5d84455ca0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f5d84455e30"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f5d84454020"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f5d844541b0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f5d84454340"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f5d844544d0"/>
        <function-ref name="setData" scoped="" ref="0x7f5d84454660"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f5d844547f0"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f5d84454980"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f5d84454b10"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f5d84454ca0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f5d84454e30"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f5d84453020"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f5d844535b0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f5d84453740"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f5d844538d0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f5d84453a60"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f5d84453bf0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f5d84453d80"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f5d84450020"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f5d844501b0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f5d84450340"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f5d844504d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f5d8445ac10" loc="45:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d8445ac10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d84459020"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d844591b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d84461640" loc="41:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d84461640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d844619c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d84461b50"/>
        <function-ref name="request" scoped="" ref="0x7f5d84461ce0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d84461e70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d8445f030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f5d8445e2b0" loc="44:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d8445e2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f5d8445e630"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f5d8445e7c0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f5d8445e950"/>
        <function-ref name="enableUart" scoped="" ref="0x7f5d8445eae0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f5d8445ec70"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f5d8445ee00"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f5d8445d020"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f5d8445d1b0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f5d8445d340"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f5d8445d4d0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f5d8445d660"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f5d8445d7f0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f5d8445d980"/>
        <function-ref name="getUbr" scoped="" ref="0x7f5d8445dc10"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f5d8445dda0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f5d8445c020"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f5d8445c1b0"/>
        <function-ref name="isUart" scoped="" ref="0x7f5d8445c340"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f5d8445c4d0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f5d8445c660"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f5d8445c7f0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f5d8445c980"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f5d8445cb10"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f5d8445cca0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d8445ce30"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f5d8445b220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f5d8445b3b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f5d8445b540"/>
        <function-ref name="tx" scoped="" ref="0x7f5d8445b6d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f5d8445b860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f5d8445b9f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f5d8445bb80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f5d8445bd10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f5d8445a020"/>
        <function-ref name="rx" scoped="" ref="0x7f5d8445a1b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f5d8445a340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f5d8445a4d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f5d8445a660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f5d8445a7f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f5d8445a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f5d8445fa60" loc="43:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d8445fa60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d8445fde0"/>
        <function-ref name="userId" scoped="" ref="0x7f5d8445e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f5d856f02c0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d856f02c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f5d856f0640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d856f07d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f5d856ef8a0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d856ef8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d856efc20"/>
        <function-ref name="configure" scoped="" ref="0x7f5d856efdb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f5d856f34d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f5d856f34d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d856f3850"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d856f39e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d856f1020" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d856f1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d856f13a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d856f1530"/>
        <function-ref name="request" scoped="" ref="0x7f5d856f16c0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d856f1850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d856f19e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f5d856f23f0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f5d856f23f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d856f2770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f5d856f0ad0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d856f0ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d856f0e50"/>
        <function-ref name="userId" scoped="" ref="0x7f5d856ef020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f5d856dabf0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d856dabf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d856d8020"/>
        <function-ref name="userId" scoped="" ref="0x7f5d856d81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f5d856ecd60" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f5d856ecd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d856eb180"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d856eb310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f5d856da5e0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f5d856da5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d856da960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f5d856eb710" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f5d856eb710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d856ebab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f5d856ebd80" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f5d856ebd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d856da180"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d856da310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f5d8565aa60" loc="59:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d8565aa60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f5d8565ae00"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d85659020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f5d85658790" loc="64:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d85658790"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d85658b30"/>
        <function-ref name="configure" scoped="" ref="0x7f5d85658cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f5d85659270" loc="60:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d85659270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d856595f0"/>
        <function-ref name="requested" scoped="" ref="0x7f5d85659780"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85659910"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d85659aa0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d85659c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d8565bca0" loc="58:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d8565bca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d8565a0a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d8565a230"/>
        <function-ref name="request" scoped="" ref="0x7f5d8565a3c0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d8565a550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d8565a6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f5d85657020" loc="65:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f5d85657020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d856573a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f5d85659e80" loc="61:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d85659e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d85658220"/>
        <function-ref name="userId" scoped="" ref="0x7f5d856583b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d843ea020" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d843ea020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d843ea3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f5d843ea630" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f5d843ea630"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f5d843ea9b0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f5d843eab40"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f5d843eacd0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f5d843eae60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f5d843e66c0" loc="99:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d843e66c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f5d843e6a60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d843e6bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f5d843e49d0" loc="105:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d843e49d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d843e4d70"/>
        <function-ref name="configure" scoped="" ref="0x7f5d843e3020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f5d843e32b0" loc="106:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f5d843e32b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f5d843e3630"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f5d843e37c0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f5d843e3950"/>
        <function-ref name="dequeue" scoped="" ref="0x7f5d843e3ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f5d843e6e40" loc="100:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d843e6e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d843e51e0"/>
        <function-ref name="requested" scoped="" ref="0x7f5d843e5370"/>
        <function-ref name="granted" scoped="" ref="0x7f5d843e5500"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d843e5690"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d843e5820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d843e3d30" loc="107:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d843e3d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d843e10e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d843e1270"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d843e1400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d843e1590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d843e1720"/>
        <function-ref name="get" scoped="" ref="0x7f5d843e18b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d843e1a40"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d843e01b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d843e1d60"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d843e1bd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d843e0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d843e7850" loc="98:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d843e7850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d843e7bf0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d843e7d80"/>
        <function-ref name="request" scoped="" ref="0x7f5d843e6020"/>
        <function-ref name="granted" scoped="" ref="0x7f5d843e61b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d843e6340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f5d843e42d0" loc="104:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f5d843e42d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d843e4650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f5d843e5a70" loc="101:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d843e5a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d843e5df0"/>
        <function-ref name="userId" scoped="" ref="0x7f5d843e4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f5d843e0480" loc="155:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f5d843e0480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d843e0800"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d843e0990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f5d8564d020" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f5d8564d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f5d8564d3a0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f5d8564d530"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f5d8564d6c0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f5d8564d850"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f5d8564d9e0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f5d8564db70"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f5d8564dd00"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f5d8564c020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d8564c1b0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f5d8564c340"/>
        <function-ref name="getData" scoped="" ref="0x7f5d8564c4d0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f5d8564c660"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f5d8564c7f0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f5d8564ca80"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f5d8564cc10"/>
        <function-ref name="getIV" scoped="" ref="0x7f5d8564cda0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f5d8564b020"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f5d8564b1b0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f5d8564b340"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f5d8564b4d0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f5d8564b660"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f5d8564b7f0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f5d8564b980"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f5d8564bb10"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f5d8564bca0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f5d8564a220"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f5d8564a3b0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f5d8564a540"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f5d8564a6d0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f5d8564a860"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f5d8564a9f0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f5d8564ab80"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f5d8564ad10"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f5d85649020"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f5d856491b0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f5d85649340"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f5d856494d0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f5d85649660"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f5d856497f0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f5d85649980"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f5d85649b10"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f5d85649ca0"/>
        <function-ref name="setData" scoped="" ref="0x7f5d85649e30"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f5d85648020"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f5d856481b0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f5d85648340"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f5d856484d0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f5d85648660"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f5d856487f0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f5d85648d80"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f5d85647020"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f5d856471b0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f5d85647340"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f5d856474d0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f5d85647660"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f5d856477f0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f5d85647980"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f5d85647b10"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f5d85647ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7f5d8563dbb0" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7f5d8563dbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f5d8563c020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f5d8563c1b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f5d8563c340"/>
        <function-ref name="enableUart" scoped="" ref="0x7f5d8563c4d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f5d8563c660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f5d8563c7f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f5d8563c980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f5d8563cb10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f5d8563cca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f5d8563ce30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f5d8563b020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f5d8563b1b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f5d8563b340"/>
        <function-ref name="getUbr" scoped="" ref="0x7f5d8563b5d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f5d8563b760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f5d8563b8f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f5d8563ba80"/>
        <function-ref name="isUart" scoped="" ref="0x7f5d8563bc10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f5d8563bda0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f5d8563a020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f5d8563a1b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f5d8563a340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f5d8563a4d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f5d8563a660"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d8563a7f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f5d8563ab80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f5d8563ad10"/>
        <function-ref name="setUbr" scoped="" ref="0x7f5d85639020"/>
        <function-ref name="tx" scoped="" ref="0x7f5d856391b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f5d85639340"/>
        <function-ref name="disableUart" scoped="" ref="0x7f5d856394d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f5d85639660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f5d856397f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f5d85639980"/>
        <function-ref name="rx" scoped="" ref="0x7f5d85639b10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f5d85639ca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f5d85639e30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f5d85638020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f5d856381b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f5d85638340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f5d85636e40" loc="52:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f5d85636e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d856351e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85635370"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d85635500"/>
        <function-ref name="clr" scoped="" ref="0x7f5d856331b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85635820"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d856359b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d85635b40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d85635cd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85635e60"/>
        <function-ref name="get" scoped="" ref="0x7f5d85634020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d856341b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d85634340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d856344d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d85634760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d856348f0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85634a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d85634c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d85635690"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d85634da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d85633020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7f5d85646d40" loc="48:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f5d85646d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f5d856430e0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f5d85643270"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f5d85643400"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f5d85643590"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f5d85643720"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f5d856438b0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f5d85643a40"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f5d85643bd0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85643d60"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f5d85642020"/>
        <function-ref name="getData" scoped="" ref="0x7f5d856421b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f5d85642340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f5d856424d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f5d85642760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f5d856428f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f5d85642a80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f5d85642c10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f5d85642da0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f5d85641020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f5d856411b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f5d85641340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f5d856414d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f5d85641660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f5d856417f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f5d85641980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f5d85641d10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f5d85640020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f5d856401b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f5d85640340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f5d856404d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f5d85640660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f5d856407f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f5d85640980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f5d85640b10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f5d85640ca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f5d85640e30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f5d8563f020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f5d8563f1b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f5d8563f340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f5d8563f4d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f5d8563f660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f5d8563f7f0"/>
        <function-ref name="setData" scoped="" ref="0x7f5d8563f980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f5d8563fb10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f5d8563fca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f5d8563fe30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f5d8563e020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f5d8563e1b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f5d8563e340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f5d8563e8d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f5d8563ea60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f5d8563ebf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f5d8563ed80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f5d8563d020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f5d8563d1b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f5d8563d340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f5d8563d4d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f5d8563d660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f5d8563d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f5d85638700" loc="51:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f5d85638700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85638a80"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85638c10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d85638da0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85636a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d856371b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85637340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d856374d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d85637660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d856377f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85637980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d85637b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d85637ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d85637e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d85636120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d856362b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85636440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d856365d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d85637020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d85636760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d856368f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f5d85521c60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f5d85521c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85520210"/>
        <function-ref name="write" scoped="" ref="0x7f5d855203a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f5d8552cda0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f5d8552cda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8552b180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f5d85525b50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f5d85525b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85524020"/>
        <function-ref name="write" scoped="" ref="0x7f5d855241b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f5d8551f670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d8551f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8551f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8551fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f5d85518e50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f5d85518e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85517210"/>
        <function-ref name="write" scoped="" ref="0x7f5d855173a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f5d8551fe50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f5d8551fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8551e210"/>
        <function-ref name="write" scoped="" ref="0x7f5d8551e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f5d8550b2f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f5d8550b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8550b670"/>
        <function-ref name="write" scoped="" ref="0x7f5d8550b800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f5d8550e2f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f5d8550e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8550e670"/>
        <function-ref name="write" scoped="" ref="0x7f5d8550e800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f5d8552a120" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f5d8552a120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8552a4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f5d85513670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f5d85513670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d855139f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85513b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f5d8550f2f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f5d8550f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8550f670"/>
        <function-ref name="write" scoped="" ref="0x7f5d8550f800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f5d85524c60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f5d85524c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85523020"/>
        <function-ref name="write" scoped="" ref="0x7f5d855231b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f5d85523c60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f5d85523c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85521020"/>
        <function-ref name="write" scoped="" ref="0x7f5d855211b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f5d85519670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f5d85519670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d855199f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85519b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f5d8551ce50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f5d8551ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8551a210"/>
        <function-ref name="write" scoped="" ref="0x7f5d8551a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f5d8551e670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f5d8551e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8551e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8551eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f5d8552d760" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d8552d760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f5d8552dae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f5d8552dc70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f5d8552de00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f5d85529aa0" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f5d85529aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85529e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f5d85527120" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f5d85527120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d855275a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f5d85512a70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f5d85512a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85512df0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85511020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f5d85527870" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f5d85527870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85527bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f5d8550fad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f5d8550fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8550fe50"/>
        <function-ref name="write" scoped="" ref="0x7f5d8550e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f5d8552adc0" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f5d8552adc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85529180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f5d85514e50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f5d85514e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85513210"/>
        <function-ref name="write" scoped="" ref="0x7f5d855133a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f5d85523480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f5d85523480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85523800"/>
        <function-ref name="write" scoped="" ref="0x7f5d85523990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f5d85524480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d85524480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85524800"/>
        <function-ref name="write" scoped="" ref="0x7f5d85524990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f5d8552c750" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f5d8552c750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8552cad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f5d85516e50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f5d85516e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85514210"/>
        <function-ref name="write" scoped="" ref="0x7f5d855143a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f5d85517670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f5d85517670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d855179f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85517b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f5d85514670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f5d85514670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d855149f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85514b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f5d8550cad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f5d8550cad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8550ce50"/>
        <function-ref name="write" scoped="" ref="0x7f5d8550b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f5d8550ead0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f5d8550ead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8550ee50"/>
        <function-ref name="write" scoped="" ref="0x7f5d8550c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f5d8551a670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f5d8551a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8551a9f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8551ab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f5d85517e50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f5d85517e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85516210"/>
        <function-ref name="write" scoped="" ref="0x7f5d855163a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f5d85510ad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f5d85510ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85510e50"/>
        <function-ref name="write" scoped="" ref="0x7f5d8550f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f5d8551d670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f5d8551d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8551d9f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8551db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f5d8550bad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f5d8550bad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f5d8550be50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f5d8550a020"/>
        <function-ref name="write" scoped="" ref="0x7f5d8550a1b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f5d8550a340"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d8550a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f5d8552c100" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f5d8552c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8552c480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f5d85525370" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f5d85525370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d855256f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85525880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f5d85521480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f5d85521480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85521800"/>
        <function-ref name="write" scoped="" ref="0x7f5d85521990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f5d85519e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f5d85519e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85518210"/>
        <function-ref name="write" scoped="" ref="0x7f5d855183a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f5d8551ee50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f5d8551ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8551d210"/>
        <function-ref name="write" scoped="" ref="0x7f5d8551d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f5d85518670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f5d85518670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d855189f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85518b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f5d85520670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f5d85520670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d855209f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85520b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f5d8552b450" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f5d8552b450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8552b7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f5d85520e50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d85520e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8551f210"/>
        <function-ref name="write" scoped="" ref="0x7f5d8551f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d8552ea80" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d8552ea80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d8552ee00"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d8552d020"/>
        <function-ref name="request" scoped="" ref="0x7f5d8552d1b0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d8552d340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d8552d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f5d85526020" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f5d85526020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d855263a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f5d85526cc0" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f5d85526cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d855250a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f5d855102f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f5d855102f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85510670"/>
        <function-ref name="write" scoped="" ref="0x7f5d85510800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f5d85511ad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f5d85511ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85511e50"/>
        <function-ref name="write" scoped="" ref="0x7f5d85510020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f5d85529450" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f5d85529450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d855297d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f5d855112f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f5d855112f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85511670"/>
        <function-ref name="write" scoped="" ref="0x7f5d85511800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f5d8550c2f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f5d8550c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8550c670"/>
        <function-ref name="write" scoped="" ref="0x7f5d8550c800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f5d8551ae50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f5d8551ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85519210"/>
        <function-ref name="write" scoped="" ref="0x7f5d855193a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f5d85516670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f5d85516670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d855169f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85516b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f5d8552baa0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f5d8552baa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8552be20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f5d8552a770" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f5d8552a770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8552aaf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f5d8551de50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f5d8551de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8551c210"/>
        <function-ref name="write" scoped="" ref="0x7f5d8551c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f5d85526670" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f5d85526670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d855269f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f5d8551c670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f5d8551c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8551c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8551cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f5d85513e50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f5d85513e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85512610"/>
        <function-ref name="write" scoped="" ref="0x7f5d855127a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f5d8550a7a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f5d8550a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f5d8550ab20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f5d8550acb0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8550ae40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f5d85509020"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d855091b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f5d854f5c60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f5d854f5c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854f4210"/>
        <function-ref name="write" scoped="" ref="0x7f5d854f43a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f5d85500da0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f5d85500da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d854fe180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f5d854f8b50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f5d854f8b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854f7020"/>
        <function-ref name="write" scoped="" ref="0x7f5d854f71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f5d854f3670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d854f3670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854f39f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d854f3b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f5d854ebe50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f5d854ebe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854ea210"/>
        <function-ref name="write" scoped="" ref="0x7f5d854ea3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f5d854f3e50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f5d854f3e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854f1210"/>
        <function-ref name="write" scoped="" ref="0x7f5d854f13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f5d854df2f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f5d854df2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854df670"/>
        <function-ref name="write" scoped="" ref="0x7f5d854df800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f5d854e12f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f5d854e12f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e1670"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e1800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f5d854fd120" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f5d854fd120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d854fd4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f5d854e7670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f5d854e7670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e79f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e7b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f5d854e22f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f5d854e22f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e2670"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e2800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f5d854f7c60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f5d854f7c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854f6020"/>
        <function-ref name="write" scoped="" ref="0x7f5d854f61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f5d854f6c60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f5d854f6c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854f5020"/>
        <function-ref name="write" scoped="" ref="0x7f5d854f51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f5d854ed670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f5d854ed670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854ed9f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d854edb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f5d854efe50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f5d854efe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854ee210"/>
        <function-ref name="write" scoped="" ref="0x7f5d854ee3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f5d854f1670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f5d854f1670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854f19f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d854f1b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f5d85501760" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d85501760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f5d85501ae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f5d85501c70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f5d85501e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f5d854fcaa0" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f5d854fcaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d854fce20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f5d854fb120" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f5d854fb120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d854fb5a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f5d854e6a70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f5d854e6a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e6df0"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f5d854fb870" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f5d854fb870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d854fbbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f5d854e2ad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f5d854e2ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e2e50"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f5d854fddc0" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f5d854fddc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d854fc180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f5d854e8e50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f5d854e8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e7210"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e73a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f5d854f6480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f5d854f6480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854f6800"/>
        <function-ref name="write" scoped="" ref="0x7f5d854f6990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f5d854f7480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d854f7480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854f7800"/>
        <function-ref name="write" scoped="" ref="0x7f5d854f7990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f5d85500750" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f5d85500750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85500ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f5d854e9e50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f5d854e9e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e8210"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e83a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f5d854ea670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f5d854ea670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854ea9f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d854eab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f5d854e8670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f5d854e8670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e89f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e8b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f5d854e0ad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f5d854e0ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e0e50"/>
        <function-ref name="write" scoped="" ref="0x7f5d854df020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f5d854e1ad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f5d854e1ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e1e50"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f5d854ee670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f5d854ee670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854ee9f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d854eeb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f5d854eae50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f5d854eae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e9210"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e93a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f5d854e3ad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f5d854e3ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e3e50"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f5d854f0670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f5d854f0670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854f09f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d854f0b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f5d854dfad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f5d854dfad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f5d854dfe50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f5d854dd020"/>
        <function-ref name="write" scoped="" ref="0x7f5d854dd1b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f5d854dd340"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d854dd4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f5d85500100" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f5d85500100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85500480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f5d854f8370" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f5d854f8370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854f86f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d854f8880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f5d854f5480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f5d854f5480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854f5800"/>
        <function-ref name="write" scoped="" ref="0x7f5d854f5990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f5d854ede50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f5d854ede50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854eb210"/>
        <function-ref name="write" scoped="" ref="0x7f5d854eb3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f5d854f1e50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f5d854f1e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854f0210"/>
        <function-ref name="write" scoped="" ref="0x7f5d854f03a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f5d854eb670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f5d854eb670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854eb9f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d854ebb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f5d854f4670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f5d854f4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854f49f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d854f4b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f5d854fe450" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f5d854fe450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d854fe7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f5d854f4e50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d854f4e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854f3210"/>
        <function-ref name="write" scoped="" ref="0x7f5d854f33a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d855029e0" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d855029e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d85502d60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d85501020"/>
        <function-ref name="request" scoped="" ref="0x7f5d855011b0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85501340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d855014d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f5d854fa020" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f5d854fa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d854fa3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f5d854facc0" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f5d854facc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d854f80a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f5d854e32f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f5d854e32f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e3670"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e3800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f5d854e5ad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f5d854e5ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e5e50"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f5d854fc450" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f5d854fc450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d854fc7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f5d854e52f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f5d854e52f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e5670"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e5800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f5d854e02f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f5d854e02f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e0670"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e0800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f5d854eee50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f5d854eee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854ed210"/>
        <function-ref name="write" scoped="" ref="0x7f5d854ed3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f5d854e9670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f5d854e9670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e99f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e9b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f5d854feaa0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f5d854feaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d854fee20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f5d854fd770" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f5d854fd770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d854fdaf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f5d854f0e50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f5d854f0e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854ef210"/>
        <function-ref name="write" scoped="" ref="0x7f5d854ef3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f5d854fa670" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f5d854fa670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d854fa9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f5d854ef670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f5d854ef670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854ef9f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d854efb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f5d854e7e50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f5d854e7e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854e6610"/>
        <function-ref name="write" scoped="" ref="0x7f5d854e67a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f5d854dd7a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f5d854dd7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f5d854ddb20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f5d854ddcb0"/>
        <function-ref name="write" scoped="" ref="0x7f5d854dde40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f5d854dc020"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d854dc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x7f5d854d5b20" loc="54:../../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f5d854d5b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f5d854d2020"/>
        <function-ref name="changed" scoped="" ref="0x7f5d854d21b0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f5d854d2340"/>
        <function-ref name="setAddress" scoped="" ref="0x7f5d854d24d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7f5d854d4d20" loc="13:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <component-ref qname="LocalIeeeEui64C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f5d854d4d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f5d854be0e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7f5d854ba310" loc="5:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f5d854ba310"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f5d854ba690"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReadId48" ref="0x7f5d854b7880" loc="8:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f5d854b7880"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854b7c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7f5d854ac020" loc="8:../../../tos/chips/ds2411/Ds2411C.nc">
      <component-ref qname="Ds2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f5d854ac020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854ac3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="OneWire" ref="0x7f5d854a2bd0" loc="14:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f5d854a2bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854a6020"/>
        <function-ref name="write" scoped="" ref="0x7f5d854a61b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerControl" ref="0x7f5d854a6530" loc="15:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerControl" scoped="" ref="0x7f5d854a6530"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d854a68b0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d854a6a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7f5d854a7140" loc="11:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f5d854a7140"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d854a74c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7f5d854abc50" loc="8:../../../tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f5d854abc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85492020"/>
        <function-ref name="write" scoped="" ref="0x7f5d854921b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7f5d85492540" loc="11:../../../tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7f5d85492540"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d854928c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85492a50"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85492be0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85492d70"/>
        <function-ref name="get" scoped="" ref="0x7f5d85491020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d854911b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85491340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d854914d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7f5d85489950" loc="15:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f5d85489950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f0460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f5d862f07d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f5d8548c780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7f5d8548e150" loc="11:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f5d8548e150"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8548e4d0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8548e660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7f5d8548e9f0" loc="14:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7f5d8548e9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8548ed70"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8548d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8548d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8548d340"/>
        <function-ref name="get" scoped="" ref="0x7f5d8548d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8548d660"/>
        <function-ref name="set" scoped="" ref="0x7f5d8548d7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8548d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f5d85490ca0" loc="41:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f5d85490ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f0460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f5d862f07d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f5d85468ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f5d85466a90" loc="54:../../../tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f5d85466a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f0460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f5d862f07d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f5d854648d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f5d85455020" loc="55:../../../tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d85455020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f0460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f5d862f07d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d85455e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85453800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85453340"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85453cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430CounterMicro" ref="0x7f5d8544f530" loc="46:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <component-ref qname="Msp430CounterMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f5d8544f530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f0460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f5d862f07d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d8544e3d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d8544ed50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d8544e890"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d8544d260"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f5d85448020" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d85448020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d854483a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d85448530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d854486c0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85448850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d854489e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85448b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d85448d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85447020"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d854471b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d85447340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d854474d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f5d8544be50" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d8544be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f0460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f5d862f07d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d8544aca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85449670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d854491b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85449b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Gpio" ref="0x7f5d85493590" loc="3:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <component-ref qname="HplDs2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Gpio" scoped="" ref="0x7f5d85493590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85493910"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85493aa0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85493c30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85493dc0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85442020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d854421b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85442340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d854424d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f5d85440c50" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d85440c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8543f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8543f1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d8543f340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d8543d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8543f660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8543f7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d8543f980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d8543fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8543fca0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8543fe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d8543e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d8543e1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d8543e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d8543e5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d8543e760"/>
        <function-ref name="set" scoped="" ref="0x7f5d8543e8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d8543ea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d8543ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8543f4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d8543eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f5d854419e0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f5d854419e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85441d60"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85440020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d854401b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85440340"/>
        <function-ref name="get" scoped="" ref="0x7f5d854404d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85440660"/>
        <function-ref name="set" scoped="" ref="0x7f5d854407f0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85440980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f5d854381b0" loc="14:../../../tos/chips/ds2411/Ds2411PowerControlC.nc">
      <component-ref qname="Ds2411PowerControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f5d854381b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d85438530"/>
        <function-ref name="stop" scoped="" ref="0x7f5d854386c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f5d85429cb0" loc="46:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f5d85429cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f5d854280a0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f5d85428230"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f5d854283c0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f5d85428550"/>
        <function-ref name="setCca" scoped="" ref="0x7f5d854286e0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f5d85428870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7f5d85425990" loc="47:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7f5d85425990"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f5d85425d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Transmit" ref="0x7f5d85429020" loc="45:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7f5d85429020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d854293a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d85429530"/>
        <function-ref name="modify" scoped="" ref="0x7f5d854296c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d85429850"/>
        <function-ref name="resend" scoped="" ref="0x7f5d854299e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f5d8542c6c0" loc="44:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f5d8542c6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d8542ca40"/>
        <function-ref name="stop" scoped="" ref="0x7f5d8542cbd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7f5d85427150" loc="48:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7f5d85427150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f5d854274d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f5d85419970" loc="51:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f5d85419970"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f5d85419cf0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f5d85419e80"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f5d85418030"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f5d854181c0"/>
        <function-ref name="setCca" scoped="" ref="0x7f5d85418350"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f5d854184e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f5d85411950" loc="58:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f5d85411950"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f5d8540f020"/>
        <function-ref name="clear" scoped="" ref="0x7f5d8540f750"/>
        <function-ref name="isValid" scoped="" ref="0x7f5d85410780"/>
        <function-ref name="set" scoped="" ref="0x7f5d8540fe80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7f5d853fa020" loc="78:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d853fa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853fa3a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d853fa530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7f5d853fa890" loc="79:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f5d853fa890"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853fac10"/>
        <function-ref name="write" scoped="" ref="0x7f5d853fada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7f5d85418900" loc="52:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7f5d85418900"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f5d85418c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXONCCA" ref="0x7f5d853fd530" loc="72:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f5d853fd530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d853fd8b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CaptureSFD" ref="0x7f5d8540c880" loc="60:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7f5d8540c880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f5d8540cc00"/>
        <function-ref name="disable" scoped="" ref="0x7f5d8540cd90"/>
        <function-ref name="captured" scoped="" ref="0x7f5d8540b020"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f5d8540b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BackoffTimer" ref="0x7f5d85417ae0" loc="55:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BackoffTimer" scoped="" ref="0x7f5d85417ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d85413390"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85415360"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d85415ce0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d85415820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d85413850"/>
        <function-ref name="start" scoped="" ref="0x7f5d85416970"/>
        <function-ref name="stop" scoped="" ref="0x7f5d85416e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f5d85413d00" loc="56:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d85413d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f5d854120a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f5d85412230"/>
        <function-ref name="getRssi" scoped="" ref="0x7f5d854123c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f5d85412550"/>
        <function-ref name="getPower" scoped="" ref="0x7f5d854126e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f5d85412870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO_RAM" ref="0x7f5d853ff550" loc="68:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f5d853ff550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853ff8d0"/>
        <function-ref name="write" scoped="" ref="0x7f5d853ffa60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7f5d853ffe00" loc="69:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f5d853ffe00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853fe1c0"/>
        <function-ref name="write" scoped="" ref="0x7f5d853fe350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Receive" ref="0x7f5d853f3d40" loc="83:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f5d853f3d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d853f60e0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f5d853f6270"/>
        <function-ref name="sfd" scoped="" ref="0x7f5d853f6400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d8541abc0" loc="50:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d8541abc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d85419020"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d854191b0"/>
        <function-ref name="modify" scoped="" ref="0x7f5d85419340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d854194d0"/>
        <function-ref name="resend" scoped="" ref="0x7f5d85419660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ChipSpiResource" ref="0x7f5d85401d10" loc="66:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d85401d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f5d854000e0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f5d85400270"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f5d85400400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHTX" ref="0x7f5d853fdc60" loc="73:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f5d853fdc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d853fc020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f5d85405820" loc="62:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f5d85405820"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85405ba0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85405d30"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85403020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d854031b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85403340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d854034d0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85403660"/>
        <function-ref name="clr" scoped="" ref="0x7f5d854037f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d8541cc60" loc="48:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d8541cc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d8541a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f5d85412bb0" loc="57:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d85412bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85411020"/>
        <function-ref name="getHeader" scoped="" ref="0x7f5d854111b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f5d85411340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7f5d85406be0" loc="59:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f5d85406be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d8540c020"/>
        <function-ref name="isSet" scoped="" ref="0x7f5d8540c1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d8540c340"/>
        <function-ref name="set" scoped="" ref="0x7f5d8540c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7f5d853fc3e0" loc="74:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d853fc3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853fc960"/>
        <function-ref name="write" scoped="" ref="0x7f5d853fcaf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f5d85401020" loc="65:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f5d85401020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d854013a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d85401530"/>
        <function-ref name="request" scoped="" ref="0x7f5d854016c0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85401850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d854019e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CCA" ref="0x7f5d8540b500" loc="61:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7f5d8540b500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8540b980"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8540bb10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8540bca0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8540be30"/>
        <function-ref name="get" scoped="" ref="0x7f5d85405020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d854051b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85405340"/>
        <function-ref name="clr" scoped="" ref="0x7f5d854054d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7f5d853f9130" loc="80:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f5d853f9130"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853f94b0"/>
        <function-ref name="write" scoped="" ref="0x7f5d853f9640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXNONCE" ref="0x7f5d853f99c0" loc="81:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f5d853f99c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853f9d40"/>
        <function-ref name="write" scoped="" ref="0x7f5d853f7020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7f5d853fe6d0" loc="70:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f5d853fe6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d853fea50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFD" ref="0x7f5d85403b40" loc="63:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7f5d85403b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85402020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d854021b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85402340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d854024d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d85402660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d854027f0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85402980"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85402b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d853f66c0" loc="84:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d853f66c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d853f6a40"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d853f6bd0"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d853f6d60"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d853f5020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d853f51b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d853f5340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d853f54d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d853f5b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d853f5660"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d853f57f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d853f5980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7f5d853fb5e0" loc="77:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d853fb5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853fb960"/>
        <function-ref name="write" scoped="" ref="0x7f5d853fbaf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f5d8541a320" loc="49:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f5d8541a320"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d8541a6a0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d8541a830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO" ref="0x7f5d85400780" loc="67:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f5d85400780"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f5d85400b00"/>
        <function-ref name="writeDone" scoped="" ref="0x7f5d85400c90"/>
        <function-ref name="write" scoped="" ref="0x7f5d85400e20"/>
        <function-ref name="beginRead" scoped="" ref="0x7f5d853ff020"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d853ff1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXON" ref="0x7f5d853fede0" loc="71:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f5d853fede0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d853fd180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXENC" ref="0x7f5d853fce80" loc="76:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f5d853fce80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d853fb220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7f5d854170f0" loc="53:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7f5d854170f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f5d85417470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f5d85359c60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f5d85359c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85358210"/>
        <function-ref name="write" scoped="" ref="0x7f5d853583a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f5d85363020" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f5d85363020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d853633a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f5d8535cc70" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f5d8535cc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8535b020"/>
        <function-ref name="write" scoped="" ref="0x7f5d8535b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f5d85357670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d85357670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853579f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85357b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f5d8534fe50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f5d8534fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8534e210"/>
        <function-ref name="write" scoped="" ref="0x7f5d8534e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f5d85357e50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f5d85357e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85355210"/>
        <function-ref name="write" scoped="" ref="0x7f5d853553a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f5d853432f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f5d853432f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85343670"/>
        <function-ref name="write" scoped="" ref="0x7f5d85343800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f5d853452f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f5d853452f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85345670"/>
        <function-ref name="write" scoped="" ref="0x7f5d85345800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f5d85361370" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f5d85361370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d853616f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f5d8534b670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f5d8534b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8534b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8534bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f5d853462f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f5d853462f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85346670"/>
        <function-ref name="write" scoped="" ref="0x7f5d85346800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f5d8535bc60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f5d8535bc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8535a020"/>
        <function-ref name="write" scoped="" ref="0x7f5d8535a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f5d8535ac60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f5d8535ac60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85359020"/>
        <function-ref name="write" scoped="" ref="0x7f5d853591b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f5d85351670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f5d85351670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853519f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85351b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f5d85353e50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f5d85353e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85352210"/>
        <function-ref name="write" scoped="" ref="0x7f5d853523a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f5d85355670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f5d85355670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853559f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85355b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f5d853658f0" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d853658f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f5d85365c70"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f5d85365e00"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f5d85364020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f5d85360d00" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f5d85360d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8535f0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f5d8535f370" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f5d8535f370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8535f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f5d8534aa70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f5d8534aa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8534adf0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85349020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f5d8535fac0" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f5d8535fac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8535fe40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f5d85346ad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f5d85346ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85346e50"/>
        <function-ref name="write" scoped="" ref="0x7f5d85345020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f5d85360060" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f5d85360060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d853603e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f5d8534ce50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f5d8534ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8534b210"/>
        <function-ref name="write" scoped="" ref="0x7f5d8534b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f5d8535a480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f5d8535a480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8535a800"/>
        <function-ref name="write" scoped="" ref="0x7f5d8535a990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f5d8535b480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d8535b480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8535b800"/>
        <function-ref name="write" scoped="" ref="0x7f5d8535b990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f5d85364940" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f5d85364940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85364cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f5d8534de50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f5d8534de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8534c210"/>
        <function-ref name="write" scoped="" ref="0x7f5d8534c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f5d8534e670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f5d8534e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8534e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8534eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f5d8534c670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f5d8534c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8534c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8534cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f5d85344ad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f5d85344ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85344e50"/>
        <function-ref name="write" scoped="" ref="0x7f5d85343020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f5d85345ad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f5d85345ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85345e50"/>
        <function-ref name="write" scoped="" ref="0x7f5d85344020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f5d85352670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f5d85352670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853529f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85352b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f5d8534ee50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f5d8534ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8534d210"/>
        <function-ref name="write" scoped="" ref="0x7f5d8534d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f5d85347ad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f5d85347ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85347e50"/>
        <function-ref name="write" scoped="" ref="0x7f5d85346020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f5d85354670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f5d85354670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853549f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85354b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f5d85343ad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f5d85343ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f5d85343e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f5d85341020"/>
        <function-ref name="write" scoped="" ref="0x7f5d853411b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f5d85341340"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d853414d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f5d853642f0" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f5d853642f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85364670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f5d8535c490" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f5d8535c490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8535c810"/>
        <function-ref name="write" scoped="" ref="0x7f5d8535c9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f5d85359480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f5d85359480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85359800"/>
        <function-ref name="write" scoped="" ref="0x7f5d85359990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f5d85351e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f5d85351e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8534f210"/>
        <function-ref name="write" scoped="" ref="0x7f5d8534f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f5d85355e50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f5d85355e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85354210"/>
        <function-ref name="write" scoped="" ref="0x7f5d853543a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f5d8534f670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f5d8534f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8534f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8534fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f5d85358670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f5d85358670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853589f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85358b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f5d85363670" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f5d85363670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d853639f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f5d85358e50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d85358e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85357210"/>
        <function-ref name="write" scoped="" ref="0x7f5d853573a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d85366c30" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d85366c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d85365020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d853651b0"/>
        <function-ref name="request" scoped="" ref="0x7f5d85365340"/>
        <function-ref name="granted" scoped="" ref="0x7f5d853654d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d85365660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f5d8535e160" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f5d8535e160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8535e4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f5d8535ee00" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f5d8535ee00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8535c1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f5d853472f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f5d853472f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85347670"/>
        <function-ref name="write" scoped="" ref="0x7f5d85347800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f5d85349ad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f5d85349ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85349e50"/>
        <function-ref name="write" scoped="" ref="0x7f5d85347020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f5d853606b0" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f5d853606b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85360a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f5d853492f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f5d853492f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85349670"/>
        <function-ref name="write" scoped="" ref="0x7f5d85349800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f5d853442f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f5d853442f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85344670"/>
        <function-ref name="write" scoped="" ref="0x7f5d85344800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f5d85352e50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f5d85352e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85351210"/>
        <function-ref name="write" scoped="" ref="0x7f5d853513a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f5d8534d670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f5d8534d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8534d9f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8534db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f5d85363cc0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f5d85363cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d853610a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f5d853619c0" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f5d853619c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85361d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f5d85354e50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f5d85354e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85353210"/>
        <function-ref name="write" scoped="" ref="0x7f5d853533a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f5d8535e7b0" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f5d8535e7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8535eb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f5d85353670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f5d85353670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853539f0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85353b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f5d8534be50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f5d8534be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8534a610"/>
        <function-ref name="write" scoped="" ref="0x7f5d8534a7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f5d853417a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f5d853417a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f5d85341b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f5d85341cb0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85341e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f5d85340020"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d853401b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7f5d85335df0" loc="42:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f5d85335df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d853321c0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f5d85332350"/>
        <function-ref name="sfd" scoped="" ref="0x7f5d853324e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d853327c0" loc="43:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d853327c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d85332b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7f5d85331020" loc="44:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7f5d85331020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f5d853313a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f5d853355c0" loc="41:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f5d853355c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d85335940"/>
        <function-ref name="stop" scoped="" ref="0x7f5d85335ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFO" ref="0x7f5d8532a380" loc="54:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7f5d8532a380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8532a700"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8532a890"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8532aa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8532abb0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8532ad40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85329020"/>
        <function-ref name="set" scoped="" ref="0x7f5d853291b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85329340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7f5d85323b90" loc="64:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f5d85323b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f5d85321020"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f5d853211b0"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f5d85321340"/>
        <function-ref name="syncDone" scoped="" ref="0x7f5d853214d0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f5d85321660"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f5d853217f0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f5d85321980"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f5d85321b10"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f5d85321ca0"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f5d85321e30"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f5d85320020"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f5d853201b0"/>
        <function-ref name="sync" scoped="" ref="0x7f5d85320340"/>
        <function-ref name="getChannel" scoped="" ref="0x7f5d853205d0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f5d85320760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveDone_task" ref="0x7f5d8530b9d0" loc="148:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveDone_task" scoped="" ref="0x7f5d8530b9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d8530bd50"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d8530a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f5d85320d70" loc="65:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f5d85320d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f5d8531e330"/>
        <function-ref name="clear" scoped="" ref="0x7f5d8531ea60"/>
        <function-ref name="isValid" scoped="" ref="0x7f5d8531fba0"/>
        <function-ref name="set" scoped="" ref="0x7f5d8531d210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFOP" ref="0x7f5d853296b0" loc="55:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7f5d853296b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d85329a30"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d85329bc0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d85329d50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d85328020"/>
        <function-ref name="get" scoped="" ref="0x7f5d853281b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d85328340"/>
        <function-ref name="set" scoped="" ref="0x7f5d853284d0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d85328660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7f5d8531bcb0" loc="69:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d8531bcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8531a0a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8531a230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7f5d8531a590" loc="70:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f5d8531a590"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8531a910"/>
        <function-ref name="write" scoped="" ref="0x7f5d8531aaa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXNONCE" ref="0x7f5d853196d0" loc="72:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f5d853196d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85319a50"/>
        <function-ref name="write" scoped="" ref="0x7f5d85319be0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f5d85324330" loc="62:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d85324330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f5d853246b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f5d85324840"/>
        <function-ref name="getRssi" scoped="" ref="0x7f5d853249d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f5d85324b60"/>
        <function-ref name="getPower" scoped="" ref="0x7f5d85324cf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f5d85324e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7f5d8532d550" loc="49:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f5d8532d550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d8532d8d0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f5d8532da60"/>
        <function-ref name="sfd" scoped="" ref="0x7f5d8532dbf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SACK" ref="0x7f5d853253a0" loc="60:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f5d853253a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85325720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f5d8532b020" loc="53:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f5d8532b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d8532b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d8532b530"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d8532b6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d8532b850"/>
        <function-ref name="get" scoped="" ref="0x7f5d8532b9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d8532bb70"/>
        <function-ref name="set" scoped="" ref="0x7f5d8532bd00"/>
        <function-ref name="clr" scoped="" ref="0x7f5d8532a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO_RAM" ref="0x7f5d85318020" loc="73:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f5d85318020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853183a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85318530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d8532e620" loc="47:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d8532e620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d8532e9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f5d853231e0" loc="63:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d853231e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85323560"/>
        <function-ref name="getHeader" scoped="" ref="0x7f5d853236f0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f5d85323880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d8532c020" loc="50:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d8532c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d8532c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f5d853276e0" loc="58:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f5d853276e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d85327a60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d85327bf0"/>
        <function-ref name="request" scoped="" ref="0x7f5d85327d80"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85326020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d853261b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7f5d8531ae00" loc="71:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f5d8531ae00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d853191c0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85319350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO" ref="0x7f5d85326530" loc="59:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f5d85326530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f5d853268b0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f5d85326a40"/>
        <function-ref name="write" scoped="" ref="0x7f5d85326bd0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f5d85326d60"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d85325020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7f5d853188b0" loc="74:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f5d853188b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85318e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7f5d8532c7c0" loc="51:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7f5d8532c7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f5d8532cb40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d85317150" loc="76:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d85317150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d853174d0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d85317660"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d853177f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d85317980"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d85317b10"/>
        <function-ref name="get" scoped="" ref="0x7f5d85317ca0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d85317e30"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d853164d0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85316020"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d853161b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d85316340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7f5d8531b3e0" loc="68:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d8531b3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8531b760"/>
        <function-ref name="write" scoped="" ref="0x7f5d8531b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXDEC" ref="0x7f5d8531db10" loc="67:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f5d8531db10"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d8531b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptFIFOP" ref="0x7f5d85328a50" loc="56:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f5d85328a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d85328dd0"/>
        <function-ref name="disable" scoped="" ref="0x7f5d85327020"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f5d853271b0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f5d85327340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHRX" ref="0x7f5d85325ad0" loc="61:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f5d85325ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85324020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f5d8532eca0" loc="48:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f5d8532eca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d8532d0a0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d8532d230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f5d852aba70" loc="44:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f5d852aba70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f5d852abdf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f5d852af670" loc="41:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d852af670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f5d852af9f0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f5d852afb80"/>
        <function-ref name="getRssi" scoped="" ref="0x7f5d852afd10"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f5d852ac020"/>
        <function-ref name="getPower" scoped="" ref="0x7f5d852ac1b0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f5d852ac340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f5d852aa550" loc="46:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f5d852aa550"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f5d852a8b00"/>
        <function-ref name="clear" scoped="" ref="0x7f5d852a72a0"/>
        <function-ref name="isValid" scoped="" ref="0x7f5d852a83d0"/>
        <function-ref name="set" scoped="" ref="0x7f5d852a79d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7f5d852ab0c0" loc="43:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d852ab0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f5d852ab440"/>
        <function-ref name="getHeader" scoped="" ref="0x7f5d852ab5d0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f5d852ab760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f5d852a2480" loc="48:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f5d852a2480"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d852a2800"/>
        <function-ref name="isSet" scoped="" ref="0x7f5d852a2990"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d852a2b20"/>
        <function-ref name="set" scoped="" ref="0x7f5d852a2cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f5d852a6660" loc="47:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f5d852a6660"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f5d852a4ce0"/>
        <function-ref name="clear" scoped="" ref="0x7f5d852a3460"/>
        <function-ref name="isValid" scoped="" ref="0x7f5d852a45b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d852a3b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f5d852ac6e0" loc="42:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f5d852ac6e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f5d852aca60"/>
        <function-ref name="noAck" scoped="" ref="0x7f5d852acbf0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f5d852acd80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f5d8529b020" loc="49:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f5d8529b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f5d8529b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f5d852a1d20" loc="46:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d852a1d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f5d8529d0e0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f5d8529d270"/>
        <function-ref name="getRssi" scoped="" ref="0x7f5d8529d400"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f5d8529d590"/>
        <function-ref name="getPower" scoped="" ref="0x7f5d8529d720"/>
        <function-ref name="getLqi" scoped="" ref="0x7f5d8529d8b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f5d852924a0" loc="56:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d852924a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d85292820"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d852929b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85292b40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d85292cd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d85292e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f5d8529ba80" loc="51:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f5d8529ba80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f5d85299020"/>
        <function-ref name="clear" scoped="" ref="0x7f5d85299750"/>
        <function-ref name="isValid" scoped="" ref="0x7f5d8529a8d0"/>
        <function-ref name="set" scoped="" ref="0x7f5d85299e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7f5d8529c640" loc="48:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d8529c640"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f5d8529c9c0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f5d8529cb50"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f5d8529cce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f5d852948b0" loc="53:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f5d852948b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d85294c30"/>
        <function-ref name="isSet" scoped="" ref="0x7f5d85294dc0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d85292020"/>
        <function-ref name="set" scoped="" ref="0x7f5d852921b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime32khz" ref="0x7f5d8528e820" loc="57:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime32khz" scoped="" ref="0x7f5d8528e820"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d852904c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7f5d85290b80" loc="58:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f5d85290b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d8528f7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f5d85298af0" loc="52:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f5d85298af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f5d852950d0"/>
        <function-ref name="clear" scoped="" ref="0x7f5d85295800"/>
        <function-ref name="isValid" scoped="" ref="0x7f5d85296970"/>
        <function-ref name="set" scoped="" ref="0x7f5d85294020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f5d8529dc50" loc="47:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f5d8529dc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f5d8529c020"/>
        <function-ref name="noAck" scoped="" ref="0x7f5d8529c1b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f5d8529c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f5d8523e790" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f5d8523e790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d8523d3f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f5d8523da60" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d8523da60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d85233890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85232260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85233d50"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85232720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f5d8522c1d0" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f5d8522c1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d85229630"/>
        <function-ref name="fired" scoped="" ref="0x7f5d8522bc30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d8522a9d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d8522a550"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d85227020"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d85229ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d8522a0d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d8522cdc0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d85229020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d8522b2e0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d8522b7b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f5d85227610" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f5d85227610"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d852263d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d8522e3a0" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d8522e3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d8522e720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f5d851f8870" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f5d851f8870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d851f4090"/>
        <function-ref name="fired" scoped="" ref="0x7f5d851f5090"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d851f5a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d851f5550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d851f4550"/>
        <function-ref name="start" scoped="" ref="0x7f5d851f66a0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d851f6bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d851f8020" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d851f8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d851f83a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f5d842b0260" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f5d842b0260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d842aeb30"/>
        <function-ref name="fired" scoped="" ref="0x7f5d842afa60"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d842ae4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d842ae020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d842ac020"/>
        <function-ref name="start" scoped="" ref="0x7f5d842af090"/>
        <function-ref name="stop" scoped="" ref="0x7f5d842af5a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d842b19d0" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d842b19d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d842b1d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f5d84298a80" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d84298a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d84298e00"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d84296020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d842961b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d84296340"/>
        <function-ref name="fired" scoped="" ref="0x7f5d842964d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f5d8429a020" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d8429a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d8429a3a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d8429a530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d8429a6c0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8429a850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d8429a9e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d8429ab70"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d8429ad00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d84299020"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d842991b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d84299340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d842994d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f5d84299760" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d84299760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d84299ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d84299c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d84299e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d84298020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d842981b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d84298340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d842984d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d84298660"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d842987f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f5d8428b760" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d8428b760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d8428bae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d8428bc70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d8428be00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d8428a020"/>
        <function-ref name="fired" scoped="" ref="0x7f5d8428a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f5d8428fdd0" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d8428fdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d8428e180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d8428e310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d8428e4a0"/>
        <function-ref name="get" scoped="" ref="0x7f5d8428e630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d8428e7c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d8428e950"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d8428eae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d8428ec70"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d8428ee00"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d8428d020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d8428d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f5d84294bf0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f5d84294bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d8428f4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d842904e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d84290e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d842909a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d8428f9a0"/>
        <function-ref name="start" scoped="" ref="0x7f5d84291a80"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84290020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d84294360" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d84294360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d842946e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f5d8428d440" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d8428d440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d8428d7c0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d8428d950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d8428dae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d8428dc70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d8428de00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d8428b020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d8428b1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d8428b340"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d8428b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f5d85217b70" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d85217b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d852149b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85212360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85214e70"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85212820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f5d8520cb90" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f5d8520cb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d8520b9d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d852094e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85209020"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d852099a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f5d8520f610" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d8520f610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d8520d5b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d8520c020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d8520da70"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d8520c4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f5d842aa5f0" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f5d842aa5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d842a8e50"/>
        <function-ref name="fired" scoped="" ref="0x7f5d842a9e00"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d842a8800"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d842a8340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d842a7340"/>
        <function-ref name="start" scoped="" ref="0x7f5d842a9430"/>
        <function-ref name="stop" scoped="" ref="0x7f5d842a9940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f5d842a4d20" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f5d842a4d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d842a1670"/>
        <function-ref name="fired" scoped="" ref="0x7f5d842a2550"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d842a1020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d842a2a10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d842a1b30"/>
        <function-ref name="start" scoped="" ref="0x7f5d842a3b60"/>
        <function-ref name="stop" scoped="" ref="0x7f5d842a2090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f5d842a79b0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d842a79b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d842a57e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d842a41b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d842a5ca0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d842a4670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f5d851c29c0" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f5d851c29c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d851c2d40"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d851c1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f5d851c6850" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f5d851c6850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d851c2090"/>
        <function-ref name="fired" scoped="" ref="0x7f5d851c4090"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d851c4a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d851c4550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d851c2550"/>
        <function-ref name="start" scoped="" ref="0x7f5d851c56a0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d851c5bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f5d851cb2f0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d851cb2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d851c7870"/>
        <function-ref name="fired" scoped="" ref="0x7f5d851cae40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d851c9c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d851c9780"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d851c61e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d851c7cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d851c9300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d851ca020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d851c7260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d851ca4f0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d851ca9c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f5d85143020" loc="58:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f5d85143020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d85140630"/>
        <function-ref name="fired" scoped="" ref="0x7f5d85142a60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d85141920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d851414a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d8513e020"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d85140ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d85141020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d85143c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d85140020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d85142110"/>
        <function-ref name="stop" scoped="" ref="0x7f5d851425e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f5d8513e450" loc="59:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f5d8513e450"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f5d8513e7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f5d8514b8e0" loc="57:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d8514b8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d85145020"/>
        <function-ref name="fired" scoped="" ref="0x7f5d851484c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d85146300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d85148e00"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d85145960"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d851454c0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d85148960"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d8514a560"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d85146930"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d8514aa50"/>
        <function-ref name="stop" scoped="" ref="0x7f5d85148020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f5d84232020" loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f5d84232020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d842323a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d84232530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f5d84239180" loc="65:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f5d84239180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d84235630"/>
        <function-ref name="fired" scoped="" ref="0x7f5d84238bf0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d84237990"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d84237510"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d84234020"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d84235ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d84237090"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d84239d70"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d84235020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d842382a0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84238770"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f5d842338b0" loc="67:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f5d842338b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f5d84233c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Platform" ref="0x7f5d84234410" loc="66:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f5d84234410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f5d842334d0"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f5d84233660"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f5d84234ab0"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f5d84234c40"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f5d84234dd0"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f5d84233020"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f5d842331b0"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f5d84233340"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f5d84234790"/>
        <function-ref name="node_id" scoped="" ref="0x7f5d84234920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f5d84240bc0" loc="63:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d84240bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d8423b220"/>
        <function-ref name="fired" scoped="" ref="0x7f5d8423e740"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d8423c570"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d8423c0d0"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d8423bb60"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d8423b6c0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d8423ebe0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d8423f860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d8423cba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d8423fd50"/>
        <function-ref name="stop" scoped="" ref="0x7f5d8423e2a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f5d8513ca20" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f5d8513ca20"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d8513b6b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f5d8513bd20" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d8513bd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d8513ab60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d85139550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d85139090"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d85139a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f5d85132ce0" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="CC2420PacketC.DummyTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d85132ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d8511d220"/>
        <function-ref name="fired" scoped="" ref="0x7f5d851207c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d8511e590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d8511e110"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d8511db20"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d8511d6a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d85120c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d85121940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d8511eba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d85121e10"/>
        <function-ref name="stop" scoped="" ref="0x7f5d85120340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f5d85129610" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f5d85129610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d85125c40"/>
        <function-ref name="fired" scoped="" ref="0x7f5d851271e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d85125020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d85127ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d85124590"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d85124110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d85127660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d85128390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d85125630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d85128860"/>
        <function-ref name="stop" scoped="" ref="0x7f5d85128d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f5d8510c2f0" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f5d8510c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8510c870"/>
        <function-ref name="write" scoped="" ref="0x7f5d8510ca00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f5d85116670" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f5d85116670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d851169f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f5d8510f2f0" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f5d8510f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8510f670"/>
        <function-ref name="write" scoped="" ref="0x7f5d8510f800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f5d8510ace0" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f5d8510ace0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d851090a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85109230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f5d85102500" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f5d85102500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85102880"/>
        <function-ref name="write" scoped="" ref="0x7f5d85102a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f5d85109500" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f5d85109500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85109880"/>
        <function-ref name="write" scoped="" ref="0x7f5d85109a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f5d850f7900" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f5d850f7900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850f7c80"/>
        <function-ref name="write" scoped="" ref="0x7f5d850f7e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f5d850f9900" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f5d850f9900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850f9c80"/>
        <function-ref name="write" scoped="" ref="0x7f5d850f9e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f5d851159c0" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f5d851159c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85115d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f5d850ffce0" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f5d850ffce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850fe0a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d850fe230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f5d850fa900" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f5d850fa900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850fac80"/>
        <function-ref name="write" scoped="" ref="0x7f5d850fae10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f5d8510e2f0" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f5d8510e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8510e670"/>
        <function-ref name="write" scoped="" ref="0x7f5d8510e800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f5d8510d2f0" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f5d8510d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8510d670"/>
        <function-ref name="write" scoped="" ref="0x7f5d8510d800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f5d85105ce0" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f5d85105ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d851030a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85103230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f5d85106500" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f5d85106500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85106880"/>
        <function-ref name="write" scoped="" ref="0x7f5d85106a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f5d85109ce0" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f5d85109ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d851080a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85108230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f5d85118020" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f5d85118020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f5d851183a0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f5d85118530"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f5d851186c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f5d85113370" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f5d85113370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d851136f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f5d851139c0" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f5d851139c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85113e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f5d850fc120" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f5d850fc120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850fc4a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d850fc630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f5d85112160" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f5d85112160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d851124e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f5d850f9120" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f5d850f9120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850f94a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d850f9630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f5d851146b0" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f5d851146b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85114a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f5d850ff500" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f5d850ff500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850ff880"/>
        <function-ref name="write" scoped="" ref="0x7f5d850ffa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f5d8510ead0" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f5d8510ead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8510ee50"/>
        <function-ref name="write" scoped="" ref="0x7f5d8510d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f5d8510fad0" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f5d8510fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8510fe50"/>
        <function-ref name="write" scoped="" ref="0x7f5d8510e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f5d85116020" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f5d85116020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d851163a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f5d85100500" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f5d85100500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85100880"/>
        <function-ref name="write" scoped="" ref="0x7f5d85100a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f5d85102ce0" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f5d85102ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d851010a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85101230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f5d85100ce0" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f5d85100ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850ff0a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d850ff230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f5d850f7120" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f5d850f7120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850f74a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d850f7630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f5d850f8120" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f5d850f8120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850f84a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d850f8630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f5d85106ce0" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f5d85106ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d851050a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85105230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f5d85101500" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f5d85101500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85101880"/>
        <function-ref name="write" scoped="" ref="0x7f5d85101a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f5d850fa120" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f5d850fa120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850fa4a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d850fa630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f5d85108ce0" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f5d85108ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d851070a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85107230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f5d850f5120" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f5d850f5120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f5d850f54a0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f5d850f5630"/>
        <function-ref name="write" scoped="" ref="0x7f5d850f57c0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f5d850f5950"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d850f5ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f5d85118990" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f5d85118990"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85118d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f5d85110ae0" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f5d85110ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85110e60"/>
        <function-ref name="write" scoped="" ref="0x7f5d8510f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f5d8510dad0" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f5d8510dad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8510de50"/>
        <function-ref name="write" scoped="" ref="0x7f5d8510c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f5d85103500" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f5d85103500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85103880"/>
        <function-ref name="write" scoped="" ref="0x7f5d85103a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f5d85108500" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f5d85108500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85108880"/>
        <function-ref name="write" scoped="" ref="0x7f5d85108a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f5d85103ce0" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f5d85103ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d851020a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85102230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f5d8510ccd0" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f5d8510ccd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8510a0a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d8510a230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f5d85116cc0" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f5d85116cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d851150a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f5d8510a500" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f5d8510a500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d8510a880"/>
        <function-ref name="write" scoped="" ref="0x7f5d8510aa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d85119250" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d85119250"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d851195d0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d85119760"/>
        <function-ref name="request" scoped="" ref="0x7f5d851198f0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85119a80"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d85119c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f5d851127b0" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f5d851127b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85112b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f5d85110490" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f5d85110490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d85110810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f5d850fb900" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f5d850fb900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850fbc80"/>
        <function-ref name="write" scoped="" ref="0x7f5d850fbe10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f5d850fb120" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f5d850fb120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850fb4a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d850fb630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f5d85114d00" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f5d85114d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d851130a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f5d850fc900" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f5d850fc900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850fcc80"/>
        <function-ref name="write" scoped="" ref="0x7f5d850fce10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f5d850f8900" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f5d850f8900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850f8c80"/>
        <function-ref name="write" scoped="" ref="0x7f5d850f8e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f5d85105500" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f5d85105500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85105880"/>
        <function-ref name="write" scoped="" ref="0x7f5d85105a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f5d85101ce0" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f5d85101ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d851000a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85100230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f5d85115370" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f5d85115370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d851156f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f5d85114060" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f5d85114060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d851143e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f5d85107500" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f5d85107500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d85107880"/>
        <function-ref name="write" scoped="" ref="0x7f5d85107a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f5d85112e00" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f5d85112e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f5d851101c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f5d85107ce0" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f5d85107ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d851060a0"/>
        <function-ref name="write" scoped="" ref="0x7f5d85106230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f5d850fe500" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f5d850fe500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f5d850fec80"/>
        <function-ref name="write" scoped="" ref="0x7f5d850fee10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f5d850f5db0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f5d850f5db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f5d850f4180"/>
        <function-ref name="writeDone" scoped="" ref="0x7f5d850f4310"/>
        <function-ref name="write" scoped="" ref="0x7f5d850f44a0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f5d850f4630"/>
        <function-ref name="readDone" scoped="" ref="0x7f5d850f47c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f5d850caa20" loc="46:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f5d850caa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f5d850cada0"/>
        <function-ref name="rand32" scoped="" ref="0x7f5d850c8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f5d850c9920" loc="45:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7f5d850c9920"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d850ca560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d850cf990" loc="44:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d850cf990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d850cfd10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f5d850c0a20" loc="48:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f5d850c0a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f5d850c0da0"/>
        <function-ref name="rand32" scoped="" ref="0x7f5d850bf020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f5d850c1940" loc="47:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7f5d850c1940"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d850c0560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d850c1080" loc="46:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d850c1080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d850c1400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f5d850cdaa0" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="CC2420CsmaC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f5d850cdaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f5d850cde20"/>
        <function-ref name="toIdle" scoped="" ref="0x7f5d850c6020"/>
        <function-ref name="isState" scoped="" ref="0x7f5d850c61b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f5d850c6340"/>
        <function-ref name="requestState" scoped="" ref="0x7f5d850c64d0"/>
        <function-ref name="forceState" scoped="" ref="0x7f5d850c6660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f5d850a8020" loc="44:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f5d850a8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d850a83a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d850a8530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d850a86c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d850a8850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d850a89e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d850aa220" loc="40:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d850aa220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d850aa5a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d850aa730"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d850aa8c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d850aaa50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d850aabe0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f5d850a4e60" loc="45:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f5d850a4e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d850a3210"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d850a33a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d850a3530"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d850a36c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d850a3850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d850a7a10" loc="40:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d850a7a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d850a7d90"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d850a4020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d850a41b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d850a4340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d850a44d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f5d850a28f0" loc="47:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f5d850a28f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f5d850a2c70"/>
        <function-ref name="rand32" scoped="" ref="0x7f5d850a2e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d850a4750" loc="41:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d850a4750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d850a4ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f5d850a1170" loc="48:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d850a1170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f5d850a14f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f5d850a1680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f5d850a1810"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="State" ref="0x7f5d850a3ae0" loc="46:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f5d850a3ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f5d850a3e60"/>
        <function-ref name="toIdle" scoped="" ref="0x7f5d850a2020"/>
        <function-ref name="isState" scoped="" ref="0x7f5d850a21b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f5d850a2340"/>
        <function-ref name="requestState" scoped="" ref="0x7f5d850a24d0"/>
        <function-ref name="forceState" scoped="" ref="0x7f5d850a2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f5d850a5690" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="UniqueSendC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f5d850a5690"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f5d850a5a10"/>
        <function-ref name="toIdle" scoped="" ref="0x7f5d850a5ba0"/>
        <function-ref name="isState" scoped="" ref="0x7f5d850a5d30"/>
        <function-ref name="isIdle" scoped="" ref="0x7f5d85090020"/>
        <function-ref name="requestState" scoped="" ref="0x7f5d850901b0"/>
        <function-ref name="forceState" scoped="" ref="0x7f5d85090340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f5d8508a950" loc="47:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f5d8508a950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d8508acd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d8508daa0" loc="42:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d8508daa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d8508de20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7f5d8508a200" loc="43:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7f5d8508a200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d8508a580"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f5d850853f0" loc="49:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f5d850853f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d85085770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d85086b70" loc="45:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d85086b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d85085020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d85089e30" loc="43:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d85089e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d850861e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f5d85085a70" loc="50:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d85085a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85085df0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f5d85084020"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f5d850841b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7f5d85086570" loc="44:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7f5d85086570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d850868f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f5d85056020" loc="75:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f5d85056020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d850563a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f5d850566b0" loc="76:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f5d850566b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d85056a30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85056bc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d85056d50"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d85055020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d850551b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d8505b8e0" loc="65:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d8505b8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d8505bc60"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d8505bdf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d85059020"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d850591b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d85059340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f5d85059c90" loc="68:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f5d85059c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d850580a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85058230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d850583c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d85058550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d850586e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d850595e0" loc="66:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d850595e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d85059960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d8505cbe0" loc="64:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d8505cbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d8505b020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d8505b1b0"/>
        <function-ref name="request" scoped="" ref="0x7f5d8505b340"/>
        <function-ref name="granted" scoped="" ref="0x7f5d8505b4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d8505b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f5d85058a50" loc="69:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f5d85058a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d85058dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f5d85057170" loc="71:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f5d85057170"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d850574f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d85057680"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d85057810"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d850579a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d85057b30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f5d8504cd70" loc="58:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f5d8504cd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d8504b180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d8504b310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d8504b4a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d8504b630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d8504b7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f5d8504bb10" loc="59:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f5d8504bb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d8504a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantTask" ref="0x7f5d8501ddb0" loc="184:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantTask" scoped="" ref="0x7f5d8501ddb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d8501c180"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d8501c310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f5d8504a2f0" loc="60:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d8504a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f5d8504a670"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f5d8504a800"/>
        <function-ref name="getRssi" scoped="" ref="0x7f5d8504a990"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f5d8504ab20"/>
        <function-ref name="getPower" scoped="" ref="0x7f5d8504acb0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f5d8504ae40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f5d8504fa20" loc="51:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f5d8504fa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d8504fda0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d8504d020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d8504d1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d8504d340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d8504d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f5d85049b70" loc="62:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f5d85049b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f5d85048020"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f5d850481b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f5d85048340"/>
        <function-ref name="dequeue" scoped="" ref="0x7f5d850484d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f5d85049170" loc="61:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d85049170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f5d850494f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f5d85049680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f5d85049810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f5d8504f370" loc="49:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7f5d8504f370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d8504f6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d850517b0" loc="46:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d850517b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d85051b30"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d85051cc0"/>
        <function-ref name="request" scoped="" ref="0x7f5d85051e50"/>
        <function-ref name="granted" scoped="" ref="0x7f5d85050020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d850501b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f5d850504d0" loc="48:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7f5d850504d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d85050850"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d850509e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d85050b70"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d85050d00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d8504f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f5d8504d840" loc="52:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f5d8504d840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d8504dbc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f5d8504c020" loc="54:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f5d8504c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d8504c3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d8504c530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d8504c6c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d8504c850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d8504c9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d84ffddd0" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d84ffddd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d84ffc180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f5d84ffc410" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f5d84ffc410"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f5d84ffc790"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f5d84ffc920"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f5d84ffcab0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f5d84ffcc40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f5d84ff0b80" loc="46:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f5d84ff0b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d84fef020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d84fef1b0"/>
        <function-ref name="start" scoped="" ref="0x7f5d84fef340"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84fef4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f5d84fee860" loc="51:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f5d84fee860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84feebe0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84feed70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84fed020"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84fed1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84fed340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f5d84fed690" loc="52:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f5d84fed690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d84feda10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d84ff5ce0" loc="43:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d84ff5ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84ff20a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84ff2230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84ff23c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84ff2550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84ff26e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f5d84ff0080" loc="45:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f5d84ff0080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f5d84ff0400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f5d84ff0590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f5d84ff0720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f5d84ff08b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendState" ref="0x7f5d84fef800" loc="47:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendState" scoped="" ref="0x7f5d84fef800"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f5d84fefb80"/>
        <function-ref name="toIdle" scoped="" ref="0x7f5d84fefd10"/>
        <function-ref name="isState" scoped="" ref="0x7f5d84fee020"/>
        <function-ref name="isIdle" scoped="" ref="0x7f5d84fee1b0"/>
        <function-ref name="requestState" scoped="" ref="0x7f5d84fee340"/>
        <function-ref name="forceState" scoped="" ref="0x7f5d84fee4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f5d84fedd90" loc="53:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7f5d84fedd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d84fec180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d84fec310"/>
        <function-ref name="start" scoped="" ref="0x7f5d84fec4a0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84fec630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d84ff2980" loc="44:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d84ff2980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d84ff2d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f5d84fe92d0" loc="41:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
      <component-ref qname="DummyLplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f5d84fe92d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f5d84fe9650"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f5d84fe97e0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f5d84fe9970"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f5d84fe9b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f5d84feb580" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="DummyLplC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f5d84feb580"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f5d84feb900"/>
        <function-ref name="toIdle" scoped="" ref="0x7f5d84feba90"/>
        <function-ref name="isState" scoped="" ref="0x7f5d84febc20"/>
        <function-ref name="isIdle" scoped="" ref="0x7f5d84febdb0"/>
        <function-ref name="requestState" scoped="" ref="0x7f5d84fea020"/>
        <function-ref name="forceState" scoped="" ref="0x7f5d84fea1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f5d84fdcd70" loc="45:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f5d84fdcd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84fdb180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84fdb310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84fdb4a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84fdb630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84fdb7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d84fdf350" loc="40:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d84fdf350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84fdf6d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84fdf860"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84fdf9f0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84fdfb80"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84fdfd10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f5d84fdc020" loc="41:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f5d84fdc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f5d84fdc3a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f5d84fdc530"/>
        <function-ref name="getRetries" scoped="" ref="0x7f5d84fdc6c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f5d84fdc850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f5d84fdc9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7f5d84fd71c0" loc="44:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d84fd71c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f5d84fd7540"/>
        <function-ref name="noAck" scoped="" ref="0x7f5d84fd76d0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f5d84fd7860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f5d84fda410" loc="40:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f5d84fda410"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f5d84fda790"/>
        <function-ref name="setRetries" scoped="" ref="0x7f5d84fda920"/>
        <function-ref name="getRetries" scoped="" ref="0x7f5d84fdaab0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f5d84fdac40"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f5d84fdadd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f5d84fb7690" loc="59:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f5d84fb7690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d84fb7a10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f5d84fb8860" loc="58:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f5d84fb8860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84fb8be0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84fb8d70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84fb7020"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84fb71b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84fb7340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7f5d84fb5610" loc="62:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f5d84fb5610"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f5d84fb5990"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f5d84fb5b20"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f5d84fb5cb0"/>
        <function-ref name="syncDone" scoped="" ref="0x7f5d84fb5e40"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f5d84fb4020"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f5d84fb41b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f5d84fb4340"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f5d84fb44d0"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f5d84fb4660"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f5d84fb47f0"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f5d84fb4980"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f5d84fb4b10"/>
        <function-ref name="sync" scoped="" ref="0x7f5d84fb4ca0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f5d84fb3020"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f5d84fb31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f5d84fb98b0" loc="54:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f5d84fb98b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f5d84fb9c30"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f5d84fb9dc0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f5d84fb8020"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f5d84fb81b0"/>
        <function-ref name="setCca" scoped="" ref="0x7f5d84fb8340"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f5d84fb84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f5d84fbbce0" loc="53:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7f5d84fbbce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f5d84fb90a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7f5d84fb21f0" loc="64:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7f5d84fb21f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f5d84fb2570"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f5d84fb2700"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f5d84fb2890"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f5d84fb2a20"/>
        <function-ref name="setCca" scoped="" ref="0x7f5d84fb2bb0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f5d84fb2d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f5d84fbca80" loc="52:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d84fbca80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d84fbce00"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d84fbb020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84fbb1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84fbb340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d84fbb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f5d84fbf020" loc="48:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d84fbf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84fbf3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84fbf530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84fbf6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84fbf850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84fbf9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f5d84fbedf0" loc="50:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f5d84fbedf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d84fbd1c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f5d84fb7ce0" loc="60:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f5d84fb7ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f5d84fb60a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f5d84fb6230"/>
        <function-ref name="getRssi" scoped="" ref="0x7f5d84fb63c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f5d84fb6550"/>
        <function-ref name="getPower" scoped="" ref="0x7f5d84fb66e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f5d84fb6870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f5d84fb34d0" loc="63:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f5d84fb34d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f5d84fb3950"/>
        <function-ref name="changed" scoped="" ref="0x7f5d84fb3ae0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f5d84fb3c70"/>
        <function-ref name="setAddress" scoped="" ref="0x7f5d84fb3e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f5d84fb6b70" loc="61:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f5d84fb6b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84fb5020"/>
        <function-ref name="getHeader" scoped="" ref="0x7f5d84fb51b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f5d84fb5340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d84fbe210" loc="49:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d84fbe210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d84fbe590"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d84fb1d30" loc="67:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d84fb1d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d84fb00e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d84fb0270"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d84fb0400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d84fb0590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d84fb0720"/>
        <function-ref name="get" scoped="" ref="0x7f5d84fb08b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d84fb0a40"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d84faf1b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d84fb0bd0"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d84fb0d60"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d84faf020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f5d84fbd470" loc="51:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d84fbd470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d84fbd7f0"/>
        <function-ref name="source" scoped="" ref="0x7f5d84fbd980"/>
        <function-ref name="address" scoped="" ref="0x7f5d84fbdb10"/>
        <function-ref name="destination" scoped="" ref="0x7f5d84fbdca0"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d84fbde30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d84fbc020"/>
        <function-ref name="type" scoped="" ref="0x7f5d84fbc1b0"/>
        <function-ref name="setType" scoped="" ref="0x7f5d84fbc340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d84fbc4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d84fbc660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d84fbc7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioResource" ref="0x7f5d84fb10f0" loc="66:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioResource" scoped="" ref="0x7f5d84fb10f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d84fb1470"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d84fb1600"/>
        <function-ref name="request" scoped="" ref="0x7f5d84fb1790"/>
        <function-ref name="granted" scoped="" ref="0x7f5d84fb1920"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d84fb1ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f5d84f275c0" loc="46:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f5d84f275c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d84f27940"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d84f27ad0"/>
        <function-ref name="start" scoped="" ref="0x7f5d84f27c60"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84f27df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f5d84f24600" loc="47:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d84f24600"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84f24980"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84f24b10"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84f24ca0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84f24e30"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84f23020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f5d84f23e10" loc="49:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d84f23e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d84f211c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d84f21350"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84f214e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84f21670"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d84f21800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d84f23800" loc="48:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d84f23800"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d84f23b80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d84f1fb20" loc="53:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d84f1fb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d84f1e020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d84f1e1b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d84f1e340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d84f1e4d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d84f1e660"/>
        <function-ref name="get" scoped="" ref="0x7f5d84f1e7f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d84f1e980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d84f1d020"/>
        <function-ref name="set" scoped="" ref="0x7f5d84f1eb10"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d84f1eca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d84f1ee30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f5d84f1f1a0" loc="51:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d84f1f1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f5d84f1f520"/>
        <function-ref name="noAck" scoped="" ref="0x7f5d84f1f6b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f5d84f1f840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f5d84f21ab0" loc="50:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d84f21ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d84f21e30"/>
        <function-ref name="source" scoped="" ref="0x7f5d84f20020"/>
        <function-ref name="address" scoped="" ref="0x7f5d84f201b0"/>
        <function-ref name="destination" scoped="" ref="0x7f5d84f20340"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d84f204d0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d84f20660"/>
        <function-ref name="type" scoped="" ref="0x7f5d84f207f0"/>
        <function-ref name="setType" scoped="" ref="0x7f5d84f20980"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d84f20b10"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d84f20ca0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d84f20e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f5d84ec0120" loc="54:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f5d84ec0120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84ec04a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84ec0630"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84ec07c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84ec0950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84ec0ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f5d84ec0d70" loc="55:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f5d84ec0d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d84ebf180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f5d84ec4110" loc="47:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d84ec4110"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84ec44b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84ec4640"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84ec47d0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84ec4960"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84ec4af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f5d84ec2a40" loc="50:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d84ec2a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d84ec2dc0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d84ec1020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84ec11b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84ec1340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d84ec14d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d84ec4e70" loc="48:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d84ec4e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d84ec3240"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f5d84ec1720" loc="51:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d84ec1720"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f5d84ec1aa0"/>
        <function-ref name="noAck" scoped="" ref="0x7f5d84ec1c30"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f5d84ec1dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f5d84ec3490" loc="49:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d84ec3490"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d84ec3810"/>
        <function-ref name="source" scoped="" ref="0x7f5d84ec39a0"/>
        <function-ref name="address" scoped="" ref="0x7f5d84ec3b30"/>
        <function-ref name="destination" scoped="" ref="0x7f5d84ec3cc0"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d84ec3e50"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d84ec2020"/>
        <function-ref name="type" scoped="" ref="0x7f5d84ec21b0"/>
        <function-ref name="setType" scoped="" ref="0x7f5d84ec2340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d84ec24d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d84ec2660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d84ec27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f5d84ebb8d0" loc="50:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f5d84ebb8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d84ebbc50"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d84ebbde0"/>
        <function-ref name="start" scoped="" ref="0x7f5d84eb9020"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84eb91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d84eb8480" loc="52:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d84eb8480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f5d863744b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84eb8800"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84eb8990"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84eb8b20"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84eb8cb0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84eb8e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d84ebb280" loc="49:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d84ebb280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d84ebb600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d84eb9940" loc="51:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d84eb9940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f5d863744b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d84eb9cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d84eb6dc0" loc="56:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d84eb6dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d84eb5180"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d84eb5310"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d84eb54a0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d84eb5630"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d84eb57c0"/>
        <function-ref name="get" scoped="" ref="0x7f5d84eb5950"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d84eb5ae0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d84eb11b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d84eb5c70"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d84eb5e00"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d84eb1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7f5d84eb64a0" loc="55:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f5d84eb64a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f5d863744b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f5d84eb6820"/>
        <function-ref name="offset" scoped="" ref="0x7f5d84eb69b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f5d84eb6b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f5d84eae2f0" loc="66:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f5d84eae2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d84eae670"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d84eae800"/>
        <function-ref name="start" scoped="" ref="0x7f5d84eae990"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84eaeb20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7f5d84e47e40" loc="332:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x7f5d84e47e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d84e461e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d84e46370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f5d84e9d060" loc="74:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f5d84e9d060"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d84e9d3e0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84e9d570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7f5d84e7ed10" loc="191:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x7f5d84e7ed10"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d84e7d0e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d84e7d270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d84eb1c70" loc="65:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d84eb1c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d84eae020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7f5d84e9ac50" loc="75:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x7f5d84e9ac50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7f5d84e9c020"/>
        <function-ref name="flush" scoped="" ref="0x7f5d84e9c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7f5d84e49400" loc="322:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x7f5d84e49400"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d84e49780"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d84e49910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7f5d84e9e8e0" loc="72:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f5d84e9e8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f5d84e9ec60"/>
        <function-ref name="resetSend" scoped="" ref="0x7f5d84e9edf0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f5d84eab020"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f5d84eab1b0"/>
        <function-ref name="putData" scoped="" ref="0x7f5d84eab340"/>
        <function-ref name="putDone" scoped="" ref="0x7f5d84eab4d0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f5d84eab660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d84eab8e0" loc="73:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d84eab8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d84eabc60"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d84eabdf0"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d84ea3020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d84ea31b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d84ea3340"/>
        <function-ref name="get" scoped="" ref="0x7f5d84ea34d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d84ea3660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d84ea3ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d84ea37f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d84ea3980"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d84ea3b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7f5d84e420c0" loc="341:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f5d84e420c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d84e42440"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d84e425d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7f5d84ea7130" loc="67:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f5d84ea7130"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f5d84ea74b0"/>
        <function-ref name="nextByte" scoped="" ref="0x7f5d84ea7640"/>
        <function-ref name="startSend" scoped="" ref="0x7f5d84ea77d0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f5d84ea7960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7f5d84ea45c0" loc="68:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f5d84ea45c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f5d84ea4940"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f5d84ea4ad0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f5d84ea4c60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7f5d84d78c50" loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x7f5d84d78c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d84d77020"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d84d771b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d84d7d830" loc="51:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d84d7d830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f5d863744b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84d7dbd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84d7dd60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84d7c020"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84d7c1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84d7c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7f5d84d77480" loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x7f5d84d77480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d84d77800"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d84d77990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d84d7d110" loc="50:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d84d7d110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f5d863744b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d84d7d4b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7f5d84d7c760" loc="54:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x7f5d84d7c760"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f5d863744b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f5d84d7cb00"/>
        <function-ref name="offset" scoped="" ref="0x7f5d84d7cc90"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f5d84d7ce20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d84d79590" loc="57:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d84d79590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d84d79910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d84d79aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d84d79c30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d84d79dc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d84d78020"/>
        <function-ref name="get" scoped="" ref="0x7f5d84d781b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d84d78340"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d84d78980"/>
        <function-ref name="set" scoped="" ref="0x7f5d84d78660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d84d784d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d84d787f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7f5d84d7b9d0" loc="56:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f5d84d7b9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f5d84d7bd50"/>
        <function-ref name="nextByte" scoped="" ref="0x7f5d84d79020"/>
        <function-ref name="startSend" scoped="" ref="0x7f5d84d791b0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f5d84d79340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7f5d84d7b0e0" loc="55:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f5d84d7b0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f5d84d7b460"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f5d84d7b5f0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f5d84d7b780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7f5d84d68d20" loc="50:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f5d84d68d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84d710e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f5d84d71270"/>
        <function-ref name="receive" scoped="" ref="0x7f5d84d71400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f5d84d71590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f5d84d71720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f5d84d718b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84d71a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7f5d84d75b60" loc="48:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f5d84d75b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f5d84d72020"/>
        <function-ref name="resetSend" scoped="" ref="0x7f5d84d721b0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f5d84d72340"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f5d84d724d0"/>
        <function-ref name="putData" scoped="" ref="0x7f5d84d72660"/>
        <function-ref name="putDone" scoped="" ref="0x7f5d84d727f0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f5d84d72980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d84d71cc0" loc="51:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d84d71cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d84d700a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d84d70230"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d84d703c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d84d70550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d84d706e0"/>
        <function-ref name="get" scoped="" ref="0x7f5d84d70870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d84d70a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d84d651b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d84d70b90"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d84d70d20"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d84d65020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f5d84d49020" loc="6:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f5d84d49020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84d493a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f5d84d49530"/>
        <function-ref name="receive" scoped="" ref="0x7f5d84d496c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f5d84d49850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f5d84d4b890" loc="5:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f5d84d4b890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84d4bc10"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f5d84d4bda0"/>
        <function-ref name="receive" scoped="" ref="0x7f5d84d4a020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f5d84d4a1b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f5d84d4a340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f5d84d4a4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84d4a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f5d84d4b080" loc="4:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f5d84d4b080"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d84d4b400"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84d4b590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f5d84bb6c70" loc="45:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d84bb6c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f5d84bb5020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d84bb51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f5d84bb4440" loc="47:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f5d84bb4440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84bb47c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f5d84bb4950"/>
        <function-ref name="receive" scoped="" ref="0x7f5d84bb4ae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f5d84bb4c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f5d84bb3020" loc="49:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d84bb3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f5d84bb33a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f5d84bb5440" loc="46:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f5d84bb5440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84bb57c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f5d84bb5950"/>
        <function-ref name="receive" scoped="" ref="0x7f5d84bb5ae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f5d84bb5c70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f5d84bb5e00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f5d84bb4020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84bb41b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d84bb6020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d84bb6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d84bb63a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d84bb6530"/>
        <function-ref name="request" scoped="" ref="0x7f5d84bb66c0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d84bb6850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d84bb69e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f5d84d38a30" loc="42:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d84d38a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d84d38db0"/>
        <function-ref name="configure" scoped="" ref="0x7f5d84d37020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f5d84d34020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f5d84d34020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84d343a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f5d84d34530"/>
        <function-ref name="receive" scoped="" ref="0x7f5d84d346c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f5d84d34850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f5d84d32450" loc="47:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d84d32450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f5d84d327d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f5d84d37860" loc="43:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f5d84d37860"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84d37be0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f5d84d37d70"/>
        <function-ref name="receive" scoped="" ref="0x7f5d84d36020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f5d84d361b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f5d84d36340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f5d84d364d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84d36660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f5d84d331d0" loc="46:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f5d84d331d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d84d33550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d84d336e0"/>
        <function-ref name="request" scoped="" ref="0x7f5d84d33870"/>
        <function-ref name="granted" scoped="" ref="0x7f5d84d33a00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d84d33b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d84d397a0" loc="41:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d84d397a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d84d39b20"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d84d39cb0"/>
        <function-ref name="request" scoped="" ref="0x7f5d84d39e40"/>
        <function-ref name="granted" scoped="" ref="0x7f5d84d38020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d84d381b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f5d84d311d0" loc="48:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f5d84d311d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d84d31550"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d84d316e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f5d84cc6dc0" loc="47:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d84cc6dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d84cc4180"/>
        <function-ref name="configure" scoped="" ref="0x7f5d84cc4310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f5d84cc3890" loc="49:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f5d84cc3890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84cc3c30"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f5d84cc3dc0"/>
        <function-ref name="receive" scoped="" ref="0x7f5d84cc2020"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f5d84cc21b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f5d84cc13e0" loc="52:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d84cc13e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f5d84cc1780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f5d84cc1a50" loc="53:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f5d84cc1a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f5d84cc1dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f5d84cc0020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f5d84cc01b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f5d84cc0340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f5d84cc04d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f5d84cc0660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f5d84cc07f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f5d84cc0980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f5d84cc0b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f5d84cc0ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f5d84cc0e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f5d84cbf020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f5d84cbf1b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f5d84cbf440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f5d84cbf5d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f5d84cbf760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f5d84cbf8f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f5d84cbfa80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f5d84cbfc10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f5d84cbfda0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f5d84cbe020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f5d84cbe1b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f5d84cbe340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f5d84cbe4d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d84cbe660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f5d84cbe9f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f5d84cbeb80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f5d84cbed10"/>
        <function-ref name="tx" scoped="" ref="0x7f5d84cbd020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f5d84cbd1b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f5d84cbd340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f5d84cbd4d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f5d84cbd660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f5d84cbd7f0"/>
        <function-ref name="rx" scoped="" ref="0x7f5d84cbd980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f5d84cbdb10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f5d84cbdca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f5d84cbde30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f5d84cbc020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f5d84cbc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f5d84cc46d0" loc="48:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f5d84cc46d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84cc4a70"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f5d84cc4c00"/>
        <function-ref name="receive" scoped="" ref="0x7f5d84cc4d90"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f5d84cc3020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f5d84cc31b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f5d84cc3340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84cc34d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f5d84cbb020" loc="55:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d84cbb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d84cbbe30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d84cba800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d84cba340"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d84cbacc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f5d84cc25b0" loc="51:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f5d84cc25b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d84cc2950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d84cc2ae0"/>
        <function-ref name="request" scoped="" ref="0x7f5d84cc2c70"/>
        <function-ref name="granted" scoped="" ref="0x7f5d84cc2e00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d84cc1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d84cc6020" loc="46:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d84cc6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d84cc63c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d84cc6550"/>
        <function-ref name="request" scoped="" ref="0x7f5d84cc66e0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d84cc6870"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d84cc6a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f5d84cbc5b0" loc="54:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f5d84cbc5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d84cbc950"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d84cbcae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d84cb8120" loc="56:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d84cb8120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d84cb84a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d84cb8630"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d84cb87c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d84cb8950"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d84cb8ae0"/>
        <function-ref name="get" scoped="" ref="0x7f5d84cb8c70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d84cb8e00"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d84cb74d0"/>
        <function-ref name="set" scoped="" ref="0x7f5d84cb71b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d84cb7020"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d84cb7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f5d84ca9860" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d84ca9860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d84ca9be0"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d84ca9d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f5d84cac500" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f5d84cac500"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d84cac880"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84caca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f5d84cacd30" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d84cacd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f5d84caf0e0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f5d84caf270"/>
        <function-ref name="setUctl" scoped="" ref="0x7f5d84caf400"/>
        <function-ref name="enableUart" scoped="" ref="0x7f5d84caf590"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f5d84caf720"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f5d84caf8b0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f5d84cafa40"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f5d84cafbd0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f5d84cafd60"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f5d84cae020"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f5d84cae1b0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f5d84cae340"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f5d84cae4d0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f5d84cae760"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f5d84cae8f0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f5d84caea80"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f5d84caec10"/>
        <function-ref name="isUart" scoped="" ref="0x7f5d84caeda0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f5d84cab020"/>
        <function-ref name="isSpi" scoped="" ref="0x7f5d84cab1b0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f5d84cab340"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f5d84cab4d0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f5d84cab660"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f5d84cab7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d84cab980"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f5d84cabd10"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f5d84caa020"/>
        <function-ref name="setUbr" scoped="" ref="0x7f5d84caa1b0"/>
        <function-ref name="tx" scoped="" ref="0x7f5d84caa340"/>
        <function-ref name="getUctl" scoped="" ref="0x7f5d84caa4d0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f5d84caa660"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f5d84caa7f0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f5d84caa980"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f5d84caab10"/>
        <function-ref name="rx" scoped="" ref="0x7f5d84caaca0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f5d84caae30"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f5d84ca9020"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f5d84ca91b0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f5d84ca9340"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f5d84ca94d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f5d84c9b890" loc="66:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f5d84c9b890"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d84c9bc10"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d84c9bda0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d84c9a020"/>
        <function-ref name="clr" scoped="" ref="0x7f5d84c99c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d84c9a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d84c9a4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d84c9a660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d84c9a7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d84c9a980"/>
        <function-ref name="get" scoped="" ref="0x7f5d84c9ab10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d84c9aca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d84c9ae30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d84c99020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d84c992b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d84c99440"/>
        <function-ref name="set" scoped="" ref="0x7f5d84c995d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d84c99760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d84c9a1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d84c998f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d84c99a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f5d84ca0020" loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f5d84ca0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d84ca03a0"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d84ca0530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f5d84c98020" loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f5d84c98020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d84c983a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d84c98530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d84c986c0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d84c964d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d84c989e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d84c98b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d84c98d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d84c97020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d84c971b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d84c97340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d84c974d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d84c97660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d84c977f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d84c97a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d84c97c10"/>
        <function-ref name="set" scoped="" ref="0x7f5d84c97da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d84c96020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d84c98850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d84c961b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d84c96340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f5d84c96890" loc="68:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f5d84c96890"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d84c96c10"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d84c96da0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d84c95020"/>
        <function-ref name="clr" scoped="" ref="0x7f5d84c94c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d84c95340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d84c954d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d84c95660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d84c957f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d84c95980"/>
        <function-ref name="get" scoped="" ref="0x7f5d84c95b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d84c95ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d84c95e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d84c94020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d84c942b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d84c94440"/>
        <function-ref name="set" scoped="" ref="0x7f5d84c945d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d84c94760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d84c951b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d84c948f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d84c94a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f5d84ca53c0" loc="61:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f5d84ca53c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f5d84ca5740"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f5d84ca58d0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f5d84ca5a60"/>
        <function-ref name="enableUart" scoped="" ref="0x7f5d84ca5bf0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f5d84ca5d80"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f5d84ca4020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f5d84ca41b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f5d84ca4340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f5d84ca44d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f5d84ca4660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f5d84ca47f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f5d84ca4980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f5d84ca4b10"/>
        <function-ref name="getUbr" scoped="" ref="0x7f5d84ca4da0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f5d84ca3020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f5d84ca31b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f5d84ca3340"/>
        <function-ref name="isUart" scoped="" ref="0x7f5d84ca34d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f5d84ca3660"/>
        <function-ref name="isSpi" scoped="" ref="0x7f5d84ca37f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f5d84ca3980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f5d84ca3b10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f5d84ca3ca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f5d84ca3e30"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d84ca2020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f5d84ca23b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f5d84ca2540"/>
        <function-ref name="setUbr" scoped="" ref="0x7f5d84ca26d0"/>
        <function-ref name="tx" scoped="" ref="0x7f5d84ca2860"/>
        <function-ref name="getUctl" scoped="" ref="0x7f5d84ca29f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f5d84ca2b80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f5d84ca2d10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f5d84ca1020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f5d84ca11b0"/>
        <function-ref name="rx" scoped="" ref="0x7f5d84ca1340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f5d84ca14d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f5d84ca1660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f5d84ca17f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f5d84ca1980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f5d84ca1b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f5d84ca89c0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f5d84ca89c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d84ca8d40"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84ca5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f5d84c9d020" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f5d84c9d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d84c9d3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d84c9d530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d84c9d6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d84c9b4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d84c9d9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d84c9db70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d84c9dd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d84c9c020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d84c9c1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d84c9c340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d84c9c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d84c9c660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d84c9c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d84c9ca80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d84c9cc10"/>
        <function-ref name="set" scoped="" ref="0x7f5d84c9cda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d84c9b020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d84c9d850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d84c9b1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d84c9b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f5d84ca08f0" loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f5d84ca08f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d84ca0c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d84ca0e00"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d84c9f020"/>
        <function-ref name="clr" scoped="" ref="0x7f5d84c9ec10"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d84c9f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d84c9f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d84c9f660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f5d84c9f7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d84c9f980"/>
        <function-ref name="get" scoped="" ref="0x7f5d84c9fb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f5d84c9fca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d84c9fe30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f5d84c9e020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d84c9e2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f5d84c9e440"/>
        <function-ref name="set" scoped="" ref="0x7f5d84c9e5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d84c9e760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f5d84c9f1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d84c9e8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d84c9ea80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f5d84c167c0" loc="43:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d84c167c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f1c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d862f0020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d84c13620"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d84c12020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d84c13ae0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d84c124e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f5d84132a90" loc="43:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d84132a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f5d84132e10"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d84131020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f5d8412cbe0" loc="48:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d8412cbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d8412a020"/>
        <function-ref name="configure" scoped="" ref="0x7f5d8412a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f5d8412c440" loc="46:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d8412c440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d8412c7c0"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d8412c950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d84133e00" loc="42:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d84133e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d841321c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d84132350"/>
        <function-ref name="request" scoped="" ref="0x7f5d841324e0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d84132670"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d84132800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f5d84131a50" loc="45:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d84131a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f5d84131dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f5d84130020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f5d841301b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f5d84130340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f5d841304d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f5d84130660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f5d841307f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f5d84130980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f5d84130b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f5d84130ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f5d84130e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f5d8412f020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f5d8412f1b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f5d8412f440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f5d8412f5d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f5d8412f760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f5d8412f8f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f5d8412fa80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f5d8412fc10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f5d8412fda0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f5d8412e020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f5d8412e1b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f5d8412e340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f5d8412e4d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d8412e660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f5d8412e9f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f5d8412eb80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f5d8412ed10"/>
        <function-ref name="tx" scoped="" ref="0x7f5d8412d020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f5d8412d1b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f5d8412d340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f5d8412d4d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f5d8412d660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f5d8412d7f0"/>
        <function-ref name="rx" scoped="" ref="0x7f5d8412d980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f5d8412db10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f5d8412dca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f5d8412de30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f5d8412c020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f5d8412c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f5d841312b0" loc="44:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d841312b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d84131630"/>
        <function-ref name="userId" scoped="" ref="0x7f5d841317c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f5d84bf9510" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d84bf9510"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f5d84bf9890"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d84bf9a20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f5d84bf8af0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d84bf8af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d84bf8e70"/>
        <function-ref name="configure" scoped="" ref="0x7f5d84bf7030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f5d84bfc510" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f5d84bfc510"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d84bfc890"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d84bfca20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d84bfa280" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d84bfa280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d84bfa600"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d84bfa790"/>
        <function-ref name="request" scoped="" ref="0x7f5d84bfa920"/>
        <function-ref name="granted" scoped="" ref="0x7f5d84bfaab0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d84bfac40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f5d84bf9d20" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d84bf9d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d84bf80e0"/>
        <function-ref name="userId" scoped="" ref="0x7f5d84bf8270"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f5d84bf3120" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d84bf3120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d84bf34a0"/>
        <function-ref name="userId" scoped="" ref="0x7f5d84bf3630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f5d84bf6230" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f5d84bf6230"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d84bf65d0"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d84bf6760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f5d84bf5ad0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f5d84bf5ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d84bf5e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f5d84bf6b60" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f5d84bf6b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d84bf5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f5d84bf52f0" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f5d84bf52f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d84bf5670"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d84bf5800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f5d84beebd0" loc="59:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d84beebd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f5d84bed020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d84bed1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f5d84bec950" loc="64:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d84bec950"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d84beccf0"/>
        <function-ref name="configure" scoped="" ref="0x7f5d84bece80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f5d84bed400" loc="60:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d84bed400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d84bed780"/>
        <function-ref name="requested" scoped="" ref="0x7f5d84bed910"/>
        <function-ref name="granted" scoped="" ref="0x7f5d84bedaa0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d84bedc30"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d84beddc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d84befe30" loc="58:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d84befe30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d84bee210"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d84bee3a0"/>
        <function-ref name="request" scoped="" ref="0x7f5d84bee530"/>
        <function-ref name="granted" scoped="" ref="0x7f5d84bee6c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d84bee850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f5d84beb0f0" loc="65:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f5d84beb0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d84beb470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f5d84bec060" loc="61:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d84bec060"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d84bec3e0"/>
        <function-ref name="userId" scoped="" ref="0x7f5d84bec570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d840c6020" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d840c6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d840c63a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f5d840c6630" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f5d840c6630"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f5d840c69b0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f5d840c6b40"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f5d840c6cd0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f5d840c6e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f5d840c26c0" loc="99:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d840c26c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f5d840c2a60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d840c2bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f5d840c09d0" loc="105:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d840c09d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d840c0d70"/>
        <function-ref name="configure" scoped="" ref="0x7f5d840bf020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f5d840bf2b0" loc="106:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f5d840bf2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f5d840bf630"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f5d840bf7c0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f5d840bf950"/>
        <function-ref name="dequeue" scoped="" ref="0x7f5d840bfae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f5d840c2e40" loc="100:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d840c2e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d840c11e0"/>
        <function-ref name="requested" scoped="" ref="0x7f5d840c1370"/>
        <function-ref name="granted" scoped="" ref="0x7f5d840c1500"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d840c1690"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d840c1820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d840bfd30" loc="107:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d840bfd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d840be0e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d840be270"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d840be400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d840be590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d840be720"/>
        <function-ref name="get" scoped="" ref="0x7f5d840be8b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d840bea40"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d840bd1b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d840bed60"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d840bebd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d840bd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d840c3850" loc="98:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d840c3850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d840c3bf0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d840c3d80"/>
        <function-ref name="request" scoped="" ref="0x7f5d840c2020"/>
        <function-ref name="granted" scoped="" ref="0x7f5d840c21b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d840c2340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f5d840c02d0" loc="104:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f5d840c02d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d840c0650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f5d840c1a70" loc="101:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d840c1a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d840c1df0"/>
        <function-ref name="userId" scoped="" ref="0x7f5d840c0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f5d840bd480" loc="155:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f5d840bd480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d840bd800"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d840bd990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f5d84be6780" loc="72:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f5d84be6780"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f5d84be6b00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f5d84be6d50" loc="73:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d84be6d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d84bcf100"/>
        <function-ref name="requested" scoped="" ref="0x7f5d84bcf290"/>
        <function-ref name="granted" scoped="" ref="0x7f5d84bcf420"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d84bcf5b0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d84bcf740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7f5d84be6020" loc="70:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f5d84be6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d84be63a0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84be6530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f5d84bcf990" loc="74:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d84bcf990"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d84bcfd10"/>
        <function-ref name="userId" scoped="" ref="0x7f5d84bce020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f5d84088e00" loc="62:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f5d84088e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f5d840871c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f5d84087410" loc="63:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d84087410"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d84087790"/>
        <function-ref name="requested" scoped="" ref="0x7f5d84087920"/>
        <function-ref name="granted" scoped="" ref="0x7f5d84087ab0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d84087c40"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d84087dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7f5d840886a0" loc="60:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f5d840886a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d84088a20"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84088bb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f5d84086060" loc="64:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d84086060"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d840863e0"/>
        <function-ref name="userId" scoped="" ref="0x7f5d84086570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7f5d84baf8e0" loc="3:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d84baf8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f5d84bafc60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f5d84bad020" loc="4:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d84bad020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d84bad3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d84bad530"/>
        <function-ref name="request" scoped="" ref="0x7f5d84bad6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d84bad850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d84bad9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f5d84baf080" loc="2:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f5d84baf080"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d84baf400"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84baf590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7f5d84b9ca30" loc="47:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x7f5d84b9ca30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f5d84b9cdb0"/>
        <function-ref name="offset" scoped="" ref="0x7f5d84b99020"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f5d84b991b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f5d84b8b060" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="BaseStationC.TimerTramaTDMA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d84b8b060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d84b87630"/>
        <function-ref name="fired" scoped="" ref="0x7f5d84b8aac0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d84b88920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d84b884a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d84b86020"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d84b87ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d84b88020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d84b8bc50"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d84b87020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d84b8a170"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84b8a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f5d84b85b00" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="BaseStationC.TimerLeds"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d84b85b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d862f14d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d862f1840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d84b80110"/>
        <function-ref name="fired" scoped="" ref="0x7f5d84b825b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d84b814a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d84b81020"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d84b80a10"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d84b80590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d84b82a30"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d84b84750"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d84b81ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d84b84c20"/>
        <function-ref name="stop" scoped="" ref="0x7f5d84b82130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f5d84af2020" loc="49:../../../tos/system/AMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d84af2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84af23a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84af2530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84af26c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84af2850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84af29e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f5d84af2c30" loc="50:../../../tos/system/AMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d84af2c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d84af1020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d84af11b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84af1340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84af14d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d84af1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f5d84af18b0" loc="51:../../../tos/system/AMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d84af18b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d84af1c30"/>
        <function-ref name="source" scoped="" ref="0x7f5d84af1dc0"/>
        <function-ref name="address" scoped="" ref="0x7f5d84af0020"/>
        <function-ref name="destination" scoped="" ref="0x7f5d84af01b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d84af0340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d84af04d0"/>
        <function-ref name="type" scoped="" ref="0x7f5d84af0660"/>
        <function-ref name="setType" scoped="" ref="0x7f5d84af07f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d84af0980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d84af0b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d84af0ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f5d84aef020" loc="52:../../../tos/system/AMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f5d84aef020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f5d84aef3a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f5d84aef530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f5d84aef6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f5d84073920" loc="49:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d84073920"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84073ca0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84073e30"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84072020"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d840721b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84072340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f5d84072590" loc="50:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d84072590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d84072910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d84072aa0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84072c30"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84072dc0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d84071020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f5d84071270" loc="51:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d84071270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d840715f0"/>
        <function-ref name="source" scoped="" ref="0x7f5d84071780"/>
        <function-ref name="address" scoped="" ref="0x7f5d84071910"/>
        <function-ref name="destination" scoped="" ref="0x7f5d84071aa0"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d84071c30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d84071dc0"/>
        <function-ref name="type" scoped="" ref="0x7f5d84070020"/>
        <function-ref name="setType" scoped="" ref="0x7f5d840701b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d84070340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d840704d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d84070660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f5d840708f0" loc="52:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f5d840708f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f5d84070c70"/>
        <function-ref name="noAck" scoped="" ref="0x7f5d84070e00"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f5d8406f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f5d84066390" loc="44:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="BaseStationC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d84066390"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84066710"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d840668a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84066a30"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84066bc0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84066d50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f5d84065060" loc="46:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="BaseStationC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d84065060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d840653e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84065570"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84065700"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84065890"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84065a20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f5d84065c70" loc="47:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="BaseStationC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d84065c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d84064020"/>
        <function-ref name="source" scoped="" ref="0x7f5d840641b0"/>
        <function-ref name="address" scoped="" ref="0x7f5d84064340"/>
        <function-ref name="destination" scoped="" ref="0x7f5d840644d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d84064660"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d840647f0"/>
        <function-ref name="type" scoped="" ref="0x7f5d84064980"/>
        <function-ref name="setType" scoped="" ref="0x7f5d84064b10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d84064ca0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d84064e30"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d84063020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d84b59930" loc="43:../../../tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d84b59930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84b59cb0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84b59e40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84b56020"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84b561b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84b56340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f5d84b07400" loc="51:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d84b07400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84b077a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84b07930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84b07ac0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84b07c50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84b07de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d84b09df0" loc="47:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d84b09df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d84b081c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84b08350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84b084e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d84b08670"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d84b08800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f5d84b05720" loc="53:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d84b05720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d84b05aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d84b05c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84b05dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84b04020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d84b041b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBusy" ref="0x7f5d84b08b80" loc="48:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBusy" scoped="" ref="0x7f5d84b08b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBusy"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="busy" scoped="" ref="0x7f5d84b07020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f5d84b04480" loc="184:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="errorTask" scoped="" ref="0x7f5d84b04480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d84b04800"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d84b04990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f5d84b04c60" loc="140:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CancelTask" scoped="" ref="0x7f5d84b04c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d84b02020"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d84b021b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f5d84b06060" loc="52:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d84b06060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d84b063e0"/>
        <function-ref name="source" scoped="" ref="0x7f5d84b06570"/>
        <function-ref name="address" scoped="" ref="0x7f5d84b06700"/>
        <function-ref name="destination" scoped="" ref="0x7f5d84b06890"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d84b06a20"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d84b06bb0"/>
        <function-ref name="type" scoped="" ref="0x7f5d84b06d40"/>
        <function-ref name="setType" scoped="" ref="0x7f5d84b05020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d84b051b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d84b05340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d84b054d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f5d84ae5020" loc="46:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="BaseStationC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d84ae5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d84ae53a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d84ae5530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d84ae56c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d84ae5850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d84ae59e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d84ae6910" loc="45:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="BaseStationC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d84ae6910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d84ae6c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f5d84ae5c30" loc="47:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="BaseStationC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d84ae5c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d84ae4020"/>
        <function-ref name="source" scoped="" ref="0x7f5d84ae41b0"/>
        <function-ref name="address" scoped="" ref="0x7f5d84ae4340"/>
        <function-ref name="destination" scoped="" ref="0x7f5d84ae44d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d84ae4660"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d84ae47f0"/>
        <function-ref name="type" scoped="" ref="0x7f5d84ae4980"/>
        <function-ref name="setType" scoped="" ref="0x7f5d84ae4b10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d84ae4ca0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d84ae4e30"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d84ae3020"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f5d8641e560" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f5d86420190" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Platform" loc="51:../../../tos/interfaces/Platform.nc">
      <function command="" provided="0" name="jiffiesRawSize" ref="0x7f5d864167c0" loc="109:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="node_id" ref="0x7f5d86412660" loc="182:../../../tos/interfaces/Platform.nc">
        <documentation loc="164:../../../tos/interfaces/Platform.nc">
          <short>&#10; Platform dependent node id.</short>
          <long>&#10; Platform dependent node id.&#10;&#10; Get a Platform defined node id.  This will typically be a serial number&#10; or mac address.&#10;&#10; Platform define PLATFORM_SERIAL_NUM_SIZE determines the&#10; size.  If not defined defaults to 4 bytes (uint32_t).  But platforms&#10; really should define it to be clear.  (see platform.h)&#10;&#10; input:  *lenp      pointer where to place the length of the number.&#10;&#10; output: *lenp      length filled in if non-null.&#10; return: *uint8_t   pointer to the serial_num or NULL.&#10;&#10; a Node Id is assumed to be a sequence of bytes starting with the&#10; msb first.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lenp" ref="0x7f5d864123a0" loc="182:../../../tos/interfaces/Platform.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRawSize" ref="0x7f5d86419920" loc="79:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRaw" ref="0x7f5d86419190" loc="78:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesExpired" ref="0x7f5d86415610" loc="126:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f5d86415020" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f5d86415380" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIntPriority" ref="0x7f5d86414a60" loc="162:../../../tos/interfaces/Platform.nc">
        <documentation loc="153:../../../tos/interfaces/Platform.nc">
          <short>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.</short>
          <long>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.&#10;   modern computer hardware allows the assignment of different priorities&#10;   to interrupt sources.  This is inherently a platform thing.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="irq_number" ref="0x7f5d864147e0" loc="162:../../../tos/interfaces/Platform.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set_unaligned_traps" ref="0x7f5d864140b0" loc="150:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on_off" ref="0x7f5d86415dc0" loc="150:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesRaw" ref="0x7f5d86416020" loc="108:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="localTime" ref="0x7f5d8641c9c0" loc="64:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsExpired" ref="0x7f5d86418700" loc="95:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f5d86418110" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f5d86418470" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f5d863d55b0" loc="48:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f5d863d7870" loc="43:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f5d863d6e60" loc="47:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f5d863d7190" loc="42:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f5d863d6020" loc="45:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f5d863d9350" loc="40:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f5d863d9a30" loc="41:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f5d863d6740" loc="46:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f5d865457e0" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f5d8680d700"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f5d8646ba80" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f5d864691f0" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f5d8646b2b0" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f5d865e3020" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f5d86f83e80" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f5d868cbe20" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f5d868cb610" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f5d868bf770" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event.&#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f5d868bd020" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f5d86366110" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f5d86367e40" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f5d86364600" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f5d86364380" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f5d86367460" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f5d86366960" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f5d86314cd0" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
              <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d86314370" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f5d863146c0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d863149f0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f5d8630f020" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d86317c60" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f5d8630e110" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d8630fe10" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f5d8630a490" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d8630be50" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d8630a1c0" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f5d8630b560" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f5d8630d5e0" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d8630d020" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d8630d350" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <function command="" provided="0" name="send" ref="0x7f5d8631fd90" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d86375090"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f5d8631f440" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d86375090"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f5d8631f7c0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d8631faf0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f5d8631a620" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d8631a020" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d8631a350" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f5d863196d0" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f5d8631c2a0" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d8631c020" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f5d8631b7f0" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d8631b210" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f5d8631b560" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d862f0dd0" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d862f0dd0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f5d862e8c10" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f5d862ec420" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f5d862e92b0" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f5d862ebbd0" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f5d862e9020" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f5d862eb420" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f5d862e7c60" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f5d862e73e0" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f5d862ecc00" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f5d862ee970" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f5d862ee6f0" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f5d862e82b0" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f5d862e9c50" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f5d862e8020" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f5d862ed4d0" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f5d862ed250" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f5d862edcd0" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f5d862d7570" loc="61:../../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f5d862d7d20" loc="67:../../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f5d862d6540" loc="72:../../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f5d862d54d0" loc="83:../../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f5d862d4c20" loc="100:../../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f5d862d2480" loc="117:../../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f5d862d6cd0" loc="77:../../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f5d862d1020" loc="134:../../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f5d862d2d70" loc="134:../../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f5d862d8db0" loc="56:../../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f5d862d5cb0" loc="89:../../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f5d862d4470" loc="94:../../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f5d862fa040" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f5d86377c80"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d862fbd90" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f5d86304bc0" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f5d86375090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d86304940" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f5d86306020" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f5d86375090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f5d86306ae0" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f5d86375090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d86306860" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f5d86301600" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d86375090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d86301020" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f5d86301370" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d86375090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f5d86303020" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d86375090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d863029e0" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f5d86302d30" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d86375090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f5d862fdae0" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d862fd860" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f5d862fce60" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d862fc8b0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f5d862fcbd0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f5d863778a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f5d862ff890" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d862ff610" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f5d862f9600" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f5d86377c80"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d862f9020" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f5d862f9370" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f5d86377c80"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f5d862f8490" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f5d86377c80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f5d86240e30" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f5d8623e5c0" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f5d86240020" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f5d8623d480" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f5d86240720" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f5d8623ece0" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f5d86241120" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f5d862417f0" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f5d86213020" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f5d86213770" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f5d8620e2e0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f5d8620e060" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullUp" ref="0x7f5d8620dd30" loc="126:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f5d86216770" loc="59:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f5d86212780" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f5d8620c520" loc="134:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="129:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDriveStrength" ref="0x7f5d8620b020" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="136:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short> &#10; Set port drive strength.</short>
          <long> &#10; Set port drive strength.&#10; @param mode: MSP430_PORT_DRIVE_STRENGTH_*&#10; @return EINVAL if invalid mode or pin doesn't support drive&#10;     strength config.&#10; FAIL if pin is not an output&#10; SUCCESS if pin supports it, is an output, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f5d8620cd70" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f5d86212020" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f5d86215820" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getDriveStrength" ref="0x7f5d8620b910" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get drive strength.</short>
          <long>&#10; Get drive strength.&#10; @return MSP430_PORT_DRIVE_STRENGTH_*&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f5d86210020" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullDown" ref="0x7f5d8620d5f0" loc="125:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f5d86215020" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorOff" ref="0x7f5d8620eb80" loc="124:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; set resistor mode directly.</short>
          <long>&#10; set resistor mode directly.&#10;&#10; You have to know what you are doing when you use these.  These routines&#10; assume that the port is set for input (PxDIR).  The routines explicitly&#10; change the value of the bits setting in PxOUT.&#10;&#10; The advantage of using these routines is efficiency because there is no&#10; mode checking.  In addition, no error check is done to make sure that the&#10; port is in input mode.  The thing is, first, this is something that you&#10; get right once and then it doesn't change so why check and, second no&#10; one actually checks the error return because there really isn't any&#10; point to doing the check because this isn't something you actually need&#10; to check the return code for.  So why have one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f5d86219850" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="46:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f5d86211020" loc="91:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f5d862107c0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f5d862117e0" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f5d86216020" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d85f64020" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d85f64020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f5d85f64260" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d85f64260"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x7f5d85f620b0" loc="63:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d85f64260"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f63e00" loc="63:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7f5d85f612a0" loc="70:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f61020" loc="70:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x7f5d85f64e20" loc="49:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f64ba0" loc="49:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f5d85f5f610" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d85f64260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f5f020" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f5d85f5f380" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d85f64260"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x7f5d85f52680" loc="65:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f52060" loc="65:../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x7f5d85f523f0" loc="65:../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x7f5d85f51850" loc="71:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f515d0" loc="71:../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x7f5d85f53810" loc="57:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x7f5d85f58d60" loc="52:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x7f5d85f58ae0" loc="52:../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f5d85f692e0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f69060" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f5d85f68510" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f68290" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f5d85f67680" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f67400" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioBackoff" loc="54:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <short>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.</short>
        <long>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.  &#10; &#10; This is because of fan-out issues with multiple components wanting to&#10; affect backoffs for whatever they're interested in:&#10; If you signal out an *event* to request an initial backoff and&#10; several components happen to be listening, then those components&#10; would be required to return a backoff value.  We don't want that&#10; behavior.&#10; With this strategy, components can listen for the requests and then&#10; decide if they want to affect the behavior.  If the component wants to&#10; affect the behavior, it calls back using the setXYZBackoff(..) command.&#10; If several components call back, then the last component to get its &#10; word in has the final say. &#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="requestCca" ref="0x7f5d85f29520" loc="95:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="90:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on whether or not to use CCA on the outbound packet.</short>
          <long>&#10; Request for input on whether or not to use CCA on the outbound packet.&#10; Replies should come in the form of setCca(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f292a0" loc="95:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestInitialBackoff" ref="0x7f5d85f2c780" loc="81:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="76:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; </short>
          <long>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f2c500" loc="81:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCongestionBackoff" ref="0x7f5d85f2fe70" loc="66:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="62:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestCongestionBackoff event&#10; </short>
          <long>&#10; Must be called within a requestCongestionBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f5d85f2fbf0" loc="66:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInitialBackoff" ref="0x7f5d85f2f350" loc="60:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="56:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestInitialBackoff event&#10; </short>
          <long>&#10; Must be called within a requestInitialBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f5d85f2f0d0" loc="60:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCca" ref="0x7f5d85f2d8d0" loc="73:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="68:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Enable CCA for the outbound packet.</short>
          <long>&#10; Enable CCA for the outbound packet.  Must be called within a requestCca&#10; event&#10; @param ccaOn TRUE to enable CCA, which is the default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ccaOn" ref="0x7f5d85f2d650" loc="73:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestCongestionBackoff" ref="0x7f5d85f2b690" loc="88:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="83:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; </short>
          <long>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f2b410" loc="88:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x7f5d85f1ee60" loc="59:../../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d86375090"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7f5d85f1e850" loc="59:../../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d86375090"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f5d85f1ebd0" loc="59:../../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Packet" loc="40:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <function command="" provided="0" name="setPower" ref="0x7f5d85f38120" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="49:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Set transmission power for a given packet.</short>
          <long>&#10; Set transmission power for a given packet. Valid ranges are&#10; between 0 and 31.&#10;&#10; @param p_msg the message.&#10; @param power transmission power.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f5d85f3aae0" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="power" ref="0x7f5d85f3ae30" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setNetwork" ref="0x7f5d85f34710" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f5d85f34110" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="networkId" ref="0x7f5d85f34480" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRssi" ref="0x7f5d85f38c00" loc="64:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="58:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get rssi value for a given packet.</short>
          <long>&#10; Get rssi value for a given packet. For received packets, it is&#10; the received signal strength when receiving that packet. For sent&#10; packets, it is the received signal strength of the ack if an ack&#10; was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="signed char" size="I:1" alignment="I:1">
            <typename><typedef-ref name="int8_t" ref="0x7f5d86f77110"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f5d85f38980" loc="64:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNetwork" ref="0x7f5d85f36620" loc="75:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f5d85f363a0" loc="75:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPower" ref="0x7f5d85f3a2e0" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="42:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get transmission power setting for current packet.</short>
          <long>&#10; Get transmission power setting for current packet.&#10;&#10; @param the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f5d85f3a060" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLqi" ref="0x7f5d85f37760" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="66:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get lqi value for a given packet.</short>
          <long>&#10; Get lqi value for a given packet. For received packets, it is the&#10; link quality indicator value when receiving that packet. For sent&#10; packets, it is the link quality indicator value of the ack if an&#10; ack was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f5d85f374e0" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x7f5d85f226c0" loc="65:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f22440" loc="65:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x7f5d85f26790" loc="46:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f26170" loc="46:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x7f5d85f26500" loc="46:../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x7f5d85f23680" loc="59:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f23400" loc="59:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x7f5d85f25b90" loc="53:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f25570" loc="53:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x7f5d85f25900" loc="53:../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x7f5d85f216c0" loc="71:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f21440" loc="71:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x7f5d85f312a0" loc="47:../../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f31020" loc="47:../../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f5d85f102b0" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f13c40" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d85f10020" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f5d85f0c890" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f0c290" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d85f0c5c0" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f5d85f0b9b0" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f5d85f0f5f0" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f0f370" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f5d85f0eac0" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85f0e4e0" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f5d85f0e830" loc="100:../../../tos/interfaces/Send.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f5d85f14120" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.&#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource&#10;&#10; @note This command should never be called between putting in a request&#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event,&#10;       we have opted to keep thing simple and warn you about the potential&#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f5d85f15120" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f5d85f16770" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f5d85f15910" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f5d85f14b70" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Transmit" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <short>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f5d85eeb3a0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send a message&#10;&#10; </short>
          <long>&#10; Send a message&#10;&#10; @param p_msg message to send.&#10; @param useCca TRUE if this Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f5d85eefdc0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="useCca" ref="0x7f5d85eeb110" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f5d85ee96a0" loc="65:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="60:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Cancel sending of the message.</short>
          <long>&#10; Cancel sending of the message.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="modify" ref="0x7f5d85ee7e70" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="75:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Modify the contents of a packet.</short>
          <long>&#10; Modify the contents of a packet. This command can only be used&#10; when an SFD capture event for the sending packet is signalled.&#10;&#10; @param offset in the message to start modifying.&#10; @param buf to data to write&#10; @param len of bytes to write&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f5d85ee7060" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f5d85ee78a0" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d85ee7bd0" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f5d85ee8840" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="67:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Signal that a message has been sent&#10;&#10; </short>
          <long>&#10; Signal that a message has been sent&#10;&#10; @param p_msg message to send.&#10; @param error notifaction of how the operation went.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f5d85ee8260" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f5d85ee85b0" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resend" ref="0x7f5d85eebe30" loc="58:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send the previous message again&#10; </short>
          <long>&#10; Send the previous message again&#10; @param useCca TRUE if this re-Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="useCca" ref="0x7f5d85eebbb0" loc="58:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../../tos/interfaces/Random.nc">
      <documentation loc="34:../../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7f5d85ee20e0" loc="52:../../../tos/interfaces/Random.nc">
        <documentation loc="48:../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 16-bit pseudorandom number.</short>
          <long> &#10; Produces a 16-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7f5d85ee5870" loc="46:../../../tos/interfaces/Random.nc">
        <documentation loc="42:../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f5d85ef5a40" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f5d85eed270" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420PacketBody" loc="37:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <short>&#10; Internal interface for the CC2420 to get portions of a packet.</short>
        <long>&#10; Internal interface for the CC2420 to get portions of a packet.&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="getPayload" ref="0x7f5d85edc2e0" loc="49:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="45:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the payload region of the message, after any headers&#10;    works with extended addressing mode&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85edc020" loc="49:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getHeader" ref="0x7f5d85edd710" loc="42:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="39:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_header_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_header" ref="0x7f5d86360950"/>
              <typename><typedef-ref name="cc2420_header_t" ref="0x7f5d8635d390"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85edd410" loc="42:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMetadata" ref="0x7f5d85eda620" loc="53:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="50:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_metadata_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_metadata" ref="0x7f5d8635de50"/>
              <typename><typedef-ref name="cc2420_metadata_t" ref="0x7f5d8635b7e0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85eda320" loc="53:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Power" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio power operations (e.g. voltage&#10; regulator, oscillator, etc). However, it does not include&#10; transmission power, see the CC2420Config interface.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="startOscillator" ref="0x7f5d85ef36e0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="65:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the oscillator.</short>
          <long>&#10; Start the oscillator. On SUCCESS, &#60;code>startOscillator&#60;/code>&#10; will be signalled when the oscillator has been started.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rfOff" ref="0x7f5d85ef1840" loc="97:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="92:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Disable RX.</short>
          <long>&#10; Disable RX.&#10;&#10; @return SUCCESS if receive mode has been disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxOn" ref="0x7f5d85ef1070" loc="90:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="85:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Enable RX.</short>
          <long>&#10; Enable RX.&#10;&#10; @return SUCCESS if receive mode has been enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startVReg" ref="0x7f5d85ef7e20" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the voltage regulator on the CC2420.</short>
          <long>&#10; Start the voltage regulator on the CC2420. On SUCCESS,&#10; &#60;code>startVReg()&#60;/code> will be signalled when the voltage&#10; regulator is fully on.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopVReg" ref="0x7f5d85ef4e80" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="58:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the voltage regulator immediately.</short>
          <long>&#10; Stop the voltage regulator immediately.&#10;&#10; @return SUCCESS always&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startOscillatorDone" ref="0x7f5d85ef2020" loc="76:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="73:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the oscillator has been started.</short>
          <long>&#10; Signals that the oscillator has been started.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopOscillator" ref="0x7f5d85ef2840" loc="83:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="78:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the oscillator.</short>
          <long>&#10; Stop the oscillator.&#10;&#10; @return SUCCESS if the oscillator was stopped, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startVRegDone" ref="0x7f5d85ef46c0" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the voltage regulator has been started.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="State" loc="38:../../../tos/interfaces/State.nc">
      <documentation loc="33:../../../tos/interfaces/State.nc">
        <short>&#10; State machine interface&#10; </short>
        <long>&#10; State machine interface&#10; @author David Moss - dmm@rincon.com&#10;</long>
      </documentation>
      <function command="" provided="0" name="getState" ref="0x7f5d85ed5d00" loc="71:../../../tos/interfaces/State.nc">
        <documentation loc="68:../../../tos/interfaces/State.nc">
          <short>&#10; Get the current state&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toIdle" ref="0x7f5d85ed7350" loc="56:../../../tos/interfaces/State.nc">
        <documentation loc="53:../../../tos/interfaces/State.nc">
          <short>&#10; Set the current state back to S_IDLE&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isState" ref="0x7f5d85ed5530" loc="66:../../../tos/interfaces/State.nc">
        <documentation loc="63:../../../tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in the given state&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="myState" ref="0x7f5d85ed52b0" loc="66:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isIdle" ref="0x7f5d85ed7ac0" loc="61:../../../tos/interfaces/State.nc">
        <documentation loc="58:../../../tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in S_IDLE&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requestState" ref="0x7f5d85ed8020" loc="45:../../../tos/interfaces/State.nc">
        <documentation loc="40:../../../tos/interfaces/State.nc">
          <short>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.</short>
          <long>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.&#10; @return SUCCESS if the state is change, FAIL if it isn't&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7f5d85ee0c90" loc="45:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="forceState" ref="0x7f5d85ed8ad0" loc="51:../../../tos/interfaces/State.nc">
        <documentation loc="47:../../../tos/interfaces/State.nc">
          <short>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.</short>
          <long>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7f5d85ed8850" loc="51:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Config" loc="46:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio configurations. All get() and set()&#10; commands are single-phase. After setting some values, a call to&#10; sync() is required for the changes to propagate to the cc2420&#10; hardware chip. This interface allows setting multiple parameters&#10; before calling sync().&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/06/16 15:33:32 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="setAutoAck" ref="0x7f5d85e7a870" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="100:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync must be called for acknowledgement changes to take effect&#10; </short>
          <long>&#10; Sync must be called for acknowledgement changes to take effect&#10; @param enableAutoAck TRUE to enable auto acknowledgements&#10; @param hwAutoAck TRUE to default to hardware auto acks, FALSE to&#10;     default to software auto acknowledgements&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAutoAck" ref="0x7f5d85e7a290" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </variable>
          <variable name="hwAutoAck" ref="0x7f5d85e7a5e0" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAddressRecognitionEnabled" ref="0x7f5d85e7b1f0" loc="93:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="90:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddressRecognition" ref="0x7f5d85e7c880" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="81:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @param enableAddressRecognition TRUE to turn address recognition on&#10; @param useHwAddressRecognition TRUE to perform address recognition first&#10;     in hardware. This doesn't affect software address recognition. The&#10;     driver must sync with the chip after changing this value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAddressRecognition" ref="0x7f5d85e7c210" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </variable>
          <variable name="useHwAddressRecognition" ref="0x7f5d85e7c5f0" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="syncDone" ref="0x7f5d85e83c10" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f5d85e83990" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAddressRecognitionDefault" ref="0x7f5d85e7ba70" loc="98:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="95:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is performed first in hardware.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShortAddr" ref="0x7f5d85e7f730" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f5d85e7f4b0" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f5d85e82d30" loc="61:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f5d85e82ab0" loc="61:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAutoAckEnabled" ref="0x7f5d85e79ae0" loc="117:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="114:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if auto acks are enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPanAddr" ref="0x7f5d85e7e9c0" loc="78:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f5d85e7e740" loc="78:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAutoAckDefault" ref="0x7f5d85e792b0" loc="112:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="108:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if hardware auto acks are the default, FALSE if software&#10;     acks are the default&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getExtAddr" ref="0x7f5d85e804d0" loc="66:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="63:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Get the long address of the radio: set in hardware&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7f5d85f57ac0"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7f5d85f4d240"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShortAddr" ref="0x7f5d85e80cc0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="68:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the short address of the radio.</short>
          <long>&#10; Change the short address of the radio.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sync" ref="0x7f5d85e831f0" loc="54:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="48:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync configuration changes with the radio hardware.</short>
          <long>&#10; Sync configuration changes with the radio hardware. This only&#10; applies to set commands below.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f5d85e82390" loc="60:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the channel of the radio, between 11 and 26&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPanAddr" ref="0x7f5d85e7e020" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="74:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the PAN address of the radio.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../../tos/interfaces/Read.nc">
      <documentation loc="33:../../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10;&#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f5d85e764a0" loc="49:../../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f5d85e764a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7f5d85e76d60" loc="55:../../../tos/interfaces/Read.nc">
        <documentation loc="50:../../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10;&#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f5d85e73ac0" loc="63:../../../tos/interfaces/Read.nc">
        <documentation loc="57:../../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f5d85e764a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f5d85e73510" loc="63:../../../tos/interfaces/Read.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </variable>
          <variable name="val" ref="0x7f5d85e73830" loc="63:../../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f5d85e764a0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Register" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
      <documentation loc="33:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <short>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio.</short>
        <long>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio. The return values (when appropriate) refer to the&#10; status byte returned on the CC2420 SO pin. A full list of RW&#10; registers can be found on page 61 of the CC2420 datasheet (rev&#10; 1.2). Page 25 of the same document describes the protocol for&#10; interacting with these registers over the CC2420 SPI bus.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f5d85e4ac10" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="49:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Read a 16-bit data word from the register.</short>
          <long>&#10; Read a 16-bit data word from the register.&#10;&#10; @param data pointer to place the register value.&#10; @return status byte from the read.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f5d86368a70"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d85e4a990" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f5d85e48710" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Write a 16-bit data word to the register.</short>
          <long>&#10; Write a 16-bit data word to the register.&#10; &#10; @param data value to write to register.&#10; @return status byte from the write.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f5d86368a70"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d85e48490" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalIeeeEui64" loc="43:../../../tos/interfaces/LocalIeeeEui64.nc">
      <documentation loc="39:../../../tos/interfaces/LocalIeeeEui64.nc">
        <short>&#10; Interface to read the 64-bit IEEE EUI.</short>
        <long>&#10; Interface to read the 64-bit IEEE EUI.&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="getId" ref="0x7f5d85e69c50" loc="48:../../../tos/interfaces/LocalIeeeEui64.nc">
        <documentation loc="44:../../../tos/interfaces/LocalIeeeEui64.nc">
          <short>&#10; Get the 64-bit IEEE EUI.</short>
          <long>&#10; Get the 64-bit IEEE EUI.&#10; @returns the 64-bit IEEE EUI type, defined in tos/types/IeeeEui64.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalIeeeEui64"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7f5d85f57ac0"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7f5d85f4d240"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d85e65020" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d85e65020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f5d85e65260" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d85e65260"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f5d85e61e00" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d85e65260"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f5d85e64e40" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f5d85e61460" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d85e65260"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d85e65260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f5d85e62e60" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d85e65260"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f5d85e611d0" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d85e65260"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f5d85e62640" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f5d85e60620" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d85e65260"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f5d85e65dc0" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d85e65260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f5d85e65b40" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d85e65260"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f5d85e64680" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x7f5d85e52560" loc="50:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f5d86375090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x7f5d85e514f0" loc="60:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x7f5d85e52d40" loc="55:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f5d86377c80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x7f5d85e53cd0" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f5d86377c80"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d86375090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x7f5d85e536f0" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f5d86377c80"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7f5d85e53a40" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d86375090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Strobe" loc="44:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
      <documentation loc="33:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <short>&#10; Interface representing one of the CC2420 command strobe registers.</short>
        <long>&#10; Interface representing one of the CC2420 command strobe registers.&#10; Writing to one of these registers enacts a command on the CC2420,&#10; such as power-up, transmission, or clear a FIFO.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="strobe" ref="0x7f5d85e45e40" loc="53:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <documentation loc="46:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
          <short>&#10; Send a command strobe to the register.</short>
          <long>&#10; Send a command strobe to the register. The return value is the&#10; CC2420 status register. Table 5 on page 27 of the CC2420&#10; datasheet (v1.2) describes the contents of this register.&#10; &#10; @return Status byte from the CC2420.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Strobe"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f5d86368a70"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Ram" loc="41:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <short>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f5d85e4ee80" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="43:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Read data from a RAM.</short>
          <long>&#10; Read data from a RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f5d86368a70"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f5d85e4e020" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f5d85e4e890" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f5d85e4ebe0" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f5d85e4c610" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="54:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Write data to RAM.</short>
          <long>&#10; Write data to RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f5d86368a70"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f5d85e4d770" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f5d85e4c020" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f5d85e4c370" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="43:../../../tos/interfaces/GpioInterrupt.nc">
      <documentation loc="34:../../../tos/interfaces/GpioInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.5 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f5d85e55c30" loc="68:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="63:../../../tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f5d85e55470" loc="61:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="56:../../../tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; </short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0x7f5d85e57ce0" loc="54:../../../tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0x7f5d85e57420" loc="53:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:../../../tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f5d85d8a560" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f5d85d89020" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f5d85d8ac60" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f5d85d89a00" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f5d85d89780" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f5d85d87410" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f5d85d87190" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f5d85d87b00" loc="46:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f5d85d983e0" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f5d85d97c60" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f5d85d979e0" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f5d85d98b10" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f5d85d9c650" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f5d85d97270" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f5d85d9b570" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f5d85d99cc0" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f5d85d9cde0" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f5d85d9bc80" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f5d85d995c0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f5d85d99340" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f5d85d956a0" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f5d85d95420" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f5d85d8fbc0" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10;&#10; It has a predefined idea of what mode that capture should occur in.&#10; If that doesn't work for you, use setControl.&#10;&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; @param ccis configures which input channel to use.&#10;&#10; Msp430Timer.h has convenience definitions:&#10;&#10;     MSP430TIMER_CM_NONE,            MSP430TIMER_CCI_A&#10;     MSP430TIMER_CM_RISING,          MSP430TIMER_CCI_B&#10;     MSP430TIMER_CM_FALLING,         MSP430TIMER_CCI_GND&#10;     MSP430TIMER_CM_BOTH             MSP430TIMER_CCI_VCC&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f5d85d8f5f0" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
          <variable name="ccis" ref="0x7f5d85d8f930" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f5d85d9db60" loc="41:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f5d863cce70"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f5d863cb8e0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f5d85d8e5c0" loc="76:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f5d85d8d4d0" loc="78:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f5d85d91d30" loc="56:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short>&#10; Sets the time in compare mode.</short>
          <long>&#10; Sets the time in compare mode.&#10;&#10; setControlAsCompare has a predefined, hardcoded idea of&#10; how the control register should be set for doing a compare.&#10;&#10; Your mileage may vary and this may not work for you.   In&#10; which case you set use setControl.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f5d85d8ed00" loc="77:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f5d85d92350" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f5d85d92ae0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f5d85d915a0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f5d863cce70"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f5d863cb8e0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f5d85d91320" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f5d863cce70"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f5d863cb8e0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f5d85d75020" loc="45:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="42:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f5d85d736a0" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="76:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f5d85d73420" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f5d85d722a0" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="87:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f5d85d72020" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f5d85d74c10" loc="74:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="71:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f5d85d74350" loc="69:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="59:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f5d85d759d0" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f5d85d75750" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f5d85d481f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d85bf8e10" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d85bf8e10"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f5d85bf3070" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d85bf3070"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f5d85bf3990" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return counter value.</short>
          <long>&#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d85bf3070"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f5d85bf2ad0" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f5d85bf2270" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f5d85bf1270" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x7f5d85b20190" loc="54:../../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f5d85b1f350" loc="66:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f5d85b20b30" loc="61:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f5d85b208b0" loc="61:../../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x7f5d85b298f0" loc="53:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Interrupt" loc="39:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
      <documentation loc="34:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f5d85afb5a0" loc="54:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="51:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.</short>
          <long> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f5d85af7020" loc="85:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port.</short>
          <long>&#10; Signalled when an interrupt occurs on a port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f5d85afcdc0" loc="49:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="46:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Disables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Disables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0x7f5d85af86d0" loc="80:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Sets whether the edge should be high to low or low to high.</short>
          <long>&#10; Sets whether the edge should be high to low or low to high.&#10;&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition.&#10;&#10; DEPRECATED.&#10;&#10; The if generates extra code that doesn't need to be there.   Replaced&#10; by edge{Rising,Falling}();&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0x7f5d85af8450" loc="80:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="edgeFalling" ref="0x7f5d85afad30" loc="67:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x7f5d85afc620" loc="44:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Enables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Enables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edgeRising" ref="0x7f5d85afa5d0" loc="66:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="63:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Sets rising or falling edge for the interrupt generation&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x7f5d85afbda0" loc="61:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="56:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Gets the current input value of a port.</short>
          <long> &#10; Gets the current input value of a port.&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ChipSpiResource" loc="17:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
      <documentation loc="2:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <short>&#10; Interface for the SPI resource for an entire chip.</short>
        <long>&#10; Interface for the SPI resource for an entire chip.  The chip accesses&#10; the platform SPI resource one time, but can have multiple clients &#10; using the SPI bus on top.  When all of the clients are released, the&#10; chip will normally try to release itself from the platforms SPI bus.&#10; In some cases, this isn't desirable - so even though upper components&#10; aren't actively using the SPI bus, they can tell the chip to hold onto&#10; it so they can have immediate access when they need. &#10;&#10; Any component that aborts a release MUST attempt the release at a later&#10; time if they don't acquire and release the SPI bus naturally after the&#10; abort.&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="releasing" ref="0x7f5d859a5810" loc="24:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="19:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; The SPI bus is about to be automatically released.</short>
          <long>&#10; The SPI bus is about to be automatically released.  Modules that aren't&#10; using the SPI bus but still want the SPI bus to stick around must call&#10; abortRelease() within the event.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="abortRelease" ref="0x7f5d859a40e0" loc="31:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="27:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Abort the release of the SPI bus.</short>
          <long>&#10; Abort the release of the SPI bus.  This must be called only with the&#10; releasing() event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="attemptRelease" ref="0x7f5d859a4920" loc="39:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="33:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Release the SPI bus if there are no objections&#10; </short>
          <long>&#10; Release the SPI bus if there are no objections&#10; @return SUCCESS if the SPI bus is released from the chip.&#10;      FAIL if the SPI bus is already in use.&#10;      EBUSY if some component aborted the release.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Fifo" loc="40:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <short>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="continueRead" ref="0x7f5d8597d420" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Continue reading from the FIFO without having to send the address&#10; byte again.</short>
          <long>&#10; Continue reading from the FIFO without having to send the address&#10; byte again. The &#60;code>readDone&#60;/code> event will be signalled&#10; upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d8597ee10" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f5d8597d190" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="writeDone" ref="0x7f5d85978700" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="84:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a write operation.</short>
          <long>&#10; Signals the completion of a write operation.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes written.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d85979d90" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f5d85978110" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f5d85978460" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f5d85979020" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="73:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start writing the FIFO.</short>
          <long>&#10; Start writing the FIFO. The &#60;code>writeDone&#60;/code> event will be&#10; signalled upon completion.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f5d86368a70"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d8597a970" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f5d8597acc0" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="beginRead" ref="0x7f5d8597e020" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="42:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start reading from the FIFO.</short>
          <long>&#10; Start reading from the FIFO. The &#60;code>readDone&#60;/code> event will&#10; be signalled upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f5d86368a70"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d8597f9d0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f5d8597fd20" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f5d8597cb90" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="64:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a read operation.</short>
          <long>&#10; Signals the completion of a read operation.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes read.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d8597c250" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f5d8597c5a0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f5d8597c8f0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="60:../../../tos/interfaces/SpiPacket.nc">
      <documentation loc="34:../../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both.&#10;&#10; The SPI bus both sends and receives at the same time.  So this interface&#10; can be used to send, receive, or both.  The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; This is split phase and typically is implemented using interrupts.  However&#10; as the SPI clock is increased the interrupt overhead become more onerous&#10; wrt each byte time being transfered.  See SpiBLock for a single phase&#10; transfer mechanism that doesn't have interrupt overhead issues.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f5d8595da40" loc="76:../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="62:../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f5d8595d0d0" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f5d8595d460" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d8595d7a0" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f5d85959020" loc="88:../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="78:../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f5d8595b2a0" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f5d8595b630" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d8595b970" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f5d8595bce0" loc="89:../../../tos/interfaces/SpiPacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7f5d8595f8f0" loc="45:../../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7f5d8595f670" loc="45:../../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f5d8587fb70" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f5d8587b4e0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430SpiConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
        <short>&#10; Interface used by Msp430Spi clients to reconfigure the SPI before use&#10; </short>
        <long>&#10; Interface used by Msp430Spi clients to reconfigure the SPI before use&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f5d8587aaa0" loc="39:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
        <interfacedef-ref qname="Msp430SpiConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f5d858b02b0"/></typename>
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f5d858b1e00"/></type-tag>
            </type-qualified>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x7f5d858796f0" loc="62:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d85879470" loc="62:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x7f5d85878b30" loc="74:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d858788b0" loc="74:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x7f5d85878020" loc="68:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f5d858775b0" loc="81:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d85877330" loc="81:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f5d8586d020" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f5d8586e750" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART. &#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information.&#10;&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7f5d85866740" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d858664c0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f5d85869cd0" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART.&#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information. I.e. calling &#60;code>tx&#60;/done> will transmit a byte of&#10; data in the mode (SPI or UART) the USART has been set to before.&#10;&#10; @author Vlado Handziski (handzisk@tkn.tu-berlin.de)&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f5d858417c0" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7f5d8584c2d0" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7f5d85859020" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d858cc020"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f5d858cc860"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f5d8585ccf0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d858cc020"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f5d858cc860"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7f5d8584f3b0" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7f5d85857530" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d858c8020"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f5d858c8860"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f5d858572b0" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d858c8020"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f5d858c8860"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f5d858469e0" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7f5d85842020" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7f5d85858a90" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d858cbec0"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7f5d858ca680"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7f5d85857d20" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d858c8020"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7f5d858c8860"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7f5d85853b90" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7f5d85853910" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7f5d858531f0" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7f5d858462b0" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7f5d858582a0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d858cbec0"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f5d858ca680"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f5d85858020" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d858cbec0"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f5d858ca680"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7f5d85854020" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f5d85845190" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7f5d85854a00" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7f5d85854780" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7f5d85850480" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7f5d85850c00" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f5d85847420" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7f5d8584a190" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7f5d8584e350" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f5d85847b60" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7f5d8584cab0" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7f5d858458b0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f5d85852390" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f5d858d3d80"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7f5d858cf4d0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7f5d85844070" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7f5d85841020" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7f5d85855700" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7f5d85855480" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f5d858402a0" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d85840020" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7f5d85859800" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d858cc020"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7f5d858cc860"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7f5d8584fb20" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f5d8584b270" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7f5d85849ba0" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f5d8589bb50"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f5d8589b730"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f5d85849920" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f5d8589bb50"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f5d8589b730"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7f5d8584aca0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f5d858b02b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f5d858b1e00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f5d8584aa20" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f5d858b02b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f5d858b1e00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f5d85840ac0" loc="227:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="222:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return byte received&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7f5d85844860" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7f5d85852ba0" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7f5d85842780" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7f5d8584b9e0" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7f5d8584eb30" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f5d857d9020" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <function command="" provided="0" name="disableOwnAddress" ref="0x7f5d857b19d0" loc="80:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7f5d857c3020" loc="31:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7f5d857b8620" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f5d857b83a0" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7f5d857cc5b0" loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7f5d857b5c50" loc="71:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7f5d857bd5e0" loc="49:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7f5d857c4070" loc="28:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7f5d857c2020" loc="34:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f5d857c6020" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7f5d857c7d30" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7f5d857c84b0" loc="21:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7f5d857bf020" loc="41:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7f5d857b6550" loc="66:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7f5d857b1270" loc="78:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7f5d857b9c30" loc="61:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7f5d857ac350" loc="91:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7f5d857a99d0" loc="100:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7f5d857cb420" loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7f5d857c1740" loc="38:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7f5d857be1f0" loc="45:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7f5d857c68e0" loc="27:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7f5d857cd350" loc="7:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7f5d857b9460" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f5d857b91e0" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7f5d857d1c00" loc="6:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7f5d857b54d0" loc="69:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7f5d857b0190" loc="81:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7f5d857abb00" loc="94:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7f5d857a9270" loc="97:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7f5d857b4b90" loc="74:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7f5d857b08c0" loc="83:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7f5d857b8db0" loc="65:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7f5d857ae390" loc="87:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7f5d857cbb40" loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7f5d857bb7e0" loc="53:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7f5d857af7b0" loc="86:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7f5d857b3ac0" loc="77:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7f5d857bede0" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7f5d857beb60" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7f5d857aa2d0" loc="95:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7f5d857baa60" loc="57:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7f5d857b4420" loc="72:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7f5d857cde10" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f5d858884a0"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f5d85888080"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f5d857cdb90" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f5d858884a0"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f5d85888080"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7f5d857c1020" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7f5d857c9cb0" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f5d857c9a30" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7f5d857bf980" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d857bf700" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7f5d857aeb60" loc="90:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7f5d857c7620" loc="24:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7f5d857c9350" loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7f5d857ba2a0" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7f5d857ba020" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7f5d857ccce0" loc="12:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7f5d857af020" loc="84:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7f5d857b3350" loc="75:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7f5d857b6cc0" loc="68:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7f5d857bb020" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7f5d857bdd30" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7f5d857c2740" loc="35:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7f5d857c47b0" loc="29:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7f5d857aaa40" loc="96:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7f5d857c8e30" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f5d857c8bb0" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7f5d857acb10" loc="92:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7f5d857c3750" loc="32:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7f5d857ab350" loc="93:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f5d85704020" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f5d85704880" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="38:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f5d856cfdc0" loc="54:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f5d856cc020" loc="71:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f5d856cf530" loc="44:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="39:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f5d856cd6d0" loc="63:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f5d856cc950" loc="79:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwnerInfo" loc="2:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
      <function command="" provided="0" name="inUse" ref="0x7f5d856cbb20" loc="9:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
        <documentation loc="3:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
          <short>&#10; Check whether a DefaultOwner has an active client.</short>
          <long>&#10; Check whether a DefaultOwner has an active client.&#10;&#10; @return TRUE If client is active.&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f5d856c04c0" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f5d856c9490"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f5d856c0240" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f5d856c9490"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f5d856c2420" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f5d856c1020" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f5d856c9490"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f5d856c2ca0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f5d856c9490"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f5d856c1930" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f5d856c9490"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadId48" loc="8:../../../tos/chips/ds2411/ReadId48.nc">
      <documentation loc="4:../../../tos/chips/ds2411/ReadId48.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f5d854b75e0" loc="13:../../../tos/chips/ds2411/ReadId48.nc">
        <interfacedef-ref qname="ReadId48"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f5d854b7360" loc="13:../../../tos/chips/ds2411/ReadId48.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="OneWireReadWrite" loc="9:../../../tos/lib/onewire/OneWireReadWrite.nc">
      <documentation loc="5:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f5d854a4b00" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7f5d854a41c0" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f5d854a4530" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d854a4860" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f5d854a2880" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f5d854a22c0" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d854a25f0" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d8548a530" loc="59:../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d8548a530"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f5d8548a770" loc="59:../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d8548a770"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7f5d854892e0" loc="66:../../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d8548a770"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f5d85489060" loc="66:../../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d8548a770"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveIndicator" loc="37:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <short>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; </short>
        <long>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="isReceiving" ref="0x7f5d85425580" loc="43:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <documentation loc="39:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the indicator is showing we are actively receiving at this&#10; level&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveIndicator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Receive" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <short>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2008-06-17 07:28:24 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f5d853f39e0" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Signals that a message has been received.</short>
          <long>&#10; Signals that a message has been received.&#10;&#10; @param type of the message received.&#10; @param message pointer to message received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0x7f5d853f3020" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
          <variable name="message" ref="0x7f5d853f3750" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd_dropped" ref="0x7f5d853f47f0" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="51:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that the packet has been dropped by the radio&#10; (e.g.</short>
          <long>&#10; Notification that the packet has been dropped by the radio&#10; (e.g. due to address rejection).&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd" ref="0x7f5d853f4020" loc="49:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that an SFD capture has occured.</short>
          <long>&#10; Notification that an SFD capture has occured.&#10;&#10; @param time at which the capture happened.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f5d853f7d30" loc="49:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeSyncOffset" loc="43:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
      <function command="" provided="0" name="get" ref="0x7f5d854093d0" loc="58:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="52:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns the offset of where the timesync timestamp is sotred in a&#10; CC2420 packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85409150" loc="58:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x7f5d8540a3d0" loc="50:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="45:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns TRUE if the current message should be timestamped.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d8540a150" loc="50:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f5d85406350" loc="72:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="67:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10; Cancels any pending requests to timestamp the message in MAC.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d854060d0" loc="72:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f5d85407390" loc="65:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="60:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10;  Sets the current message to be timestamped in the MAC layer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d85407110" loc="65:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d85291910" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d85291910"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f5d8528e270" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d86f76920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSkew" loc="51:../../../tos/lib/timer/TimeSkew.nc">
      <documentation loc="35:../../../tos/lib/timer/TimeSkew.nc">
        <short>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.</short>
        <long>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.  Under various circumstances&#10; adjustments may be made by this underlying timing that can result&#10; in time skew.&#10;&#10; Typically this can occur when the RTC (Real Time Clock) subsystem&#10; has had its time adjusted for example via a GPS providing synchronized&#10; time.  If this skew is below a reasonable threshold (platform dependent)&#10; TimeSkew.skew(skew_val) will be signalled.  Beyond that threshold&#10; it might be better to reboot and reestablish reasonable time via&#10; those mechanisms.&#10;&#10; @author Eric B.Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function event="" provided="0" name="skew" ref="0x7f5d851b0e80" loc="62:../../../tos/lib/timer/TimeSkew.nc">
        <documentation loc="52:../../../tos/lib/timer/TimeSkew.nc">
          <short>&#10; Signaled when the underlying timing system has detected timing&#10; skew.</short>
          <long>&#10; Signaled when the underlying timing system has detected timing&#10; skew.&#10;&#10; @param skew    estimated skew computed.  in millisecs (units platform&#10;                dependent, typically binary millisecs).&#10;                > 0, time has been moved into the future (we were slow).&#10;                &#60; 0, time has been shifted backwards, (we were fast).&#10;                = 0, skew is beyond platform limits.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSkew"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f5d86f77930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skew" ref="0x7f5d851b0c00" loc="62:../../../tos/lib/timer/TimeSkew.nc">
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f5d86f77930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7f5d850cc5e0" loc="53:../../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f5d850cc5e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7f5d850c92a0" loc="64:../../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f5d850cc5e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7f5d850c9020" loc="64:../../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f5d850cc5e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7f5d84eb3b00" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d84eb34f0" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7f5d84eb3870" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7f5d84eb7c70" loc="15:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7f5d84eb4b60" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d84eb4560" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d863225e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d86320c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7f5d84eb48d0" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7f5d84e9a960" loc="54:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f5d84e9a1f0" loc="49:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7f5d84eacc20" loc="56:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7f5d84ea00e0" loc="72:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7f5d84e9fd00" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d84e9fa80" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7f5d84ea0960" loc="79:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7f5d84ea27e0" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d84ea2560" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7f5d84e9e5b0" loc="100:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7f5d84e9f270" loc="85:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7f5d84eaa780" loc="71:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7f5d84ea90e0" loc="81:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7f5d84eadd80" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7f5d84eadb00" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7f5d84ea9c60" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f5d84ea99e0" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7f5d84ea68f0" loc="62:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7f5d84ea55b0" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d84ea5330" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7f5d84ea40b0" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f5d84ea5e00" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f5d84d6fc40" loc="48:../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f5d84d6f670" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d84d6f9b0" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f5d84d6aa70" loc="79:../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f5d84d6a7f0" loc="79:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f5d84d69890" loc="90:../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f5d84d692c0" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d84d69600" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f5d84d6b610" loc="65:../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f5d84d682c0" loc="99:../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f5d84d66820" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d84d66b60" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f5d84d68020" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f5d84d6a020" loc="72:../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f5d84d6e610" loc="57:../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f5d84d6dbd0" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d84d6e020" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d86f76520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f5d84d6e370" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f5d84d475b0" loc="50:../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f5d84d47330" loc="50:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7f5d84d47df0" loc="59:../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f5d84d45cf0" loc="69:../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f5d84d45700" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f5d84d45a60" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d86f76160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7f5d84d43b50" loc="79:../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <short>&#10; Interface used by Msp430Uart clients to reconfigure the UART before use&#10; </short>
        <long>&#10; Interface used by Msp430Uart clients to reconfigure the UART before use&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f5d84d3c4c0" loc="39:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f5d8589bb50"/></typename>
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f5d8589b730"/></type-tag>
            </type-qualified>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f5d84cad860" loc="95:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f5d84cac0e0" loc="105:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f5d868c9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f5d868c41b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:../../../tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:../../../tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x7f5d84be4ce0" loc="62:../../../tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:../../../tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBusy" loc="2:../../../tos/interfaces/SendBusy.nc">
      <function command="" provided="0" name="busy" ref="0x7f5d84b4e1f0" loc="9:../../../tos/interfaces/SendBusy.nc">
        <documentation loc="3:../../../tos/interfaces/SendBusy.nc">
          <short>&#10; Check whether send queue entry is in use&#10;&#10; </short>
          <long>&#10; Check whether send queue entry is in use&#10;&#10; @return TRUE If client is active.&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBusy"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d868cf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
