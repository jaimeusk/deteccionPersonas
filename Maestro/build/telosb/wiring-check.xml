<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="16:BaseStationC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f8182507660"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f81825c0b40"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f81825c0b40"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f8182520110"/></to>
    </wire>
    <wire loc="19:BaseStationC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f8182506020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f81810c15c0"/></to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f81810c15c0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f81810568d0"/></to>
    </wire>
    <wire loc="21:BaseStationC.nc">
      <from><interface-ref name="UartSend" scoped="" ref="0x7f8182500020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f81810be600"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f81810be600"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f8181060110"/></to>
    </wire>
    <wire loc="22:BaseStationC.nc">
      <from><interface-ref name="UartReceive" scoped="" ref="0x7f81824aee30"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f81810bd800"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f81810bd800"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f8181060e70"/></to>
    </wire>
    <wire loc="23:BaseStationC.nc">
      <from><interface-ref name="UartPacket" scoped="" ref="0x7f81824a5870"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f81810bde10"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f81810bde10"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f818105da40"/></to>
    </wire>
    <wire loc="24:BaseStationC.nc">
      <from><interface-ref name="UartAMPacket" scoped="" ref="0x7f81824959b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f81810bcab0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f81810bcab0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f818105f490"/></to>
    </wire>
    <wire loc="34:BaseStationC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f81824a6160"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f8180c8dc30"/></to>
    </wire>
    <wire loc="65:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f8180c8dc30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f818020d590"/></to>
    </wire>
    <wire loc="35:BaseStationC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f81824a6dd0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f8180c8c8b0"/></to>
    </wire>
    <wire loc="66:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f8180c8c8b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f818020c270"/></to>
    </wire>
    <wire loc="36:BaseStationC.nc">
      <from><interface-ref name="AMControl" scoped="" ref="0x7f8182506bc0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f8182110760"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f8182110760"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f81820decc0"/></to>
    </wire>
    <wire loc="37:BaseStationC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f8182493440"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f8180c8d020"/></to>
    </wire>
    <wire loc="64:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f8180c8d020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f818020e920"/></to>
    </wire>
    <wire loc="38:BaseStationC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f81824910c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f8180c86910"/></to>
    </wire>
    <wire loc="54:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f8180c86910"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f818210cb20"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="40:BaseStationC.nc">
      <from><interface-ref name="TimerTramaTDMA" scoped="" ref="0x7f8182490270"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f8180d25060"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f8180d25060"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f81812c3610"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="41:BaseStationC.nc">
      <from><interface-ref name="TimerLeds" scoped="" ref="0x7f8182480650"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f8180d1fb00"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f8180d1fb00"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f81812c3610"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="43:BaseStationC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f818246e500"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f81823e79f0"/></to>
    </wire>
    <wire loc="51:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f81823e79f0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f81823e0400"/></to>
    </wire>
    <wire loc="73:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f81825bd160"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f8180260020"/></to>
    </wire>
    <wire loc="59:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f81825bd160"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f8181056280"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f81825bd160"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f8181197dd0"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f81825bd160"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f8181220b70"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f81825bd160"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f818123f750"/></to>
    </wire>
    <wire loc="52:../../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f81825bd160"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f818125c080"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f81825bd160"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f81813c83a0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f81825bd160"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f81814c9620"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f81825bd160"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f81815b6c60"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f81825bd160"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f8181f5ac70"/></to>
    </wire>
    <wire loc="73:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f81825bd160"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f8180584020"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateImplC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f81825bd160"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f8181a89020"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f81825bd160"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f818200a510"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f8182520780"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f8182a651e0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f8182a651e0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f818260a140"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f818251f1d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f81825b90c0"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f81825b90c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f81825ac1a0"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f818251f8d0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f81825bd160"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f81825af130"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f81825ac810"/></to>
    </wire>
    <wire loc="50:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f81825aa020"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f8182594900"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/telosb/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f8182594900"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f818257b850"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f81825aa700"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f81825ae640"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f81825aade0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f81823b8dd0"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f818257b850"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f81825611c0"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f8182572de0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f8182561830"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f81826e0c80"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f8182560af0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182609040"/></to>
    </wire>
    <wire loc="56:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f8182604490"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f818283d9a0"/></to>
    </wire>
    <wire loc="110:BaseStationP.nc">
      <from><interface-ref name="RadioSendTask" scoped="" ref="0x7f818245a610"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:BaseStationP.nc">
      <from><interface-ref name="uartSendTask" scoped="" ref="0x7f818245c720"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f81823b8dd0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f81823e3db0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f81823d8a90"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f81823e1590"/></to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f81823e1590"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f818213a9e0"/></to>
    </wire>
    <wire loc="55:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f81823deca0"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f81823ba830"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f81823ba830"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f8182124020"/></to>
    </wire>
    <wire loc="56:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f81823d6020"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f81823b9b50"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f81823b9b50"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f818211f630"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8182129c50"/></from>
      <to><interface-ref name="Port54" scoped="" ref="0x7f818234a020"/></to>
    </wire>
    <wire loc="737:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f818234a020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821f4540"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f81821232f0"/></from>
      <to><interface-ref name="Port55" scoped="" ref="0x7f81823488a0"/></to>
    </wire>
    <wire loc="738:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f81823488a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821efb90"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f818211e7a0"/></from>
      <to><interface-ref name="Port56" scoped="" ref="0x7f8182345020"/></to>
    </wire>
    <wire loc="739:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f8182345020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821e9060"/></to>
    </wire>
    <wire loc="693:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f818239dd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81822a3b90"/></to>
    </wire>
    <wire loc="706:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f8182383e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f818226c060"/></to>
    </wire>
    <wire loc="844:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f81822f93d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f818225c060"/></to>
    </wire>
    <wire loc="864:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f81822fe3e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821beb90"/></to>
    </wire>
    <wire loc="845:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f81823273f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182256540"/></to>
    </wire>
    <wire loc="711:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f818237ee50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182262b90"/></to>
    </wire>
    <wire loc="724:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f8182364020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f818222a060"/></to>
    </wire>
    <wire loc="748:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f8182336020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821c8060"/></to>
    </wire>
    <wire loc="848:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f81823223f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f818224b060"/></to>
    </wire>
    <wire loc="858:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f818230d3e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821dfb90"/></to>
    </wire>
    <wire loc="870:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f81822ef3f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821b8060"/></to>
    </wire>
    <wire loc="696:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f8182395580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182293b90"/></to>
    </wire>
    <wire loc="849:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f8182320bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182246540"/></to>
    </wire>
    <wire loc="701:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f8182390580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182288540"/></to>
    </wire>
    <wire loc="714:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f8182376710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182251b90"/></to>
    </wire>
    <wire loc="727:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f818235d8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f818221a060"/></to>
    </wire>
    <wire loc="740:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f81823438a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821e4540"/></to>
    </wire>
    <wire loc="751:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f818232f8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821b8060"/></to>
    </wire>
    <wire loc="691:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f81823a2d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81822ad060"/></to>
    </wire>
    <wire loc="704:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f8182388d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81822776d0"/></to>
    </wire>
    <wire loc="717:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f818236fe50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182241b90"/></to>
    </wire>
    <wire loc="843:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f818232abc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f818225c060"/></to>
    </wire>
    <wire loc="861:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f8182306bb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821ceb90"/></to>
    </wire>
    <wire loc="868:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f81822f2bb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821b8060"/></to>
    </wire>
    <wire loc="854:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f8182315bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821f9060"/></to>
    </wire>
    <wire loc="722:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f818236ae50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182236740"/></to>
    </wire>
    <wire loc="735:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f818234f020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821ffb90"/></to>
    </wire>
    <wire loc="746:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f818233b020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821d3540"/></to>
    </wire>
    <wire loc="862:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f81823033e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821c8060"/></to>
    </wire>
    <wire loc="851:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f818231d3e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f818220a060"/></to>
    </wire>
    <wire loc="694:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f818239a580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f818229d060"/></to>
    </wire>
    <wire loc="707:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f8182380710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182267540"/></to>
    </wire>
    <wire loc="744:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f8182340020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821dfb90"/></to>
    </wire>
    <wire loc="712:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f818237b710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f818225c060"/></to>
    </wire>
    <wire loc="725:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f81823628a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182225540"/></to>
    </wire>
    <wire loc="749:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f81823348a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821c3540"/></to>
    </wire>
    <wire loc="853:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f81823183f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821ffb90"/></to>
    </wire>
    <wire loc="689:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f81823a5cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81822b9540"/></to>
    </wire>
    <wire loc="702:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f818238ed50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182282b90"/></to>
    </wire>
    <wire loc="715:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f8182374e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f818224b060"/></to>
    </wire>
    <wire loc="728:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f818235a020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182215540"/></to>
    </wire>
    <wire loc="855:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f81823123f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182241b90"/></to>
    </wire>
    <wire loc="859:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f818230bbb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821d8060"/></to>
    </wire>
    <wire loc="865:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f81822fcbb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821b8060"/></to>
    </wire>
    <wire loc="733:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f8182355020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f818220a060"/></to>
    </wire>
    <wire loc="856:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f8182310bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f818223b060"/></to>
    </wire>
    <wire loc="692:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f818239f580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81822a8540"/></to>
    </wire>
    <wire loc="705:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f8182385710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182272b90"/></to>
    </wire>
    <wire loc="718:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f818236c710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f818223b060"/></to>
    </wire>
    <wire loc="852:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f818231bbc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182204540"/></to>
    </wire>
    <wire loc="863:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f8182301bb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821c3540"/></to>
    </wire>
    <wire loc="723:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f81823678a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182230b90"/></to>
    </wire>
    <wire loc="736:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f818234d8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821f9060"/></to>
    </wire>
    <wire loc="747:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f81823398a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821ceb90"/></to>
    </wire>
    <wire loc="695:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f8182398d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182298540"/></to>
    </wire>
    <wire loc="745:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f818233e8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821d8060"/></to>
    </wire>
    <wire loc="700:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f8182393d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f818228d060"/></to>
    </wire>
    <wire loc="713:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f8182379e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182256540"/></to>
    </wire>
    <wire loc="726:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f818235f020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182220b90"/></to>
    </wire>
    <wire loc="750:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f8182331020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821beb90"/></to>
    </wire>
    <wire loc="690:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f81823a4580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81822b4b90"/></to>
    </wire>
    <wire loc="703:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f818238a580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f818227c060"/></to>
    </wire>
    <wire loc="716:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f8182371710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182246540"/></to>
    </wire>
    <wire loc="729:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f81823588a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182210b90"/></to>
    </wire>
    <wire loc="860:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f81823083e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821d3540"/></to>
    </wire>
    <wire loc="847:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f81822f7ba0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182251b90"/></to>
    </wire>
    <wire loc="846:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f8182325bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182251b90"/></to>
    </wire>
    <wire loc="734:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f81823538a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182204540"/></to>
    </wire>
    <wire loc="867:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f81822f43e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821beb90"/></to>
    </wire>
    <wire loc="871:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f81822edbc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f81821e4540"/></to>
    </wire>
    <wire loc="842:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f818232c060"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f8182262b90"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f81820decc0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f81820b4020"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f818210d7f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f81820ddd20"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f81820ddd20"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f818115a020"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f818210a880"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f81820dbc00"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f81820dbc00"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f8181158df0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f8182109020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f81820d88f0"/></to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f81820d88f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f8181156a80"/></to>
    </wire>
    <wire loc="89:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f8182105310"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f8181444550"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f8181444550"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f8181436a80"/></to>
    </wire>
    <wire loc="86:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f81820eb130"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f81820cdcb0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f81820cdcb0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f818209f080"/></to>
    </wire>
    <wire loc="81:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f818210cb20"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f81820db020"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f81820db020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f8181158210"/></to>
    </wire>
    <wire loc="85:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f8182106080"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f81820d6990"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f81820d6990"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f81820a0020"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f8182109c90"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f81820d92d0"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f81820d92d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f8181157470"/></to>
    </wire>
    <wire loc="90:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f81820f63f0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f8181440660"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f8181440660"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f8181432af0"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f81820b4020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f818118bb80"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f81820c4e30"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f81811548b0"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f81820b7d20"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f8181155ce0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f81820cf9b0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f81820a1020"/></to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f81820a1020"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f8181449670"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f818209f080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f818118b080"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f81820a0020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f81814466e0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f81820c2020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f818209fb70"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f818209fb70"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f8181176020"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f81820ccc70"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f81820a09d0"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f81820a09d0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f8181445a70"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioResource" scoped="" ref="0x7f818114b0f0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f81820b3530"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f8181153860"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f81820aca70"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7f81820aca70"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f81811f4c90"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f8181152690"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f81820a4840"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7f81820a4840"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f81811f3a50"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f818114d4d0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f8181670b20"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f8181152ce0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f8181449670"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f8181449670"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f818143bd20"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f8181150b70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f81814450c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f81814450c0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f8181437640"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f818114f610"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f8182013dc0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f8182013dc0"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f8182009970"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7f818114c1f0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f8182099330"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f8182099330"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f81820947e0"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f818114bd30"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f81823e79f0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f818118bb80"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f8181188d90"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f8181445a70"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f8181436020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f8181176020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f8181174410"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7f81811f4c90"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f81811e9a20"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f818118b080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f81811842d0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f81820ad690"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f81811f45e0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f81811f45e0"/></from>
      <to><interface-ref name="BareReceive" scoped="" ref="0x7f81811e9370"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f81814466e0"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f8181438c50"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f81820b3530"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f81811f6be0"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f81811f6be0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f81811eb7b0"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f81820a3940"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f81811f58e0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f81811f58e0"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x7f81811ea4d0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7f81820add50"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7f81811f2170"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7f81811f2170"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7f81811e7020"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7f81811f3a50"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f81811e8840"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f8181188d90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f818209b390"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f818209b390"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f8182098e70"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f81811f16b0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f8181244220"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f8181244220"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f8181242a10"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f8181243020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f8181179350"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f8181179350"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f8181176d70"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f8181176d70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f818118fce0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f818118fce0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f8181189860"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f8181189860"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f818209be80"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f818209be80"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f8182095990"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f81811f1020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f818118c980"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f818118c980"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f8181188690"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f8181188690"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f8181227aa0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f8181227aa0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f8181223e30"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f8181224950"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f818209ab40"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f818209ab40"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f81814cd7c0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f81814cd7c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f81814c6020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f8182093640"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8182024950"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f8182024950"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f818200ab80"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7f818208bb50"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7f818201ebf0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7f818201ebf0"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7f8182007740"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f8182088760"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f81815c76c0"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f8182088760"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f81814d05c0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f81814d05c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f81814c9ca0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f81815c76c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f81815b5320"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7f81820802a0"/></from>
      <to><interface-ref name="CC2420Transmit" scoped="" ref="0x7f81815c4020"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7f81815c4020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f81815b5bc0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7f8182087060"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f81815c4cb0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f81815c4cb0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f81815b4970"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f818207e330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f8181449670"/></to>
    </wire>
    <wire loc="73:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f8182076920"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f81814450c0"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f818207d420"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f8181265a20"/></to>
    </wire>
    <wire loc="56:../../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f8181265a20"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f818125ba20"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControlState" scoped="" ref="0x7f818207a110"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f8181267aa0"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f8181267aa0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f8181a8d1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f818207dbf0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f81823e79f0"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="sendDone_task" scoped="" ref="0x7f818206cb70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="stopDone_task" scoped="" ref="0x7f818206dba0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="startDone_task" scoped="" ref="0x7f818206ec20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ReadRssi" scoped="" ref="0x7f81820100c0"/></from>
      <to><interface-ref name="ReadRssi" scoped="" ref="0x7f8182006b40"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="StartupTimer" scoped="" ref="0x7f8181ffad90"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f8181f57690"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7f8181f57690"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f8181f515f0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f8181ff7060"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f8181d06690"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f8181d06690"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f8181cf7020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f8181ff6380"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x7f8181d02020"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f8181d02020"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f8181ce7020"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7f8181ff56a0"/></from>
      <to><interface-ref name="VREN" scoped="" ref="0x7f8181d006a0"/></to>
    </wire>
    <wire loc="77:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7f8181d006a0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f8181cdcb00"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7f8181ff30e0"/></from>
      <to><interface-ref name="InterruptCCA" scoped="" ref="0x7f8181cbd400"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7f8181cbd400"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f8181b60680"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f8181fdd1d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f81816f9e20"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f81816f9e20"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8181b0e4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f8181fdc2b0"/></from>
      <to><interface-ref name="SRXON" scoped="" ref="0x7f81816f67b0"/></to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f81816f67b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f8181fdc9c0"/></from>
      <to><interface-ref name="SRFOFF" scoped="" ref="0x7f81816f5ae0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f81816f5ae0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f8181fdea40"/></from>
      <to><interface-ref name="SXOSCON" scoped="" ref="0x7f81816f7ad0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f81816f7ad0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f8181fde120"/></from>
      <to><interface-ref name="SXOSCOFF" scoped="" ref="0x7f81816f4160"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f81816f4160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f8181fe3b00"/></from>
      <to><interface-ref name="FSCTRL" scoped="" ref="0x7f81816eb870"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f81816eb870"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f8181fea3d0"/></from>
      <to><interface-ref name="IOCFG0" scoped="" ref="0x7f81816e9880"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f81816e9880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f8181feac80"/></from>
      <to><interface-ref name="IOCFG1" scoped="" ref="0x7f81816e80a0"/></to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f81816e80a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f8181fe55f0"/></from>
      <to><interface-ref name="MDMCTRL0" scoped="" ref="0x7f81816f0e50"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f81816f0e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f8181fe2020"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7f81816ef670"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f81816ef670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f8181fef520"/></from>
      <to><interface-ref name="PANID" scoped="" ref="0x7f81816db500"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f81816db500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f8181fe6a90"/></from>
      <to><interface-ref name="IEEEADR" scoped="" ref="0x7f81816dcce0"/></to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f81816dcce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f8181fe28e0"/></from>
      <to><interface-ref name="RXCTRL1" scoped="" ref="0x7f81816ece50"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f81816ece50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f8181fe01c0"/></from>
      <to><interface-ref name="RSSI" scoped="" ref="0x7f81816efe50"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f81816efe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f8181fe0a70"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7f81816eee50"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f81816eee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SyncResource" scoped="" ref="0x7f8181fdbd90"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f81816c9a80"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f81816c9a80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8181b0e4d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RssiResource" scoped="" ref="0x7f8181fdb020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f818169c9e0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f818169c9e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8181b0e4d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f8181feb810"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f8181670b20"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f8182003020"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f818166fd20"/></to>
    </wire>
    <wire loc="23:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f818166fd20"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f8181654310"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="syncDone" scoped="" ref="0x7f8181fd0820"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="sync" scoped="" ref="0x7f8181fd1940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f8181f5ac70"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f8181f52d40"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f8181f52d40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f818088c340"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7f8181f515f0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f818088cb90"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f818088c340"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f81808853d0"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f818088cb90"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f818087e020"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f81808853d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f8180869ca0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f8180878780"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f8180885c20"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f8180885c20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f81808685b0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f818087a3d0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f8181d8b8c0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f8181d8b8c0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f8181d6fcf0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f8180865710"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f818086f9d0"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f818086f9d0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f8181f26cd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8180863da0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f818086d120"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f818086d120"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8181f1da40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f81808500c0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f818086b440"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f818086b440"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f8181f1a3f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f8181f26cd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f8181f07cd0"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f8181f07cd0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f8181eb1260"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8181f1da40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f8181f055a0"/></to>
    </wire>
    <wire loc="139:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f8181f055a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f8181e4e6d0"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f8181f1a3f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f8181f04a20"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f8181f04a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f8181e4dac0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f8181f26cd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f8181f07cd0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8181f1da40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f8181effd40"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f8181effd40"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f8181e3e220"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f8181f1a3f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f8181efc160"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f8181efc160"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f8181e3d610"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f8181f26cd0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f8181f07cd0"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8181f1da40"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f8181efa020"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f8181efa020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f8181e376d0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f8181f1a3f0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f8181ef9570"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f8181ef9570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f8181e36ac0"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f8181f26cd0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f8181f07cd0"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8181f1da40"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f8181ef7410"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f8181ef7410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f8181e2fb30"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f8181f1a3f0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f8181ef6890"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f8181ef6890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f8181e2d020"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f8181f26cd0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f8181f07cd0"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8181f1da40"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f8181ef48c0"/></to>
    </wire>
    <wire loc="175:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f8181ef48c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f8181e27220"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f8181f1a3f0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f8181ef3d40"/></to>
    </wire>
    <wire loc="176:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f8181ef3d40"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f8181e26610"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f8181f26cd0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f8181f07cd0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8181f1da40"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f8181ef1a50"/></to>
    </wire>
    <wire loc="182:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f8181ef1a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f8181e1f6d0"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f8181f1a3f0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f8181eef020"/></to>
    </wire>
    <wire loc="183:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f8181eef020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f8181e1eac0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f8181f0aa50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f8181e56220"/></to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f8181f0ba20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f8181e5ccb0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f8181ef83e0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f8181e357a0"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f8181f11bb0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f8181e5c020"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f8181eefda0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f8181e1d7a0"/></to>
    </wire>
    <wire loc="112:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f8181f15280"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f8181eaa6d0"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f8181f00da0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f8181e45cb0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f8181f00020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f8181e45020"/></to>
    </wire>
    <wire loc="146:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f8181f02a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f8181e47b30"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f8181f08da0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f8181e532f0"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f8181ef5890"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f8181e2dcb0"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f8181f08020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f8181e55610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f8181f19a30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f8181eb83e0"/></to>
    </wire>
    <wire loc="119:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f8181f12730"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f8181e5eb30"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f8181f0c690"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f8181e637a0"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f8181efb020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f8181e3c2f0"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f8181f14700"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f8181e65ac0"/></to>
    </wire>
    <wire loc="177:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f8181ef2ae0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f8181e252f0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f8181f03a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f8181e4c7a0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f8181eb62f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f8181eb7bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f8181eb6940"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f8181e163f0"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f8181eb5020"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f8181e16b80"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f8181e62610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f8181eb83e0"/></to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f8181e61c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f8181eb7bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f8181e5bb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f8181eb83e0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f8181e592f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f8181eb7bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f8181e52160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f8181eb83e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f8181e517a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f8181eb7bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f8181eae100"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f8181eafa60"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f8181eae750"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f8181e15430"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f8181eaeda0"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f8181e15bc0"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f8181e4b610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f8181eb1260"/></to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f8181e4ac50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f8181eafa60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f8181e43b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f8181eb1260"/></to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f8181e412f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f8181eafa60"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f8181e3b160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f8181eb1260"/></to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f8181e3a7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f8181eafa60"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f8181e33610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f8181eb1260"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f8181e32c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f8181eafa60"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f8181e2cb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f8181eb1260"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f8181e2a2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f8181eafa60"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f8181e24160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f8181eb1260"/></to>
    </wire>
    <wire loc="179:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f8181e227a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f8181eafa60"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f8181e1c610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f8181eb1260"/></to>
    </wire>
    <wire loc="186:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f8181e1bc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f8181eafa60"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f8181d510f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f8181d8a8e0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f8181d8a8e0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f8181d83b80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f8181d74c50"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f8181f07cd0"/></to>
    </wire>
    <wire loc="73:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7f8181d059c0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f8181cf2630"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7f8181d04cf0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f8181cedb00"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7f8181d073e0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f8181cfea20"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7f8181d01370"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f8181ce2630"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8181cfdc50"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f818239dd50"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8181cf62f0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7f8182364020"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8181cf17a0"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f818239f580"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8181cecc60"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f81823a5cb0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8181ce62f0"/></from>
      <to><interface-ref name="Port46" scoped="" ref="0x7f818235a020"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8181ce07a0"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7f81823678a0"/></to>
    </wire>
    <wire loc="69:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8181cdbc60"/></from>
      <to><interface-ref name="Port45" scoped="" ref="0x7f818235d8a0"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7f8181cba700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f8181cb6c20"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f8181cb9060"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f8181b51b70"/></to>
    </wire>
    <wire loc="53:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8181ca4760"/></from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7f8181f02a50"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430Capture" scoped="" ref="0x7f8181ca3a80"/></from>
      <to><interface-ref name="CaptureB1" scoped="" ref="0x7f8181f00da0"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x7f8181ca2930"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7f81823678a0"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7f8181b532f0"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f8181c8e020"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f8181c8e020"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f8181c783f0"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7f8181b507a0"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f8181c92390"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f8181c92390"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f8181c7f7a0"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f8181c823f0"/></from>
      <to><interface-ref name="Port26" scoped="" ref="0x7f8181c6b3f0"/></to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f8181c8ba30"/></from>
      <to><interface-ref name="Port17" scoped="" ref="0x7f8181c75d50"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f8181c88020"/></from>
      <to><interface-ref name="Port21" scoped="" ref="0x7f8181c723f0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f8181c98a30"/></from>
      <to><interface-ref name="Port12" scoped="" ref="0x7f8181c7bd50"/></to>
    </wire>
    <wire loc="80:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f8181c85a30"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f8181c6ed50"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f8181c8d3f0"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x7f8181c77710"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f8181c81710"/></from>
      <to><interface-ref name="Port27" scoped="" ref="0x7f8181c6a710"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f8181c873f0"/></from>
      <to><interface-ref name="Port22" scoped="" ref="0x7f8181c70710"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f8181c91d50"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f8181c79020"/></to>
    </wire>
    <wire loc="81:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f8181c83020"/></from>
      <to><interface-ref name="Port25" scoped="" ref="0x7f8181c6c100"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f8181c8c710"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x7f8181c76a30"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f8181c8ad50"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x7f8181c73020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f8181c99710"/></from>
      <to><interface-ref name="Port11" scoped="" ref="0x7f8181c7ca30"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f8181c86710"/></from>
      <to><interface-ref name="Port23" scoped="" ref="0x7f8181c6fa30"/></to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f81816f6160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f81816ea880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f81816e20a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f81816e90a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f81816d6500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f81816d9500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f81816f5490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f81816de880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f81816da500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f81816e4880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f81816e50a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f81816f8a90"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f8181b0d350"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f8181b0d350"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f8181b05660"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f81816f4e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f81816f2490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f81816ddc80"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f81816f2be0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f81816dace0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f81816de0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f81816ee670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f81816e00a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f81816e2880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f81816e0880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f81816d7ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f81816d9ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f81816e5880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f81816e10a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f81816dbce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f81816e8880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f81816d6ce0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f8181b0c2c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f81816f7480"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f81816f0670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f81816ec670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f81816e30a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f81816e3880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f81816ea0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f81816f12f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f81816f0020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f81816f47b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f81816dc500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f81816d7500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f81816e40a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f81816e1880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f81816f6e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f81816e70a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f81816f1940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f81816e7880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f81816dd0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f81816d59b0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f8181b0c2c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Fifo" scoped="" ref="0x7f8181b0c2c0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f8181b03890"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b01ba0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b00a30"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f8181b0e4d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8181b04510"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181aff8b0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="WorkingState" scoped="" ref="0x7f8181af1b40"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f8181a93770"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f8181a93770"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f8181a8d1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f8181afe060"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8181a70c40"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f8181a70c40"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8180606a00"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f8181afac70"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f8181a6f8f0"/></to>
    </wire>
    <wire loc="53:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f8181a6f8f0"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f8180603020"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f8181af12e0"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f8181721020"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f8181721020"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f8180602120"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f8181afba70"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f81823e79f0"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <from><interface-ref name="grant" scoped="" ref="0x7f8181aedbd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/system/StateImplC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f8181a8d1d0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f8181a89b70"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f8180602120"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f8181a09850"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f8180603020"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f8181a0a110"/></to>
    </wire>
    <wire loc="105:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f8180606a00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8181a0fd80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f8180605760"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f81805fa2c0"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f81805fa2c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f818188a2c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f8181a0a110"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f818198ea10"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f8180603630"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f8181a0a790"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f8181a0a790"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f818198d060"/></to>
    </wire>
    <wire loc="111:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f8181a05a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f81806028c0"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f81805ea760"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f8181a078e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f8181a06690"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f81805fb640"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f81805fb640"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f818188b020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f8181a00b40"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f81805f5c10"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f81805f5c10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f818188e4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f8181a078e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f818198e250"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f8181a09850"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f818198dc50"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f8181a0fd80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f818198f470"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f818198b3e0"/></from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f8181a05a40"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f818198c5b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f8181a06690"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f8181986480"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f8181a00b40"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f818198ba50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f818197b020"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f818197b020"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f8181972700"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f8181986c20"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f81823e79f0"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <from><interface-ref name="signalDone_task" scoped="" ref="0x7f81819842f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f81819732c0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f818196dc20"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f8181977d10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f818196d2d0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f818193ebb0"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f818232abc0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f818193b3e0"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7f81823273f0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f8181939bb0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f8182325bc0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f81819363e0"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7f8182320bc0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f8181934bb0"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7f81823223f0"/></to>
    </wire>
    <wire loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7f8181943d10"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f81817e1d40"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f81805f4440"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f818188d3f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f81805f4a50"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f81817e8020"/></to>
    </wire>
    <wire loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f81817e8020"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f81817e1d40"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f81805f92b0"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f818197b020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f81805faa60"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f818188aad0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f818188aad0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f81817f4e80"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f81818898a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f81805ea760"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f818188a2c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f81817f5a60"/></to>
    </wire>
    <wire loc="81:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f81817f5a60"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f81805816c0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f818188e4d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f8181887d60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f818188b020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f81817f6ca0"/></to>
    </wire>
    <wire loc="80:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f81817f6ca0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8180582850"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7f818188d3f0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f8181886710"/></to>
    </wire>
    <wire loc="83:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f81817f4e80"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f818057fa70"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f81817f3790"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f81818898a0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f8181874bf0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f81817f4e80"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f8181886d80"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f8181977d10"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f81818745e0"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f81819732c0"/></to>
    </wire>
    <wire loc="82:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f81817f4270"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f8180581e40"/></to>
    </wire>
    <wire loc="84:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f818057e9d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f81817f3790"/></to>
    </wire>
    <wire loc="85:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f818057e2d0"/></from>
      <to><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f81817f1020"/></to>
    </wire>
    <wire loc="87:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f818057d2b0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f8180584630"/></to>
    </wire>
    <wire loc="155:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f818057b480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7f81817d8bb0"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f8181972700"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f81817d3700"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f818232abc0"/></to>
    </wire>
    <wire loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f81817d1e40"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f8182325bc0"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f81816bcc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f81816c7da0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f81816bfb50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f81816ba670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f81816b3e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f81816bae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f81816a62f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f81816a82f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f81816c4120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f81816ae670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f81816a92f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f81816bec60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f81816bdc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f81816b4670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f81816b6e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f81816b8670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f81816c8760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f8181b0d350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f81816c3aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f81816c2120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f81816ada70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f81816c2870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f81816a9ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f81816c4dc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f81816afe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f81816bd480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f81816be480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f81816c7750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f81816b0e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f81816b1670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f81816af670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f81816a7ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f81816a8ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f81816b5670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f81816b1e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f81816aaad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f81816b7670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f81816a6ad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f8181b0c2c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f81816c7100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f81816bf370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f81816bc480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f81816b4e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f81816b8e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f81816b3670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f81816bb670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f81816c5450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f81816bbe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f81816c1020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f81816c1cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f81816aa2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f81816acad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f81816c3450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f81816ac2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f81816a72f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f81816b5e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f81816b0670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f81816c5aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f81816c4770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f81816b7e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f81816c1670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f81816b6670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f81816aee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f81816a57a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f8181b0c2c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f818168fc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f818169ada0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f8181693b50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f818168d670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f8181686e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f818168de50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f81816792f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f818167c2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f8181698120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f8181681670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f818167d2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f8181692c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f8181691c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f8181687670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f818168ae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f818168c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f818169b760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f8181b0d350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f8181697aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f8181695120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f8181680a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f8181695870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f818167dad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f8181698dc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f8181682e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f8181691480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f8181692480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f818169a750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f8181684e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f8181685670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f8181682670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f818167aad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f818167cad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f8181688670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f8181685e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f818167ead0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f818168b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f8181679ad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f8181b0c2c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f818169a100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f8181693370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f818168f480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f8181687e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f818168ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f8181686670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f818168e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f8181699450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f818168ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f8181694020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f8181694cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f818167e2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f818167fad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f8181697450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f818167f2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f818167a2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f8181688e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f8181684670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f8181699aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f8181698770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f818168be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f8181694670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f818168a670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f8181681e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f81816787a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f8181b0c2c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="21:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7f8181651880"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7f8181647020"/></to>
    </wire>
    <wire loc="20:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7f8181647020"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7f8181641140"/></to>
    </wire>
    <wire loc="16:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7f818163dbd0"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7f8181646c50"/></to>
    </wire>
    <wire loc="21:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7f8181646c50"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7f8181628150"/></to>
    </wire>
    <wire loc="17:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="PowerControl" scoped="" ref="0x7f8181640530"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f81815d31b0"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7f818162c540"/></from>
      <to><interface-ref name="Gpio" scoped="" ref="0x7f818162d590"/></to>
    </wire>
    <wire loc="11:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="Gpio" scoped="" ref="0x7f818162d590"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f81815dc9e0"/></to>
    </wire>
    <wire loc="18:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f8181623950"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f818162aca0"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f818162aca0"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f8181600a90"/></to>
    </wire>
    <wire loc="19:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7f81816289f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x7f818162c540"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f81815f0020"/></from>
      <to><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f81815eb530"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f81815eb530"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f81815e7e50"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f81815e3020"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x7f8181f19a30"/></to>
    </wire>
    <wire loc="9:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f81815dbc50"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f8182388d50"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="EnergyIndicator" scoped="" ref="0x7f81815bf990"/></from>
      <to><interface-ref name="EnergyIndicator" scoped="" ref="0x7f81815b3900"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ByteIndicator" scoped="" ref="0x7f81815c1150"/></from>
      <to><interface-ref name="ByteIndicator" scoped="" ref="0x7f81815b20f0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="BackoffTimer" scoped="" ref="0x7f81815b2ae0"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f8181f57690"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7f81815a5500"/></from>
      <to><interface-ref name="CCA" scoped="" ref="0x7f8181d073e0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f818159f820"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f8181d06690"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7f818159eb40"/></from>
      <to><interface-ref name="SFD" scoped="" ref="0x7f8181d01370"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7f81815a6880"/></from>
      <to><interface-ref name="CaptureSFD" scoped="" ref="0x7f8181cba700"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f818159c020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8181500c30"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f8181500c30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8181b0e4d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f818159cd10"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f81814ff8f0"/></to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f81814ff8f0"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f8181b0d350"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f81815986d0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7f81814fe2f0"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f81814fe2f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f8181598de0"/></from>
      <to><interface-ref name="STXON" scoped="" ref="0x7f81814fdcc0"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f81814fdcc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f8181597530"/></from>
      <to><interface-ref name="STXONCCA" scoped="" ref="0x7f81814fc370"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f81814fc370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f8181597c60"/></from>
      <to><interface-ref name="SFLUSHTX" scoped="" ref="0x7f81814fbd00"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f81814fbd00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f818159ae00"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7f81814f5c60"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f81814f5c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f818159b780"/></from>
      <to><interface-ref name="TXFIFO" scoped="" ref="0x7f81814dc7a0"/></to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f81814dc7a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f8181b0c2c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f818159a550"/></from>
      <to><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f81814e12f0"/></to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f81814e12f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f81815963e0"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7f81814f6480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f81814f6480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f81815955e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7f81814f2e50"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f81814f2e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f8181594020"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7f81814f1670"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f81814f1670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f8181596e80"/></from>
      <to><interface-ref name="STXENC" scoped="" ref="0x7f81814f87b0"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f81814f87b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f81815939c0"/></from>
      <to><interface-ref name="TXNONCE" scoped="" ref="0x7f81814dead0"/></to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f81814dead0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f8181594890"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7f81814e02f0"/></to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f81814e02f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f8181593130"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7f81814e0ad0"/></to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f81814e0ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7f818158ed40"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7f81814d0df0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7f81814d0df0"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7f81814c8550"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f81815aed00"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f8181449670"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f81815adbb0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f81814450c0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f81815ab950"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f8181444550"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f81815a0be0"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f818143c480"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f818143c480"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f818142e8b0"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f81815916c0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f81823e79f0"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f81814f3c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f81814fd020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f81814f7c70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f81814eae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f81814f1e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f81814dd2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f81814e5670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f81814f6c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f81814eb670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f81814eee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f81814f0670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f81814f9370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f81814e4a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f81814f9ac0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f81814e1ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f81814fb060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f81814e6e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f81814f5480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f81814fe940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f81814e8e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f81814e9670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f81814e6670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f81814ec670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f81814e9e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f81814e2ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f81814ef670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f81814ddad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f8181b0c2c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f81814f7490"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f81814f3480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f81814ebe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f81814f0e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f81814ea670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f81814f2670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f81814fd670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f81814f8160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f81814f8e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f81814e22f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f81814e3ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f81814fb6b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f81814e32f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f81814de2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f81814ece50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f81814e8670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f81814fc9c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f81814efe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f81814ee670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f81814e5e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketIndicator" scoped="" ref="0x7f81814cc020"/></from>
      <to><interface-ref name="PacketIndicator" scoped="" ref="0x7f81814c67c0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f81814b2150"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f81823e79f0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f81814c5020"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f8181d06690"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7f81814c4380"/></from>
      <to><interface-ref name="FIFO" scoped="" ref="0x7f8181d059c0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7f81814c36b0"/></from>
      <to><interface-ref name="FIFOP" scoped="" ref="0x7f8181d04cf0"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f81814c2a50"/></from>
      <to><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f8181cb9060"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f81814c16e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f81812b3250"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f81812b3250"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8181b0e4d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f81814c0530"/></from>
      <to><interface-ref name="RXFIFO" scoped="" ref="0x7f8181290120"/></to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f8181290120"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f8181b0c2c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f81814bfad0"/></from>
      <to><interface-ref name="SFLUSHRX" scoped="" ref="0x7f81812afd00"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f81812afd00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f81814bf3a0"/></from>
      <to><interface-ref name="SACK" scoped="" ref="0x7f81812ad9c0"/></to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f81812ad9c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f81814be330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f8181449670"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f81814bd1e0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f81814450c0"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f81814bbd70"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f8181444550"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f81814bdb90"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f8182013dc0"/></to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f81814b63e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7f81812a5500"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f81812a5500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f81814b6cb0"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7f81812a5ce0"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f81812a5ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f81814b7b10"/></from>
      <to><interface-ref name="SRXDEC" scoped="" ref="0x7f81812ac7b0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f81812ac7b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f81814b46d0"/></from>
      <to><interface-ref name="RXNONCE" scoped="" ref="0x7f8181291900"/></to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f8181291900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f81814b5590"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7f8181293900"/></to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f8181293900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f81814b5e00"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7f8181292120"/></to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f8181292120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f81814b3020"/></from>
      <to><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f8181293120"/></to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f8181293120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f81814b38b0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7f81812b2990"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f81812b2990"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <from><interface-ref name="receiveDone_task" scoped="" ref="0x7f81814a69d0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f81813d8a60"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f8181d8b8c0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTime32khz" scoped="" ref="0x7f8181429820"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f81813d9790"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f818142bb80"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f81813c2610"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f81813c2610"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f81812d7a20"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f81813c71d0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f81812e58e0"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f81812e58e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f81803dbbc0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f81813c83a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f8181393020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f8181393020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f818044c9d0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f81812de020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f81813662f0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f8181361850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f8181393870"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f8181393870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f81804455f0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f81812d6d20"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f81813b2b70"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f81813b2b70"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f81813aa610"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f818044c9d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f818042f360"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f818043fd20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f818044a260"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f818044a260"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f818042fbf0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f81804419b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f81813b2b70"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f8180429dd0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f8180434020"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f8180434020"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f8181f26cd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8180427440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8180433760"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8180433760"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8181f1da40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f8180426760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f8180432a80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f8180432a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f8181f1a3f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f81813a8b90"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f8181d8a8e0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f818135d9c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f81803d4180"/></from>
      <to><interface-ref name="TimerFrom" scoped="" ref="0x7f81812de020"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimeSkew" scoped="" ref="0x7f81803cd8b0"/></from>
      <to><interface-ref name="TimeSkew" scoped="" ref="0x7f81812d9450"/></to>
    </wire>
    <wire loc="68:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f81803cf410"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f81825af130"/></to>
    </wire>
    <wire loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f81803cc020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f81812cdce0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f81812c3610"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f81812c3610"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f81813c71d0"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f81812a62f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f81812b1670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f81812aa2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f818129d500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f81812a4500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f81812b09c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f8181299ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f8181295900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f81812a92f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f81812a72f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f818129fce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f81812a0500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f81812a4ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f81812b2020"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f8181b0d350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f81812ad370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f8181297120"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f81812ac160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f81812af6b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f8181299500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f81812a9ad0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f81812aaad0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f81812b1020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f818129a500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f818129dce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f818129ace0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f8181291120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f81812a0ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f818129c500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f8181295120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f81812a3ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f81812abae0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f81812a7ad0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f818129e500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f81812a3500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f818129ece0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f81812a6cd0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f81812b1cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f81812ab490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f8181296900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f8181296120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f8181297900"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f8181292900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f818129f500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f818129cce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f81812b0370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f81812af060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f81812a1500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f81812ace00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f81812a1ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f8181298500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f8181290db0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f8181b0c2c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x7f8181263920"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x7f818125c940"/></to>
    </wire>
    <wire loc="54:../../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f8181269990"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f818125c080"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f818123fe60"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f8181243020"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f818123eae0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f8181240690"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f8181240690"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f8181a8d1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f818123d8f0"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f8181265a20"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f818123c170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f81814450c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="DuplicateReceive" scoped="" ref="0x7f8181224200"/></from>
      <to><interface-ref name="DuplicateReceive" scoped="" ref="0x7f8181220570"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f818121f3f0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f8181224950"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f818121fa70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f81814450c0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f81811e7d70"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f81811f16b0"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f81811e6b10"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f81811f1020"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f81811e52f0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f8181449670"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f81811e4170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f81814450c0"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f81811e4b70"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f8181196410"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <from><interface-ref name="grantTask" scoped="" ref="0x7f81811b8db0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SendState" scoped="" ref="0x7f818118a800"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f8181186580"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f8181186580"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f8181a8d1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f81811711c0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f81820a0020"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f81810568d0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f81810492f0"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f81810ba1a0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f818105c720"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f8181056280"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f818104cc70"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f8181052dc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f81810bab20"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f818105b120"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f8181054480"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f818105bd70"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f8181055940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f81810524a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7f8180d38a30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f8181054480"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f8180f17830"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f8181055940"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f8180f17110"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7f8180f16760"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f81810524a0"/></to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f81810468e0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f8181052dc0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f8180f14590"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f8181052dc0"/></to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f8180f0ccc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f8181052dc0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f8180f150e0"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f818103f5c0"/></to>
    </wire>
    <wire loc="75:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7f8180f159d0"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7f8181042130"/></to>
    </wire>
    <wire loc="77:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7f81810388e0"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7f8180f10b60"/></to>
    </wire>
    <wire loc="78:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f8181037060"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f8180ee5080"/></to>
    </wire>
    <wire loc="17:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f8180ee5080"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f8180d4a080"/></to>
    </wire>
    <wire loc="80:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f8180f02d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f8180ee5890"/></to>
    </wire>
    <wire loc="13:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f8180ee5890"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f8180d50440"/></to>
    </wire>
    <wire loc="332:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7f8180fe2e40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7f8181019d10"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7f8180fe4400"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f8180fdd0c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7f8180f13c50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7f8180f12480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="14:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f8180ee3020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f8180d4f440"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f8180d4f440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f8180ecf020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f8180d50440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f8180ed2860"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="18:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f8180d4e020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f8180d4a8e0"/></to>
    </wire>
    <wire loc="19:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f8180d49020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8180d52020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f8180d52020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8180ed47a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f8180d52c70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f81802cca90"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f81802cca90"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f8180d94510"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f8180ecc450"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f8180d4e020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f81802c6be0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f8180ed3a30"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f8180ece1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f81802cde00"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f81802cde00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8180d95280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f8180ecb1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f81802c6440"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f81802c6440"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f8180d96510"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f8180ed3a30"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f8180e60dc0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f8180ecf020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f8180e5e890"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f8180ed2860"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f8180e5f6d0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f8180ed47a0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8180e60020"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f8180e5c3e0"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f8180ecc450"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f8180e5d5b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f8180ece1d0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f8180e565b0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f8180ecb1d0"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f8180e5ca50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f8180e47d30"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f8180e47d30"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f8180e3f3c0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f8180e55020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f8180db17c0"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f8180db17c0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f8181d8a8e0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f8180e53120"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f81823e79f0"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f8180e44860"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f8180e3a020"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f8180e47500"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f8180e429c0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f8180e3a8f0"/></from>
      <to><interface-ref name="SIMO1" scoped="" ref="0x7f818231bbc0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f8180e37020"/></from>
      <to><interface-ref name="SOMI1" scoped="" ref="0x7f81823183f0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f8180e35890"/></from>
      <to><interface-ref name="UCLK1" scoped="" ref="0x7f8182315bc0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f8180e32020"/></from>
      <to><interface-ref name="URXD1" scoped="" ref="0x7f8182310bc0"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f8180e30890"/></from>
      <to><interface-ref name="UTXD1" scoped="" ref="0x7f81823123f0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f81802cba50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f8180e47d30"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f81802cb2b0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f8180d94d20"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f8180d94d20"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f8180d86060"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f8180d92af0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f81802c6be0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f8180d94510"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f8180d88bd0"/></to>
    </wire>
    <wire loc="81:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f8180d88bd0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f818025d6c0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f8180d96510"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f8180d90230"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f8180d95280"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f8180d8ae30"/></to>
    </wire>
    <wire loc="80:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f8180d8ae30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f818025e850"/></to>
    </wire>
    <wire loc="83:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f8180d86060"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f818025ca70"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f8180d8f2f0"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f8180e44860"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f8180d86950"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f8180d92af0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f8180d8e120"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f8180d86060"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f8180d81d50"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f8180d87400"/></to>
    </wire>
    <wire loc="82:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f8180d87400"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f818025de40"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f8180d81020"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f8180e47500"/></to>
    </wire>
    <wire loc="84:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f818025b9d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f8180d86950"/></to>
    </wire>
    <wire loc="85:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f818025b2d0"/></from>
      <to><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f8180d850f0"/></to>
    </wire>
    <wire loc="87:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f81802592b0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f8180260630"/></to>
    </wire>
    <wire loc="155:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f8180257480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f81802236a0"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f8180d81020"/></to>
    </wire>
    <wire loc="82:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f8180223e00"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f8180d81780"/></to>
    </wire>
    <wire loc="84:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f8180222410"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f8180d81d50"/></to>
    </wire>
    <wire loc="85:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f8180220060"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f8180d6a990"/></to>
    </wire>
    <wire loc="63:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f818020e920"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f8180201390"/></to>
    </wire>
    <wire loc="64:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f818020d590"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f8182109020"/></to>
    </wire>
    <wire loc="65:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f818020c270"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f8182109c90"/></to>
    </wire>
    <wire loc="67:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f8180c89020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f818020b8f0"/></to>
    </wire>
    <wire loc="66:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f818020b8f0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f8182106080"/></to>
    </wire>
    <wire loc="60:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f81801ff060"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f8180cf4930"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f81801ffc70"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f8182109c90"/></to>
    </wire>
    <wire loc="53:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f8180cf4930"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f8180ca4df0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f8180ca1400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f818210d7f0"/></to>
    </wire>
    <wire loc="55:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f8180ca0060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f8182109c90"/></to>
    </wire>
    <wire loc="56:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f8180c9f720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f8182109020"/></to>
    </wire>
    <wire loc="184:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f8180c9e480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f8180c9ec60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f8180c80020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f8182109020"/></to>
    </wire>
    <wire loc="56:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f8180c80c30"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f8182109c90"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="41:../../../tos/platforms/telosa/PlatformC.nc">
      <documentation loc="35:../../../tos/platforms/telosa/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/telosa/PlatformP.nc" safe="">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="1:../../../tos/platforms/telosb/MotePlatformC.nc" safe="">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/telosb/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="200:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/x1xxx/McuSleepC.nc" safe="">
      <documentation loc="36:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MoteClockP" loc="38:../../../tos/platforms/telosb/MoteClockP.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockP.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="65:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="45:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="33:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="53:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="BaseStationP" loc="15:BaseStationP.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../../tos/system/LedsC.nc">
      <documentation loc="34:../../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="40:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="37:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; Digital pin i/o abstraction, TI MSP430 processors.</short>
        <long>&#10; Digital pin i/o abstraction, TI MSP430 processors.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @author Joao Goncalves &#60;joao.m.goncalves@ist.utl.pt>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="79(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="79(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="79(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="79(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="79(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="79(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="79(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="79(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="79(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="79(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="79(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="79(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="79(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="79(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="79(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="79(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="79(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="79(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="79(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="79(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="79(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="79(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="79(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="79(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="79(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="79(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="79(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="79(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="79(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="79(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="79(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="79(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="79(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="79(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="79(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="79(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="79(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="79(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="79(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="79(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="79(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="79(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="79(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="79(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="79(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="79(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="79(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="79(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="59:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <documentation loc="49:../../../tos/platforms/telosa/ActiveMessageC.nc">
        <short>&#10;&#10; The Active Message layer on the Telos platform.</short>
        <long>&#10;&#10; The Active Message layer on the Telos platform. This is a naming wrapper&#10; around the CC2420 Active Message layer.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.9 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ActiveMessageC" loc="53:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="CC2420RadioC" loc="41:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <documentation loc="24:../../../tos/chips/cc2420/CC2420RadioC.nc">
        <short>&#10; Radio wiring for the CC2420.</short>
        <long>&#10; Radio wiring for the CC2420.  This layer seperates the common&#10; wiring of the lower-layer components of the CC2420 stack and makes&#10; them available to clients like the AM stack and the IEEE802.15.4&#10; stack.&#10;&#10; This component provides the highest-level internal interface to&#10; other components of the CC2420 stack.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10; @author Stephen Dawson-Haggerty&#10; @version $Revision: 1.2 $ $Date: 2009/08/20 01:37:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaC" loc="42:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
        <short>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.</short>
        <long>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-05-14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaP" loc="37:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.12 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ControlC" loc="42:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
        <short>&#10; Implementation for configuring a ChipCon CC2420 radio.</short>
        <long>&#10; Implementation for configuring a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/05/14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ControlP" loc="42:../../../tos/chips/cc2420/control/CC2420ControlP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Urs Hunkeler (ReadRssi implementation)&#10; @version $Revision: 1.7 $ $Date: 2008/06/24 04:07:28 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="AlarmMultiplexC" loc="43:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
        <short>&#10; A component that multiplexes the use of an alarm.</short>
        <long>&#10; A component that multiplexes the use of an alarm. The assumption is&#10; that its use is mutually exclusive and users check whether the&#10; events are for them.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm" loc="40(AlarmMultiplexC.Alarm):../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420AlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C):../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer" loc="37(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC" loc="48:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <documentation loc="36:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="41(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="41(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="41(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="41(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="41(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="41(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="41(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="41(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="41(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="41(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="41(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="41(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm" loc="43(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C" loc="41:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
        <short>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C.Transform" loc="54(Counter32khz32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform" loc="51(AlarmMultiplexC.Alarm.Alarm32khz32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
        <short>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420PinsC.CCAM" loc="42(HplCC2420PinsC.CCAM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.CSNM" loc="42(HplCC2420PinsC.CSNM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOM" loc="42(HplCC2420PinsC.FIFOM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOPM" loc="42(HplCC2420PinsC.FIFOPM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.RSTNM" loc="42(HplCC2420PinsC.RSTNM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.SFDM" loc="42(HplCC2420PinsC.SFDM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.VRENM" loc="42(HplCC2420PinsC.VRENM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
        <short>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420InterruptsC.CaptureSFDC" loc="47(HplCC2420InterruptsC.CaptureSFDC):../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; The default for GpioCapture is CCIxA.  Other channels are available&#10; (like B) but they need to be hardcoded in another module.  See&#10; tos/platforms/exp5438_2520/hardware/cc2520/P81SfdCaptureC.nc&#10;&#10; Lower levels have been modified to support being able to change&#10; CCIS in the control registers.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="GpioCaptureC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430InterruptC" loc="39:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for GPIO interrupts.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430InterruptP" loc="51:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc" safe="">
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptCCAC" loc="50(HplCC2420InterruptsC.InterruptCCAC):../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptFIFOPC" loc="50(HplCC2420InterruptsC.InterruptFIFOPC):../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="CC2420ControlC.Spi" loc="39(CC2420ControlC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC" loc="37:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:16 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420SpiP" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Roman Lim&#10; @author Razvan Musaloie-E.&#10; @author Jeonggil Ko&#10; @version $Revision: 1.4 $ $Date: 2008-06-23 20:25:15 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.WorkingStateC" loc="65(CC2420SpiWireC.WorkingStateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="StateImplC" loc="64:../../../tos/system/StateImplC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="StateImplP" loc="64:../../../tos/system/StateImplP.nc" safe="">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC" loc="40(CC2420SpiWireC.HplCC2420SpiC):../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC" loc="79(CC2420SpiWireC.HplCC2420SpiC.SpiC):../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Spi0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P" loc="71:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P.SpiP" loc="73(Msp430SpiNoDma0P.SpiP):../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430SpiNoDmaP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
        <short>&#10; An HPL abstraction of USART0 on the MSP430.</short>
        <long>&#10; An HPL abstraction of USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="54:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC" loc="39(CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="56(Msp430UsartShare0P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="96(Msp430UsartShare0P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420ControlC.SyncSpiC" loc="39(CC2420ControlC.SyncSpiC):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ControlC.RssiResource" loc="39(CC2420ControlC.RssiResource):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LocalIeeeEui64C" loc="11:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <configuration/>
    </component>
    <component qname="LocalIeeeEui64P" loc="3:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <module/>
    </component>
    <component qname="Ds2411C" loc="7:../../../tos/chips/ds2411/Ds2411C.nc">
      <configuration/>
    </component>
    <component qname="Ds2411P" loc="9:../../../tos/chips/ds2411/Ds2411P.nc">
      <module/>
    </component>
    <component qname="OneWireMasterC" loc="6:../../../tos/lib/onewire/OneWireMasterC.nc">
      <documentation loc="1:../../../tos/lib/onewire/OneWireMasterC.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10;</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="OneWireMasterP" loc="9:../../../tos/lib/onewire/OneWireMasterP.nc">
      <documentation loc="2:../../../tos/lib/onewire/OneWireMasterP.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10; Only supports one device on the 1-wire bus.</short>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="39:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="BusyWaitMicroC.BusyWaitCounterC" loc="52(BusyWaitMicroC.BusyWaitCounterC):../../../tos/lib/timer/BusyWaitCounterC.nc">
      <documentation loc="36:../../../tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="BusyWaitCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248d460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f818248d7d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430CounterMicroC" loc="44:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
        <short>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.</short>
        <long>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.   If your base clock is in units of binary hertz then 1 uis, decimal&#10; hertz it will be 1us.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430CounterMicroC.Counter" loc="42(Msp430CounterMicroC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248d460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f818248d7d0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplDs2411C" loc="1:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <configuration/>
    </component>
    <component qname="HplDs2411C.MspGpio" loc="42(HplDs2411C.MspGpio):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="Ds2411PowerControlC" loc="12:../../../tos/chips/ds2411/Ds2411PowerControlC.nc">
      <module/>
    </component>
    <component qname="CC2420TransmitC" loc="41:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
        <short>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TransmitP" loc="46:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420TransmitC.Spi" loc="39(CC2420TransmitC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC" loc="39:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
        <short>&#10; Implementation of the receive path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the receive path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveP" loc="45:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Jung Il Choi&#10; @author JeongGil Ko&#10; @author Razvan Musaloiu-E&#10; @version $Revision: 1.21 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC" loc="38:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420PacketP" loc="43:../../../tos/chips/cc2420/packet/CC2420PacketP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC.CounterToLocalTimeC" loc="46(CC2420PacketC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="55(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC.VT" loc="61(HilTimerMilliC.VirtualizeTimerC.VT):../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerImplP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f8181358530"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CC2420PacketC.DummyTimer" loc="44(CC2420PacketC.DummyTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC.Spi" loc="39(CC2420ReceiveC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RandomC" loc="43:../../../tos/system/RandomC.nc">
      <documentation loc="33:../../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420CsmaC.StateC" loc="65(CC2420CsmaC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueSendC" loc="38:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
        <short>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; </short>
        <long>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueSendP" loc="38:../../../tos/chips/cc2420/unique/UniqueSendP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
        <short>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.</short>
        <long>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="UniqueSendC.StateC" loc="65(UniqueSendC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueReceiveC" loc="40:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
        <short>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; This should sit at the bottom of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueReceiveP" loc="41:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
        <short> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC" loc="62:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
        <short>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.</short>
        <long>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.  They do not include the network byte &#10; responsible for identifying the packing as being sourced from a TinyOS&#10; network.&#10;&#10; TinyOS I-Frames are interoperability packets that do include a network&#10; byte as defined by 6LowPAN specifications.  The I-Frame header type is&#10; the default packet header used in TinyOS networks.&#10;&#10; Since either packet header is acceptable, this layer must do some &#10; preprocessing (sorry) to figure out whether or not it needs to include &#10; the functionality to process I-frames.  If I-Frames are used, then&#10; the network byte is added on the way out and checked on the way in.&#10; If the packet came from a network different from a TinyOS network, the&#10; user may access it through the DispatchP's NonTinyosReceive[] Receive &#10; interface and process it in a different radio stack.&#10;&#10; If T-Frames are used instead, this layer is simply pass-through wiring to the&#10; layer beneath.  &#10;&#10; Define &#34;CC2420_IFRAME_TYPE&#34; to use the interoperability frame and &#10; this layer&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TinyosNetworkP" loc="44:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
        <short>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.</short>
        <long>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.  Filters incoming packets that are not&#10; TinyOS network compatible.  Provides the 6LowpanSnoop interface to&#10; sniff for packets that were not originated from TinyOS.&#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC.FcfsResourceQueueC" loc="42(CC2420TinyosNetworkC.FcfsResourceQueueC):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DummyLplC" loc="41:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Sleep interval is always 0, and duty cycle is always 100%&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="DummyLplP" loc="39:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Wakeup interval is always 0 (always on)&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="DummyLplC.StateC" loc="65(DummyLplC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyC" loc="38:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
        <short>&#10; Dummy configuration for PacketLink Layer&#10; </short>
        <long>&#10; Dummy configuration for PacketLink Layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyP" loc="38:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <documentation loc="32:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
        <short>&#10; Dummy module for Packet Link layer&#10; </short>
        <long>&#10; Dummy module for Packet Link layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ActiveMessageP" loc="46:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc" safe="">
      <documentation loc="33:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
        <short>&#10; Active message implementation on top of the CC2420 radio.</short>
        <long>&#10; Active message implementation on top of the CC2420 radio. This&#10; implementation uses the 16-bit addressing mode of 802.15.4: the&#10; only additional byte it adds is the AM id byte, as the first byte&#10; of the data payload.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.22 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="2:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
        <short>&#10; An implementation of the UART on USART1 for the MSP430.</short>
        <long>&#10; An implementation of the UART on USART1 for the MSP430.&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire81@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Uart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P" loc="39:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P.UartP" loc="44(Msp430Uart1P.UartP):../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <documentation loc="36:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart1C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <documentation loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
        <short>&#10; An HPL abstraction of USART1 on the MSP430.</short>
        <long>&#10; An HPL abstraction of USART1 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart1P" loc="59:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="40(PlatformSerialC.UartC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P" loc="38:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.UsartShareP" loc="37(Msp430UsartShare1P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC" loc="56(Msp430UsartShare1P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart1.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Queue" loc="42(Msp430UsartShare1P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="2">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Arbiter" loc="96(Msp430UsartShare1P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC" loc="67(Msp430UsartShare1P.PowerManagerC):../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC.PowerManager" loc="58(Msp430UsartShare1P.PowerManagerC.PowerManager):../../../tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:../../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="TelosSerialP" loc="1:../../../tos/platforms/telosa/TelosSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BaseStationC.TimerTramaTDMA" loc="44(BaseStationC.TimerTramaTDMA):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BaseStationC.TimerLeds" loc="44(BaseStationC.TimerLeds):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BaseStationC.AMSenderC" loc="47(BaseStationC.AMSenderC):../../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:17">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BaseStationC.AMSenderC.SenderC" loc="47(BaseStationC.AMSenderC.SenderC):../../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BaseStationC.AMSenderC.SenderC.AMQueueEntryP" loc="43(BaseStationC.AMSenderC.SenderC.AMQueueEntryP):../../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:../../../tos/system/AMQueueP.nc">
      <documentation loc="33:../../../tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):../../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BaseStationC.AMReceiverC" loc="43(BaseStationC.AMReceiverC):../../../tos/system/AMReceiverC.nc">
      <documentation loc="33:../../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:17">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f81822e7810" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f81822e7bc0" loc="81:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f81822e6020" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f81822e63d0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f81822e6740" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HplCC2420AlarmC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz32C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430TimerP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f8181eea930" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f8181eeacd0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f8181ee90d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f8181ee9450" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f8181ee97d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f8181ee9b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f8181ee8020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f8181ee83b0" loc="49:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f8181ee8780" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f8181eacc80" loc="42:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f8181ea90d0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f8181dc6cb0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f8181dc6cb0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f8181d84a40" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f8181d84a40"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f8181d6e570" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f8181d6e570"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f8181d6ed40" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f8181d6ed40"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f8181d6d160" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f8181d6d160"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f8181d6d940" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f8181d6d940"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f8181d6dd10" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f8181d6b540" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f8181d6b540"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f8181d4b620" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f8181d4b620"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f8181d4bdf0" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f8181d4bdf0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f8181d4a220" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f8181d4a220"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f8181d4aa00" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f8181d4aa00"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f8181d4add0" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="GpioCaptureC" loc="47:../../../tos/chips/msp430/timer/GpioCaptureC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; The default for GpioCapture is CCIxA.  Other channels are available&#10; (like B) but they need to be hardcoded in another module.  See&#10; tos/platforms/exp5438_2520/hardware/cc2520/P81SfdCaptureC.nc&#10;&#10; Lower levels have been modified to support being able to change&#10; CCIS in the control registers.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430InterruptC" loc="50:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="CC2420SpiC" loc="39:../../../tos/chips/cc2420/spi/CC2420SpiC.nc" abstract="">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="StateC" loc="65:../../../tos/system/StateC.nc" abstract="">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplCC2420SpiC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Spi0C" loc="79:../../../tos/chips/msp430/usart/Msp430Spi0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDmaP" loc="73:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc" abstract="">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="56:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f818186f5e0" loc="56:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f81818639b0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="96:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f8181848cc0" loc="96:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="BusyWaitCounterC" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc" abstract="">
      <documentation loc="36:../../../tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f81815fe020" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f81815fe020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f81815fe7b0" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f81815fe7b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f81813dad00" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f81813dad00"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f818138ecc0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f818138ecc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f8181358530" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f8181358530"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f8181358880" loc="56:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="VirtualizeTimerImplP" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f818134a980" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f818134a980"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f818134acd0" loc="62:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart1C" loc="42:../../../tos/chips/msp430/usart/Msp430Uart1C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
        <short>&#10; An implementation of the UART on USART1 for the MSP430.</short>
        <long>&#10; An implementation of the UART on USART1 for the MSP430.&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire81@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="44:../../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <documentation loc="36:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart1C" loc="40:../../../tos/chips/msp430/usart/Msp430Usart1C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:../../../tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:../../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:../../../tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:../../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f8180d16360" loc="47:../../../tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:../../../tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:../../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f8180d0f140" loc="47:../../../tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f8180d08020" loc="43:../../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7f8180cefc80" loc="45:../../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMReceiverC" loc="43:../../../tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="33:../../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f8180c85330" loc="43:../../../tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7f81825bd160" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f81825bd160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81825bd4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f81825c0b40" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f81825c0b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f81825bf020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f81825b90c0" loc="42:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f81825b90c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81825b9440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f81825af130" loc="43:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f81825af130"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f81825b81b0"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f81825b8340"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f81825af7d0"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f81825af960"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f81825afaf0"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f81825afc80"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f81825afe10"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f81825b8020"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f81825af4b0"/>
        <function-ref name="node_id" scoped="" ref="0x7f81825af640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f81825aa700" loc="7:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f81825aa700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81825aaa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f81825ac1a0" loc="4:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f81825ac1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81825ac520"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f81825aa020" loc="6:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f81825aa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81825aa3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f81825aade0" loc="8:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f81825aade0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81825a9180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f81825ac810" loc="5:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f81825ac810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f81825ab980"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f81825abb10"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f81825ab020"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f81825ab1b0"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f81825ab340"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f81825ab4d0"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f81825ab660"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f81825ab7f0"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f81825acb90"/>
        <function-ref name="node_id" scoped="" ref="0x7f81825acd20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f81825ae640" loc="2:../../../tos/platforms/telosb/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f81825ae640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81825ae9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f8182594900" loc="39:../../../tos/platforms/telosb/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f8182594900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f8182594c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f8182572de0" loc="40:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f8182572de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f8182577c70"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f8182577310"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f81825774a0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f8182577630"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f8182577180"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f81825777c0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f8182577950"/>
        <function-ref name="initClocks" scoped="" ref="0x7f8182577ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f818257b850" loc="39:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f818257b850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f818257bbd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f8182561830" loc="203:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f8182561830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f81825607f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f8182561d40"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f8182560020"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f81825601b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f8182561bb0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f8182560340"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f81825604d0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f8182560660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f8182560af0" loc="204:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f8182560af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f8182560e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f81825611c0" loc="202:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f81825611c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f8182561540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f81826e0c80" loc="55:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f81826e0c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f81828bb0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f818283d9a0" loc="51:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f818283d9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f818283dd20"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f8182958020"/>
        <function-ref name="sleep" scoped="" ref="0x7f81829581b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f818277e3d0" loc="52:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f818277e3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f818277e750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430ClockInit" ref="0x7f81825798b0" loc="39:../../../tos/platforms/telosb/MoteClockP.nc">
      <component-ref qname="MoteClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f81825798b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f818252c7f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f8182579dc0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f818252c020"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f818252c1b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f8182579c30"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f818252c340"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f818252c4d0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f818252c660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f818251f8d0" loc="69:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f818251f8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f818251fc50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f8182520110" loc="66:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f8182520110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f8182520490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f818251f1d0" loc="68:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f818251f1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f818251f550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f8182520780" loc="67:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f8182520780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f8182520b00"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f8182520c90"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f8182520e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f8182a58940" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f8182a58940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f8182a58cc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f8182a58e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f8182a651e0" loc="46:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f8182a651e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f8182a65560"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f8182a656f0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f8182a65880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f8182609040" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f8182609040"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f81826093c0"/>
        <function-ref name="runTask" scoped="" ref="0x7f8182609550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f8182604490" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f8182604490"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f8182604810"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f81826049a0"/>
        <function-ref name="sleep" scoped="" ref="0x7f8182604b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f818260a140" loc="54:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f818260a140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f818260a4c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f818260a650"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f818260a7e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMControl" ref="0x7f8182506bc0" loc="19:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMControl" scoped="" ref="0x7f8182506bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f8182505020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f81825051b0"/>
        <function-ref name="start" scoped="" ref="0x7f8182505340"/>
        <function-ref name="stop" scoped="" ref="0x7f81825054d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSendTask" ref="0x7f818245a610" loc="110:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioSendTask" scoped="" ref="0x7f818245a610"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f818245a990"/>
        <function-ref name="runTask" scoped="" ref="0x7f818245ab20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f8182507660" loc="17:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f8182507660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f81825079e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f8182506020" loc="18:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f8182506020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f81825063a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f8182506530"/>
        <function-ref name="start" scoped="" ref="0x7f81825066c0"/>
        <function-ref name="stop" scoped="" ref="0x7f8182506850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartReceive" ref="0x7f81824aee30" loc="22:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartReceive" scoped="" ref="0x7f81824aee30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81824ff1e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f81824a6160" loc="29:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f81824a6160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f81824a64e0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f81824a6670"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81824a6800"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81824a6990"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f81824a6b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f8182493440" loc="31:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f8182493440"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81824937c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8182493950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f8182493ae0"/>
        <function-ref name="cancel" scoped="" ref="0x7f8182493c70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8182493e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerTramaTDMA" ref="0x7f8182490270" loc="34:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerTramaTDMA" scoped="" ref="0x7f8182490270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f81824816e0"/>
        <function-ref name="fired" scoped="" ref="0x7f818248fcb0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f8182483a70"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f81824835f0"/>
        <function-ref name="getdt" scoped="" ref="0x7f8182480020"/>
        <function-ref name="gett0" scoped="" ref="0x7f8182481b60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f8182483170"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f8182490e60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f81824810d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f818248f360"/>
        <function-ref name="stop" scoped="" ref="0x7f818248f830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="uartSendTask" ref="0x7f818245c720" loc="109:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="uartSendTask" scoped="" ref="0x7f818245c720"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f818245caa0"/>
        <function-ref name="runTask" scoped="" ref="0x7f818245cc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x7f81824910c0" loc="32:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f81824910c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f8182491440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f818246e500" loc="36:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f818246e500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f818246e880"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f818246ea10"/>
        <function-ref name="led1On" scoped="" ref="0x7f818246eba0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f818246ed30"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f818247a020"/>
        <function-ref name="get" scoped="" ref="0x7f818247a1b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f818247a340"/>
        <function-ref name="led2Off" scoped="" ref="0x7f818247a980"/>
        <function-ref name="set" scoped="" ref="0x7f818247a4d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f818247a660"/>
        <function-ref name="led2On" scoped="" ref="0x7f818247a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartPacket" ref="0x7f81824a5870" loc="23:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartPacket" scoped="" ref="0x7f81824a5870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f81824a5bf0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f81824a5d80"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81824b4020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81824b41b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f81824b4340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartSend" ref="0x7f8182500020" loc="21:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartSend" scoped="" ref="0x7f8182500020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81825003a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8182500530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81825006c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f8182500850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81825009e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartAMPacket" ref="0x7f81824959b0" loc="24:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartAMPacket" scoped="" ref="0x7f81824959b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f8182495d30"/>
        <function-ref name="source" scoped="" ref="0x7f81824af020"/>
        <function-ref name="address" scoped="" ref="0x7f81824af1b0"/>
        <function-ref name="destination" scoped="" ref="0x7f81824af340"/>
        <function-ref name="setSource" scoped="" ref="0x7f81824af4d0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f81824af660"/>
        <function-ref name="type" scoped="" ref="0x7f81824af7f0"/>
        <function-ref name="setType" scoped="" ref="0x7f81824af980"/>
        <function-ref name="isForMe" scoped="" ref="0x7f81824afb10"/>
        <function-ref name="setGroup" scoped="" ref="0x7f81824afca0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f81824afe30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f81824a6dd0" loc="30:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f81824a6dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f8182494180"/>
        <function-ref name="source" scoped="" ref="0x7f8182494310"/>
        <function-ref name="address" scoped="" ref="0x7f81824944a0"/>
        <function-ref name="destination" scoped="" ref="0x7f8182494630"/>
        <function-ref name="setSource" scoped="" ref="0x7f81824947c0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f8182494950"/>
        <function-ref name="type" scoped="" ref="0x7f8182494ae0"/>
        <function-ref name="setType" scoped="" ref="0x7f8182494c70"/>
        <function-ref name="isForMe" scoped="" ref="0x7f8182494e00"/>
        <function-ref name="setGroup" scoped="" ref="0x7f8182493020"/>
        <function-ref name="localGroup" scoped="" ref="0x7f81824931b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerLeds" ref="0x7f8182480650" loc="35:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerLeds" scoped="" ref="0x7f8182480650"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f818247cc40"/>
        <function-ref name="fired" scoped="" ref="0x7f818247e1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f818247c020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f818247eae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f818247b590"/>
        <function-ref name="gett0" scoped="" ref="0x7f818247b110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f818247e660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f818247f390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f818247c630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f818247f860"/>
        <function-ref name="stop" scoped="" ref="0x7f818247fd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f81823e79f0" loc="46:../../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f81823e79f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f81823e7d70"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f81823e4020"/>
        <function-ref name="led1On" scoped="" ref="0x7f81823e41b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f81823e4340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f81823e44d0"/>
        <function-ref name="get" scoped="" ref="0x7f81823e4660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f81823e47f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f81823e4e30"/>
        <function-ref name="set" scoped="" ref="0x7f81823e4980"/>
        <function-ref name="led0On" scoped="" ref="0x7f81823e4b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f81823e4ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f81823d8a90" loc="50:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f81823d8a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81823d8e10"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823de020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823de1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823de340"/>
        <function-ref name="get" scoped="" ref="0x7f81823de4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823de660"/>
        <function-ref name="set" scoped="" ref="0x7f81823de7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f81823de980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f81823e3db0" loc="46:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f81823e3db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81823e0180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f81823deca0" loc="51:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f81823deca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81823dd0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823dd230"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823dd3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823dd550"/>
        <function-ref name="get" scoped="" ref="0x7f81823dd6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823dd870"/>
        <function-ref name="set" scoped="" ref="0x7f81823dda00"/>
        <function-ref name="clr" scoped="" ref="0x7f81823ddb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f81823e0400" loc="47:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f81823e0400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f81823e0780"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f81823e0910"/>
        <function-ref name="led1On" scoped="" ref="0x7f81823e0aa0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f81823e0c30"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f81823e0dc0"/>
        <function-ref name="get" scoped="" ref="0x7f81823df020"/>
        <function-ref name="led1Off" scoped="" ref="0x7f81823df1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f81823df7f0"/>
        <function-ref name="set" scoped="" ref="0x7f81823df340"/>
        <function-ref name="led0On" scoped="" ref="0x7f81823df4d0"/>
        <function-ref name="led2On" scoped="" ref="0x7f81823df660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f81823d6020" loc="52:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f81823d6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81823d63a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823d6530"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823d66c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823d6850"/>
        <function-ref name="get" scoped="" ref="0x7f81823d69e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823d6b70"/>
        <function-ref name="set" scoped="" ref="0x7f81823d6d00"/>
        <function-ref name="clr" scoped="" ref="0x7f81823d5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f81823e1590" loc="41:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f81823e1590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81823e1910"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823e1aa0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823e1c30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823e1dc0"/>
        <function-ref name="get" scoped="" ref="0x7f81823ba020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823ba1b0"/>
        <function-ref name="set" scoped="" ref="0x7f81823ba340"/>
        <function-ref name="clr" scoped="" ref="0x7f81823ba4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f81823ba830" loc="42:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f81823ba830"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81823babb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823bad40"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823b9020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823b91b0"/>
        <function-ref name="get" scoped="" ref="0x7f81823b9340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823b94d0"/>
        <function-ref name="set" scoped="" ref="0x7f81823b9660"/>
        <function-ref name="clr" scoped="" ref="0x7f81823b97f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f81823b8dd0" loc="44:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f81823b8dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81823b7180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f81823b9b50" loc="43:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f81823b9b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81823b8020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823b81b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823b8340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823b84d0"/>
        <function-ref name="get" scoped="" ref="0x7f81823b8660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823b87f0"/>
        <function-ref name="set" scoped="" ref="0x7f81823b8980"/>
        <function-ref name="clr" scoped="" ref="0x7f81823b8b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f818239dd50" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f818239dd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818239c100"/>
        <function-ref name="isInput" scoped="" ref="0x7f818239c290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818239c420"/>
        <function-ref name="clr" scoped="" ref="0x7f818239a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818239c740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818239c8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818239ca60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818239cbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818239cd80"/>
        <function-ref name="get" scoped="" ref="0x7f818239b020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818239b1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818239b340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818239b4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818239b760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818239b8f0"/>
        <function-ref name="set" scoped="" ref="0x7f818239ba80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818239bc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818239c5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818239bda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818239a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f8182383e50" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f8182383e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182382210"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823823a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182382530"/>
        <function-ref name="clr" scoped="" ref="0x7f8182380340"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182382850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823829e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182382b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182382d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182381020"/>
        <function-ref name="get" scoped="" ref="0x7f81823811b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182381340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81823814d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182381660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823818f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182381a80"/>
        <function-ref name="set" scoped="" ref="0x7f8182381c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182381da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823826c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182380020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81823801b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f81822f93d0" loc="205:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f81822f93d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822f9750"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822f98e0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81822f9a70"/>
        <function-ref name="clr" scoped="" ref="0x7f81822f77f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81822f9d90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822f8020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81822f81b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822f8340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822f84d0"/>
        <function-ref name="get" scoped="" ref="0x7f81822f8660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822f87f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822f8980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822f8b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822f8da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822f7020"/>
        <function-ref name="set" scoped="" ref="0x7f81822f71b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822f7340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822f9c00"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822f74d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822f7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f81822fe3e0" loc="201:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f81822fe3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822fe760"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822fe8f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81822fea80"/>
        <function-ref name="clr" scoped="" ref="0x7f81822fc7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81822feda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822fd020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81822fd1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822fd340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822fd4d0"/>
        <function-ref name="get" scoped="" ref="0x7f81822fd660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822fd7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822fd980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822fdb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822fdda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822fc020"/>
        <function-ref name="set" scoped="" ref="0x7f81822fc1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822fc340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822fec10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822fc4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822fc660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f81823273f0" loc="183:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f81823273f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182327770"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182327900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182327a90"/>
        <function-ref name="clr" scoped="" ref="0x7f81823257f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182327db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182326020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81823261b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182326340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823264d0"/>
        <function-ref name="get" scoped="" ref="0x7f8182326660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823267f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182326980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182326b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182326da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182325020"/>
        <function-ref name="set" scoped="" ref="0x7f81823251b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182325340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182327c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823254d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182325660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f818237ee50" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f818237ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818237d210"/>
        <function-ref name="isInput" scoped="" ref="0x7f818237d3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818237d530"/>
        <function-ref name="clr" scoped="" ref="0x7f818237b340"/>
        <function-ref name="toggle" scoped="" ref="0x7f818237d850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818237d9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818237db70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818237dd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818237c020"/>
        <function-ref name="get" scoped="" ref="0x7f818237c1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818237c340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818237c4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818237c660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818237c8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818237ca80"/>
        <function-ref name="set" scoped="" ref="0x7f818237cc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818237cda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818237d6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818237b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818237b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f8182364020" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f8182364020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81823643a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182364530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81823646c0"/>
        <function-ref name="clr" scoped="" ref="0x7f81823624d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823649e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182364b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182364d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182363020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823631b0"/>
        <function-ref name="get" scoped="" ref="0x7f8182363340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823634d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182363660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81823637f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182363a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182363c10"/>
        <function-ref name="set" scoped="" ref="0x7f8182363da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182362020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182364850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823621b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182362340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f818234a020" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f818234a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818234a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818234a530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818234a6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f81823484d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818234a9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818234ab70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818234ad00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182349020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823491b0"/>
        <function-ref name="get" scoped="" ref="0x7f8182349340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823494d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182349660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81823497f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182349a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182349c10"/>
        <function-ref name="set" scoped="" ref="0x7f8182349da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182348020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818234a850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823481b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182348340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f8182336020" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f8182336020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81823363a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182336530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81823366c0"/>
        <function-ref name="clr" scoped="" ref="0x7f81823344d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823369e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182336b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182336d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182335020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823351b0"/>
        <function-ref name="get" scoped="" ref="0x7f8182335340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823354d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182335660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81823357f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182335a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182335c10"/>
        <function-ref name="set" scoped="" ref="0x7f8182335da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182334020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182336850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823341b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182334340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f81823223f0" loc="185:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f81823223f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182322770"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182322900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182322a90"/>
        <function-ref name="clr" scoped="" ref="0x7f81823207f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182322db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182321020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81823211b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182321340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823214d0"/>
        <function-ref name="get" scoped="" ref="0x7f8182321660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823217f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182321980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182321b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182321da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182320020"/>
        <function-ref name="set" scoped="" ref="0x7f81823201b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182320340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182322c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823204d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182320660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f818230d3e0" loc="195:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f818230d3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818230d760"/>
        <function-ref name="isInput" scoped="" ref="0x7f818230d8f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818230da80"/>
        <function-ref name="clr" scoped="" ref="0x7f818230b7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818230dda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818230c020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818230c1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818230c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818230c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f818230c660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818230c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818230c980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818230cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818230cda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818230b020"/>
        <function-ref name="set" scoped="" ref="0x7f818230b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818230b340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818230dc10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818230b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818230b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f81822ef3f0" loc="211:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f81822ef3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822ef770"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822ef900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81822efa90"/>
        <function-ref name="clr" scoped="" ref="0x7f81822ed7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81822efdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822ee020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81822ee1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822ee340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822ee4d0"/>
        <function-ref name="get" scoped="" ref="0x7f81822ee660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822ee7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822ee980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822eeb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822eeda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822ed020"/>
        <function-ref name="set" scoped="" ref="0x7f81822ed1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822ed340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822efc20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822ed4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822ed660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f8182395580" loc="57:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f8182395580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182395900"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182395a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182395c20"/>
        <function-ref name="clr" scoped="" ref="0x7f8182393980"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182394020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823941b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182394340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81823944d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182394660"/>
        <function-ref name="get" scoped="" ref="0x7f81823947f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182394980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182394b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182394ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182393020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81823931b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182393340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81823934d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182395db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182393660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81823937f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f8182320bc0" loc="186:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f8182320bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818231f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f818231f1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818231f340"/>
        <function-ref name="clr" scoped="" ref="0x7f818231d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f818231f660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818231f7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818231f980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818231fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818231fca0"/>
        <function-ref name="get" scoped="" ref="0x7f818231fe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818231e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818231e1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818231e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818231e5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818231e760"/>
        <function-ref name="set" scoped="" ref="0x7f818231e8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818231ea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818231f4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818231ec10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818231eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f8182390580" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f8182390580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182390900"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182390a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182390c20"/>
        <function-ref name="clr" scoped="" ref="0x7f818238e980"/>
        <function-ref name="toggle" scoped="" ref="0x7f818238f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818238f1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818238f340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818238f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818238f660"/>
        <function-ref name="get" scoped="" ref="0x7f818238f7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818238f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818238fb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818238fca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818238e020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818238e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f818238e340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818238e4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182390db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818238e660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818238e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f8182376710" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f8182376710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182376a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182376c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182376db0"/>
        <function-ref name="clr" scoped="" ref="0x7f8182374a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823751b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182375340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81823754d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182375660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823757f0"/>
        <function-ref name="get" scoped="" ref="0x7f8182375980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182375b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182375ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182375e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182374120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81823742b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182374440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81823745d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182375020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182374760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81823748f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f818235d8a0" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f818235d8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818235dc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f818235ddb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818235c020"/>
        <function-ref name="clr" scoped="" ref="0x7f818235bc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f818235c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818235c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818235c660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818235c7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818235c980"/>
        <function-ref name="get" scoped="" ref="0x7f818235cb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818235cca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818235ce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818235b020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818235b2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818235b440"/>
        <function-ref name="set" scoped="" ref="0x7f818235b5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818235b760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818235c1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818235b8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818235ba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f81823438a0" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f81823438a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182343c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182343db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182342020"/>
        <function-ref name="clr" scoped="" ref="0x7f8182341c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182342340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823424d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182342660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81823427f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182342980"/>
        <function-ref name="get" scoped="" ref="0x7f8182342b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182342ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182342e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182341020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823412b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182341440"/>
        <function-ref name="set" scoped="" ref="0x7f81823415d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182341760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823421b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823418f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182341a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f818232f8a0" loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f818232f8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818232fc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f818232fdb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818232e020"/>
        <function-ref name="clr" scoped="" ref="0x7f818232dc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f818232e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818232e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818232e660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818232e7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818232e980"/>
        <function-ref name="get" scoped="" ref="0x7f818232eb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818232eca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818232ee30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818232d020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818232d2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818232d440"/>
        <function-ref name="set" scoped="" ref="0x7f818232d5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818232d760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818232e1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818232d8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818232da80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f81823a2d50" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f81823a2d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81823a1100"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823a1290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81823a1420"/>
        <function-ref name="clr" scoped="" ref="0x7f818239f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823a1740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823a18d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81823a1a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81823a1bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823a1d80"/>
        <function-ref name="get" scoped="" ref="0x7f81823a0020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823a01b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81823a0340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81823a04d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823a0760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81823a08f0"/>
        <function-ref name="set" scoped="" ref="0x7f81823a0a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81823a0c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823a15b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823a0da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818239f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f8182388d50" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f8182388d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182387210"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823873a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182387530"/>
        <function-ref name="clr" scoped="" ref="0x7f8182385340"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182387850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823879e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182387b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182387d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182386020"/>
        <function-ref name="get" scoped="" ref="0x7f81823861b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182386340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81823864d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182386660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823868f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182386a80"/>
        <function-ref name="set" scoped="" ref="0x7f8182386c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182386da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823876c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182385020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81823851b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f818236fe50" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f818236fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818236e210"/>
        <function-ref name="isInput" scoped="" ref="0x7f818236e3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818236e530"/>
        <function-ref name="clr" scoped="" ref="0x7f818236c340"/>
        <function-ref name="toggle" scoped="" ref="0x7f818236e850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818236e9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818236eb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818236ed00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818236d020"/>
        <function-ref name="get" scoped="" ref="0x7f818236d1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818236d340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818236d4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818236d660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818236d8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818236da80"/>
        <function-ref name="set" scoped="" ref="0x7f818236dc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818236dda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818236e6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818236c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818236c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f818232abc0" loc="182:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f818232abc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182329020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823291b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182329340"/>
        <function-ref name="clr" scoped="" ref="0x7f8182327020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182329660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823297f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182329980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182329b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182329ca0"/>
        <function-ref name="get" scoped="" ref="0x7f8182329e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182328020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81823281b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182328340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823285d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182328760"/>
        <function-ref name="set" scoped="" ref="0x7f81823288f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182328a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823294d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182328c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182328da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f8182306bb0" loc="198:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f8182306bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182305020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823051b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182305340"/>
        <function-ref name="clr" scoped="" ref="0x7f8182303020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182305660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823057f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182305980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182305b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182305ca0"/>
        <function-ref name="get" scoped="" ref="0x7f8182305e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182304020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81823041b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182304340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823045d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182304760"/>
        <function-ref name="set" scoped="" ref="0x7f81823048f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182304a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823054d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182304c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182304da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f81822f2bb0" loc="209:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f81822f2bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822f1020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822f11b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81822f1340"/>
        <function-ref name="clr" scoped="" ref="0x7f81822ef020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81822f1660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822f17f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81822f1980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822f1b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822f1ca0"/>
        <function-ref name="get" scoped="" ref="0x7f81822f1e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822f0020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822f01b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822f0340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822f05d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822f0760"/>
        <function-ref name="set" scoped="" ref="0x7f81822f08f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822f0a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822f14d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822f0c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822f0da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f8182315bc0" loc="191:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f8182315bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182314020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823141b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182314340"/>
        <function-ref name="clr" scoped="" ref="0x7f8182312020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182314660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823147f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182314980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182314b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182314ca0"/>
        <function-ref name="get" scoped="" ref="0x7f8182314e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182313020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81823131b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182313340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823135d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182313760"/>
        <function-ref name="set" scoped="" ref="0x7f81823138f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182313a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823144d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182313c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182313da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f818236ae50" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f818236ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182369410"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823695a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182369730"/>
        <function-ref name="clr" scoped="" ref="0x7f81823674d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182369a50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182369be0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182369d70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182368020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823681b0"/>
        <function-ref name="get" scoped="" ref="0x7f8182368340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823684d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182368660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81823687f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182368a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182368c10"/>
        <function-ref name="set" scoped="" ref="0x7f8182368da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182367020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823698c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823671b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182367340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f818234f020" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f818234f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818234f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818234f530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818234f6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f818234d4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818234f9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818234fb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818234fd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818234e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818234e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f818234e340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818234e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818234e660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818234e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818234ea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818234ec10"/>
        <function-ref name="set" scoped="" ref="0x7f818234eda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818234d020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818234f850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818234d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818234d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f818233b020" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f818233b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818233b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818233b530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818233b6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f81823394d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818233b9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818233bb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818233bd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818233a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818233a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f818233a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818233a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818233a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818233a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818233aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818233ac10"/>
        <function-ref name="set" scoped="" ref="0x7f818233ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182339020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818233b850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823391b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182339340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f81823033e0" loc="199:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f81823033e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182303760"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823038f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182303a80"/>
        <function-ref name="clr" scoped="" ref="0x7f81823017f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182303da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182302020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81823021b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182302340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823024d0"/>
        <function-ref name="get" scoped="" ref="0x7f8182302660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823027f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182302980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182302b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182302da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182301020"/>
        <function-ref name="set" scoped="" ref="0x7f81823011b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182301340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182303c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823014d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182301660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f818231d3e0" loc="188:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f818231d3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818231d760"/>
        <function-ref name="isInput" scoped="" ref="0x7f818231d8f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818231da80"/>
        <function-ref name="clr" scoped="" ref="0x7f818231b7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818231dda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818231c020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818231c1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818231c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818231c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f818231c660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818231c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818231c980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818231cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818231cda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818231b020"/>
        <function-ref name="set" scoped="" ref="0x7f818231b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818231b340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818231dc10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818231b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818231b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f818239a580" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f818239a580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818239a900"/>
        <function-ref name="isInput" scoped="" ref="0x7f818239aa90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818239ac20"/>
        <function-ref name="clr" scoped="" ref="0x7f8182398980"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182399020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823991b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182399340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81823994d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182399660"/>
        <function-ref name="get" scoped="" ref="0x7f81823997f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182399980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182399b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182399ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182398020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81823981b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182398340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81823984d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818239adb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182398660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81823987f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f8182380710" loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f8182380710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182380a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182380c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182380db0"/>
        <function-ref name="clr" scoped="" ref="0x7f818237ea80"/>
        <function-ref name="toggle" scoped="" ref="0x7f818237f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818237f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818237f4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818237f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818237f7f0"/>
        <function-ref name="get" scoped="" ref="0x7f818237f980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818237fb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818237fca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818237fe30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818237e120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818237e2b0"/>
        <function-ref name="set" scoped="" ref="0x7f818237e440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818237e5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818237f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818237e760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818237e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f8182340020" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f8182340020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81823403a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182340530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81823406c0"/>
        <function-ref name="clr" scoped="" ref="0x7f818233e4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823409e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182340b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182340d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818233f020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818233f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f818233f340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818233f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818233f660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818233f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818233fa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818233fc10"/>
        <function-ref name="set" scoped="" ref="0x7f818233fda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818233e020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182340850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818233e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818233e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f818237b710" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f818237b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818237ba90"/>
        <function-ref name="isInput" scoped="" ref="0x7f818237bc20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818237bdb0"/>
        <function-ref name="clr" scoped="" ref="0x7f8182379a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f818237a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818237a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818237a4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818237a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818237a7f0"/>
        <function-ref name="get" scoped="" ref="0x7f818237a980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818237ab10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818237aca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818237ae30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182379120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81823792b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182379440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81823795d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818237a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182379760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81823798f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f81823628a0" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f81823628a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182362c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182362db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182361020"/>
        <function-ref name="clr" scoped="" ref="0x7f8182360c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182361340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823614d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182361660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81823617f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182361980"/>
        <function-ref name="get" scoped="" ref="0x7f8182361b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182361ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182361e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182360020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823602b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182360440"/>
        <function-ref name="set" scoped="" ref="0x7f81823605d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182360760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823611b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823608f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182360a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f81823488a0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f81823488a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182348c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182348db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182347020"/>
        <function-ref name="clr" scoped="" ref="0x7f8182346c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182347340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823474d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182347660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81823477f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182347980"/>
        <function-ref name="get" scoped="" ref="0x7f8182347b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182347ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182347e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182346020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823462b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182346440"/>
        <function-ref name="set" scoped="" ref="0x7f81823465d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182346760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823471b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823468f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182346a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f81823348a0" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f81823348a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182334c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182334db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182333020"/>
        <function-ref name="clr" scoped="" ref="0x7f8182332c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182333340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823334d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182333660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81823337f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182333980"/>
        <function-ref name="get" scoped="" ref="0x7f8182333b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182333ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182333e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182332020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823322b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182332440"/>
        <function-ref name="set" scoped="" ref="0x7f81823325d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182332760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823331b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823328f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182332a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f81823183f0" loc="190:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f81823183f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182318770"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182318900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182318a90"/>
        <function-ref name="clr" scoped="" ref="0x7f81823157f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182318db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182316020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81823161b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182316340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823164d0"/>
        <function-ref name="get" scoped="" ref="0x7f8182316660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823167f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182316980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182316b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182316da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182315020"/>
        <function-ref name="set" scoped="" ref="0x7f81823151b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182315340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182318c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823154d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182315660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f81823a5cb0" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f81823a5cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81823b30a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823b3230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81823b33c0"/>
        <function-ref name="clr" scoped="" ref="0x7f81823a41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823b36e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823b3870"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81823b3a00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81823b3b90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823b3d20"/>
        <function-ref name="get" scoped="" ref="0x7f81823b2020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823b21b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81823b2340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81823b24d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823b2760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81823b28f0"/>
        <function-ref name="set" scoped="" ref="0x7f81823b2a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81823b2c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823b3550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823b2da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81823a4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f818238ed50" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f818238ed50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818238c100"/>
        <function-ref name="isInput" scoped="" ref="0x7f818238c290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818238c420"/>
        <function-ref name="clr" scoped="" ref="0x7f818238a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818238c740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818238c8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818238ca60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818238cbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818238cd80"/>
        <function-ref name="get" scoped="" ref="0x7f818238b020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818238b1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818238b340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818238b4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818238b760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818238b8f0"/>
        <function-ref name="set" scoped="" ref="0x7f818238ba80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818238bc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818238c5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818238bda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818238a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f8182374e50" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f8182374e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182373210"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823733a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182373530"/>
        <function-ref name="clr" scoped="" ref="0x7f8182371340"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182373850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823739e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182373b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182373d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182372020"/>
        <function-ref name="get" scoped="" ref="0x7f81823721b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182372340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81823724d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182372660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823728f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182372a80"/>
        <function-ref name="set" scoped="" ref="0x7f8182372c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182372da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823736c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182371020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81823711b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f818235a020" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f818235a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818235a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818235a530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818235a6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f81823584d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818235a9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818235ab70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818235ad00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182359020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823591b0"/>
        <function-ref name="get" scoped="" ref="0x7f8182359340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823594d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182359660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81823597f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182359a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182359c10"/>
        <function-ref name="set" scoped="" ref="0x7f8182359da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182358020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818235a850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823581b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182358340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f81823123f0" loc="192:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f81823123f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182312770"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182312900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182312a90"/>
        <function-ref name="clr" scoped="" ref="0x7f81823107f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182312db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182311020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81823111b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182311340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823114d0"/>
        <function-ref name="get" scoped="" ref="0x7f8182311660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823117f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182311980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182311b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182311da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182310020"/>
        <function-ref name="set" scoped="" ref="0x7f81823101b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182310340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182312c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823104d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182310660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f818230bbb0" loc="196:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f818230bbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818230a020"/>
        <function-ref name="isInput" scoped="" ref="0x7f818230a1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818230a340"/>
        <function-ref name="clr" scoped="" ref="0x7f8182308020"/>
        <function-ref name="toggle" scoped="" ref="0x7f818230a660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818230a7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818230a980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818230ab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818230aca0"/>
        <function-ref name="get" scoped="" ref="0x7f818230ae30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182309020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81823091b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182309340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823095d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182309760"/>
        <function-ref name="set" scoped="" ref="0x7f81823098f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182309a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818230a4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182309c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182309da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f81822fcbb0" loc="202:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f81822fcbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822fb020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822fb1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81822fb340"/>
        <function-ref name="clr" scoped="" ref="0x7f81822f9020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81822fb660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822fb7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81822fb980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822fbb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822fbca0"/>
        <function-ref name="get" scoped="" ref="0x7f81822fbe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822fa020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822fa1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822fa340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822fa5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822fa760"/>
        <function-ref name="set" scoped="" ref="0x7f81822fa8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822faa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822fb4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822fac10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822fada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f8182355020" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f8182355020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81823553a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182355530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81823556c0"/>
        <function-ref name="clr" scoped="" ref="0x7f81823534d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823559e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182355b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182355d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182354020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823541b0"/>
        <function-ref name="get" scoped="" ref="0x7f8182354340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823544d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182354660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81823547f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182354a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182354c10"/>
        <function-ref name="set" scoped="" ref="0x7f8182354da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182353020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182355850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823531b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182353340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f8182310bc0" loc="193:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f8182310bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818230f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f818230f1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818230f340"/>
        <function-ref name="clr" scoped="" ref="0x7f818230d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f818230f660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818230f7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818230f980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818230fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818230fca0"/>
        <function-ref name="get" scoped="" ref="0x7f818230fe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818230e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818230e1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818230e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818230e5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818230e760"/>
        <function-ref name="set" scoped="" ref="0x7f818230e8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818230ea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818230f4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818230ec10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818230eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f818239f580" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f818239f580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818239f900"/>
        <function-ref name="isInput" scoped="" ref="0x7f818239fa90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818239fc20"/>
        <function-ref name="clr" scoped="" ref="0x7f818239d980"/>
        <function-ref name="toggle" scoped="" ref="0x7f818239e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818239e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818239e340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818239e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818239e660"/>
        <function-ref name="get" scoped="" ref="0x7f818239e7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818239e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818239eb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818239eca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818239d020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818239d1b0"/>
        <function-ref name="set" scoped="" ref="0x7f818239d340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818239d4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818239fdb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818239d660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818239d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f8182385710" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f8182385710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182385a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182385c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182385db0"/>
        <function-ref name="clr" scoped="" ref="0x7f8182383a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823841b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182384340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81823844d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182384660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823847f0"/>
        <function-ref name="get" scoped="" ref="0x7f8182384980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182384b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182384ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182384e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182383120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81823832b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182383440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81823835d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182384020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182383760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81823838f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f818236c710" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f818236c710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818236ca90"/>
        <function-ref name="isInput" scoped="" ref="0x7f818236cc20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818236cdb0"/>
        <function-ref name="clr" scoped="" ref="0x7f818236aa80"/>
        <function-ref name="toggle" scoped="" ref="0x7f818236b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818236b340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818236b4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818236b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818236b7f0"/>
        <function-ref name="get" scoped="" ref="0x7f818236b980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818236bb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818236bca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818236be30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818236a120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818236a2b0"/>
        <function-ref name="set" scoped="" ref="0x7f818236a440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818236a5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818236b020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818236a760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818236a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f818231bbc0" loc="189:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f818231bbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818231a020"/>
        <function-ref name="isInput" scoped="" ref="0x7f818231a1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818231a340"/>
        <function-ref name="clr" scoped="" ref="0x7f8182318020"/>
        <function-ref name="toggle" scoped="" ref="0x7f818231a660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818231a7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818231a980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818231ab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818231aca0"/>
        <function-ref name="get" scoped="" ref="0x7f818231ae30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182319020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81823191b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182319340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823195d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182319760"/>
        <function-ref name="set" scoped="" ref="0x7f81823198f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182319a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818231a4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182319c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182319da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f8182301bb0" loc="200:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f8182301bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182300020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823001b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182300340"/>
        <function-ref name="clr" scoped="" ref="0x7f81822fe020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182300660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823007f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182300980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182300b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182300ca0"/>
        <function-ref name="get" scoped="" ref="0x7f8182300e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822ff020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822ff1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822ff340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822ff5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822ff760"/>
        <function-ref name="set" scoped="" ref="0x7f81822ff8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822ffa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823004d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822ffc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822ffda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f81823678a0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f81823678a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182367c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182367db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182366020"/>
        <function-ref name="clr" scoped="" ref="0x7f8182365c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182366340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823664d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182366660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81823667f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182366980"/>
        <function-ref name="get" scoped="" ref="0x7f8182366b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182366ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182366e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182365020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823652b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182365440"/>
        <function-ref name="set" scoped="" ref="0x7f81823655d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182365760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823661b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823658f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182365a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f818234d8a0" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f818234d8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818234dc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f818234ddb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818234c020"/>
        <function-ref name="clr" scoped="" ref="0x7f818234bc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f818234c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818234c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818234c660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818234c7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818234c980"/>
        <function-ref name="get" scoped="" ref="0x7f818234cb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818234cca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818234ce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818234b020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818234b2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818234b440"/>
        <function-ref name="set" scoped="" ref="0x7f818234b5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818234b760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818234c1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818234b8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818234ba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f81823398a0" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f81823398a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182339c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182339db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182338020"/>
        <function-ref name="clr" scoped="" ref="0x7f8182337c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182338340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823384d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182338660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81823387f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182338980"/>
        <function-ref name="get" scoped="" ref="0x7f8182338b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182338ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182338e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182337020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823372b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182337440"/>
        <function-ref name="set" scoped="" ref="0x7f81823375d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182337760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823381b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823378f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182337a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f8182398d50" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f8182398d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182397100"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182397290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182397420"/>
        <function-ref name="clr" scoped="" ref="0x7f81823951b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182397740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823978d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182397a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182397bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182397d80"/>
        <function-ref name="get" scoped="" ref="0x7f8182396020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823961b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182396340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81823964d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182396760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81823968f0"/>
        <function-ref name="set" scoped="" ref="0x7f8182396a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182396c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823975b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182396da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182395020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f818233e8a0" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f818233e8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818233ec20"/>
        <function-ref name="isInput" scoped="" ref="0x7f818233edb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818233d020"/>
        <function-ref name="clr" scoped="" ref="0x7f818233cc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f818233d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818233d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818233d660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818233d7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818233d980"/>
        <function-ref name="get" scoped="" ref="0x7f818233db10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818233dca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818233de30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818233c020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818233c2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818233c440"/>
        <function-ref name="set" scoped="" ref="0x7f818233c5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818233c760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818233d1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818233c8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818233ca80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f8182393d50" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f8182393d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182392100"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182392290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182392420"/>
        <function-ref name="clr" scoped="" ref="0x7f81823901b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182392740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823928d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182392a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182392bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182392d80"/>
        <function-ref name="get" scoped="" ref="0x7f8182391020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823911b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182391340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81823914d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182391760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81823918f0"/>
        <function-ref name="set" scoped="" ref="0x7f8182391a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182391c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823925b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182391da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182390020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f8182379e50" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f8182379e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182378210"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823783a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182378530"/>
        <function-ref name="clr" scoped="" ref="0x7f8182376340"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182378850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823789e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182378b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182378d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182377020"/>
        <function-ref name="get" scoped="" ref="0x7f81823771b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182377340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81823774d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182377660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823778f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182377a80"/>
        <function-ref name="set" scoped="" ref="0x7f8182377c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182377da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823786c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182376020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81823761b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f818235f020" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f818235f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818235f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818235f530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818235f6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f818235d4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818235f9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818235fb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818235fd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818235e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818235e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f818235e340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818235e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818235e660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818235e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818235ea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818235ec10"/>
        <function-ref name="set" scoped="" ref="0x7f818235eda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818235d020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818235f850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818235d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818235d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f8182345020" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f8182345020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81823453a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182345530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81823456c0"/>
        <function-ref name="clr" scoped="" ref="0x7f81823434d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823459e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182345b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182345d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182344020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823441b0"/>
        <function-ref name="get" scoped="" ref="0x7f8182344340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823444d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182344660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81823447f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182344a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182344c10"/>
        <function-ref name="set" scoped="" ref="0x7f8182344da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182343020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182345850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823431b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182343340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f8182331020" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f8182331020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81823313a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182331530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81823316c0"/>
        <function-ref name="clr" scoped="" ref="0x7f818232f4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823319e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182331b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182331d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182330020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823301b0"/>
        <function-ref name="get" scoped="" ref="0x7f8182330340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823304d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182330660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81823307f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182330a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182330c10"/>
        <function-ref name="set" scoped="" ref="0x7f8182330da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818232f020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182331850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818232f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818232f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f81823a4580" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f81823a4580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81823a4900"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823a4a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81823a4c20"/>
        <function-ref name="clr" scoped="" ref="0x7f81823a2980"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823a3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823a31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81823a3340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81823a34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823a3660"/>
        <function-ref name="get" scoped="" ref="0x7f81823a37f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823a3980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81823a3b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81823a3ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823a2020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81823a21b0"/>
        <function-ref name="set" scoped="" ref="0x7f81823a2340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81823a24d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823a4db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823a2660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81823a27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f818238a580" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f818238a580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818238a900"/>
        <function-ref name="isInput" scoped="" ref="0x7f818238aa90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818238ac20"/>
        <function-ref name="clr" scoped="" ref="0x7f8182388980"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182389020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823891b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182389340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81823894d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182389660"/>
        <function-ref name="get" scoped="" ref="0x7f81823897f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182389980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182389b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182389ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182388020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81823881b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182388340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81823884d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818238adb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182388660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81823887f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f8182371710" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f8182371710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182371a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182371c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182371db0"/>
        <function-ref name="clr" scoped="" ref="0x7f818236fa80"/>
        <function-ref name="toggle" scoped="" ref="0x7f81823701b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182370340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81823704d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182370660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823707f0"/>
        <function-ref name="get" scoped="" ref="0x7f8182370980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182370b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182370ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182370e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818236f120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818236f2b0"/>
        <function-ref name="set" scoped="" ref="0x7f818236f440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818236f5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182370020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818236f760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818236f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f81823588a0" loc="90:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f81823588a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182358c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182358db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182357020"/>
        <function-ref name="clr" scoped="" ref="0x7f8182356c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182357340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823574d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182357660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81823577f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182357980"/>
        <function-ref name="get" scoped="" ref="0x7f8182357b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182357ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182357e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182356020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823562b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182356440"/>
        <function-ref name="set" scoped="" ref="0x7f81823565d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182356760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823571b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823568f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182356a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f81823083e0" loc="197:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f81823083e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182308760"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823088f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182308a80"/>
        <function-ref name="clr" scoped="" ref="0x7f81823067f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182308da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182307020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81823071b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182307340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81823074d0"/>
        <function-ref name="get" scoped="" ref="0x7f8182307660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81823077f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182307980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182307b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182307da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182306020"/>
        <function-ref name="set" scoped="" ref="0x7f81823061b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182306340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182308c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823064d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182306660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f81822f7ba0" loc="206:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f81822f7ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822f6020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822f61b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81822f6340"/>
        <function-ref name="clr" scoped="" ref="0x7f81822f4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81822f6660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822f67f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81822f6980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822f6b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822f6ca0"/>
        <function-ref name="get" scoped="" ref="0x7f81822f6e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822f5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822f51b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822f5340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822f55d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822f5760"/>
        <function-ref name="set" scoped="" ref="0x7f81822f58f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822f5a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822f64d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822f5c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822f5da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f8182325bc0" loc="184:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f8182325bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182324020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81823241b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182324340"/>
        <function-ref name="clr" scoped="" ref="0x7f8182322020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182324660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823247f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182324980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182324b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182324ca0"/>
        <function-ref name="get" scoped="" ref="0x7f8182324e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182323020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81823231b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182323340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823235d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182323760"/>
        <function-ref name="set" scoped="" ref="0x7f81823238f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182323a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823244d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182323c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182323da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f81823538a0" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f81823538a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182353c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182353db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182351020"/>
        <function-ref name="clr" scoped="" ref="0x7f8182350c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182351340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81823514d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182351660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81823517f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182351980"/>
        <function-ref name="get" scoped="" ref="0x7f8182351b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182351ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182351e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182350020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81823502b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182350440"/>
        <function-ref name="set" scoped="" ref="0x7f81823505d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182350760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81823511b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81823508f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182350a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f81822f43e0" loc="208:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f81822f43e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822f4760"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822f48f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81822f4a80"/>
        <function-ref name="clr" scoped="" ref="0x7f81822f27f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81822f4da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822f3020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81822f31b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822f3340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822f34d0"/>
        <function-ref name="get" scoped="" ref="0x7f81822f3660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822f37f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822f3980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822f3b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822f3da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822f2020"/>
        <function-ref name="set" scoped="" ref="0x7f81822f21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822f2340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822f4c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822f24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822f2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f81822edbc0" loc="212:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f81822edbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822ec020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822ec1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81822ec340"/>
        <function-ref name="clr" scoped="" ref="0x7f81822ea020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81822ec660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822ec7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81822ec980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822ecb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822ecca0"/>
        <function-ref name="get" scoped="" ref="0x7f81822ece30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822eb020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822eb1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822eb340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822eb5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822eb760"/>
        <function-ref name="set" scoped="" ref="0x7f81822eb8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822eba80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822ec4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822ebc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822ebda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f818232c060" loc="181:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f818232c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818232c7e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818232c970"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818232cb00"/>
        <function-ref name="clr" scoped="" ref="0x7f818232a7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818232ce20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818232b020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818232b1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818232b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818232b4d0"/>
        <function-ref name="get" scoped="" ref="0x7f818232b660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818232b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818232b980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818232bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818232bda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818232a020"/>
        <function-ref name="set" scoped="" ref="0x7f818232a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818232a340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818232cc90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818232a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818232a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81822b9540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81822b9540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822b98c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822b9a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81822b9be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822b7980"/>
        <function-ref name="toggle" scoped="" ref="0x7f81822b8020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822b81b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81822b8340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822b84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822b8660"/>
        <function-ref name="get" scoped="" ref="0x7f81822b87f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822b8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822b8b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822b8ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822b7020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822b71b0"/>
        <function-ref name="set" scoped="" ref="0x7f81822b7340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822b74d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822b7660"/>
        <function-ref name="clr" scoped="" ref="0x7f81822b9d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822b77f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81822b4b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81822b4b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822b3020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822b31b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81822b3340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822b1020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81822b3660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822b37f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81822b3980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822b3b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822b3ca0"/>
        <function-ref name="get" scoped="" ref="0x7f81822b3e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822b2020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822b21b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822b2340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822b25d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822b2760"/>
        <function-ref name="set" scoped="" ref="0x7f81822b28f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822b2a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822b2c10"/>
        <function-ref name="clr" scoped="" ref="0x7f81822b34d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822b2da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81822ad060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81822ad060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822ad3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822ad570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81822ad700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822ab4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81822ada20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822adbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81822add40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822ac020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822ac1b0"/>
        <function-ref name="get" scoped="" ref="0x7f81822ac340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822ac4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822ac660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822ac7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822aca80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822acc10"/>
        <function-ref name="set" scoped="" ref="0x7f81822acda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822ab020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822ab1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f81822ad890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822ab340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81822a8540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81822a8540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822a88c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822a8a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81822a8be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822a6980"/>
        <function-ref name="toggle" scoped="" ref="0x7f81822a7020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822a71b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81822a7340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822a74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822a7660"/>
        <function-ref name="get" scoped="" ref="0x7f81822a77f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822a7980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822a7b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822a7ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822a6020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822a61b0"/>
        <function-ref name="set" scoped="" ref="0x7f81822a6340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822a64d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822a6660"/>
        <function-ref name="clr" scoped="" ref="0x7f81822a8d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822a67f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81822a3b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81822a3b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822a2020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822a21b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81822a2340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822a0020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81822a2660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822a27f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81822a2980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822a2b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822a2ca0"/>
        <function-ref name="get" scoped="" ref="0x7f81822a2e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822a1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822a11b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822a1340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822a15d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822a1760"/>
        <function-ref name="set" scoped="" ref="0x7f81822a18f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822a1a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822a1c10"/>
        <function-ref name="clr" scoped="" ref="0x7f81822a24d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822a1da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f818229d060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f818229d060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818229d3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818229d570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818229d700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818229b4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818229da20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818229dbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818229dd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818229c020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818229c1b0"/>
        <function-ref name="get" scoped="" ref="0x7f818229c340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818229c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818229c660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818229c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818229ca80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818229cc10"/>
        <function-ref name="set" scoped="" ref="0x7f818229cda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818229b020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818229b1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f818229d890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818229b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182298540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182298540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822988c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182298a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182298be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182296980"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182297020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822971b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182297340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822974d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182297660"/>
        <function-ref name="get" scoped="" ref="0x7f81822977f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182297980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182297b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182297ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182296020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822961b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182296340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822964d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182296660"/>
        <function-ref name="clr" scoped="" ref="0x7f8182298d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822967f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182293b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182293b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182292020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822921b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182292340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182290020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182292660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822927f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182292980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182292b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182292ca0"/>
        <function-ref name="get" scoped="" ref="0x7f8182292e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182291020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822911b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182291340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822915d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182291760"/>
        <function-ref name="set" scoped="" ref="0x7f81822918f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182291a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182291c10"/>
        <function-ref name="clr" scoped="" ref="0x7f81822924d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182291da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f818228d060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f818228d060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818228d3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818228d570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818228d700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818228b4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818228da20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818228dbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818228dd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818228c020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818228c1b0"/>
        <function-ref name="get" scoped="" ref="0x7f818228c340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818228c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818228c660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818228c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818228ca80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818228cc10"/>
        <function-ref name="set" scoped="" ref="0x7f818228cda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818228b020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818228b1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f818228d890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818228b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182288540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182288540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822888c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182288a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182288be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182285980"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182286020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822861b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182286340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822864d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182286660"/>
        <function-ref name="get" scoped="" ref="0x7f81822867f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182286980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182286b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182286ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182285020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822851b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182285340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822854d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182285660"/>
        <function-ref name="clr" scoped="" ref="0x7f8182288d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822857f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182282b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182282b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182281020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822811b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182281340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818227f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182281660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822817f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182281980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182281b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182281ca0"/>
        <function-ref name="get" scoped="" ref="0x7f8182281e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182280020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822801b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182280340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822805d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182280760"/>
        <function-ref name="set" scoped="" ref="0x7f81822808f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182280a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182280c10"/>
        <function-ref name="clr" scoped="" ref="0x7f81822814d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182280da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f818227c060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f818227c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818227c3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818227c570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818227c700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818227a4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818227ca20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818227cbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818227cd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818227b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818227b1b0"/>
        <function-ref name="get" scoped="" ref="0x7f818227b340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818227b4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818227b660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818227b7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818227ba80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818227bc10"/>
        <function-ref name="set" scoped="" ref="0x7f818227bda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818227a020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818227a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f818227c890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818227a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81822776d0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81822776d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182277a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182277be0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182277d70"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182275a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f81822761b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182276340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81822764d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182276660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822767f0"/>
        <function-ref name="get" scoped="" ref="0x7f8182276980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182276b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182276ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182276e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182275120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822752b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182275440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822755d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182275760"/>
        <function-ref name="clr" scoped="" ref="0x7f8182276020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822758f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182272b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182272b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182271020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822711b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182271340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818226f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182271660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822717f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182271980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182271b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182271ca0"/>
        <function-ref name="get" scoped="" ref="0x7f8182271e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182270020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822701b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182270340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822705d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182270760"/>
        <function-ref name="set" scoped="" ref="0x7f81822708f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182270a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182270c10"/>
        <function-ref name="clr" scoped="" ref="0x7f81822714d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182270da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f818226c060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f818226c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818226c3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818226c570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818226c700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818226a4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818226ca20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818226cbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818226cd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818226b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818226b1b0"/>
        <function-ref name="get" scoped="" ref="0x7f818226b340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818226b4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818226b660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818226b7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818226ba80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818226bc10"/>
        <function-ref name="set" scoped="" ref="0x7f818226bda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818226a020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818226a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f818226c890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818226a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182267540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182267540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822678c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182267a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182267be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182265980"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182266020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822661b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182266340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822664d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182266660"/>
        <function-ref name="get" scoped="" ref="0x7f81822667f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182266980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182266b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182266ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182265020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822651b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182265340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822654d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182265660"/>
        <function-ref name="clr" scoped="" ref="0x7f8182267d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822657f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182262b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182262b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182261020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822611b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182261340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818225f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182261660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822617f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182261980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182261b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182261ca0"/>
        <function-ref name="get" scoped="" ref="0x7f8182261e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182260020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81822601b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182260340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81822605d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182260760"/>
        <function-ref name="set" scoped="" ref="0x7f81822608f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182260a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182260c10"/>
        <function-ref name="clr" scoped="" ref="0x7f81822614d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182260da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f818225c060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f818225c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818225c3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818225c570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818225c700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822594d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818225ca20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818225cbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818225cd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818225a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818225a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f818225a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818225a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818225a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818225a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818225aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818225ac10"/>
        <function-ref name="set" scoped="" ref="0x7f818225ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182259020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822591b0"/>
        <function-ref name="clr" scoped="" ref="0x7f818225c890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182259340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182256540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182256540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822568c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182256a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182256be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182254980"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182255020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822551b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182255340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822554d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182255660"/>
        <function-ref name="get" scoped="" ref="0x7f81822557f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182255980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182255b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182255ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182254020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822541b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182254340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822544d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182254660"/>
        <function-ref name="clr" scoped="" ref="0x7f8182256d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822547f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182251b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182251b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182250020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822501b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182250340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818224e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182250660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822507f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182250980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182250b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182250ca0"/>
        <function-ref name="get" scoped="" ref="0x7f8182250e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818224f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818224f1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818224f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818224f5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818224f760"/>
        <function-ref name="set" scoped="" ref="0x7f818224f8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818224fa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818224fc10"/>
        <function-ref name="clr" scoped="" ref="0x7f81822504d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818224fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f818224b060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f818224b060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818224b3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818224b570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818224b700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822494d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818224ba20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818224bbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818224bd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818224a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818224a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f818224a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818224a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818224a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818224a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818224aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818224ac10"/>
        <function-ref name="set" scoped="" ref="0x7f818224ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182249020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822491b0"/>
        <function-ref name="clr" scoped="" ref="0x7f818224b890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182249340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182246540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182246540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822468c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182246a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182246be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182244980"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182245020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822451b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182245340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822454d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182245660"/>
        <function-ref name="get" scoped="" ref="0x7f81822457f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182245980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182245b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182245ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182244020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822441b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182244340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822444d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182244660"/>
        <function-ref name="clr" scoped="" ref="0x7f8182246d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822447f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182241b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182241b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182240020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81822401b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182240340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818223e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182240660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822407f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182240980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182240b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182240ca0"/>
        <function-ref name="get" scoped="" ref="0x7f8182240e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818223f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818223f1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818223f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818223f5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818223f760"/>
        <function-ref name="set" scoped="" ref="0x7f818223f8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818223fa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818223fc10"/>
        <function-ref name="clr" scoped="" ref="0x7f81822404d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818223fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f818223b060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f818223b060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818223b3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818223b570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818223b700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822394d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818223ba20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818223bbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818223bd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818223a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818223a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f818223a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818223a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818223a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818223a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818223aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818223ac10"/>
        <function-ref name="set" scoped="" ref="0x7f818223ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182239020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822391b0"/>
        <function-ref name="clr" scoped="" ref="0x7f818223b890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182239340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182236740" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182236740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182236ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182236c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182236de0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182234a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f81822351b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182235340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81822354d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182235660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822357f0"/>
        <function-ref name="get" scoped="" ref="0x7f8182235980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182235b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182235ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182235e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182234120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822342b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182234440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822345d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182234760"/>
        <function-ref name="clr" scoped="" ref="0x7f8182235020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822348f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182230b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182230b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818222f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f818222f1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818222f340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818222d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f818222f660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818222f7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818222f980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818222fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818222fca0"/>
        <function-ref name="get" scoped="" ref="0x7f818222fe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818222e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818222e1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818222e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818222e5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818222e760"/>
        <function-ref name="set" scoped="" ref="0x7f818222e8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818222ea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818222ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f818222f4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818222eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f818222a060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f818222a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818222a3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818222a570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818222a700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822284d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818222aa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818222abb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818222ad40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182229020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822291b0"/>
        <function-ref name="get" scoped="" ref="0x7f8182229340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822294d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182229660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822297f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182229a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182229c10"/>
        <function-ref name="set" scoped="" ref="0x7f8182229da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182228020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822281b0"/>
        <function-ref name="clr" scoped="" ref="0x7f818222a890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182228340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182225540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182225540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822258c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182225a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182225be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182223980"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182224020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822241b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182224340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822244d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182224660"/>
        <function-ref name="get" scoped="" ref="0x7f81822247f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182224980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182224b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182224ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182223020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822231b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182223340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822234d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182223660"/>
        <function-ref name="clr" scoped="" ref="0x7f8182225d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822237f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182220b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182220b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818221f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f818221f1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818221f340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818221d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f818221f660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818221f7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818221f980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818221fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818221fca0"/>
        <function-ref name="get" scoped="" ref="0x7f818221fe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818221e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818221e1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818221e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818221e5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818221e760"/>
        <function-ref name="set" scoped="" ref="0x7f818221e8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818221ea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818221ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f818221f4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818221eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f818221a060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f818221a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818221a3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818221a570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818221a700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822184d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818221aa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818221abb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818221ad40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182219020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822191b0"/>
        <function-ref name="get" scoped="" ref="0x7f8182219340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822194d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182219660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822197f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182219a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182219c10"/>
        <function-ref name="set" scoped="" ref="0x7f8182219da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182218020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822181b0"/>
        <function-ref name="clr" scoped="" ref="0x7f818221a890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182218340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182215540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182215540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822158c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182215a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182215be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182213980"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182214020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822141b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182214340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822144d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182214660"/>
        <function-ref name="get" scoped="" ref="0x7f81822147f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182214980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182214b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182214ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182213020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822131b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182213340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822134d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182213660"/>
        <function-ref name="clr" scoped="" ref="0x7f8182215d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822137f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182210b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182210b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818220f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f818220f1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818220f340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818220d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f818220f660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818220f7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818220f980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818220fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818220fca0"/>
        <function-ref name="get" scoped="" ref="0x7f818220fe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818220e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818220e1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818220e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818220e5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818220e760"/>
        <function-ref name="set" scoped="" ref="0x7f818220e8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818220ea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818220ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f818220f4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818220eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f818220a060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f818220a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818220a3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818220a570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818220a700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81822074d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818220aa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818220abb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818220ad40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182208020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81822081b0"/>
        <function-ref name="get" scoped="" ref="0x7f8182208340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81822084d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182208660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81822087f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182208a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182208c10"/>
        <function-ref name="set" scoped="" ref="0x7f8182208da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182207020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81822071b0"/>
        <function-ref name="clr" scoped="" ref="0x7f818220a890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182207340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f8182204540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f8182204540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81822048c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182204a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182204be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182202980"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182203020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81822031b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182203340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81822034d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182203660"/>
        <function-ref name="get" scoped="" ref="0x7f81822037f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182203980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8182203b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182203ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182202020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81822021b0"/>
        <function-ref name="set" scoped="" ref="0x7f8182202340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81822024d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182202660"/>
        <function-ref name="clr" scoped="" ref="0x7f8182204d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81822027f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81821ffb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81821ffb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81821fe020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81821fe1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81821fe340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81821fc020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821fe660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81821fe7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81821fe980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81821feb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81821feca0"/>
        <function-ref name="get" scoped="" ref="0x7f81821fee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81821fd020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821fd1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81821fd340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81821fd5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81821fd760"/>
        <function-ref name="set" scoped="" ref="0x7f81821fd8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81821fda80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81821fdc10"/>
        <function-ref name="clr" scoped="" ref="0x7f81821fe4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81821fdda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81821f9060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81821f9060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81821f93e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81821f9570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81821f9700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81821f74d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821f9a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81821f9bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81821f9d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81821f8020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81821f81b0"/>
        <function-ref name="get" scoped="" ref="0x7f81821f8340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81821f84d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821f8660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81821f87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81821f8a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81821f8c10"/>
        <function-ref name="set" scoped="" ref="0x7f81821f8da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81821f7020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81821f71b0"/>
        <function-ref name="clr" scoped="" ref="0x7f81821f9890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81821f7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81821f4540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81821f4540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81821f48c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81821f4a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81821f4be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81821f2980"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821f3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81821f31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81821f3340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81821f34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81821f3660"/>
        <function-ref name="get" scoped="" ref="0x7f81821f37f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81821f3980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821f3b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81821f3ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81821f2020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81821f21b0"/>
        <function-ref name="set" scoped="" ref="0x7f81821f2340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81821f24d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81821f2660"/>
        <function-ref name="clr" scoped="" ref="0x7f81821f4d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81821f27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81821efb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81821efb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81821ee020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81821ee1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81821ee340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81821ec020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821ee660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81821ee7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81821ee980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81821eeb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81821eeca0"/>
        <function-ref name="get" scoped="" ref="0x7f81821eee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81821ed020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821ed1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81821ed340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81821ed5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81821ed760"/>
        <function-ref name="set" scoped="" ref="0x7f81821ed8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81821eda80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81821edc10"/>
        <function-ref name="clr" scoped="" ref="0x7f81821ee4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81821edda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81821e9060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81821e9060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81821e93e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81821e9570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81821e9700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81821e74d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821e9a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81821e9bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81821e9d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81821e8020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81821e81b0"/>
        <function-ref name="get" scoped="" ref="0x7f81821e8340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81821e84d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821e8660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81821e87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81821e8a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81821e8c10"/>
        <function-ref name="set" scoped="" ref="0x7f81821e8da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81821e7020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81821e71b0"/>
        <function-ref name="clr" scoped="" ref="0x7f81821e9890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81821e7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81821e4540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81821e4540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81821e48c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81821e4a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81821e4be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81821e2980"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821e3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81821e31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81821e3340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81821e34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81821e3660"/>
        <function-ref name="get" scoped="" ref="0x7f81821e37f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81821e3980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821e3b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81821e3ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81821e2020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81821e21b0"/>
        <function-ref name="set" scoped="" ref="0x7f81821e2340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81821e24d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81821e2660"/>
        <function-ref name="clr" scoped="" ref="0x7f81821e4d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81821e27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81821dfb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81821dfb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81821dd020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81821dd1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81821dd340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81821db020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821dd660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81821dd7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81821dd980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81821ddb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81821ddca0"/>
        <function-ref name="get" scoped="" ref="0x7f81821dde30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81821dc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821dc1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81821dc340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81821dc5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81821dc760"/>
        <function-ref name="set" scoped="" ref="0x7f81821dc8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81821dca80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81821dcc10"/>
        <function-ref name="clr" scoped="" ref="0x7f81821dd4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81821dcda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81821d8060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81821d8060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81821d83e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81821d8570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81821d8700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81821d64d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821d8a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81821d8bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81821d8d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81821d7020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81821d71b0"/>
        <function-ref name="get" scoped="" ref="0x7f81821d7340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81821d74d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821d7660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81821d77f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81821d7a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81821d7c10"/>
        <function-ref name="set" scoped="" ref="0x7f81821d7da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81821d6020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81821d61b0"/>
        <function-ref name="clr" scoped="" ref="0x7f81821d8890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81821d6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81821d3540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81821d3540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81821d38c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81821d3a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81821d3be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81821d1980"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821d2020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81821d21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81821d2340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81821d24d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81821d2660"/>
        <function-ref name="get" scoped="" ref="0x7f81821d27f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81821d2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821d2b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81821d2ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81821d1020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81821d11b0"/>
        <function-ref name="set" scoped="" ref="0x7f81821d1340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81821d14d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81821d1660"/>
        <function-ref name="clr" scoped="" ref="0x7f81821d3d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81821d17f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81821ceb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81821ceb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81821cd020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81821cd1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81821cd340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81821cb020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821cd660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81821cd7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81821cd980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81821cdb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81821cdca0"/>
        <function-ref name="get" scoped="" ref="0x7f81821cde30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81821cc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821cc1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81821cc340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81821cc5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81821cc760"/>
        <function-ref name="set" scoped="" ref="0x7f81821cc8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81821cca80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81821ccc10"/>
        <function-ref name="clr" scoped="" ref="0x7f81821cd4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81821ccda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81821c8060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81821c8060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81821c83e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81821c8570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81821c8700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81821c64d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821c8a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81821c8bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81821c8d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81821c7020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81821c71b0"/>
        <function-ref name="get" scoped="" ref="0x7f81821c7340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81821c74d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821c7660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81821c77f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81821c7a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81821c7c10"/>
        <function-ref name="set" scoped="" ref="0x7f81821c7da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81821c6020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81821c61b0"/>
        <function-ref name="clr" scoped="" ref="0x7f81821c8890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81821c6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81821c3540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81821c3540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81821c38c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81821c3a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81821c3be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81821c1980"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821c2020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81821c21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81821c2340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81821c24d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81821c2660"/>
        <function-ref name="get" scoped="" ref="0x7f81821c27f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81821c2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821c2b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81821c2ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81821c1020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81821c11b0"/>
        <function-ref name="set" scoped="" ref="0x7f81821c1340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81821c14d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81821c1660"/>
        <function-ref name="clr" scoped="" ref="0x7f81821c3d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81821c17f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81821beb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81821beb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81821bd020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81821bd1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81821bd340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81821bb020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821bd660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81821bd7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81821bd980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81821bdb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81821bdca0"/>
        <function-ref name="get" scoped="" ref="0x7f81821bde30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81821bc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821bc1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81821bc340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81821bc5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81821bc760"/>
        <function-ref name="set" scoped="" ref="0x7f81821bc8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81821bca80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81821bcc10"/>
        <function-ref name="clr" scoped="" ref="0x7f81821bd4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81821bcda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f81821b8060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f81821b8060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81821b83e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81821b8570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81821b8700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81821b64d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821b8a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81821b8bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81821b8d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81821b7020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81821b71b0"/>
        <function-ref name="get" scoped="" ref="0x7f81821b7340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81821b74d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821b7660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81821b77f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81821b7a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81821b7c10"/>
        <function-ref name="set" scoped="" ref="0x7f81821b7da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81821b6020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81821b61b0"/>
        <function-ref name="clr" scoped="" ref="0x7f81821b8890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81821b6340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f8182129c50" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8182129c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182128020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81821281b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182128340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182126020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182128660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81821287f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182128980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8182128b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182128ca0"/>
        <function-ref name="get" scoped="" ref="0x7f8182128e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182127020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821271b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182127340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81821275d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182127760"/>
        <function-ref name="set" scoped="" ref="0x7f81821278f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8182127a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182127c10"/>
        <function-ref name="clr" scoped="" ref="0x7f81821284d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8182127da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f818213a9e0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f818213a9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818213ad60"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182129020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821291b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182129340"/>
        <function-ref name="get" scoped="" ref="0x7f81821294d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182129660"/>
        <function-ref name="set" scoped="" ref="0x7f81821297f0"/>
        <function-ref name="clr" scoped="" ref="0x7f8182129980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f81821232f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f81821232f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8182123670"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182123800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8182123990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8182121660"/>
        <function-ref name="toggle" scoped="" ref="0x7f8182123cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182123e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8182122020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81821221b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182122340"/>
        <function-ref name="get" scoped="" ref="0x7f81821224d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8182122660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81821227f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8182122980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8182122c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8182122da0"/>
        <function-ref name="set" scoped="" ref="0x7f8182121020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81821211b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8182121340"/>
        <function-ref name="clr" scoped="" ref="0x7f8182123b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81821214d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f8182124020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f8182124020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81821243a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8182124530"/>
        <function-ref name="toggle" scoped="" ref="0x7f81821246c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8182124850"/>
        <function-ref name="get" scoped="" ref="0x7f81821249e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8182124b70"/>
        <function-ref name="set" scoped="" ref="0x7f8182124d00"/>
        <function-ref name="clr" scoped="" ref="0x7f8182123020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f818211e7a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f818211e7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818211eb20"/>
        <function-ref name="isInput" scoped="" ref="0x7f818211ecb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818211ee40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818211ca80"/>
        <function-ref name="toggle" scoped="" ref="0x7f818211d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818211d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818211d4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818211d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818211d7f0"/>
        <function-ref name="get" scoped="" ref="0x7f818211d980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818211db10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818211dca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818211de30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818211c120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818211c2b0"/>
        <function-ref name="set" scoped="" ref="0x7f818211c440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818211c5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818211c760"/>
        <function-ref name="clr" scoped="" ref="0x7f818211d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818211c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f818211f630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f818211f630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818211f9b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818211fb40"/>
        <function-ref name="toggle" scoped="" ref="0x7f818211fcd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818211fe60"/>
        <function-ref name="get" scoped="" ref="0x7f818211e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818211e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f818211e340"/>
        <function-ref name="clr" scoped="" ref="0x7f818211e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f8182110760" loc="61:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f8182110760"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f8182110ae0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f8182110c70"/>
        <function-ref name="start" scoped="" ref="0x7f8182110e00"/>
        <function-ref name="stop" scoped="" ref="0x7f818210d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f818210d7f0" loc="63:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f818210d7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f818210db70"/>
        <function-ref name="getPayload" scoped="" ref="0x7f818210dd00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f818210c020"/>
        <function-ref name="cancel" scoped="" ref="0x7f818210c1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f818210c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f818210a880" loc="65:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f818210a880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f818210ac00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f8182109020" loc="67:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f8182109020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f81821093a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f8182109530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81821096c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f8182109850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f81821099e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f8182105310" loc="70:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f8182105310"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f8182100880"/>
        <function-ref name="clear" scoped="" ref="0x7f81820f8020"/>
        <function-ref name="isValid" scoped="" ref="0x7f8182100150"/>
        <function-ref name="set" scoped="" ref="0x7f81820f8750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f81820eb130" loc="72:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f81820eb130"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f81820eb4b0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f81820eb640"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f81820eb7d0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f81820eb960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f818210cb20" loc="64:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f818210cb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f818210a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f8182106080" loc="69:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f8182106080"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f8182106400"/>
        <function-ref name="noAck" scoped="" ref="0x7f8182106590"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f8182106720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f8182109c90" loc="68:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f8182109c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f81821080a0"/>
        <function-ref name="source" scoped="" ref="0x7f8182108230"/>
        <function-ref name="address" scoped="" ref="0x7f81821083c0"/>
        <function-ref name="destination" scoped="" ref="0x7f8182108550"/>
        <function-ref name="setSource" scoped="" ref="0x7f81821086e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f8182108870"/>
        <function-ref name="type" scoped="" ref="0x7f8182108a00"/>
        <function-ref name="setType" scoped="" ref="0x7f8182108b90"/>
        <function-ref name="isForMe" scoped="" ref="0x7f8182108d20"/>
        <function-ref name="setGroup" scoped="" ref="0x7f8182107020"/>
        <function-ref name="localGroup" scoped="" ref="0x7f81821071b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f81820f63f0" loc="71:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f81820f63f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f81820f5970"/>
        <function-ref name="clear" scoped="" ref="0x7f81820f40d0"/>
        <function-ref name="isValid" scoped="" ref="0x7f81820f5240"/>
        <function-ref name="set" scoped="" ref="0x7f81820f4800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f81820decc0" loc="55:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f81820decc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f81820dd0a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f81820dd230"/>
        <function-ref name="start" scoped="" ref="0x7f81820dd3c0"/>
        <function-ref name="stop" scoped="" ref="0x7f81820dd550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f81820c4e30" loc="64:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f81820c4e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f81820cd1e0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f81820cd370"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f81820cd500"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f81820cd690"/>
        <function-ref name="setCca" scoped="" ref="0x7f81820cd820"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f81820cd9b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f81820b7d20" loc="67:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7f81820b7d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f81820c11c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f81820d88f0" loc="60:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f81820d88f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f81820d8c70"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f81820d8e00"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81820d7020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81820d71b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f81820d7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f81820ddd20" loc="56:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f81820ddd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81820dc0e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81820dc270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81820dc400"/>
        <function-ref name="cancel" scoped="" ref="0x7f81820dc590"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81820dc720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f81820dbc00" loc="58:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f81820dbc00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81820d9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f81820cf9b0" loc="61:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f81820cf9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f81820cfd30"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f81820d6020"/>
        <function-ref name="getRssi" scoped="" ref="0x7f81820d61b0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f81820d6340"/>
        <function-ref name="getPower" scoped="" ref="0x7f81820d64d0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f81820d6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f81820cdcb0" loc="65:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f81820cdcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f81820c30a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f81820c3230"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f81820c33c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f81820c3550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f81820db020" loc="57:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f81820db020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81820db3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f81820d6990" loc="62:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f81820d6990"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f81820d6d10"/>
        <function-ref name="noAck" scoped="" ref="0x7f81820d5020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f81820d51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f81820c2020" loc="66:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f81820c2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f81820c23a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f81820c2530"/>
        <function-ref name="getRetries" scoped="" ref="0x7f81820c26c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f81820c2850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f81820c29e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f81820d92d0" loc="59:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f81820d92d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f81820d9650"/>
        <function-ref name="source" scoped="" ref="0x7f81820d97e0"/>
        <function-ref name="address" scoped="" ref="0x7f81820d9970"/>
        <function-ref name="destination" scoped="" ref="0x7f81820d9b00"/>
        <function-ref name="setSource" scoped="" ref="0x7f81820d9c90"/>
        <function-ref name="setDestination" scoped="" ref="0x7f81820d9e20"/>
        <function-ref name="type" scoped="" ref="0x7f81820d8020"/>
        <function-ref name="setType" scoped="" ref="0x7f81820d81b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f81820d8340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f81820d84d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f81820d8660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f81820ccc70" loc="63:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f81820ccc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f81820ce020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f81820b4020" loc="43:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f81820b4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f81820b43a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f81820b4530"/>
        <function-ref name="start" scoped="" ref="0x7f81820b46c0"/>
        <function-ref name="stop" scoped="" ref="0x7f81820b4850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f81820a09d0" loc="55:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f81820a09d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f81820a0d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f818209fb70" loc="57:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f818209fb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f818209e020"/>
        <function-ref name="setRetries" scoped="" ref="0x7f818209e1b0"/>
        <function-ref name="getRetries" scoped="" ref="0x7f818209e340"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f818209e4d0"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f818209e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f81820a1020" loc="53:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f81820a1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f81820a13a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f81820a1530"/>
        <function-ref name="getRssi" scoped="" ref="0x7f81820a16c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f81820a1850"/>
        <function-ref name="getPower" scoped="" ref="0x7f81820a19e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f81820a1b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f81820aca70" loc="50:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f81820aca70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81820acdf0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81820a4020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81820a41b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f81820a4340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81820a44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f818209f080" loc="56:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f818209f080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f818209f400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f818209f590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f818209f720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f818209f8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f81820ad690" loc="47:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7f81820ad690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81820ada10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f81820a0020" loc="54:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f81820a0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f81820a03a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f81820a0530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f81820a06c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f81820b3530" loc="45:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f81820b3530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f81820b38b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f81820b3a40"/>
        <function-ref name="request" scoped="" ref="0x7f81820b3bd0"/>
        <function-ref name="granted" scoped="" ref="0x7f81820b3d60"/>
        <function-ref name="isOwner" scoped="" ref="0x7f81820b2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f81820a3940" loc="46:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7f81820a3940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81820a3cc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81820a3e50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81820ad020"/>
        <function-ref name="cancel" scoped="" ref="0x7f81820ad1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81820ad340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f81820add50" loc="48:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f81820add50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f81820ac100"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f81820ac290"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81820ac420"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81820ac5b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f81820ac740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f81820a4840" loc="51:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f81820a4840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81820a4bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f818209b390" loc="44:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f818209b390"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f818209b710"/>
        <function-ref name="stopDone" scoped="" ref="0x7f818209b8a0"/>
        <function-ref name="start" scoped="" ref="0x7f818209ba30"/>
        <function-ref name="stop" scoped="" ref="0x7f818209bbc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f8182099330" loc="47:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f8182099330"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f81820996b0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f8182099840"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f81820999d0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f8182099b60"/>
        <function-ref name="setCca" scoped="" ref="0x7f8182099cf0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f8182099e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f818209be80" loc="45:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f818209be80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f818209a220"/>
        <function-ref name="getPayload" scoped="" ref="0x7f818209a3b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f818209a540"/>
        <function-ref name="cancel" scoped="" ref="0x7f818209a6d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f818209a860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f818209ab40" loc="46:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f818209ab40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f8182099020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f8182098e70" loc="39:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f8182098e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f8182095220"/>
        <function-ref name="stopDone" scoped="" ref="0x7f81820953b0"/>
        <function-ref name="start" scoped="" ref="0x7f8182095540"/>
        <function-ref name="stop" scoped="" ref="0x7f81820956d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f81820947e0" loc="41:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f81820947e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f8182094b60"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f8182094cf0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f8182094e80"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f8182093030"/>
        <function-ref name="setCca" scoped="" ref="0x7f81820931c0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f8182093350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7f8182087060" loc="47:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7f8182087060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f81820873e0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f8182087570"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f8182087700"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f8182087890"/>
        <function-ref name="setCca" scoped="" ref="0x7f8182087a20"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f8182087bb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f818207e330" loc="50:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f818207e330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f818207e6b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f818207e840"/>
        <function-ref name="getRssi" scoped="" ref="0x7f818207e9d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f818207eb60"/>
        <function-ref name="getPower" scoped="" ref="0x7f818207ecf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f818207ee80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Transmit" ref="0x7f81820802a0" loc="46:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7f81820802a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8182080620"/>
        <function-ref name="cancel" scoped="" ref="0x7f81820807b0"/>
        <function-ref name="modify" scoped="" ref="0x7f8182080940"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8182080ad0"/>
        <function-ref name="resend" scoped="" ref="0x7f8182080c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f8182095990" loc="40:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f8182095990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8182095d10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8182094020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81820941b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f8182094340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81820944d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f818207d420" loc="48:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f818207d420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f818207d7a0"/>
        <function-ref name="rand32" scoped="" ref="0x7f818207d930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f8182088760" loc="45:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7f8182088760"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f8182088ae0"/>
        <function-ref name="stop" scoped="" ref="0x7f8182088c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f8182076920" loc="51:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f8182076920"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f8182076ca0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f8182076e30"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f818207b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Power" ref="0x7f818208bb50" loc="44:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f818208bb50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f8182091020"/>
        <function-ref name="rfOff" scoped="" ref="0x7f81820911b0"/>
        <function-ref name="rxOn" scoped="" ref="0x7f8182091340"/>
        <function-ref name="startVReg" scoped="" ref="0x7f81820914d0"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f8182091660"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f81820917f0"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f8182091980"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f8182091b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f818207dbf0" loc="49:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f818207dbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f818207f020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f818207f1b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f818207f340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f818207f4d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f818207f660"/>
        <function-ref name="get" scoped="" ref="0x7f818207f7f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f818207f980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f818207e020"/>
        <function-ref name="set" scoped="" ref="0x7f818207fb10"/>
        <function-ref name="led0On" scoped="" ref="0x7f818207fca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f818207fe30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f8182093640" loc="43:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f8182093640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f81820939c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8182093b50"/>
        <function-ref name="request" scoped="" ref="0x7f8182093ce0"/>
        <function-ref name="granted" scoped="" ref="0x7f8182093e70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8182092030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControlState" ref="0x7f818207a110" loc="52:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControlState" scoped="" ref="0x7f818207a110"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f818207a590"/>
        <function-ref name="toIdle" scoped="" ref="0x7f818207a720"/>
        <function-ref name="isState" scoped="" ref="0x7f818207a8b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f818207aa40"/>
        <function-ref name="requestState" scoped="" ref="0x7f818207abd0"/>
        <function-ref name="forceState" scoped="" ref="0x7f818207ad60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendDone_task" ref="0x7f818206cb70" loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sendDone_task" scoped="" ref="0x7f818206cb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f818206b020"/>
        <function-ref name="runTask" scoped="" ref="0x7f818206b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDone_task" ref="0x7f818206dba0" loc="75:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDone_task" scoped="" ref="0x7f818206dba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f818206c020"/>
        <function-ref name="runTask" scoped="" ref="0x7f818206c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDone_task" ref="0x7f818206ec20" loc="74:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDone_task" scoped="" ref="0x7f818206ec20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f818206d020"/>
        <function-ref name="runTask" scoped="" ref="0x7f818206d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7f8182013dc0" loc="45:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f8182013dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f818201f180"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f818201f310"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f818201f4a0"/>
        <function-ref name="syncDone" scoped="" ref="0x7f818201f630"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f818201f7c0"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f818201f950"/>
        <function-ref name="setChannel" scoped="" ref="0x7f818201fae0"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f818201fc70"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f818201fe00"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f818201e020"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f818201e1b0"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f818201e340"/>
        <function-ref name="sync" scoped="" ref="0x7f818201e4d0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f818201e760"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f818201e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7f81820100c0" loc="47:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7f81820100c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8182010cb0"/>
        <function-ref name="readDone" scoped="" ref="0x7f818200d170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7f818201ebf0" loc="46:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f818201ebf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f8182012020"/>
        <function-ref name="rfOff" scoped="" ref="0x7f81820121b0"/>
        <function-ref name="rxOn" scoped="" ref="0x7f8182012340"/>
        <function-ref name="startVReg" scoped="" ref="0x7f81820124d0"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f8182012660"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f81820127f0"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f8182012980"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f8182012b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f8182024950" loc="44:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f8182024950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8182024cd0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8182024e60"/>
        <function-ref name="request" scoped="" ref="0x7f8182020020"/>
        <function-ref name="granted" scoped="" ref="0x7f81820201b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8182020340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7f8182009970" loc="46:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f8182009970"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f8182009cf0"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f8182009e80"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f8182008030"/>
        <function-ref name="syncDone" scoped="" ref="0x7f81820081c0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f8182008350"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f81820084e0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f8182008670"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f8182008800"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f8182008990"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f8182008b20"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f8182008cb0"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f8182008e40"/>
        <function-ref name="sync" scoped="" ref="0x7f8182007020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f81820072b0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f8182007440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXCTRL1" ref="0x7f8181fe28e0" loc="66:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f8181fe28e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181fe2c60"/>
        <function-ref name="write" scoped="" ref="0x7f8181fe2df0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalIeeeEui64" ref="0x7f8182003020" loc="50:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f8182003020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f81820033a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StartupTimer" ref="0x7f8181ffad90" loc="52:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StartupTimer" scoped="" ref="0x7f8181ffad90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f8181ff9670"/>
        <function-ref name="fired" scoped="" ref="0x7f81820005d0"/>
        <function-ref name="startAt" scoped="" ref="0x7f8181ff9020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f8182000a90"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f8181ff9b30"/>
        <function-ref name="start" scoped="" ref="0x7f8182001bc0"/>
        <function-ref name="stop" scoped="" ref="0x7f8182000110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL0" ref="0x7f8181fe55f0" loc="64:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f8181fe55f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181fe5970"/>
        <function-ref name="write" scoped="" ref="0x7f8181fe5b00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x7f8181ff6380" loc="54:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7f8181ff6380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181ff6700"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181ff6890"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181ff6a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181ff6bb0"/>
        <function-ref name="get" scoped="" ref="0x7f8181ff6d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181ff5020"/>
        <function-ref name="set" scoped="" ref="0x7f8181ff51b0"/>
        <function-ref name="clr" scoped="" ref="0x7f8181ff5340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7f8182006b40" loc="48:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7f8182006b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8182005750"/>
        <function-ref name="readDone" scoped="" ref="0x7f8182005bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="syncDone" ref="0x7f8181fd0820" loc="126:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="syncDone" scoped="" ref="0x7f8181fd0820"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f8181fd0ba0"/>
        <function-ref name="runTask" scoped="" ref="0x7f8181fd0d30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSI" ref="0x7f8181fe01c0" loc="67:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f8181fe01c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181fe0540"/>
        <function-ref name="write" scoped="" ref="0x7f8181fe06d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7f8181fe0a70" loc="68:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f8181fe0a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181fe0df0"/>
        <function-ref name="write" scoped="" ref="0x7f8181fdf020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG0" ref="0x7f8181fea3d0" loc="62:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f8181fea3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181fea750"/>
        <function-ref name="write" scoped="" ref="0x7f8181fea8e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f8181feb810" loc="57:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f8181feb810"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f8181febb90"/>
        <function-ref name="changed" scoped="" ref="0x7f8181febd20"/>
        <function-ref name="amGroup" scoped="" ref="0x7f8181ff2020"/>
        <function-ref name="setAddress" scoped="" ref="0x7f8181ff21b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f8181ff7060" loc="53:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f8181ff7060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181ff73e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181ff7570"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181ff7700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181ff7890"/>
        <function-ref name="get" scoped="" ref="0x7f8181ff7a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181ff7bb0"/>
        <function-ref name="set" scoped="" ref="0x7f8181ff7d40"/>
        <function-ref name="clr" scoped="" ref="0x7f8181ff6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCOFF" ref="0x7f8181fde120" loc="71:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f8181fde120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181fde6a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VREN" ref="0x7f8181ff56a0" loc="55:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7f8181ff56a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181ff5a20"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181ff5bb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181ff5d40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181ff4020"/>
        <function-ref name="get" scoped="" ref="0x7f8181ff41b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181ff4340"/>
        <function-ref name="set" scoped="" ref="0x7f8181ff44d0"/>
        <function-ref name="clr" scoped="" ref="0x7f8181ff4660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f818200a510" loc="44:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f818200a510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f818200a890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7f8181fe2020" loc="65:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f8181fe2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181fe23a0"/>
        <function-ref name="write" scoped="" ref="0x7f8181fe2530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCON" ref="0x7f8181fdea40" loc="72:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f8181fdea40"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181fdedc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f8181fdd1d0" loc="74:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f8181fdd1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8181fdd550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8181fdd6e0"/>
        <function-ref name="request" scoped="" ref="0x7f8181fdd870"/>
        <function-ref name="granted" scoped="" ref="0x7f8181fdda00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8181fddb90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SyncResource" ref="0x7f8181fdbd90" loc="76:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SyncResource" scoped="" ref="0x7f8181fdbd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8181fda180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8181fda310"/>
        <function-ref name="request" scoped="" ref="0x7f8181fda4a0"/>
        <function-ref name="granted" scoped="" ref="0x7f8181fda630"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8181fda7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7f8182007740" loc="47:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f8182007740"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f8182007ac0"/>
        <function-ref name="rfOff" scoped="" ref="0x7f8182007c50"/>
        <function-ref name="rxOn" scoped="" ref="0x7f8182007de0"/>
        <function-ref name="startVReg" scoped="" ref="0x7f8182006020"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f81820061b0"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f8182006340"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f81820064d0"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f8182006660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG1" ref="0x7f8181feac80" loc="63:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f8181feac80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181fe50a0"/>
        <function-ref name="write" scoped="" ref="0x7f8181fe5230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FSCTRL" ref="0x7f8181fe3b00" loc="61:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f8181fe3b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181fe3e80"/>
        <function-ref name="write" scoped="" ref="0x7f8181fea030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXON" ref="0x7f8181fdc2b0" loc="69:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f8181fdc2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181fdc630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f8181fdaa80" loc="78:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f8181fdaa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f8181fdae00"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f8181fd9020"/>
        <function-ref name="led1On" scoped="" ref="0x7f8181fd91b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f8181fd9340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f8181fd94d0"/>
        <function-ref name="get" scoped="" ref="0x7f8181fd9660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f8181fd97f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f8181fd9e30"/>
        <function-ref name="set" scoped="" ref="0x7f8181fd9980"/>
        <function-ref name="led0On" scoped="" ref="0x7f8181fd9b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f8181fd9ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sync" ref="0x7f8181fd1940" loc="125:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sync" scoped="" ref="0x7f8181fd1940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f8181fd1cc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f8181fd1e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f818200ab80" loc="45:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f818200ab80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8182009020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f81820091b0"/>
        <function-ref name="request" scoped="" ref="0x7f8182009340"/>
        <function-ref name="granted" scoped="" ref="0x7f81820094d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8182009660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PANID" ref="0x7f8181fef520" loc="60:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f8181fef520"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181fef8a0"/>
        <function-ref name="write" scoped="" ref="0x7f8181fefa30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IEEEADR" ref="0x7f8181fe6a90" loc="59:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f8181fe6a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181fef020"/>
        <function-ref name="write" scoped="" ref="0x7f8181fef1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptCCA" ref="0x7f8181ff30e0" loc="56:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7f8181ff30e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181ff3460"/>
        <function-ref name="disable" scoped="" ref="0x7f8181ff35f0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f8181ff3780"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f8181ff3910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiResource" ref="0x7f8181fdb020" loc="75:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RssiResource" scoped="" ref="0x7f8181fdb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8181fdb3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8181fdb530"/>
        <function-ref name="request" scoped="" ref="0x7f8181fdb6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f8181fdb850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8181fdb9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRFOFF" ref="0x7f8181fdc9c0" loc="70:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f8181fdc9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181fdcd40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f8181f5ac70" loc="45:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f8181f5ac70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f8181f57020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7f8181f57690" loc="46:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7f8181f57690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f8181f53020"/>
        <function-ref name="fired" scoped="" ref="0x7f8181f54020"/>
        <function-ref name="startAt" scoped="" ref="0x7f8181f549a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f8181f544e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f8181f534e0"/>
        <function-ref name="start" scoped="" ref="0x7f8181f565b0"/>
        <function-ref name="stop" scoped="" ref="0x7f8181f56ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f8181f52d40" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f8181f52d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f8181f510e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7f8181f515f0" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7f8181f515f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f8181d0be50"/>
        <function-ref name="fired" scoped="" ref="0x7f8181d0de00"/>
        <function-ref name="startAt" scoped="" ref="0x7f8181d0b800"/>
        <function-ref name="isRunning" scoped="" ref="0x7f8181d0b340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f8181d0a340"/>
        <function-ref name="start" scoped="" ref="0x7f8181d0d430"/>
        <function-ref name="stop" scoped="" ref="0x7f8181d0d940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f818088cb90" loc="44:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f818088cb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f81808894e0"/>
        <function-ref name="fired" scoped="" ref="0x7f818088a4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f818088ae60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f818088a9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f81808899a0"/>
        <function-ref name="start" scoped="" ref="0x7f818088b9d0"/>
        <function-ref name="stop" scoped="" ref="0x7f818088a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f818088c340" loc="43:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f818088c340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f818088c6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f8180885c20" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f8180885c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f81808814e0"/>
        <function-ref name="fired" scoped="" ref="0x7f81808834e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f8180883e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f81808839a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f81808819a0"/>
        <function-ref name="start" scoped="" ref="0x7f8180884a80"/>
        <function-ref name="stop" scoped="" ref="0x7f8180883020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f81808853d0" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f81808853d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f8180885750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f818086b440" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f818086b440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f818086b7c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f818086b950"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f818086bae0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f818086bc70"/>
        <function-ref name="fired" scoped="" ref="0x7f818086be00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f818086f9d0" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f818086f9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f818086fd50"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f818086e020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f818086e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f818086e340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f818086e4d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f818086e660"/>
        <function-ref name="getMode" scoped="" ref="0x7f818086e7f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f818086e980"/>
        <function-ref name="overflow" scoped="" ref="0x7f818086eb10"/>
        <function-ref name="setMode" scoped="" ref="0x7f818086eca0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f818086ee30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f818086d120" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f818086d120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f818086d4a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f818086d630"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f818086d7c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f818086d950"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f818086dae0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f818086dc70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f818086de00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f818086b020"/>
        <function-ref name="setControl" scoped="" ref="0x7f818086b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f8181f1a3f0" loc="52:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f8181f1a3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181f1a770"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181f1a900"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181f1aa90"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181f1ac20"/>
        <function-ref name="fired" scoped="" ref="0x7f8181f1adb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f8181f26cd0" loc="50:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f8181f26cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181f1e0a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181f1e230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181f1e3c0"/>
        <function-ref name="get" scoped="" ref="0x7f8181f1e550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181f1e6e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181f1e870"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181f1ea00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181f1eb90"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181f1ed20"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181f1d020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181f1d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f8181f1da40" loc="51:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8181f1da40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181f1ddc0"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181f1c020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181f1c1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181f1c340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181f1c4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181f1c660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181f1c7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181f1c980"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181f1cb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f8181f0aa50" loc="56:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f8181f0aa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181f0add0"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181f09020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181f091b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181f09340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181f094d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181f09660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181f097f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181f09980"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181f09b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f8181f055a0" loc="61:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f8181f055a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181f05920"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181f05ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181f05c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181f05dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181f04020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181f041b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181f04340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181f044d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181f04660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f8181f0ba20" loc="55:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f8181f0ba20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181f0bda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181f0a020"/>
        <function-ref name="captured" scoped="" ref="0x7f8181f0a1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181f0a340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181f0a4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181f0a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f8181ef83e0" loc="73:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f8181ef83e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181ef8760"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181ef88f0"/>
        <function-ref name="captured" scoped="" ref="0x7f8181ef8a80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181ef8c10"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181ef8da0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181ef7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f8181f11bb0" loc="54:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f8181f11bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181f0b020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181f0b1b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181f0b340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181f0b4d0"/>
        <function-ref name="fired" scoped="" ref="0x7f8181f0b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f8181ef9570" loc="72:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f8181ef9570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181ef98f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181ef9a80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181ef9c10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181ef9da0"/>
        <function-ref name="fired" scoped="" ref="0x7f8181ef8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f8181eefda0" loc="82:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f8181eefda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181eee180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181eee310"/>
        <function-ref name="captured" scoped="" ref="0x7f8181eee4a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181eee630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181eee7c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181eee950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f8181ef7410" loc="74:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f8181ef7410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181ef7790"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181ef7920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181ef7ab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181ef7c40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181ef7dd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181ef6020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181ef61b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181ef6340"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181ef64d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f8181f15280" loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f8181f15280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181f15600"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181f15790"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181f15920"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181f15ab0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181f15c40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181f15dd0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181f14020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181f141b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181f14340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f8181f00da0" loc="66:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f8181f00da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181eff180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181eff310"/>
        <function-ref name="captured" scoped="" ref="0x7f8181eff4a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181eff630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181eff7c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181eff950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f8181f00020" loc="65:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f8181f00020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181f003a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181f00530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181f006c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181f00850"/>
        <function-ref name="fired" scoped="" ref="0x7f8181f009e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f8181f02a50" loc="64:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f8181f02a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181f02dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181f01020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181f011b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181f01340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181f014d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181f01660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181f017f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181f01980"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181f01b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f8181f08da0" loc="58:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f8181f08da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181f07180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181f07310"/>
        <function-ref name="captured" scoped="" ref="0x7f8181f074a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181f07630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181f077c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181f07950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f8181ef5890" loc="76:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f8181ef5890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181ef5c10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181ef5da0"/>
        <function-ref name="captured" scoped="" ref="0x7f8181ef4020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181ef41b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181ef4340"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181ef44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f8181effd40" loc="67:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f8181effd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181efe0e0"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181efe270"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181efe400"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181efe590"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181efe720"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181efe8b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181efea40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181efebd0"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181efed60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f8181f08020" loc="57:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f8181f08020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181f083a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181f08530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181f086c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181f08850"/>
        <function-ref name="fired" scoped="" ref="0x7f8181f089e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f8181f19a30" loc="49:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f8181f19a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181f19db0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181f16020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181f161b0"/>
        <function-ref name="get" scoped="" ref="0x7f8181f16340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181f164d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181f16660"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181f167f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181f16980"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181f16b10"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181f16ca0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181f16e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f8181ef6890" loc="75:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f8181ef6890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181ef6e10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181ef5020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181ef51b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181ef5340"/>
        <function-ref name="fired" scoped="" ref="0x7f8181ef54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f8181f12730" loc="53:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f8181f12730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181f12ab0"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181f12c40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181f12dd0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181f11020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181f111b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181f11340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181f114d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181f11660"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181f117f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f8181ef48c0" loc="77:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f8181ef48c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181ef4c40"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181ef4dd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181ef3020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181ef31b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181ef3340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181ef34d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181ef3660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181ef37f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181ef3980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f8181f0c690" loc="52:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f8181f0c690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181f0ca10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181f0cba0"/>
        <function-ref name="captured" scoped="" ref="0x7f8181f0cd30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181f12020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181f121b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181f12340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f8181efb020" loc="69:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f8181efb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181efb3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181efb530"/>
        <function-ref name="captured" scoped="" ref="0x7f8181efb6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181efb850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181efb9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181efbb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f8181f14700" loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f8181f14700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181f14a80"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181f14c10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181f14da0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181f13020"/>
        <function-ref name="fired" scoped="" ref="0x7f8181f131b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f8181efc160" loc="68:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f8181efc160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181efc4e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181efc670"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181efc800"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181efc990"/>
        <function-ref name="fired" scoped="" ref="0x7f8181efcb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f8181ef2ae0" loc="79:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f8181ef2ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181ef2e60"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181ef1020"/>
        <function-ref name="captured" scoped="" ref="0x7f8181ef11b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181ef1340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181ef14d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181ef1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f8181efa020" loc="71:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f8181efa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181efa3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181efa530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181efa6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181efa850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181efa9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181efab70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181efad00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181ef9020"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181ef91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f8181f07cd0" loc="60:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f8181f07cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181f060a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181f06230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181f063c0"/>
        <function-ref name="get" scoped="" ref="0x7f8181f06550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181f066e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181f06870"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181f06a00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181f06b90"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181f06d20"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181f05020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181f051b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f8181f03a20" loc="63:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f8181f03a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181f03da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181f02020"/>
        <function-ref name="captured" scoped="" ref="0x7f8181f021b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181f02340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181f024d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181f02660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f8181ef3d40" loc="78:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f8181ef3d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181ef20e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181ef2270"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181ef2400"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181ef2590"/>
        <function-ref name="fired" scoped="" ref="0x7f8181ef2720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f8181eef020" loc="81:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f8181eef020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181eef3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181eef530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181eef6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181eef850"/>
        <function-ref name="fired" scoped="" ref="0x7f8181eef9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f8181f04a20" loc="62:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f8181f04a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181f03020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181f031b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181f03340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181f034d0"/>
        <function-ref name="fired" scoped="" ref="0x7f8181f03660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f8181ef1a50" loc="80:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f8181ef1a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181ef1dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181ef0020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181ef01b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181ef0340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181ef04d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181ef0660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181ef07f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181ef0980"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181ef0b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f8181eb6940" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f8181eb6940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181eb6cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f8181eb62f0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f8181eb62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181eb6670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f8181eb5020" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f8181eb5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181eb53a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f8181eb7bf0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f8181eb7bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181eb6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f8181eb83e0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f8181eb83e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181eb8760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181eb88f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181eb8a80"/>
        <function-ref name="get" scoped="" ref="0x7f8181eb8c10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181eb8da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181eb7020"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181eb71b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181eb7340"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181eb74d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181eb7660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181eb77f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f8181eae750" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f8181eae750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181eaead0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f8181eae100" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f8181eae100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181eae480"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f8181eaeda0" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f8181eaeda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181ead180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f8181eafa60" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f8181eafa60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181eafe00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f8181eb1260" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f8181eb1260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181eb15e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181eb1770"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181eb1900"/>
        <function-ref name="get" scoped="" ref="0x7f8181eb1a90"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181eb1c20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181eb1db0"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181eaf020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181eaf1b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181eaf340"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181eaf4d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181eaf660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f8181e637a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f8181e637a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e63b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181e63cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f8181e63e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e62020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e621b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181e62340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f8181eaa6d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f8181eaa6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181eaaa50"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181eaabe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181eaad70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181e65020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181e651b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e65340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181e654d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181e65660"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181e657f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f8181e61c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f8181e61c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181e60020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f8181e65ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f8181e65ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e65e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181e63020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181e631b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181e63340"/>
        <function-ref name="fired" scoped="" ref="0x7f8181e634d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f8181e62610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f8181e62610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181e62990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181e62b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e62cb0"/>
        <function-ref name="get" scoped="" ref="0x7f8181e62e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e61020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e611b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181e61340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e614d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181e61660"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181e617f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181e61980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f8181e5ccb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f8181e5ccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e5b0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181e5b230"/>
        <function-ref name="captured" scoped="" ref="0x7f8181e5b3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e5b550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e5b6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181e5b870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f8181e5eb30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f8181e5eb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181e5d020"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181e5d1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e5d340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181e5d4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181e5d660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e5d7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181e5d980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181e5db10"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181e5dca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f8181e592f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f8181e592f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181e59670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f8181e5c020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f8181e5c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e5c3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181e5c530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181e5c6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181e5c850"/>
        <function-ref name="fired" scoped="" ref="0x7f8181e5c9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f8181e5bb40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f8181e5bb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181e5a020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181e5a1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e5a340"/>
        <function-ref name="get" scoped="" ref="0x7f8181e5a4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e5a660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e5a7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181e5a980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e5ab10"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181e5aca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181e5ae30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181e59020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f8181e532f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f8181e532f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e53670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181e53800"/>
        <function-ref name="captured" scoped="" ref="0x7f8181e53990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e53b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e53cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181e53e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f8181e56220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f8181e56220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181e565a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181e56730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e568c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181e56a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181e56be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e56d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181e55020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181e551b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181e55340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f8181e517a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f8181e517a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181e51b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f8181e55610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f8181e55610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e55990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181e55b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181e55cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181e55e40"/>
        <function-ref name="fired" scoped="" ref="0x7f8181e53020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f8181e52160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f8181e52160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181e524e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181e52670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e52800"/>
        <function-ref name="get" scoped="" ref="0x7f8181e52990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e52b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e52cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181e52e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e51020"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181e511b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181e51340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181e514d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f8181e4c7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f8181e4c7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e4cb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181e4ccb0"/>
        <function-ref name="captured" scoped="" ref="0x7f8181e4ce40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e4b020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e4b1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181e4b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f8181e4e6d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f8181e4e6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181e4ea50"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181e4ebe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e4ed70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181e4d020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181e4d1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e4d340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181e4d4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181e4d660"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181e4d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f8181e4ac50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f8181e4ac50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181e49020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f8181e4dac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f8181e4dac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e4de40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181e4c020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181e4c1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181e4c340"/>
        <function-ref name="fired" scoped="" ref="0x7f8181e4c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f8181e4b610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f8181e4b610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181e4b990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181e4bb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e4bcb0"/>
        <function-ref name="get" scoped="" ref="0x7f8181e4be40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e4a020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e4a1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181e4a340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e4a4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181e4a660"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181e4a7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181e4a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f8181e45cb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f8181e45cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e430a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181e43230"/>
        <function-ref name="captured" scoped="" ref="0x7f8181e433c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e43550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e436e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181e43870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f8181e47b30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f8181e47b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181e46020"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181e461b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e46340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181e464d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181e46660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e467f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181e46980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181e46b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181e46ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f8181e412f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f8181e412f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181e41670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f8181e45020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f8181e45020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e453a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181e45530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181e456c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181e45850"/>
        <function-ref name="fired" scoped="" ref="0x7f8181e459e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f8181e43b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f8181e43b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181e42020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181e421b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e42340"/>
        <function-ref name="get" scoped="" ref="0x7f8181e424d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e42660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e427f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181e42980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e42b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181e42ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181e42e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181e41020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f8181e3c2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f8181e3c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e3c670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181e3c800"/>
        <function-ref name="captured" scoped="" ref="0x7f8181e3c990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e3cb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e3ccb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181e3ce40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f8181e3e220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f8181e3e220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181e3e5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181e3e730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e3e8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181e3ea50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181e3ebe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e3ed70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181e3d020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181e3d1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181e3d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f8181e3a7a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f8181e3a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181e3ab20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f8181e3d610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f8181e3d610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e3d990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181e3db20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181e3dcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181e3de40"/>
        <function-ref name="fired" scoped="" ref="0x7f8181e3c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f8181e3b160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f8181e3b160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181e3b4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181e3b670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e3b800"/>
        <function-ref name="get" scoped="" ref="0x7f8181e3b990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e3bb20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e3bcb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181e3be40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e3a020"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181e3a1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181e3a340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181e3a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f8181e357a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f8181e357a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e35b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181e35cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f8181e35e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e33020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e331b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181e33340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f8181e376d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f8181e376d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181e37a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181e37be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e37d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181e36020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181e361b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e36340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181e364d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181e36660"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181e367f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f8181e32c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f8181e32c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181e31020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f8181e36ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f8181e36ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e36e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181e35020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181e351b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181e35340"/>
        <function-ref name="fired" scoped="" ref="0x7f8181e354d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f8181e33610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f8181e33610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181e33990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181e33b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e33cb0"/>
        <function-ref name="get" scoped="" ref="0x7f8181e33e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e32020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e321b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181e32340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e324d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181e32660"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181e327f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181e32980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f8181e2dcb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f8181e2dcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e2c0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181e2c230"/>
        <function-ref name="captured" scoped="" ref="0x7f8181e2c3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e2c550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e2c6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181e2c870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f8181e2fb30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f8181e2fb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181e2e020"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181e2e1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e2e340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181e2e4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181e2e660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e2e7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181e2e980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181e2eb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181e2eca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f8181e2a2f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f8181e2a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181e2a670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f8181e2d020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f8181e2d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e2d3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181e2d530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181e2d6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181e2d850"/>
        <function-ref name="fired" scoped="" ref="0x7f8181e2d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f8181e2cb40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f8181e2cb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181e2b020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181e2b1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e2b340"/>
        <function-ref name="get" scoped="" ref="0x7f8181e2b4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e2b660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e2b7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181e2b980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e2bb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181e2bca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181e2be30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181e2a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f8181e252f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f8181e252f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e25670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181e25800"/>
        <function-ref name="captured" scoped="" ref="0x7f8181e25990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e25b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e25cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181e25e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f8181e27220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f8181e27220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181e275a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181e27730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e278c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181e27a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181e27be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e27d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181e26020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181e261b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181e26340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f8181e227a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f8181e227a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181e22b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f8181e26610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f8181e26610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e26990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181e26b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181e26cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181e26e40"/>
        <function-ref name="fired" scoped="" ref="0x7f8181e25020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f8181e24160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f8181e24160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181e244e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181e24670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e24800"/>
        <function-ref name="get" scoped="" ref="0x7f8181e24990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e24b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e24cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181e24e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e22020"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181e221b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181e22340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181e224d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f8181e1d7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f8181e1d7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e1db20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181e1dcb0"/>
        <function-ref name="captured" scoped="" ref="0x7f8181e1de40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e1c020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e1c1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181e1c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f8181e1f6d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f8181e1f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181e1fa50"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181e1fbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e1fd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181e1e020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181e1e1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e1e340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181e1e4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181e1e660"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181e1e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f8181e1bc50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f8181e1bc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181e1a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f8181e1eac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f8181e1eac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181e1ee40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8181e1d020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8181e1d1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8181e1d340"/>
        <function-ref name="fired" scoped="" ref="0x7f8181e1d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f8181e1c610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f8181e1c610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181e1c990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181e1cb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181e1ccb0"/>
        <function-ref name="get" scoped="" ref="0x7f8181e1ce40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181e1b020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181e1b1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181e1b340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181e1b4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181e1b660"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181e1b7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181e1b980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f8181e15bc0" loc="7:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f8181e15bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181e14020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f8181e163f0" loc="4:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f8181e163f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181e16770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f8181e16b80" loc="5:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f8181e16b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181e15020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f8181e15430" loc="6:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f8181e15430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181e157b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f81808500c0" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f81808500c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8180850440"/>
        <function-ref name="setEvent" scoped="" ref="0x7f81808505d0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8180850760"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f81808508f0"/>
        <function-ref name="fired" scoped="" ref="0x7f8180850a80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f8180865710" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f8180865710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8180865a90"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8180865c20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8180865db0"/>
        <function-ref name="get" scoped="" ref="0x7f8180863020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f81808631b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8180863340"/>
        <function-ref name="getMode" scoped="" ref="0x7f81808634d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8180863660"/>
        <function-ref name="overflow" scoped="" ref="0x7f81808637f0"/>
        <function-ref name="setMode" scoped="" ref="0x7f8180863980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8180863b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f81808685b0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f81808685b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f8180866df0"/>
        <function-ref name="fired" scoped="" ref="0x7f8180867df0"/>
        <function-ref name="startAt" scoped="" ref="0x7f81808667a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f81808662e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f81808652e0"/>
        <function-ref name="start" scoped="" ref="0x7f8180867420"/>
        <function-ref name="stop" scoped="" ref="0x7f8180867930"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f8180869ca0" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f8180869ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81808680a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f8180863da0" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8180863da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8180851180"/>
        <function-ref name="getControl" scoped="" ref="0x7f8180851310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f81808514a0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8180851630"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f81808517c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8180851950"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8180851ae0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8180851c70"/>
        <function-ref name="setControl" scoped="" ref="0x7f8180851e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f8181d8b8c0" loc="43:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <component-ref qname="Counter32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f8181d8b8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f8181d90700"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181d8f0d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181d90bc0"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181d8f590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f8181d8a8e0" loc="43:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f8181d8a8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f8181d87780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181d85150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181d87c40"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181d85610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f8181d74c50" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f8181d74c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181d73020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8181d731b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181d73340"/>
        <function-ref name="get" scoped="" ref="0x7f8181d734d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181d73660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181d737f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181d73980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181d73b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181d73ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f8181d73e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f8181d72020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f8181d83b80" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f8181d83b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f8181d829b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181d74360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181d82e70"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181d74820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f8181d510f0" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f8181d510f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f8181d50020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181d509a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181d504e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181d50e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f8181d6fcf0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f8181d6fcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f8181d53b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181d52550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181d52090"/>
        <function-ref name="overflow" scoped="" ref="0x7f8181d52a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f818087e020" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f818087e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f818087c870"/>
        <function-ref name="fired" scoped="" ref="0x7f818087d840"/>
        <function-ref name="startAt" scoped="" ref="0x7f818087c220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f818087dd00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f818087cd30"/>
        <function-ref name="start" scoped="" ref="0x7f818087ee30"/>
        <function-ref name="stop" scoped="" ref="0x7f818087d380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f8180878780" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f8180878780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f8180874020"/>
        <function-ref name="fired" scoped="" ref="0x7f8180876020"/>
        <function-ref name="startAt" scoped="" ref="0x7f81808769a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f81808764e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f81808744e0"/>
        <function-ref name="start" scoped="" ref="0x7f81808775d0"/>
        <function-ref name="stop" scoped="" ref="0x7f8180877ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f818087a3d0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f818087a3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f8180879240"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8180879bc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8180879700"/>
        <function-ref name="overflow" scoped="" ref="0x7f81808780d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFO" ref="0x7f8181d059c0" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7f8181d059c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181d05d40"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181d04020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181d041b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181d04340"/>
        <function-ref name="get" scoped="" ref="0x7f8181d044d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181d04660"/>
        <function-ref name="set" scoped="" ref="0x7f8181d047f0"/>
        <function-ref name="clr" scoped="" ref="0x7f8181d04980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFOP" ref="0x7f8181d04cf0" loc="45:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7f8181d04cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181d030a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181d03230"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181d033c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181d03550"/>
        <function-ref name="get" scoped="" ref="0x7f8181d036e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181d03870"/>
        <function-ref name="set" scoped="" ref="0x7f8181d03a00"/>
        <function-ref name="clr" scoped="" ref="0x7f8181d03b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x7f8181d02020" loc="46:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7f8181d02020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181d023a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181d02530"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181d026c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181d02850"/>
        <function-ref name="get" scoped="" ref="0x7f8181d029e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181d02b70"/>
        <function-ref name="set" scoped="" ref="0x7f8181d02d00"/>
        <function-ref name="clr" scoped="" ref="0x7f8181d01020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CSN" ref="0x7f8181d06690" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f8181d06690"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181d06a10"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181d06ba0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181d06d30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181d05020"/>
        <function-ref name="get" scoped="" ref="0x7f8181d051b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181d05340"/>
        <function-ref name="set" scoped="" ref="0x7f8181d054d0"/>
        <function-ref name="clr" scoped="" ref="0x7f8181d05660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VREN" ref="0x7f8181d006a0" loc="48:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7f8181d006a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181d00a20"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181d00bb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181d00d40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181cff020"/>
        <function-ref name="get" scoped="" ref="0x7f8181cff1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181cff340"/>
        <function-ref name="set" scoped="" ref="0x7f8181cff4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f8181cff660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CCA" ref="0x7f8181d073e0" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7f8181d073e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181d07760"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181d078f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181d07a80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181d07c10"/>
        <function-ref name="get" scoped="" ref="0x7f8181d07da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181d06020"/>
        <function-ref name="set" scoped="" ref="0x7f8181d061b0"/>
        <function-ref name="clr" scoped="" ref="0x7f8181d06340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFD" ref="0x7f8181d01370" loc="47:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7f8181d01370"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181d016f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181d01880"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181d01a10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181d01ba0"/>
        <function-ref name="get" scoped="" ref="0x7f8181d01d30"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181d00020"/>
        <function-ref name="set" scoped="" ref="0x7f8181d001b0"/>
        <function-ref name="clr" scoped="" ref="0x7f8181d00340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f8181cfdc50" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8181cfdc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181cfb020"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181cfb1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8181cfb340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8181cf9020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181cfb660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181cfb7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8181cfb980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8181cfbb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181cfbca0"/>
        <function-ref name="get" scoped="" ref="0x7f8181cfbe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8181cfa020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8181cfa1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8181cfa340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8181cfa5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8181cfa760"/>
        <function-ref name="set" scoped="" ref="0x7f8181cfa8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8181cfaa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8181cfac10"/>
        <function-ref name="clr" scoped="" ref="0x7f8181cfb4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8181cfada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f8181cfea20" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f8181cfea20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181cfeda0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181cfd020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181cfd1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181cfd340"/>
        <function-ref name="get" scoped="" ref="0x7f8181cfd4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181cfd660"/>
        <function-ref name="set" scoped="" ref="0x7f8181cfd7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f8181cfd980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f8181cf62f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8181cf62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181cf6670"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181cf6800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8181cf6990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8181cf4660"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181cf6cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181cf6e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8181cf5020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8181cf51b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181cf5340"/>
        <function-ref name="get" scoped="" ref="0x7f8181cf54d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8181cf5660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8181cf57f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8181cf5980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8181cf5c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8181cf5da0"/>
        <function-ref name="set" scoped="" ref="0x7f8181cf4020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8181cf41b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8181cf4340"/>
        <function-ref name="clr" scoped="" ref="0x7f8181cf6b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8181cf44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f8181cf7020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f8181cf7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181cf73a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181cf7530"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181cf76c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181cf7850"/>
        <function-ref name="get" scoped="" ref="0x7f8181cf79e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181cf7b70"/>
        <function-ref name="set" scoped="" ref="0x7f8181cf7d00"/>
        <function-ref name="clr" scoped="" ref="0x7f8181cf6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f8181cf17a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8181cf17a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181cf1b20"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181cf1cb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8181cf1e40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8181cefa80"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181cf01b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181cf0340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8181cf04d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8181cf0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181cf07f0"/>
        <function-ref name="get" scoped="" ref="0x7f8181cf0980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8181cf0b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8181cf0ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8181cf0e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8181cef120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8181cef2b0"/>
        <function-ref name="set" scoped="" ref="0x7f8181cef440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8181cef5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8181cef760"/>
        <function-ref name="clr" scoped="" ref="0x7f8181cf0020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8181cef8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f8181cf2630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f8181cf2630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181cf29b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181cf2b40"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181cf2cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181cf2e60"/>
        <function-ref name="get" scoped="" ref="0x7f8181cf1020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181cf11b0"/>
        <function-ref name="set" scoped="" ref="0x7f8181cf1340"/>
        <function-ref name="clr" scoped="" ref="0x7f8181cf14d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f8181cecc60" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8181cecc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181ceb020"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181ceb1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8181ceb340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8181ce9020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181ceb660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181ceb7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8181ceb980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8181cebb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181cebca0"/>
        <function-ref name="get" scoped="" ref="0x7f8181cebe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8181cea020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8181cea1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8181cea340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8181cea5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8181cea760"/>
        <function-ref name="set" scoped="" ref="0x7f8181cea8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8181ceaa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8181ceac10"/>
        <function-ref name="clr" scoped="" ref="0x7f8181ceb4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8181ceada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f8181cedb00" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f8181cedb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181cede80"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181cec030"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181cec1c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181cec350"/>
        <function-ref name="get" scoped="" ref="0x7f8181cec4e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181cec670"/>
        <function-ref name="set" scoped="" ref="0x7f8181cec800"/>
        <function-ref name="clr" scoped="" ref="0x7f8181cec990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f8181ce62f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8181ce62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181ce6670"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181ce6800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8181ce6990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8181ce4660"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181ce6cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181ce6e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8181ce5020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8181ce51b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181ce5340"/>
        <function-ref name="get" scoped="" ref="0x7f8181ce54d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8181ce5660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8181ce57f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8181ce5980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8181ce5c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8181ce5da0"/>
        <function-ref name="set" scoped="" ref="0x7f8181ce4020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8181ce41b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8181ce4340"/>
        <function-ref name="clr" scoped="" ref="0x7f8181ce6b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8181ce44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f8181ce7020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f8181ce7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181ce73a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181ce7530"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181ce76c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181ce7850"/>
        <function-ref name="get" scoped="" ref="0x7f8181ce79e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181ce7b70"/>
        <function-ref name="set" scoped="" ref="0x7f8181ce7d00"/>
        <function-ref name="clr" scoped="" ref="0x7f8181ce6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f8181ce07a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8181ce07a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181ce0b20"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181ce0cb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8181ce0e40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8181cdea80"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181cdf1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181cdf340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8181cdf4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8181cdf660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181cdf7f0"/>
        <function-ref name="get" scoped="" ref="0x7f8181cdf980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8181cdfb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8181cdfca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8181cdfe30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8181cde120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8181cde2b0"/>
        <function-ref name="set" scoped="" ref="0x7f8181cde440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8181cde5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8181cde760"/>
        <function-ref name="clr" scoped="" ref="0x7f8181cdf020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8181cde8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f8181ce2630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f8181ce2630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181ce29b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181ce2b40"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181ce2cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181ce2e60"/>
        <function-ref name="get" scoped="" ref="0x7f8181ce0020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181ce01b0"/>
        <function-ref name="set" scoped="" ref="0x7f8181ce0340"/>
        <function-ref name="clr" scoped="" ref="0x7f8181ce04d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f8181cdbc60" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f8181cdbc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181cda020"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181cda1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8181cda340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8181cd8020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181cda660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181cda7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8181cda980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8181cdab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181cdaca0"/>
        <function-ref name="get" scoped="" ref="0x7f8181cdae30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8181cd9020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8181cd91b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8181cd9340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8181cd95d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8181cd9760"/>
        <function-ref name="set" scoped="" ref="0x7f8181cd98f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8181cd9a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8181cd9c10"/>
        <function-ref name="clr" scoped="" ref="0x7f8181cda4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8181cd9da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f8181cdcb00" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f8181cdcb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181cdce80"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181cdb030"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181cdb1c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181cdb350"/>
        <function-ref name="get" scoped="" ref="0x7f8181cdb4e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181cdb670"/>
        <function-ref name="set" scoped="" ref="0x7f8181cdb800"/>
        <function-ref name="clr" scoped="" ref="0x7f8181cdb990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureSFD" ref="0x7f8181cba700" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7f8181cba700"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f8181cbaa80"/>
        <function-ref name="disable" scoped="" ref="0x7f8181cbac10"/>
        <function-ref name="captured" scoped="" ref="0x7f8181cbada0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f8181cbd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptCCA" ref="0x7f8181cbd400" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7f8181cbd400"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181cbd780"/>
        <function-ref name="disable" scoped="" ref="0x7f8181cbd910"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f8181cbdaa0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f8181cbdc30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptFIFOP" ref="0x7f8181cb9060" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f8181cb9060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181cb93e0"/>
        <function-ref name="disable" scoped="" ref="0x7f8181cb9570"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f8181cb9700"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f8181cb9890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Capture" ref="0x7f8181ca3a80" loc="50:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Capture" scoped="" ref="0x7f8181ca3a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8181ca3e00"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f8181ca2020"/>
        <function-ref name="captured" scoped="" ref="0x7f8181ca21b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8181ca2340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8181ca24d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f8181ca2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f8181cb6c20" loc="48:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f8181cb6c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f8181ca4020"/>
        <function-ref name="disable" scoped="" ref="0x7f8181ca41b0"/>
        <function-ref name="captured" scoped="" ref="0x7f8181ca4340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f8181ca44d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f8181ca4760" loc="49:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8181ca4760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8181ca4ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f8181ca4c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8181ca4e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8181ca3020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8181ca31b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8181ca3340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f8181ca34d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8181ca3660"/>
        <function-ref name="setControl" scoped="" ref="0x7f8181ca37f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GeneralIO" ref="0x7f8181ca2930" loc="51:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f8181ca2930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181ca2cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181ca2e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8181ca1020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8181ca0c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181ca1340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181ca14d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8181ca1660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8181ca17f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181ca1980"/>
        <function-ref name="get" scoped="" ref="0x7f8181ca1b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8181ca1ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8181ca1e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8181ca0020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8181ca02b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8181ca0440"/>
        <function-ref name="set" scoped="" ref="0x7f8181ca05d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8181ca0760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8181ca08f0"/>
        <function-ref name="clr" scoped="" ref="0x7f8181ca11b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8181ca0a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f8181c8e020" loc="46:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f8181c8e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c8e3a0"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c8e530"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c8e6c0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c8e850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c8e9e0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c8eb70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c8ed00"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c8d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f8181c823f0" loc="58:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f8181c823f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c82770"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c82900"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c82a90"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c82c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c82db0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c81020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c811b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c81340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f8181c8ba30" loc="49:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f8181c8ba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c8bdb0"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c8a020"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c8a1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c8a340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c8a4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c8a660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c8a7f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c8a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f8181c88020" loc="53:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f8181c88020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c883a0"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c88530"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c886c0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c88850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c889e0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c88b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c88d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c87020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f8181c98a30" loc="44:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f8181c98a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c98db0"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c91020"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c911b0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c91340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c914d0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c91660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c917f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c91980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f8181c85a30" loc="56:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f8181c85a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c84020"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c841b0"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c84340"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c844d0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c84660"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c847f0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c84980"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c84b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f8181c8d3f0" loc="47:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f8181c8d3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c8d770"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c8d900"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c8da90"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c8dc20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c8ddb0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c8c020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c8c1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c8c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f8181c81710" loc="59:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f8181c81710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c81a90"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c81c20"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c81db0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c80020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c801b0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c80340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c804d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c80660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f8181c92390" loc="42:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f8181c92390"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c92710"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c928a0"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c92a30"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c92bc0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c92d50"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c99020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c991b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c99340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f8181c873f0" loc="54:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f8181c873f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c87770"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c87900"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c87a90"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c87c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c87db0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c86020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c861b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c86340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f8181c91d50" loc="45:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f8181c91d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c8f100"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c8f290"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c8f420"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c8f5b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c8f740"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c8f8d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c8fa60"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c8fbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f8181c83020" loc="57:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f8181c83020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c833a0"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c83530"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c836c0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c83850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c839e0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c83b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c83d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c82020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f8181c8c710" loc="48:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f8181c8c710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c8ca90"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c8cc20"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c8cdb0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c8b020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c8b1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c8b340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c8b4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c8b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f8181c8ad50" loc="52:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f8181c8ad50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c89100"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c89290"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c89420"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c895b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c89740"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c898d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c89a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c89bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f8181c99710" loc="43:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f8181c99710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c99a90"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c99c20"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c99db0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c98020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c981b0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c98340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c984d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c98660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f8181c86710" loc="55:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f8181c86710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c86a90"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c86c20"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c86db0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c85020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c851b0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c85340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c854d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c85660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f8181c783f0" loc="58:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f8181c783f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c78770"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c78900"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c78a90"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c78c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c78db0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c77020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c771b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c77340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f8181c6b3f0" loc="70:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f8181c6b3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c6b770"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c6b900"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c6ba90"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c6bc20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c6bdb0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c6a020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c6a1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c6a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f8181c75d50" loc="61:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f8181c75d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c74100"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c74290"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c74420"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c745b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c74740"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c748d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c74a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c74bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f8181c723f0" loc="65:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f8181c723f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c72770"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c72900"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c72a90"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c72c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c72db0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c70020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c701b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c70340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f8181c7bd50" loc="56:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f8181c7bd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c7a100"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c7a290"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c7a420"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c7a5b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c7a740"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c7a8d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c7aa60"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c7abf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f8181c6ed50" loc="68:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f8181c6ed50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c6d210"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c6d3a0"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c6d530"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c6d6c0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c6d850"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c6d9e0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c6db70"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c6dd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f8181c77710" loc="59:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f8181c77710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c77a90"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c77c20"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c77db0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c76020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c761b0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c76340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c764d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c76660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f8181c6a710" loc="71:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f8181c6a710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c6aa90"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c6ac20"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c6adb0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c69020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c691b0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c69340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c694d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c69660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f8181c7f7a0" loc="54:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f8181c7f7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c7fb20"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c7fcb0"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c7fe40"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c7c020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c7c1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c7c340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c7c4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c7c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f8181c70710" loc="66:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f8181c70710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c70a90"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c70c20"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c70db0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c6f020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c6f1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c6f340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c6f4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c6f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f8181c79020" loc="57:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f8181c79020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c793a0"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c79530"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c796c0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c79850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c799e0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c79b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c79d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c78020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f8181c6c100" loc="69:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f8181c6c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c6c480"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c6c610"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c6c7a0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c6c930"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c6cac0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c6cc50"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c6cde0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c6b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f8181c76a30" loc="60:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f8181c76a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c76db0"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c75020"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c751b0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c75340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c754d0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c75660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c757f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c75980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f8181c73020" loc="64:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f8181c73020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c733a0"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c73530"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c736c0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c73850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c739e0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c73b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c73d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c72020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f8181c7ca30" loc="55:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f8181c7ca30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c7cdb0"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c7b020"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c7b1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c7b340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c7b4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c7b660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c7b7f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c7b980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f8181c6fa30" loc="67:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f8181c6fa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181c6fdb0"/>
        <function-ref name="fired" scoped="" ref="0x7f8181c6e020"/>
        <function-ref name="disable" scoped="" ref="0x7f8181c6e1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f8181c6e340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181c6e4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181c6e660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181c6e7f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181c6e980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7f8181b532f0" loc="52:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7f8181b532f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181b53670"/>
        <function-ref name="fired" scoped="" ref="0x7f8181b53800"/>
        <function-ref name="disable" scoped="" ref="0x7f8181b53990"/>
        <function-ref name="edge" scoped="" ref="0x7f8181b53b20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181b53cb0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181b53e40"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181b52020"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181b521b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f8181b60680" loc="51:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f8181b60680"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181b60a00"/>
        <function-ref name="disable" scoped="" ref="0x7f8181b60b90"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f8181b60d20"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f8181b53020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7f8181b507a0" loc="52:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7f8181b507a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181b50b20"/>
        <function-ref name="fired" scoped="" ref="0x7f8181b50cb0"/>
        <function-ref name="disable" scoped="" ref="0x7f8181b50e40"/>
        <function-ref name="edge" scoped="" ref="0x7f8181b4f020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f8181b4f1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f8181b4f340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f8181b4f4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f8181b4f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f8181b51b70" loc="51:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f8181b51b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181b50020"/>
        <function-ref name="disable" scoped="" ref="0x7f8181b501b0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f8181b50340"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f8181b504d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f81816ece50" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f81816ece50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816eb410"/>
        <function-ref name="write" scoped="" ref="0x7f81816eb5a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f81816f6160" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f81816f6160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816f64e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f81816f0e50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f81816f0e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816ef210"/>
        <function-ref name="write" scoped="" ref="0x7f81816ef3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f81816ea880" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f81816ea880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816eac00"/>
        <function-ref name="write" scoped="" ref="0x7f81816ead90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f81816e20a0" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f81816e20a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e2420"/>
        <function-ref name="write" scoped="" ref="0x7f81816e25b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f81816e90a0" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f81816e90a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e9420"/>
        <function-ref name="write" scoped="" ref="0x7f81816e95b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f81816d6500" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f81816d6500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816d6880"/>
        <function-ref name="write" scoped="" ref="0x7f81816d6a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f81816d9500" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f81816d9500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816d9880"/>
        <function-ref name="write" scoped="" ref="0x7f81816d9a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f81816f5490" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f81816f5490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816f5810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f81816de880" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f81816de880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816dec00"/>
        <function-ref name="write" scoped="" ref="0x7f81816ded90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f81816da500" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f81816da500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816da880"/>
        <function-ref name="write" scoped="" ref="0x7f81816daa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f81816efe50" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f81816efe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816ee210"/>
        <function-ref name="write" scoped="" ref="0x7f81816ee3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f81816eee50" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f81816eee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816ec210"/>
        <function-ref name="write" scoped="" ref="0x7f81816ec3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f81816e4880" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f81816e4880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e4c00"/>
        <function-ref name="write" scoped="" ref="0x7f81816e4d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f81816e50a0" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f81816e50a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e5420"/>
        <function-ref name="write" scoped="" ref="0x7f81816e55b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f81816e9880" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f81816e9880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e9c00"/>
        <function-ref name="write" scoped="" ref="0x7f81816e9d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f81816f8a90" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f81816f8a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f81816f8e10"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f81816f7020"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f81816f71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f81816f4e00" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f81816f4e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816f21c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f81816f2490" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f81816f2490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816f2910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f81816ddc80" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f81816ddc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816dc0a0"/>
        <function-ref name="write" scoped="" ref="0x7f81816dc230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f81816f2be0" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f81816f2be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816f1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f81816dace0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f81816dace0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816d90a0"/>
        <function-ref name="write" scoped="" ref="0x7f81816d9230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f81816f4160" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f81816f4160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816f44e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f81816de0a0" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f81816de0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816de420"/>
        <function-ref name="write" scoped="" ref="0x7f81816de5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f81816ee670" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f81816ee670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816ee9f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816eeb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f81816ef670" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f81816ef670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816ef9f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816efb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f81816f7ad0" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f81816f7ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816f7e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f81816e00a0" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f81816e00a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e0420"/>
        <function-ref name="write" scoped="" ref="0x7f81816e05b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f81816e2880" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f81816e2880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e2c00"/>
        <function-ref name="write" scoped="" ref="0x7f81816e2d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f81816e0880" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f81816e0880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e0c00"/>
        <function-ref name="write" scoped="" ref="0x7f81816e0d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f81816d7ce0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f81816d7ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816d60a0"/>
        <function-ref name="write" scoped="" ref="0x7f81816d6230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f81816d9ce0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f81816d9ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816d70a0"/>
        <function-ref name="write" scoped="" ref="0x7f81816d7230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f81816e5880" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f81816e5880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e5c00"/>
        <function-ref name="write" scoped="" ref="0x7f81816e5d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f81816e10a0" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f81816e10a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e1420"/>
        <function-ref name="write" scoped="" ref="0x7f81816e15b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f81816dbce0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f81816dbce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816da0a0"/>
        <function-ref name="write" scoped="" ref="0x7f81816da230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f81816e8880" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f81816e8880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e8c00"/>
        <function-ref name="write" scoped="" ref="0x7f81816e8d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f81816d6ce0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f81816d6ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f81816d50a0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f81816d5230"/>
        <function-ref name="write" scoped="" ref="0x7f81816d53c0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f81816d5550"/>
        <function-ref name="readDone" scoped="" ref="0x7f81816d56e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f81816f7480" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f81816f7480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816f7800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f81816f0670" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f81816f0670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816f09f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816f0b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f81816ec670" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f81816ec670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816ec9f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816ecb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f81816e30a0" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f81816e30a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e3420"/>
        <function-ref name="write" scoped="" ref="0x7f81816e35b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f81816e80a0" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f81816e80a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e8420"/>
        <function-ref name="write" scoped="" ref="0x7f81816e85b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f81816e3880" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f81816e3880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e3c00"/>
        <function-ref name="write" scoped="" ref="0x7f81816e3d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f81816eb870" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f81816eb870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816ebbf0"/>
        <function-ref name="write" scoped="" ref="0x7f81816ebd80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f81816f67b0" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f81816f67b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816f6b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f81816ea0a0" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f81816ea0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816ea420"/>
        <function-ref name="write" scoped="" ref="0x7f81816ea5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f81816f9e20" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f81816f9e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f81816f81c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f81816f8350"/>
        <function-ref name="request" scoped="" ref="0x7f81816f84e0"/>
        <function-ref name="granted" scoped="" ref="0x7f81816f8670"/>
        <function-ref name="isOwner" scoped="" ref="0x7f81816f8800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f81816f12f0" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f81816f12f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816f1670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f81816f0020" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f81816f0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816f03a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f81816db500" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f81816db500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816db880"/>
        <function-ref name="write" scoped="" ref="0x7f81816dba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f81816dcce0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f81816dcce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816db0a0"/>
        <function-ref name="write" scoped="" ref="0x7f81816db230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f81816f47b0" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f81816f47b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816f4b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f81816dc500" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f81816dc500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816dc880"/>
        <function-ref name="write" scoped="" ref="0x7f81816dca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f81816d7500" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f81816d7500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816d7880"/>
        <function-ref name="write" scoped="" ref="0x7f81816d7a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f81816e40a0" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f81816e40a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e4420"/>
        <function-ref name="write" scoped="" ref="0x7f81816e45b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f81816e1880" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f81816e1880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e1c00"/>
        <function-ref name="write" scoped="" ref="0x7f81816e1d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f81816f6e00" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f81816f6e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816f51c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f81816f5ae0" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f81816f5ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816f5e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f81816e70a0" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f81816e70a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e7420"/>
        <function-ref name="write" scoped="" ref="0x7f81816e75b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f81816f1940" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f81816f1940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816f1cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f81816e7880" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f81816e7880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816e7c00"/>
        <function-ref name="write" scoped="" ref="0x7f81816e7d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f81816dd0a0" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f81816dd0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816dd820"/>
        <function-ref name="write" scoped="" ref="0x7f81816dd9b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f81816d59b0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f81816d59b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f81816d5d30"/>
        <function-ref name="writeDone" scoped="" ref="0x7f81816d4020"/>
        <function-ref name="write" scoped="" ref="0x7f81816d41b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f81816d4340"/>
        <function-ref name="readDone" scoped="" ref="0x7f81816d44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7f8181b0c2c0" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7f8181b0c2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f8181b0c640"/>
        <function-ref name="writeDone" scoped="" ref="0x7f8181b0c7d0"/>
        <function-ref name="write" scoped="" ref="0x7f8181b0c960"/>
        <function-ref name="beginRead" scoped="" ref="0x7f8181b0caf0"/>
        <function-ref name="readDone" scoped="" ref="0x7f8181b0cc80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f8181b0d350" loc="40:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f8181b0d350"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f8181b0d6d0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f8181b0d860"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f8181b0d9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7f8181b0a540" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7f8181b0a540"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181b0a8c0"/>
        <function-ref name="write" scoped="" ref="0x7f8181b0aa50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7f8181b09370" loc="43:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7f8181b09370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181b096f0"/>
        <function-ref name="write" scoped="" ref="0x7f8181b09880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f8181b0e4d0" loc="39:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f8181b0e4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8181b0e850"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8181b0e9e0"/>
        <function-ref name="request" scoped="" ref="0x7f8181b0eb70"/>
        <function-ref name="granted" scoped="" ref="0x7f8181b0ed00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8181b0d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7f8181b081d0" loc="44:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7f8181b081d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181b08550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiPacket" ref="0x7f8181af12e0" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f8181af12e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8181af1660"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8181af17f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7f8181b03890" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7f8181b03890"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f8181b03c10"/>
        <function-ref name="writeDone" scoped="" ref="0x7f8181b03da0"/>
        <function-ref name="write" scoped="" ref="0x7f8181b01020"/>
        <function-ref name="beginRead" scoped="" ref="0x7f8181b011b0"/>
        <function-ref name="readDone" scoped="" ref="0x7f8181b01340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f8181b05660" loc="44:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f8181b05660"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f8181b059e0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f8181b05b70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f8181b05d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiByte" ref="0x7f8181afac70" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f8181afac70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f8181afd020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="WorkingState" ref="0x7f8181af1b40" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="WorkingState" scoped="" ref="0x7f8181af1b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f8181afb020"/>
        <function-ref name="toIdle" scoped="" ref="0x7f8181afb1b0"/>
        <function-ref name="isState" scoped="" ref="0x7f8181afb340"/>
        <function-ref name="isIdle" scoped="" ref="0x7f8181afb4d0"/>
        <function-ref name="requestState" scoped="" ref="0x7f8181afb660"/>
        <function-ref name="forceState" scoped="" ref="0x7f8181afb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f8181afe060" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f8181afe060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8181afe3e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8181afe570"/>
        <function-ref name="request" scoped="" ref="0x7f8181afe700"/>
        <function-ref name="granted" scoped="" ref="0x7f8181afe890"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8181afea20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7f8181b01ba0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7f8181b01ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181b00020"/>
        <function-ref name="write" scoped="" ref="0x7f8181b001b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7f8181b00a30" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7f8181b00a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181b00db0"/>
        <function-ref name="write" scoped="" ref="0x7f8181aff020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f8181afba70" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f8181afba70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f8181afbdf0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f8181af8020"/>
        <function-ref name="led1On" scoped="" ref="0x7f8181af81b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f8181af8340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f8181af84d0"/>
        <function-ref name="get" scoped="" ref="0x7f8181af8660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f8181af87f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f8181af8e30"/>
        <function-ref name="set" scoped="" ref="0x7f8181af8980"/>
        <function-ref name="led0On" scoped="" ref="0x7f8181af8b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f8181af8ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f8181b04510" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f8181b04510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8181b04890"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8181b04a20"/>
        <function-ref name="request" scoped="" ref="0x7f8181b04bb0"/>
        <function-ref name="granted" scoped="" ref="0x7f8181b04d40"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8181b03020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grant" ref="0x7f8181aedbd0" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grant" scoped="" ref="0x7f8181aedbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f8181aec020"/>
        <function-ref name="runTask" scoped="" ref="0x7f8181aec1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7f8181aff8b0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7f8181aff8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181affc30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f8181a93770" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="CC2420SpiWireC.WorkingStateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f8181a93770"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f8181a93af0"/>
        <function-ref name="toIdle" scoped="" ref="0x7f8181a93c80"/>
        <function-ref name="isState" scoped="" ref="0x7f8181a93e10"/>
        <function-ref name="isIdle" scoped="" ref="0x7f8181a8a020"/>
        <function-ref name="requestState" scoped="" ref="0x7f8181a8a1b0"/>
        <function-ref name="forceState" scoped="" ref="0x7f8181a8a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f8181a8d1d0" loc="66:../../../tos/system/StateImplC.nc">
      <component-ref qname="StateImplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f8181a8d1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f8181a8d550"/>
        <function-ref name="toIdle" scoped="" ref="0x7f8181a8d6e0"/>
        <function-ref name="isState" scoped="" ref="0x7f8181a8d870"/>
        <function-ref name="isIdle" scoped="" ref="0x7f8181a8da00"/>
        <function-ref name="requestState" scoped="" ref="0x7f8181a8db90"/>
        <function-ref name="forceState" scoped="" ref="0x7f8181a8dd20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f8181a89020" loc="66:../../../tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f8181a89020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f8181a893a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f8181a89b70" loc="67:../../../tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f8181a89b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f8181a88020"/>
        <function-ref name="toIdle" scoped="" ref="0x7f8181a881b0"/>
        <function-ref name="isState" scoped="" ref="0x7f8181a88340"/>
        <function-ref name="isIdle" scoped="" ref="0x7f8181a884d0"/>
        <function-ref name="requestState" scoped="" ref="0x7f8181a88660"/>
        <function-ref name="forceState" scoped="" ref="0x7f8181a887f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f8181721020" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f8181721020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81817213a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8181721530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f8181a6f8f0" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f8181a6f8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f8181a6fc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f8181a70c40" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f8181a70c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8181a6f020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8181a6f1b0"/>
        <function-ref name="request" scoped="" ref="0x7f8181a6f340"/>
        <function-ref name="granted" scoped="" ref="0x7f8181a6f4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8181a6f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f8180605760" loc="82:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f8180605760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f8180605ae0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f8180605c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f8180602120" loc="87:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f8180602120"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81806024a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8180602630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f81806028c0" loc="89:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f81806028c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f8180602c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f8180603020" loc="83:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f8180603020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f81806033a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f8180606a00" loc="81:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f8180606a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8180606d80"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8180605020"/>
        <function-ref name="request" scoped="" ref="0x7f81806051b0"/>
        <function-ref name="granted" scoped="" ref="0x7f8180605340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f81806054d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f8180603630" loc="85:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f8180603630"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f81806039b0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f8180603b40"/>
        <function-ref name="splitRead" scoped="" ref="0x7f8180603cd0"/>
        <function-ref name="write" scoped="" ref="0x7f8180603e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f8181a078e0" loc="74:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f8181a078e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f8181a07c60"/>
        <function-ref name="configure" scoped="" ref="0x7f8181a07df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f8181a09850" loc="77:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f8181a09850"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8181a09bd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8181a09d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f8181a05a40" loc="80:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f8181a05a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f8181a05dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f8181a0a110" loc="75:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f8181a0a110"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f8181a0a490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f8181a06690" loc="79:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f8181a06690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8181a06a10"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8181a06ba0"/>
        <function-ref name="request" scoped="" ref="0x7f8181a06d30"/>
        <function-ref name="granted" scoped="" ref="0x7f8181a05020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8181a051b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f8181a0fd80" loc="73:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f8181a0fd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8181a0c180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8181a0c310"/>
        <function-ref name="request" scoped="" ref="0x7f8181a0c4a0"/>
        <function-ref name="granted" scoped="" ref="0x7f8181a0c630"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8181a0c7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f8181a0a790" loc="76:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f8181a0a790"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f8181a0ab10"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f8181a0aca0"/>
        <function-ref name="splitRead" scoped="" ref="0x7f8181a0ae30"/>
        <function-ref name="write" scoped="" ref="0x7f8181a09020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f8181a00b40" loc="81:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f8181a00b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f8181a02020"/>
        <function-ref name="txDone" scoped="" ref="0x7f8181a021b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f818198e250" loc="76:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f818198e250"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f818198e5f0"/>
        <function-ref name="configure" scoped="" ref="0x7f818198e780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f818198dc50" loc="79:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f818198dc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f818198c020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f818198c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f818198b3e0" loc="82:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f818198b3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f818198b780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f818198ea10" loc="77:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f818198ea10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f818198ed90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f818198ba50" loc="83:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f818198ba50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f818198bdd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f818198a020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f818198a1b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f818198a340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f818198a4d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f818198a660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f818198a7f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f818198a980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f818198ab10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f818198aca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f818198ae30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f8181989020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f81819891b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f8181989440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f81819895d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f8181989760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f81819898f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f8181989a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f8181989c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f8181989da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f8181988020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f81819881b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f8181988340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f81819884d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181988660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f81819889f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f8181988b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f8181988d10"/>
        <function-ref name="tx" scoped="" ref="0x7f8181987020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f81819871b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f8181987340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f81819874d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f8181987660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f81819877f0"/>
        <function-ref name="rx" scoped="" ref="0x7f8181987980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f8181987b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f8181987ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f8181987e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f8181986020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f81819861b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f8181986c20" loc="85:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f8181986c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f8181985020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f81819851b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f8181985340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f81819854d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f8181985660"/>
        <function-ref name="get" scoped="" ref="0x7f81819857f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f8181985980"/>
        <function-ref name="led2On" scoped="" ref="0x7f8181984020"/>
        <function-ref name="set" scoped="" ref="0x7f8181985ca0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f8181985b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f8181985e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f818198c5b0" loc="81:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f818198c5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f818198c950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f818198cae0"/>
        <function-ref name="request" scoped="" ref="0x7f818198cc70"/>
        <function-ref name="granted" scoped="" ref="0x7f818198ce00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f818198b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f818198f470" loc="75:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f818198f470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f818198f810"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f818198f9a0"/>
        <function-ref name="request" scoped="" ref="0x7f818198fb30"/>
        <function-ref name="granted" scoped="" ref="0x7f818198fcc0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f818198fe50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f818198d060" loc="78:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f818198d060"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f818198d3e0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f818198d570"/>
        <function-ref name="splitRead" scoped="" ref="0x7f818198d700"/>
        <function-ref name="write" scoped="" ref="0x7f818198d890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f8181986480" loc="84:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f8181986480"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f8181986800"/>
        <function-ref name="txDone" scoped="" ref="0x7f8181986990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalDone_task" ref="0x7f81819842f0" loc="102:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalDone_task" scoped="" ref="0x7f81819842f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f8181984670"/>
        <function-ref name="runTask" scoped="" ref="0x7f8181984800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f81819732c0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f81819732c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181973640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f8181977d10" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f8181977d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f81819760e0"/>
        <function-ref name="txDone" scoped="" ref="0x7f8181976270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f818197b020" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f818197b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f818197b3a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f818197b530"/>
        <function-ref name="setUctl" scoped="" ref="0x7f818197b6c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f818197b850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f818197b9e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f818197bb70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f818197bd00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f818197a020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f818197a1b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f818197a340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f818197a4d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f818197a660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f818197a7f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f818197aa80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f818197ac10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f818197ada0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f8181979020"/>
        <function-ref name="isUart" scoped="" ref="0x7f81819791b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f8181979340"/>
        <function-ref name="isSpi" scoped="" ref="0x7f81819794d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f8181979660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f81819797f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f8181979980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f8181979b10"/>
        <function-ref name="getMode" scoped="" ref="0x7f8181979ca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f8181978220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f81819783b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f8181978540"/>
        <function-ref name="tx" scoped="" ref="0x7f81819786d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f8181978860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f81819789f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f8181978b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f8181978d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f8181977020"/>
        <function-ref name="rx" scoped="" ref="0x7f81819771b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f8181977340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f81819774d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f8181977660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f81819777f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f8181977980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f8181939bb0" loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f8181939bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181938020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81819381b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8181938340"/>
        <function-ref name="clr" scoped="" ref="0x7f8181936020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181938660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81819387f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8181938980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8181938b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181938ca0"/>
        <function-ref name="get" scoped="" ref="0x7f8181938e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8181937020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81819371b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8181937340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81819375d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8181937760"/>
        <function-ref name="set" scoped="" ref="0x7f81819378f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8181937a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81819384d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8181937c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8181937da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f818196d2d0" loc="56:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f818196d2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f818196d650"/>
        <function-ref name="txDone" scoped="" ref="0x7f818196d7e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f81819363e0" loc="63:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f81819363e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181936760"/>
        <function-ref name="isInput" scoped="" ref="0x7f81819368f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8181936a80"/>
        <function-ref name="clr" scoped="" ref="0x7f81819347f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181936da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181935020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81819351b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8181935340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81819354d0"/>
        <function-ref name="get" scoped="" ref="0x7f8181935660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81819357f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8181935980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8181935b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8181935da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8181934020"/>
        <function-ref name="set" scoped="" ref="0x7f81819341b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8181934340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8181936c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81819344d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8181934660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f8181934bb0" loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f8181934bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181933020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81819331b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8181933340"/>
        <function-ref name="clr" scoped="" ref="0x7f8181931020"/>
        <function-ref name="toggle" scoped="" ref="0x7f8181933660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81819337f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8181933980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8181933b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181933ca0"/>
        <function-ref name="get" scoped="" ref="0x7f8181933e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8181932020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81819321b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8181932340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81819325d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8181932760"/>
        <function-ref name="set" scoped="" ref="0x7f81819328f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8181932a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81819334d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8181932c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8181932da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f8181972700" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f8181972700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f8181972a80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f8181972c10"/>
        <function-ref name="setUctl" scoped="" ref="0x7f8181972da0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f8181971020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f81819711b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f8181971340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f81819714d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f8181971660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f81819717f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f8181971980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f8181971b10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f8181971ca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f8181971e30"/>
        <function-ref name="getUbr" scoped="" ref="0x7f8181970120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f81819702b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f8181970440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f81819705d0"/>
        <function-ref name="isUart" scoped="" ref="0x7f8181970760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f81819708f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f8181970a80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f8181970c10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f8181970da0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f818196f020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f818196f1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f818196f340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f818196f6d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f818196f860"/>
        <function-ref name="setUbr" scoped="" ref="0x7f818196f9f0"/>
        <function-ref name="tx" scoped="" ref="0x7f818196fb80"/>
        <function-ref name="getUctl" scoped="" ref="0x7f818196fd10"/>
        <function-ref name="disableUart" scoped="" ref="0x7f818196e020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f818196e1b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f818196e340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f818196e4d0"/>
        <function-ref name="rx" scoped="" ref="0x7f818196e660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f818196e7f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f818196e980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f818196eb10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f818196eca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f818196ee30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7f8181943d10" loc="59:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f8181943d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f818196b0e0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f818196b270"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f818196b400"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f818196b590"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f818196b720"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f818196b8b0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f818196ba40"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f818196bbd0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f818196bd60"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f8181969020"/>
        <function-ref name="getData" scoped="" ref="0x7f81819691b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f8181969340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f81819694d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f8181969760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f81819698f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f8181969a80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f8181969c10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f8181969da0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f8181942020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f81819421b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f8181942340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f81819424d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f8181942660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f81819427f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f8181942980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f8181942d10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f8181941020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f81819411b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f8181941340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f81819414d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f8181941660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f81819417f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f8181941980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f8181941b10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f8181941ca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f8181941e30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f8181940020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f81819401b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f8181940340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f81819404d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f8181940660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f81819407f0"/>
        <function-ref name="setData" scoped="" ref="0x7f8181940980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f8181940b10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f8181940ca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f8181940e30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f818193f020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f818193f1b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f818193f340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f818193f8d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f818193fa60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f818193fbf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f818193fd80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f818193e020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f818193e1b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f818193e340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f818193e4d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f818193e660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f818193e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f818193b3e0" loc="61:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f818193b3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818193b760"/>
        <function-ref name="isInput" scoped="" ref="0x7f818193b8f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818193ba80"/>
        <function-ref name="clr" scoped="" ref="0x7f81819397f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818193bda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818193a020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818193a1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818193a340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818193a4d0"/>
        <function-ref name="get" scoped="" ref="0x7f818193a660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818193a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818193a980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818193ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818193ada0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8181939020"/>
        <function-ref name="set" scoped="" ref="0x7f81819391b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8181939340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818193bc10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81819394d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8181939660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f818196dc20" loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f818196dc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f818196c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f818193ebb0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f818193ebb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818193d020"/>
        <function-ref name="isInput" scoped="" ref="0x7f818193d1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f818193d340"/>
        <function-ref name="clr" scoped="" ref="0x7f818193b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f818193d660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818193d7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f818193d980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f818193db10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818193dca0"/>
        <function-ref name="get" scoped="" ref="0x7f818193de30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f818193c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f818193c1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f818193c340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f818193c5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f818193c760"/>
        <function-ref name="set" scoped="" ref="0x7f818193c8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f818193ca80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f818193d4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f818193cc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f818193cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f81805fa2c0" loc="42:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f81805fa2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f81805fa640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f81805fa7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f81805f4440" loc="46:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f81805f4440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f81805f47c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f81805ea760" loc="51:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f81805ea760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f81805eaae0"/>
        <function-ref name="configure" scoped="" ref="0x7f81805eac70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f81805f4a50" loc="48:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f81805f4a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f81805f4dd0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f81805f2020"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f81805f21b0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f81805f2340"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f81805f24d0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f81805f2660"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f81805f27f0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f81805f2980"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f81805f2b10"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f81805f2ca0"/>
        <function-ref name="getData" scoped="" ref="0x7f81805f2e30"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f81805f1020"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f81805f11b0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f81805f1440"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f81805f15d0"/>
        <function-ref name="getIV" scoped="" ref="0x7f81805f1760"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f81805f18f0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f81805f1a80"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f81805f1c10"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f81805f1da0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f81805f0020"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f81805f01b0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f81805f0340"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f81805f04d0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f81805f0660"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f81805f09f0"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f81805f0b80"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f81805f0d10"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f81805ef020"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f81805ef1b0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f81805ef340"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f81805ef4d0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f81805ef660"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f81805ef7f0"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f81805ef980"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f81805efb10"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f81805efca0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f81805efe30"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f81805ee020"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f81805ee1b0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f81805ee340"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f81805ee4d0"/>
        <function-ref name="setData" scoped="" ref="0x7f81805ee660"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f81805ee7f0"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f81805ee980"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f81805eeb10"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f81805eeca0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f81805eee30"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f81805eb020"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f81805eb5b0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f81805eb740"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f81805eb8d0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f81805eba60"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f81805ebbf0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f81805ebd80"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f81805ea020"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f81805ea1b0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f81805ea340"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f81805ea4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f81805f5c10" loc="45:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f81805f5c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f81805f4020"/>
        <function-ref name="txDone" scoped="" ref="0x7f81805f41b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f81805fb640" loc="41:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f81805fb640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f81805fb9c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f81805fbb50"/>
        <function-ref name="request" scoped="" ref="0x7f81805fbce0"/>
        <function-ref name="granted" scoped="" ref="0x7f81805fbe70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f81805fa030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f81805f92b0" loc="44:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f81805f92b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f81805f9630"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f81805f97c0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f81805f9950"/>
        <function-ref name="enableUart" scoped="" ref="0x7f81805f9ae0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f81805f9c70"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f81805f9e00"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f81805f8020"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f81805f81b0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f81805f8340"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f81805f84d0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f81805f8660"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f81805f87f0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f81805f8980"/>
        <function-ref name="getUbr" scoped="" ref="0x7f81805f8c10"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f81805f8da0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f81805f7020"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f81805f71b0"/>
        <function-ref name="isUart" scoped="" ref="0x7f81805f7340"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f81805f74d0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f81805f7660"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f81805f77f0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f81805f7980"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f81805f7b10"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f81805f7ca0"/>
        <function-ref name="getMode" scoped="" ref="0x7f81805f7e30"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f81805f6220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f81805f63b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f81805f6540"/>
        <function-ref name="tx" scoped="" ref="0x7f81805f66d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f81805f6860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f81805f69f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f81805f6b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f81805f6d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f81805f5020"/>
        <function-ref name="rx" scoped="" ref="0x7f81805f51b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f81805f5340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f81805f54d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f81805f5660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f81805f57f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f81805f5980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f81805faa60" loc="43:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f81805faa60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f81805fade0"/>
        <function-ref name="userId" scoped="" ref="0x7f81805f9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f818188a2c0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f818188a2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f818188a640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f818188a7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f81818898a0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f81818898a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f8181889c20"/>
        <function-ref name="configure" scoped="" ref="0x7f8181889db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f818188e4d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f818188e4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f818188e850"/>
        <function-ref name="txDone" scoped="" ref="0x7f818188e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f818188b020" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f818188b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f818188b3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f818188b530"/>
        <function-ref name="request" scoped="" ref="0x7f818188b6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f818188b850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f818188b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f818188d3f0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f818188d3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f818188d770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f818188aad0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f818188aad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f818188ae50"/>
        <function-ref name="userId" scoped="" ref="0x7f8181889020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f8181874bf0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f8181874bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f8181873020"/>
        <function-ref name="userId" scoped="" ref="0x7f81818731b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f8181887d60" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f8181887d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f8181886180"/>
        <function-ref name="txDone" scoped="" ref="0x7f8181886310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f81818745e0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f81818745e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181874960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f8181886710" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f8181886710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8181886ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f8181886d80" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f8181886d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f8181874180"/>
        <function-ref name="txDone" scoped="" ref="0x7f8181874310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f81817f5a60" loc="59:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f81817f5a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f81817f5e00"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f81817f4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f81817f3790" loc="64:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f81817f3790"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f81817f3b30"/>
        <function-ref name="configure" scoped="" ref="0x7f81817f3cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f81817f4270" loc="60:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f81817f4270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f81817f45f0"/>
        <function-ref name="requested" scoped="" ref="0x7f81817f4780"/>
        <function-ref name="granted" scoped="" ref="0x7f81817f4910"/>
        <function-ref name="isOwner" scoped="" ref="0x7f81817f4aa0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f81817f4c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f81817f6ca0" loc="58:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f81817f6ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f81817f50a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f81817f5230"/>
        <function-ref name="request" scoped="" ref="0x7f81817f53c0"/>
        <function-ref name="granted" scoped="" ref="0x7f81817f5550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f81817f56e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f81817f1020" loc="65:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f81817f1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f81817f13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f81817f4e80" loc="61:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f81817f4e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f81817f3220"/>
        <function-ref name="userId" scoped="" ref="0x7f81817f33b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f8180584020" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f8180584020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81805843a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f8180584630" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f8180584630"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f81805849b0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f8180584b40"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f8180584cd0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f8180584e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f81805816c0" loc="99:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f81805816c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f8180581a60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f8180581bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f818057e9d0" loc="105:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f818057e9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f818057ed70"/>
        <function-ref name="configure" scoped="" ref="0x7f818057d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f818057d2b0" loc="106:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f818057d2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f818057d630"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f818057d7c0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f818057d950"/>
        <function-ref name="dequeue" scoped="" ref="0x7f818057dae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f8180581e40" loc="100:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f8180581e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f818057f1e0"/>
        <function-ref name="requested" scoped="" ref="0x7f818057f370"/>
        <function-ref name="granted" scoped="" ref="0x7f818057f500"/>
        <function-ref name="isOwner" scoped="" ref="0x7f818057f690"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f818057f820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f818057dd30" loc="107:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f818057dd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f818057c0e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f818057c270"/>
        <function-ref name="led1On" scoped="" ref="0x7f818057c400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f818057c590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f818057c720"/>
        <function-ref name="get" scoped="" ref="0x7f818057c8b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f818057ca40"/>
        <function-ref name="led0On" scoped="" ref="0x7f818057b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f818057cd60"/>
        <function-ref name="led2On" scoped="" ref="0x7f818057cbd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f818057b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f8180582850" loc="98:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f8180582850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8180582bf0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8180582d80"/>
        <function-ref name="request" scoped="" ref="0x7f8180581020"/>
        <function-ref name="granted" scoped="" ref="0x7f81805811b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8180581340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f818057e2d0" loc="104:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f818057e2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f818057e650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f818057fa70" loc="101:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f818057fa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f818057fdf0"/>
        <function-ref name="userId" scoped="" ref="0x7f818057e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f818057b480" loc="155:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f818057b480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f818057b800"/>
        <function-ref name="runTask" scoped="" ref="0x7f818057b990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f81817e8020" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f81817e8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f81817e83a0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f81817e8530"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f81817e86c0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f81817e8850"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f81817e89e0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f81817e8b70"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f81817e8d00"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f81817e7020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f81817e71b0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f81817e7340"/>
        <function-ref name="getData" scoped="" ref="0x7f81817e74d0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f81817e7660"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f81817e77f0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f81817e7a80"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f81817e7c10"/>
        <function-ref name="getIV" scoped="" ref="0x7f81817e7da0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f81817e6020"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f81817e61b0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f81817e6340"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f81817e64d0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f81817e6660"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f81817e67f0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f81817e6980"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f81817e6b10"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f81817e6ca0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f81817e5220"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f81817e53b0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f81817e5540"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f81817e56d0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f81817e5860"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f81817e59f0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f81817e5b80"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f81817e5d10"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f81817e4020"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f81817e41b0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f81817e4340"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f81817e44d0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f81817e4660"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f81817e47f0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f81817e4980"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f81817e4b10"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f81817e4ca0"/>
        <function-ref name="setData" scoped="" ref="0x7f81817e4e30"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f81817e3020"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f81817e31b0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f81817e3340"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f81817e34d0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f81817e3660"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f81817e37f0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f81817e3d80"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f81817e2020"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f81817e21b0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f81817e2340"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f81817e24d0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f81817e2660"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f81817e27f0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f81817e2980"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f81817e2b10"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f81817e2ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7f81817d8bb0" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7f81817d8bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f81817d7020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f81817d71b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f81817d7340"/>
        <function-ref name="enableUart" scoped="" ref="0x7f81817d74d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f81817d7660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f81817d77f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f81817d7980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f81817d7b10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f81817d7ca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f81817d7e30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f81817d6020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f81817d61b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f81817d6340"/>
        <function-ref name="getUbr" scoped="" ref="0x7f81817d65d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f81817d6760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f81817d68f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f81817d6a80"/>
        <function-ref name="isUart" scoped="" ref="0x7f81817d6c10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f81817d6da0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f81817d5020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f81817d51b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f81817d5340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f81817d54d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f81817d5660"/>
        <function-ref name="getMode" scoped="" ref="0x7f81817d57f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f81817d5b80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f81817d5d10"/>
        <function-ref name="setUbr" scoped="" ref="0x7f81817d4020"/>
        <function-ref name="tx" scoped="" ref="0x7f81817d41b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f81817d4340"/>
        <function-ref name="disableUart" scoped="" ref="0x7f81817d44d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f81817d4660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f81817d47f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f81817d4980"/>
        <function-ref name="rx" scoped="" ref="0x7f81817d4b10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f81817d4ca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f81817d4e30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f81817d3020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f81817d31b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f81817d3340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f81817d1e40" loc="52:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f81817d1e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81817d01e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81817d0370"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81817d0500"/>
        <function-ref name="clr" scoped="" ref="0x7f81817ce1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81817d0820"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81817d09b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81817d0b40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81817d0cd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81817d0e60"/>
        <function-ref name="get" scoped="" ref="0x7f81817cf020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81817cf1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81817cf340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81817cf4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81817cf760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81817cf8f0"/>
        <function-ref name="set" scoped="" ref="0x7f81817cfa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81817cfc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81817d0690"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81817cfda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81817ce020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7f81817e1d40" loc="48:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f81817e1d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f81817de0e0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f81817de270"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f81817de400"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f81817de590"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f81817de720"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f81817de8b0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f81817dea40"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f81817debd0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f81817ded60"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f81817dd020"/>
        <function-ref name="getData" scoped="" ref="0x7f81817dd1b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f81817dd340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f81817dd4d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f81817dd760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f81817dd8f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f81817dda80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f81817ddc10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f81817ddda0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f81817dc020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f81817dc1b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f81817dc340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f81817dc4d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f81817dc660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f81817dc7f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f81817dc980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f81817dcd10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f81817db020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f81817db1b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f81817db340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f81817db4d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f81817db660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f81817db7f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f81817db980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f81817dbb10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f81817dbca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f81817dbe30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f81817da020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f81817da1b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f81817da340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f81817da4d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f81817da660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f81817da7f0"/>
        <function-ref name="setData" scoped="" ref="0x7f81817da980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f81817dab10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f81817daca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f81817dae30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f81817d9020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f81817d91b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f81817d9340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f81817d98d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f81817d9a60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f81817d9bf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f81817d9d80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f81817d8020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f81817d81b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f81817d8340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f81817d84d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f81817d8660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f81817d87f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f81817d3700" loc="51:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f81817d3700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81817d3a80"/>
        <function-ref name="isInput" scoped="" ref="0x7f81817d3c10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81817d3da0"/>
        <function-ref name="clr" scoped="" ref="0x7f81817d1a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f81817d21b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81817d2340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81817d24d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81817d2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81817d27f0"/>
        <function-ref name="get" scoped="" ref="0x7f81817d2980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81817d2b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81817d2ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81817d2e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81817d1120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81817d12b0"/>
        <function-ref name="set" scoped="" ref="0x7f81817d1440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81817d15d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81817d2020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81817d1760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81817d18f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f81816bcc60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f81816bcc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816bb210"/>
        <function-ref name="write" scoped="" ref="0x7f81816bb3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f81816c7da0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f81816c7da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816c5180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f81816bfb50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f81816bfb50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816be020"/>
        <function-ref name="write" scoped="" ref="0x7f81816be1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f81816ba670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f81816ba670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816ba9f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816bab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f81816b3e50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f81816b3e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b1210"/>
        <function-ref name="write" scoped="" ref="0x7f81816b13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f81816bae50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f81816bae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b8210"/>
        <function-ref name="write" scoped="" ref="0x7f81816b83a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f81816a62f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f81816a62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816a6670"/>
        <function-ref name="write" scoped="" ref="0x7f81816a6800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f81816a82f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f81816a82f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816a8670"/>
        <function-ref name="write" scoped="" ref="0x7f81816a8800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f81816c4120" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f81816c4120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816c44a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f81816ae670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f81816ae670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816ae9f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816aeb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f81816a92f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f81816a92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816a9670"/>
        <function-ref name="write" scoped="" ref="0x7f81816a9800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f81816bec60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f81816bec60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816bd020"/>
        <function-ref name="write" scoped="" ref="0x7f81816bd1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f81816bdc60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f81816bdc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816bc020"/>
        <function-ref name="write" scoped="" ref="0x7f81816bc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f81816b4670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f81816b4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b49f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816b4b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f81816b6e50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f81816b6e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b5210"/>
        <function-ref name="write" scoped="" ref="0x7f81816b53a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f81816b8670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f81816b8670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b89f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816b8b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f81816c8760" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f81816c8760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f81816c8ae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f81816c8c70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f81816c8e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f81816c3aa0" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f81816c3aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816c3e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f81816c2120" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f81816c2120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816c25a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f81816ada70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f81816ada70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816addf0"/>
        <function-ref name="write" scoped="" ref="0x7f81816ac020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f81816c2870" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f81816c2870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816c2bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f81816a9ad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f81816a9ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816a9e50"/>
        <function-ref name="write" scoped="" ref="0x7f81816a8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f81816c4dc0" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f81816c4dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816c3180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f81816afe50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f81816afe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816ae210"/>
        <function-ref name="write" scoped="" ref="0x7f81816ae3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f81816bd480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f81816bd480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816bd800"/>
        <function-ref name="write" scoped="" ref="0x7f81816bd990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f81816be480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f81816be480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816be800"/>
        <function-ref name="write" scoped="" ref="0x7f81816be990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f81816c7750" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f81816c7750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816c7ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f81816b0e50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f81816b0e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816af210"/>
        <function-ref name="write" scoped="" ref="0x7f81816af3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f81816b1670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f81816b1670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b19f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816b1b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f81816af670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f81816af670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816af9f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816afb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f81816a7ad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f81816a7ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816a7e50"/>
        <function-ref name="write" scoped="" ref="0x7f81816a6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f81816a8ad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f81816a8ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816a8e50"/>
        <function-ref name="write" scoped="" ref="0x7f81816a7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f81816b5670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f81816b5670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b59f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816b5b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f81816b1e50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f81816b1e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b0210"/>
        <function-ref name="write" scoped="" ref="0x7f81816b03a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f81816aaad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f81816aaad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816aae50"/>
        <function-ref name="write" scoped="" ref="0x7f81816a9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f81816b7670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f81816b7670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b79f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816b7b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f81816a6ad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f81816a6ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f81816a6e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f81816a5020"/>
        <function-ref name="write" scoped="" ref="0x7f81816a51b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f81816a5340"/>
        <function-ref name="readDone" scoped="" ref="0x7f81816a54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f81816c7100" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f81816c7100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816c7480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f81816bf370" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f81816bf370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816bf6f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816bf880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f81816bc480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f81816bc480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816bc800"/>
        <function-ref name="write" scoped="" ref="0x7f81816bc990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f81816b4e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f81816b4e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b3210"/>
        <function-ref name="write" scoped="" ref="0x7f81816b33a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f81816b8e50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f81816b8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b7210"/>
        <function-ref name="write" scoped="" ref="0x7f81816b73a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f81816b3670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f81816b3670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b39f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816b3b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f81816bb670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f81816bb670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816bb9f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816bbb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f81816c5450" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f81816c5450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816c57d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f81816bbe50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f81816bbe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816ba210"/>
        <function-ref name="write" scoped="" ref="0x7f81816ba3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f81816c9a80" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f81816c9a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f81816c9e00"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f81816c8020"/>
        <function-ref name="request" scoped="" ref="0x7f81816c81b0"/>
        <function-ref name="granted" scoped="" ref="0x7f81816c8340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f81816c84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f81816c1020" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f81816c1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816c13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f81816c1cc0" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f81816c1cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816bf0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f81816aa2f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f81816aa2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816aa670"/>
        <function-ref name="write" scoped="" ref="0x7f81816aa800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f81816acad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f81816acad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816ace50"/>
        <function-ref name="write" scoped="" ref="0x7f81816aa020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f81816c3450" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f81816c3450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816c37d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f81816ac2f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f81816ac2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816ac670"/>
        <function-ref name="write" scoped="" ref="0x7f81816ac800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f81816a72f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f81816a72f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816a7670"/>
        <function-ref name="write" scoped="" ref="0x7f81816a7800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f81816b5e50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f81816b5e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b4210"/>
        <function-ref name="write" scoped="" ref="0x7f81816b43a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f81816b0670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f81816b0670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b09f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816b0b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f81816c5aa0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f81816c5aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816c5e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f81816c4770" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f81816c4770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816c4af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f81816b7e50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f81816b7e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b6210"/>
        <function-ref name="write" scoped="" ref="0x7f81816b63a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f81816c1670" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f81816c1670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816c19f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f81816b6670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f81816b6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816b69f0"/>
        <function-ref name="write" scoped="" ref="0x7f81816b6b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f81816aee50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f81816aee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816ad610"/>
        <function-ref name="write" scoped="" ref="0x7f81816ad7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f81816a57a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f81816a57a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f81816a5b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f81816a5cb0"/>
        <function-ref name="write" scoped="" ref="0x7f81816a5e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f81816a3020"/>
        <function-ref name="readDone" scoped="" ref="0x7f81816a31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f818168fc60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f818168fc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818168e210"/>
        <function-ref name="write" scoped="" ref="0x7f818168e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f818169ada0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f818169ada0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181699180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f8181693b50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f8181693b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181692020"/>
        <function-ref name="write" scoped="" ref="0x7f81816921b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f818168d670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f818168d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818168d9f0"/>
        <function-ref name="write" scoped="" ref="0x7f818168db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f8181686e50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f8181686e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181685210"/>
        <function-ref name="write" scoped="" ref="0x7f81816853a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f818168de50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f818168de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818168c210"/>
        <function-ref name="write" scoped="" ref="0x7f818168c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f81816792f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f81816792f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181679670"/>
        <function-ref name="write" scoped="" ref="0x7f8181679800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f818167c2f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f818167c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818167c670"/>
        <function-ref name="write" scoped="" ref="0x7f818167c800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f8181698120" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f8181698120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816984a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f8181681670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f8181681670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816819f0"/>
        <function-ref name="write" scoped="" ref="0x7f8181681b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f818167d2f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f818167d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818167d670"/>
        <function-ref name="write" scoped="" ref="0x7f818167d800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f8181692c60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f8181692c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181691020"/>
        <function-ref name="write" scoped="" ref="0x7f81816911b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f8181691c60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f8181691c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818168f020"/>
        <function-ref name="write" scoped="" ref="0x7f818168f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f8181687670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f8181687670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816879f0"/>
        <function-ref name="write" scoped="" ref="0x7f8181687b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f818168ae50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f818168ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181688210"/>
        <function-ref name="write" scoped="" ref="0x7f81816883a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f818168c670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f818168c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818168c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f818168cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f818169b760" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f818169b760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f818169bae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f818169bc70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f818169be00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f8181697aa0" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f8181697aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181697e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f8181695120" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f8181695120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816955a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f8181680a70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f8181680a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181680df0"/>
        <function-ref name="write" scoped="" ref="0x7f818167f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f8181695870" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f8181695870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181695bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f818167dad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f818167dad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818167de50"/>
        <function-ref name="write" scoped="" ref="0x7f818167c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f8181698dc0" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f8181698dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181697180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f8181682e50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f8181682e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181681210"/>
        <function-ref name="write" scoped="" ref="0x7f81816813a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f8181691480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f8181691480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181691800"/>
        <function-ref name="write" scoped="" ref="0x7f8181691990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f8181692480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f8181692480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181692800"/>
        <function-ref name="write" scoped="" ref="0x7f8181692990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f818169a750" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f818169a750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f818169aad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f8181684e50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f8181684e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181682210"/>
        <function-ref name="write" scoped="" ref="0x7f81816823a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f8181685670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f8181685670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816859f0"/>
        <function-ref name="write" scoped="" ref="0x7f8181685b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f8181682670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f8181682670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816829f0"/>
        <function-ref name="write" scoped="" ref="0x7f8181682b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f818167aad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f818167aad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818167ae50"/>
        <function-ref name="write" scoped="" ref="0x7f8181679020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f818167cad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f818167cad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818167ce50"/>
        <function-ref name="write" scoped="" ref="0x7f818167a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f8181688670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f8181688670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816889f0"/>
        <function-ref name="write" scoped="" ref="0x7f8181688b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f8181685e50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f8181685e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181684210"/>
        <function-ref name="write" scoped="" ref="0x7f81816843a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f818167ead0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f818167ead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818167ee50"/>
        <function-ref name="write" scoped="" ref="0x7f818167d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f818168b670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f818168b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818168b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f818168bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f8181679ad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f8181679ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f8181679e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f8181678020"/>
        <function-ref name="write" scoped="" ref="0x7f81816781b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f8181678340"/>
        <function-ref name="readDone" scoped="" ref="0x7f81816784d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f818169a100" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f818169a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f818169a480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f8181693370" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f8181693370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816936f0"/>
        <function-ref name="write" scoped="" ref="0x7f8181693880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f818168f480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f818168f480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818168f800"/>
        <function-ref name="write" scoped="" ref="0x7f818168f990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f8181687e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f8181687e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181686210"/>
        <function-ref name="write" scoped="" ref="0x7f81816863a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f818168ce50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f818168ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818168b210"/>
        <function-ref name="write" scoped="" ref="0x7f818168b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f8181686670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f8181686670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816869f0"/>
        <function-ref name="write" scoped="" ref="0x7f8181686b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f818168e670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f818168e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818168e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f818168eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f8181699450" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f8181699450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816997d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f818168ee50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f818168ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818168d210"/>
        <function-ref name="write" scoped="" ref="0x7f818168d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f818169c9e0" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f818169c9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f818169cd60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f818169b020"/>
        <function-ref name="request" scoped="" ref="0x7f818169b1b0"/>
        <function-ref name="granted" scoped="" ref="0x7f818169b340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f818169b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f8181694020" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f8181694020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816943a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f8181694cc0" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f8181694cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816930a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f818167e2f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f818167e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818167e670"/>
        <function-ref name="write" scoped="" ref="0x7f818167e800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f818167fad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f818167fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818167fe50"/>
        <function-ref name="write" scoped="" ref="0x7f818167e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f8181697450" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f8181697450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816977d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f818167f2f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f818167f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818167f670"/>
        <function-ref name="write" scoped="" ref="0x7f818167f800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f818167a2f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f818167a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818167a670"/>
        <function-ref name="write" scoped="" ref="0x7f818167a800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f8181688e50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f8181688e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181687210"/>
        <function-ref name="write" scoped="" ref="0x7f81816873a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f8181684670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f8181684670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816849f0"/>
        <function-ref name="write" scoped="" ref="0x7f8181684b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f8181699aa0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f8181699aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181699e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f8181698770" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f8181698770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181698af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f818168be50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f818168be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818168a210"/>
        <function-ref name="write" scoped="" ref="0x7f818168a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f8181694670" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f8181694670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81816949f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f818168a670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f818168a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818168a9f0"/>
        <function-ref name="write" scoped="" ref="0x7f818168ab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f8181681e50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f8181681e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181680610"/>
        <function-ref name="write" scoped="" ref="0x7f81816807a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f81816787a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f81816787a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f8181678b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f8181678cb0"/>
        <function-ref name="write" scoped="" ref="0x7f8181678e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f8181677020"/>
        <function-ref name="readDone" scoped="" ref="0x7f81816771b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x7f8181670b20" loc="54:../../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f8181670b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f818166d020"/>
        <function-ref name="changed" scoped="" ref="0x7f818166d1b0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f818166d340"/>
        <function-ref name="setAddress" scoped="" ref="0x7f818166d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7f818166fd20" loc="13:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <component-ref qname="LocalIeeeEui64C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f818166fd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f81816590e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7f8181654310" loc="5:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f8181654310"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f8181654690"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReadId48" ref="0x7f8181651880" loc="8:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f8181651880"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181651c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7f8181647020" loc="8:../../../tos/chips/ds2411/Ds2411C.nc">
      <component-ref qname="Ds2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f8181647020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816473a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="OneWire" ref="0x7f818163dbd0" loc="14:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f818163dbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181640020"/>
        <function-ref name="write" scoped="" ref="0x7f81816401b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerControl" ref="0x7f8181640530" loc="15:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerControl" scoped="" ref="0x7f8181640530"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f81816408b0"/>
        <function-ref name="stop" scoped="" ref="0x7f8181640a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7f8181641140" loc="11:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f8181641140"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816414c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7f8181646c50" loc="8:../../../tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f8181646c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818162c020"/>
        <function-ref name="write" scoped="" ref="0x7f818162c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7f818162c540" loc="11:../../../tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7f818162c540"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818162c8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818162ca50"/>
        <function-ref name="toggle" scoped="" ref="0x7f818162cbe0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818162cd70"/>
        <function-ref name="get" scoped="" ref="0x7f818162b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818162b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f818162b340"/>
        <function-ref name="clr" scoped="" ref="0x7f818162b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7f8181623950" loc="15:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f8181623950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248d460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f818248d7d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f8181626780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7f8181628150" loc="11:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f8181628150"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81816284d0"/>
        <function-ref name="write" scoped="" ref="0x7f8181628660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7f81816289f0" loc="14:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7f81816289f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8181628d70"/>
        <function-ref name="isInput" scoped="" ref="0x7f8181627020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81816271b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8181627340"/>
        <function-ref name="get" scoped="" ref="0x7f81816274d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8181627660"/>
        <function-ref name="set" scoped="" ref="0x7f81816277f0"/>
        <function-ref name="clr" scoped="" ref="0x7f8181627980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f818162aca0" loc="41:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f818162aca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248d460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f818248d7d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f8181603ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f8181600a90" loc="54:../../../tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f8181600a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248d460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f818248d7d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f81815ff8d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f81815f0020" loc="55:../../../tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f81815f0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248d460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f818248d7d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f81815f0e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f81815ef800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f81815ef340"/>
        <function-ref name="overflow" scoped="" ref="0x7f81815efcc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430CounterMicro" ref="0x7f81815eb530" loc="46:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <component-ref qname="Msp430CounterMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f81815eb530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248d460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f818248d7d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f81815e93d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f81815e9d50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f81815e9890"/>
        <function-ref name="overflow" scoped="" ref="0x7f81815e8260"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f81815e3020" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f81815e3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f81815e33a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f81815e3530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f81815e36c0"/>
        <function-ref name="get" scoped="" ref="0x7f81815e3850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f81815e39e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f81815e3b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f81815e3d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f81815e2020"/>
        <function-ref name="overflow" scoped="" ref="0x7f81815e21b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f81815e2340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f81815e24d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f81815e7e50" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f81815e7e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248d460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f818248d7d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f81815e6ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f81815e4670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f81815e41b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f81815e4b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Gpio" ref="0x7f818162d590" loc="3:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <component-ref qname="HplDs2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Gpio" scoped="" ref="0x7f818162d590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818162d910"/>
        <function-ref name="isInput" scoped="" ref="0x7f818162daa0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818162dc30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818162ddc0"/>
        <function-ref name="get" scoped="" ref="0x7f81815dd020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81815dd1b0"/>
        <function-ref name="set" scoped="" ref="0x7f81815dd340"/>
        <function-ref name="clr" scoped="" ref="0x7f81815dd4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f81815dbc50" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f81815dbc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81815da020"/>
        <function-ref name="isInput" scoped="" ref="0x7f81815da1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f81815da340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f81815d8020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81815da660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81815da7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f81815da980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f81815dab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81815daca0"/>
        <function-ref name="get" scoped="" ref="0x7f81815dae30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f81815d9020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f81815d91b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f81815d9340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f81815d95d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f81815d9760"/>
        <function-ref name="set" scoped="" ref="0x7f81815d98f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f81815d9a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f81815d9c10"/>
        <function-ref name="clr" scoped="" ref="0x7f81815da4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f81815d9da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f81815dc9e0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f81815dc9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81815dcd60"/>
        <function-ref name="isInput" scoped="" ref="0x7f81815db020"/>
        <function-ref name="toggle" scoped="" ref="0x7f81815db1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81815db340"/>
        <function-ref name="get" scoped="" ref="0x7f81815db4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81815db660"/>
        <function-ref name="set" scoped="" ref="0x7f81815db7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f81815db980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f81815d31b0" loc="14:../../../tos/chips/ds2411/Ds2411PowerControlC.nc">
      <component-ref qname="Ds2411PowerControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f81815d31b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f81815d3530"/>
        <function-ref name="stop" scoped="" ref="0x7f81815d36c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f81815c4cb0" loc="46:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f81815c4cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f81815c30a0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f81815c3230"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f81815c33c0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f81815c3550"/>
        <function-ref name="setCca" scoped="" ref="0x7f81815c36e0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f81815c3870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7f81815bf990" loc="47:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7f81815bf990"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f81815bfd10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Transmit" ref="0x7f81815c4020" loc="45:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7f81815c4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81815c43a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f81815c4530"/>
        <function-ref name="modify" scoped="" ref="0x7f81815c46c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81815c4850"/>
        <function-ref name="resend" scoped="" ref="0x7f81815c49e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f81815c76c0" loc="44:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f81815c76c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f81815c7a40"/>
        <function-ref name="stop" scoped="" ref="0x7f81815c7bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7f81815c1150" loc="48:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7f81815c1150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f81815c14d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f81815b4970" loc="51:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f81815b4970"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f81815b4cf0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f81815b4e80"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f81815b3030"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f81815b31c0"/>
        <function-ref name="setCca" scoped="" ref="0x7f81815b3350"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f81815b34e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f81815ab950" loc="58:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f81815ab950"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f81815a9020"/>
        <function-ref name="clear" scoped="" ref="0x7f81815a9750"/>
        <function-ref name="isValid" scoped="" ref="0x7f81815aa780"/>
        <function-ref name="set" scoped="" ref="0x7f81815a9e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7f8181594020" loc="78:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f8181594020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81815943a0"/>
        <function-ref name="write" scoped="" ref="0x7f8181594530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7f8181594890" loc="79:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f8181594890"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181594c10"/>
        <function-ref name="write" scoped="" ref="0x7f8181594da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7f81815b3900" loc="52:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7f81815b3900"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f81815b3c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXONCCA" ref="0x7f8181597530" loc="72:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f8181597530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81815978b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CaptureSFD" ref="0x7f81815a6880" loc="60:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7f81815a6880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f81815a6c00"/>
        <function-ref name="disable" scoped="" ref="0x7f81815a6d90"/>
        <function-ref name="captured" scoped="" ref="0x7f81815a5020"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f81815a51b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BackoffTimer" ref="0x7f81815b2ae0" loc="55:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BackoffTimer" scoped="" ref="0x7f81815b2ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f81815ae390"/>
        <function-ref name="fired" scoped="" ref="0x7f81815af360"/>
        <function-ref name="startAt" scoped="" ref="0x7f81815afce0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f81815af820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f81815ae850"/>
        <function-ref name="start" scoped="" ref="0x7f81815b0970"/>
        <function-ref name="stop" scoped="" ref="0x7f81815b0e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f81815aed00" loc="56:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f81815aed00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f81815ad0a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f81815ad230"/>
        <function-ref name="getRssi" scoped="" ref="0x7f81815ad3c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f81815ad550"/>
        <function-ref name="getPower" scoped="" ref="0x7f81815ad6e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f81815ad870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO_RAM" ref="0x7f818159a550" loc="68:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f818159a550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818159a8d0"/>
        <function-ref name="write" scoped="" ref="0x7f818159aa60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7f818159ae00" loc="69:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f818159ae00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81815981c0"/>
        <function-ref name="write" scoped="" ref="0x7f8181598350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Receive" ref="0x7f818158ed40" loc="83:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f818158ed40"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81815910e0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f8181591270"/>
        <function-ref name="sfd" scoped="" ref="0x7f8181591400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f81815b5bc0" loc="50:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f81815b5bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81815b4020"/>
        <function-ref name="cancel" scoped="" ref="0x7f81815b41b0"/>
        <function-ref name="modify" scoped="" ref="0x7f81815b4340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81815b44d0"/>
        <function-ref name="resend" scoped="" ref="0x7f81815b4660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ChipSpiResource" ref="0x7f818159cd10" loc="66:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f818159cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f818159b0e0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f818159b270"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f818159b400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHTX" ref="0x7f8181597c60" loc="73:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f8181597c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181596020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f818159f820" loc="62:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f818159f820"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818159fba0"/>
        <function-ref name="isInput" scoped="" ref="0x7f818159fd30"/>
        <function-ref name="toggle" scoped="" ref="0x7f818159e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818159e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f818159e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818159e4d0"/>
        <function-ref name="set" scoped="" ref="0x7f818159e660"/>
        <function-ref name="clr" scoped="" ref="0x7f818159e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f81815b6c60" loc="48:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f81815b6c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81815b5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f81815adbb0" loc="57:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f81815adbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f81815ab020"/>
        <function-ref name="getHeader" scoped="" ref="0x7f81815ab1b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f81815ab340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7f81815a0be0" loc="59:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f81815a0be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f81815a6020"/>
        <function-ref name="isSet" scoped="" ref="0x7f81815a61b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f81815a6340"/>
        <function-ref name="set" scoped="" ref="0x7f81815a64d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7f81815963e0" loc="74:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f81815963e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181596960"/>
        <function-ref name="write" scoped="" ref="0x7f8181596af0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f818159c020" loc="65:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f818159c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f818159c3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f818159c530"/>
        <function-ref name="request" scoped="" ref="0x7f818159c6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f818159c850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f818159c9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CCA" ref="0x7f81815a5500" loc="61:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7f81815a5500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81815a5980"/>
        <function-ref name="isInput" scoped="" ref="0x7f81815a5b10"/>
        <function-ref name="toggle" scoped="" ref="0x7f81815a5ca0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81815a5e30"/>
        <function-ref name="get" scoped="" ref="0x7f818159f020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818159f1b0"/>
        <function-ref name="set" scoped="" ref="0x7f818159f340"/>
        <function-ref name="clr" scoped="" ref="0x7f818159f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7f8181593130" loc="80:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f8181593130"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81815934b0"/>
        <function-ref name="write" scoped="" ref="0x7f8181593640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXNONCE" ref="0x7f81815939c0" loc="81:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f81815939c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181593d40"/>
        <function-ref name="write" scoped="" ref="0x7f8181592020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7f81815986d0" loc="70:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f81815986d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181598a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFD" ref="0x7f818159eb40" loc="63:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7f818159eb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f818159d020"/>
        <function-ref name="isInput" scoped="" ref="0x7f818159d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f818159d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f818159d4d0"/>
        <function-ref name="get" scoped="" ref="0x7f818159d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f818159d7f0"/>
        <function-ref name="set" scoped="" ref="0x7f818159d980"/>
        <function-ref name="clr" scoped="" ref="0x7f818159db10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f81815916c0" loc="84:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f81815916c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f8181591a40"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f8181591bd0"/>
        <function-ref name="led1On" scoped="" ref="0x7f8181591d60"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f8181590020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f81815901b0"/>
        <function-ref name="get" scoped="" ref="0x7f8181590340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f81815904d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f8181590b10"/>
        <function-ref name="set" scoped="" ref="0x7f8181590660"/>
        <function-ref name="led0On" scoped="" ref="0x7f81815907f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f8181590980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7f81815955e0" loc="77:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f81815955e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181595960"/>
        <function-ref name="write" scoped="" ref="0x7f8181595af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f81815b5320" loc="49:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f81815b5320"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f81815b56a0"/>
        <function-ref name="stop" scoped="" ref="0x7f81815b5830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO" ref="0x7f818159b780" loc="67:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f818159b780"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f818159bb00"/>
        <function-ref name="writeDone" scoped="" ref="0x7f818159bc90"/>
        <function-ref name="write" scoped="" ref="0x7f818159be20"/>
        <function-ref name="beginRead" scoped="" ref="0x7f818159a020"/>
        <function-ref name="readDone" scoped="" ref="0x7f818159a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXON" ref="0x7f8181598de0" loc="71:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f8181598de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181597180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXENC" ref="0x7f8181596e80" loc="76:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f8181596e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f8181595220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7f81815b20f0" loc="53:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7f81815b20f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f81815b2470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f81814f3c60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f81814f3c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814f2210"/>
        <function-ref name="write" scoped="" ref="0x7f81814f23a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f81814fd020" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f81814fd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814fd3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f81814f7c70" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f81814f7c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814f6020"/>
        <function-ref name="write" scoped="" ref="0x7f81814f61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f81814f1670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f81814f1670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814f19f0"/>
        <function-ref name="write" scoped="" ref="0x7f81814f1b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f81814eae50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f81814eae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e9210"/>
        <function-ref name="write" scoped="" ref="0x7f81814e93a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f81814f1e50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f81814f1e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814f0210"/>
        <function-ref name="write" scoped="" ref="0x7f81814f03a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f81814dd2f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f81814dd2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814dd670"/>
        <function-ref name="write" scoped="" ref="0x7f81814dd800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f81814e02f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f81814e02f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e0670"/>
        <function-ref name="write" scoped="" ref="0x7f81814e0800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f81814fc370" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f81814fc370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814fc6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f81814e5670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f81814e5670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e59f0"/>
        <function-ref name="write" scoped="" ref="0x7f81814e5b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f81814e12f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f81814e12f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e1670"/>
        <function-ref name="write" scoped="" ref="0x7f81814e1800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f81814f6c60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f81814f6c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814f5020"/>
        <function-ref name="write" scoped="" ref="0x7f81814f51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f81814f5c60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f81814f5c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814f3020"/>
        <function-ref name="write" scoped="" ref="0x7f81814f31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f81814eb670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f81814eb670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814eb9f0"/>
        <function-ref name="write" scoped="" ref="0x7f81814ebb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f81814eee50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f81814eee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814ec210"/>
        <function-ref name="write" scoped="" ref="0x7f81814ec3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f81814f0670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f81814f0670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814f09f0"/>
        <function-ref name="write" scoped="" ref="0x7f81814f0b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f81814ff8f0" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f81814ff8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f81814ffc70"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f81814ffe00"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f81814fe020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f81814fbd00" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f81814fbd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814f90a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f81814f9370" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f81814f9370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814f97f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f81814e4a70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f81814e4a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e4df0"/>
        <function-ref name="write" scoped="" ref="0x7f81814e3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f81814f9ac0" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f81814f9ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814f9e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f81814e1ad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f81814e1ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e1e50"/>
        <function-ref name="write" scoped="" ref="0x7f81814e0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f81814fb060" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f81814fb060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814fb3e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f81814e6e50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f81814e6e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e5210"/>
        <function-ref name="write" scoped="" ref="0x7f81814e53a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f81814f5480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f81814f5480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814f5800"/>
        <function-ref name="write" scoped="" ref="0x7f81814f5990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f81814f6480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f81814f6480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814f6800"/>
        <function-ref name="write" scoped="" ref="0x7f81814f6990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f81814fe940" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f81814fe940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814fecc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f81814e8e50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f81814e8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e6210"/>
        <function-ref name="write" scoped="" ref="0x7f81814e63a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f81814e9670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f81814e9670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e99f0"/>
        <function-ref name="write" scoped="" ref="0x7f81814e9b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f81814e6670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f81814e6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e69f0"/>
        <function-ref name="write" scoped="" ref="0x7f81814e6b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f81814dead0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f81814dead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814dee50"/>
        <function-ref name="write" scoped="" ref="0x7f81814dd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f81814e0ad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f81814e0ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e0e50"/>
        <function-ref name="write" scoped="" ref="0x7f81814de020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f81814ec670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f81814ec670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814ec9f0"/>
        <function-ref name="write" scoped="" ref="0x7f81814ecb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f81814e9e50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f81814e9e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e8210"/>
        <function-ref name="write" scoped="" ref="0x7f81814e83a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f81814e2ad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f81814e2ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e2e50"/>
        <function-ref name="write" scoped="" ref="0x7f81814e1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f81814ef670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f81814ef670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814ef9f0"/>
        <function-ref name="write" scoped="" ref="0x7f81814efb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f81814ddad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f81814ddad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f81814dde50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f81814dc020"/>
        <function-ref name="write" scoped="" ref="0x7f81814dc1b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f81814dc340"/>
        <function-ref name="readDone" scoped="" ref="0x7f81814dc4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f81814fe2f0" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f81814fe2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814fe670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f81814f7490" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f81814f7490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814f7810"/>
        <function-ref name="write" scoped="" ref="0x7f81814f79a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f81814f3480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f81814f3480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814f3800"/>
        <function-ref name="write" scoped="" ref="0x7f81814f3990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f81814ebe50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f81814ebe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814ea210"/>
        <function-ref name="write" scoped="" ref="0x7f81814ea3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f81814f0e50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f81814f0e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814ef210"/>
        <function-ref name="write" scoped="" ref="0x7f81814ef3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f81814ea670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f81814ea670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814ea9f0"/>
        <function-ref name="write" scoped="" ref="0x7f81814eab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f81814f2670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f81814f2670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814f29f0"/>
        <function-ref name="write" scoped="" ref="0x7f81814f2b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f81814fd670" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f81814fd670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814fd9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f81814f2e50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f81814f2e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814f1210"/>
        <function-ref name="write" scoped="" ref="0x7f81814f13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f8181500c30" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f8181500c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f81814ff020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f81814ff1b0"/>
        <function-ref name="request" scoped="" ref="0x7f81814ff340"/>
        <function-ref name="granted" scoped="" ref="0x7f81814ff4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f81814ff660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f81814f8160" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f81814f8160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814f84e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f81814f8e00" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f81814f8e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814f71c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f81814e22f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f81814e22f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e2670"/>
        <function-ref name="write" scoped="" ref="0x7f81814e2800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f81814e3ad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f81814e3ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e3e50"/>
        <function-ref name="write" scoped="" ref="0x7f81814e2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f81814fb6b0" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f81814fb6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814fba30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f81814e32f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f81814e32f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e3670"/>
        <function-ref name="write" scoped="" ref="0x7f81814e3800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f81814de2f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f81814de2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814de670"/>
        <function-ref name="write" scoped="" ref="0x7f81814de800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f81814ece50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f81814ece50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814eb210"/>
        <function-ref name="write" scoped="" ref="0x7f81814eb3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f81814e8670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f81814e8670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e89f0"/>
        <function-ref name="write" scoped="" ref="0x7f81814e8b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f81814fdcc0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f81814fdcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814fc0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f81814fc9c0" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f81814fc9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814fcd40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f81814efe50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f81814efe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814ee210"/>
        <function-ref name="write" scoped="" ref="0x7f81814ee3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f81814f87b0" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f81814f87b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814f8b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f81814ee670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f81814ee670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814ee9f0"/>
        <function-ref name="write" scoped="" ref="0x7f81814eeb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f81814e5e50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f81814e5e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814e4610"/>
        <function-ref name="write" scoped="" ref="0x7f81814e47a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f81814dc7a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f81814dc7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f81814dcb20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f81814dccb0"/>
        <function-ref name="write" scoped="" ref="0x7f81814dce40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f81814db020"/>
        <function-ref name="readDone" scoped="" ref="0x7f81814db1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7f81814d0df0" loc="42:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f81814d0df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81814cd1c0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f81814cd350"/>
        <function-ref name="sfd" scoped="" ref="0x7f81814cd4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f81814cd7c0" loc="43:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f81814cd7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81814cdb40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7f81814cc020" loc="44:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7f81814cc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f81814cc3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f81814d05c0" loc="41:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f81814d05c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f81814d0940"/>
        <function-ref name="stop" scoped="" ref="0x7f81814d0ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFO" ref="0x7f81814c4380" loc="54:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7f81814c4380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81814c4700"/>
        <function-ref name="isInput" scoped="" ref="0x7f81814c4890"/>
        <function-ref name="toggle" scoped="" ref="0x7f81814c4a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81814c4bb0"/>
        <function-ref name="get" scoped="" ref="0x7f81814c4d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81814c3020"/>
        <function-ref name="set" scoped="" ref="0x7f81814c31b0"/>
        <function-ref name="clr" scoped="" ref="0x7f81814c3340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7f81814bdb90" loc="64:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f81814bdb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f81814bc020"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f81814bc1b0"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f81814bc340"/>
        <function-ref name="syncDone" scoped="" ref="0x7f81814bc4d0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f81814bc660"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f81814bc7f0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f81814bc980"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f81814bcb10"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f81814bcca0"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f81814bce30"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f81814bb020"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f81814bb1b0"/>
        <function-ref name="sync" scoped="" ref="0x7f81814bb340"/>
        <function-ref name="getChannel" scoped="" ref="0x7f81814bb5d0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f81814bb760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveDone_task" ref="0x7f81814a69d0" loc="148:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveDone_task" scoped="" ref="0x7f81814a69d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f81814a6d50"/>
        <function-ref name="runTask" scoped="" ref="0x7f81814a5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f81814bbd70" loc="65:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f81814bbd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f81814b9330"/>
        <function-ref name="clear" scoped="" ref="0x7f81814b9a60"/>
        <function-ref name="isValid" scoped="" ref="0x7f81814baba0"/>
        <function-ref name="set" scoped="" ref="0x7f81814b7210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFOP" ref="0x7f81814c36b0" loc="55:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7f81814c36b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81814c3a30"/>
        <function-ref name="isInput" scoped="" ref="0x7f81814c3bc0"/>
        <function-ref name="toggle" scoped="" ref="0x7f81814c3d50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81814c2020"/>
        <function-ref name="get" scoped="" ref="0x7f81814c21b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81814c2340"/>
        <function-ref name="set" scoped="" ref="0x7f81814c24d0"/>
        <function-ref name="clr" scoped="" ref="0x7f81814c2660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7f81814b6cb0" loc="69:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f81814b6cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814b50a0"/>
        <function-ref name="write" scoped="" ref="0x7f81814b5230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7f81814b5590" loc="70:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f81814b5590"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814b5910"/>
        <function-ref name="write" scoped="" ref="0x7f81814b5aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXNONCE" ref="0x7f81814b46d0" loc="72:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f81814b46d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814b4a50"/>
        <function-ref name="write" scoped="" ref="0x7f81814b4be0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f81814be330" loc="62:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f81814be330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f81814be6b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f81814be840"/>
        <function-ref name="getRssi" scoped="" ref="0x7f81814be9d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f81814beb60"/>
        <function-ref name="getPower" scoped="" ref="0x7f81814becf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f81814bee80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7f81814c8550" loc="49:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f81814c8550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81814c88d0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f81814c8a60"/>
        <function-ref name="sfd" scoped="" ref="0x7f81814c8bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SACK" ref="0x7f81814bf3a0" loc="60:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f81814bf3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814bf720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f81814c5020" loc="53:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f81814c5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f81814c53a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f81814c5530"/>
        <function-ref name="toggle" scoped="" ref="0x7f81814c56c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f81814c5850"/>
        <function-ref name="get" scoped="" ref="0x7f81814c59e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f81814c5b70"/>
        <function-ref name="set" scoped="" ref="0x7f81814c5d00"/>
        <function-ref name="clr" scoped="" ref="0x7f81814c4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO_RAM" ref="0x7f81814b3020" loc="73:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f81814b3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814b33a0"/>
        <function-ref name="write" scoped="" ref="0x7f81814b3530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f81814c9620" loc="47:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f81814c9620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81814c99a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f81814bd1e0" loc="63:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f81814bd1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f81814bd560"/>
        <function-ref name="getHeader" scoped="" ref="0x7f81814bd6f0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f81814bd880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f81814c6020" loc="50:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f81814c6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81814c63a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f81814c16e0" loc="58:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f81814c16e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f81814c1a60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f81814c1bf0"/>
        <function-ref name="request" scoped="" ref="0x7f81814c1d80"/>
        <function-ref name="granted" scoped="" ref="0x7f81814c0020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f81814c01b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7f81814b5e00" loc="71:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f81814b5e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814b41c0"/>
        <function-ref name="write" scoped="" ref="0x7f81814b4350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO" ref="0x7f81814c0530" loc="59:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f81814c0530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f81814c08b0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f81814c0a40"/>
        <function-ref name="write" scoped="" ref="0x7f81814c0bd0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f81814c0d60"/>
        <function-ref name="readDone" scoped="" ref="0x7f81814bf020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7f81814b38b0" loc="74:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f81814b38b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814b3e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7f81814c67c0" loc="51:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7f81814c67c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f81814c6b40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f81814b2150" loc="76:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f81814b2150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f81814b24d0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f81814b2660"/>
        <function-ref name="led1On" scoped="" ref="0x7f81814b27f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f81814b2980"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f81814b2b10"/>
        <function-ref name="get" scoped="" ref="0x7f81814b2ca0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f81814b2e30"/>
        <function-ref name="led2Off" scoped="" ref="0x7f81814b14d0"/>
        <function-ref name="set" scoped="" ref="0x7f81814b1020"/>
        <function-ref name="led0On" scoped="" ref="0x7f81814b11b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f81814b1340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7f81814b63e0" loc="68:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f81814b63e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81814b6760"/>
        <function-ref name="write" scoped="" ref="0x7f81814b68f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXDEC" ref="0x7f81814b7b10" loc="67:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f81814b7b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814b6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptFIFOP" ref="0x7f81814c2a50" loc="56:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f81814c2a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f81814c2dd0"/>
        <function-ref name="disable" scoped="" ref="0x7f81814c1020"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f81814c11b0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f81814c1340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHRX" ref="0x7f81814bfad0" loc="61:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f81814bfad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81814be020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f81814c9ca0" loc="48:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f81814c9ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f81814c80a0"/>
        <function-ref name="stop" scoped="" ref="0x7f81814c8230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f8181445a70" loc="44:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f8181445a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f8181445df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f8181449670" loc="41:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f8181449670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f81814499f0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f8181449b80"/>
        <function-ref name="getRssi" scoped="" ref="0x7f8181449d10"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f8181446020"/>
        <function-ref name="getPower" scoped="" ref="0x7f81814461b0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f8181446340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f8181444550" loc="46:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f8181444550"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f8181443b00"/>
        <function-ref name="clear" scoped="" ref="0x7f81814422a0"/>
        <function-ref name="isValid" scoped="" ref="0x7f81814433d0"/>
        <function-ref name="set" scoped="" ref="0x7f81814429d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7f81814450c0" loc="43:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f81814450c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f8181445440"/>
        <function-ref name="getHeader" scoped="" ref="0x7f81814455d0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f8181445760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f818143c480" loc="48:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f818143c480"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f818143c800"/>
        <function-ref name="isSet" scoped="" ref="0x7f818143c990"/>
        <function-ref name="cancel" scoped="" ref="0x7f818143cb20"/>
        <function-ref name="set" scoped="" ref="0x7f818143ccb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f8181440660" loc="47:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f8181440660"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f818143fce0"/>
        <function-ref name="clear" scoped="" ref="0x7f818143e460"/>
        <function-ref name="isValid" scoped="" ref="0x7f818143f5b0"/>
        <function-ref name="set" scoped="" ref="0x7f818143eb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f81814466e0" loc="42:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f81814466e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f8181446a60"/>
        <function-ref name="noAck" scoped="" ref="0x7f8181446bf0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f8181446d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f8181436020" loc="49:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f8181436020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f81814363a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f818143bd20" loc="46:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f818143bd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f81814380e0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f8181438270"/>
        <function-ref name="getRssi" scoped="" ref="0x7f8181438400"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f8181438590"/>
        <function-ref name="getPower" scoped="" ref="0x7f8181438720"/>
        <function-ref name="getLqi" scoped="" ref="0x7f81814388b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f818142d4a0" loc="56:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f818142d4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f818142d820"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f818142d9b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f818142db40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f818142dcd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f818142de60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f8181436a80" loc="51:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f8181436a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f8181433020"/>
        <function-ref name="clear" scoped="" ref="0x7f8181433750"/>
        <function-ref name="isValid" scoped="" ref="0x7f81814358d0"/>
        <function-ref name="set" scoped="" ref="0x7f8181433e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7f8181437640" loc="48:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f8181437640"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f81814379c0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f8181437b50"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f8181437ce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f818142e8b0" loc="53:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f818142e8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f818142ec30"/>
        <function-ref name="isSet" scoped="" ref="0x7f818142edc0"/>
        <function-ref name="cancel" scoped="" ref="0x7f818142d020"/>
        <function-ref name="set" scoped="" ref="0x7f818142d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime32khz" ref="0x7f8181429820" loc="57:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime32khz" scoped="" ref="0x7f8181429820"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f818142b4c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7f818142bb80" loc="58:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f818142bb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f81814287d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f8181432af0" loc="52:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f8181432af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f818142f0d0"/>
        <function-ref name="clear" scoped="" ref="0x7f818142f800"/>
        <function-ref name="isValid" scoped="" ref="0x7f8181431970"/>
        <function-ref name="set" scoped="" ref="0x7f818142e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f8181438c50" loc="47:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f8181438c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f8181437020"/>
        <function-ref name="noAck" scoped="" ref="0x7f81814371b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f8181437340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f81813d9790" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f81813d9790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f81813d83f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f81813d8a60" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f81813d8a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f81813cd890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f81813cc260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f81813cdd50"/>
        <function-ref name="overflow" scoped="" ref="0x7f81813cc720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f81813c71d0" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f81813c71d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f81813c3630"/>
        <function-ref name="fired" scoped="" ref="0x7f81813c6c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f81813c59d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f81813c5550"/>
        <function-ref name="getdt" scoped="" ref="0x7f81813c2020"/>
        <function-ref name="gett0" scoped="" ref="0x7f81813c3ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f81813c50d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f81813c7dc0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f81813c3020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f81813c62e0"/>
        <function-ref name="stop" scoped="" ref="0x7f81813c67b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f81813c2610" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f81813c2610"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f81813c03d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f81813c83a0" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f81813c83a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81813c8720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f8181393870" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f8181393870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f8181390090"/>
        <function-ref name="fired" scoped="" ref="0x7f8181391090"/>
        <function-ref name="startAt" scoped="" ref="0x7f8181391a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f8181391550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f8181390550"/>
        <function-ref name="start" scoped="" ref="0x7f81813926a0"/>
        <function-ref name="stop" scoped="" ref="0x7f8181392bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f8181393020" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f8181393020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81813933a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f818044a260" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f818044a260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f8180448b30"/>
        <function-ref name="fired" scoped="" ref="0x7f8180449a60"/>
        <function-ref name="startAt" scoped="" ref="0x7f81804484e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f8180448020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f8180447020"/>
        <function-ref name="start" scoped="" ref="0x7f8180449090"/>
        <function-ref name="stop" scoped="" ref="0x7f81804495a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f818044c9d0" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f818044c9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f818044cd50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f8180432a80" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f8180432a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8180432e00"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8180431020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f81804311b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8180431340"/>
        <function-ref name="fired" scoped="" ref="0x7f81804314d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f8180434020" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f8180434020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f81804343a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8180434530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f81804346c0"/>
        <function-ref name="get" scoped="" ref="0x7f8180434850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f81804349e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8180434b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f8180434d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8180433020"/>
        <function-ref name="overflow" scoped="" ref="0x7f81804331b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f8180433340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f81804334d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f8180433760" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8180433760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f8180433ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f8180433c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8180433e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8180432020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f81804321b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8180432340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f81804324d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8180432660"/>
        <function-ref name="setControl" scoped="" ref="0x7f81804327f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f8180426760" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f8180426760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f8180426ae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f8180426c70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f8180426e00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f8180425020"/>
        <function-ref name="fired" scoped="" ref="0x7f81804251b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f8180429dd0" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f8180429dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8180428180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f8180428310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f81804284a0"/>
        <function-ref name="get" scoped="" ref="0x7f8180428630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f81804287c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8180428950"/>
        <function-ref name="getMode" scoped="" ref="0x7f8180428ae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8180428c70"/>
        <function-ref name="overflow" scoped="" ref="0x7f8180428e00"/>
        <function-ref name="setMode" scoped="" ref="0x7f8180427020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f81804271b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f818042fbf0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f818042fbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f81804294e0"/>
        <function-ref name="fired" scoped="" ref="0x7f818042b4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f818042be60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f818042b9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f81804299a0"/>
        <function-ref name="start" scoped="" ref="0x7f818042ca80"/>
        <function-ref name="stop" scoped="" ref="0x7f818042b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f818042f360" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f818042f360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f818042f6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f8180427440" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f8180427440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f81804277c0"/>
        <function-ref name="getControl" scoped="" ref="0x7f8180427950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f8180427ae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f8180427c70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f8180427e00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f8180426020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f81804261b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f8180426340"/>
        <function-ref name="setControl" scoped="" ref="0x7f81804264d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f81813b2b70" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f81813b2b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f81813af9b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f81813ae360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f81813afe70"/>
        <function-ref name="overflow" scoped="" ref="0x7f81813ae820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f81813a8b90" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f81813a8b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f81813a69d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f81813a54e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f81813a5020"/>
        <function-ref name="overflow" scoped="" ref="0x7f81813a59a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f81813aa610" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f81813aa610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f81813a95b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f81813a8020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f81813a9a70"/>
        <function-ref name="overflow" scoped="" ref="0x7f81813a84e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f81804455f0" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f81804455f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f8180442e50"/>
        <function-ref name="fired" scoped="" ref="0x7f8180444e00"/>
        <function-ref name="startAt" scoped="" ref="0x7f8180442800"/>
        <function-ref name="isRunning" scoped="" ref="0x7f8180442340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f8180441340"/>
        <function-ref name="start" scoped="" ref="0x7f8180444430"/>
        <function-ref name="stop" scoped="" ref="0x7f8180444940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f818043fd20" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f818043fd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f818043b670"/>
        <function-ref name="fired" scoped="" ref="0x7f818043c550"/>
        <function-ref name="startAt" scoped="" ref="0x7f818043b020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f818043ca10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f818043bb30"/>
        <function-ref name="start" scoped="" ref="0x7f818043eb60"/>
        <function-ref name="stop" scoped="" ref="0x7f818043c090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f81804419b0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f81804419b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f81804407e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f818043f1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8180440ca0"/>
        <function-ref name="overflow" scoped="" ref="0x7f818043f670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f818135d9c0" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f818135d9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f818135dd40"/>
        <function-ref name="runTask" scoped="" ref="0x7f818135c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f8181361850" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f8181361850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f818135d090"/>
        <function-ref name="fired" scoped="" ref="0x7f818135e090"/>
        <function-ref name="startAt" scoped="" ref="0x7f818135ea10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f818135e550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f818135d550"/>
        <function-ref name="start" scoped="" ref="0x7f818135f6a0"/>
        <function-ref name="stop" scoped="" ref="0x7f818135fbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f81813662f0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f81813662f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f8181362870"/>
        <function-ref name="fired" scoped="" ref="0x7f8181365e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f8181363c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f8181363780"/>
        <function-ref name="getdt" scoped="" ref="0x7f81813611e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f8181362cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f8181363300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f8181365020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f8181362260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f81813654f0"/>
        <function-ref name="stop" scoped="" ref="0x7f81813659c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f81812de020" loc="58:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f81812de020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f81812da630"/>
        <function-ref name="fired" scoped="" ref="0x7f81812dda60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f81812dc920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f81812dc4a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f81812d9020"/>
        <function-ref name="gett0" scoped="" ref="0x7f81812daab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f81812dc020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f81812dec10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f81812da020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f81812dd110"/>
        <function-ref name="stop" scoped="" ref="0x7f81812dd5e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f81812d9450" loc="59:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f81812d9450"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f81812d97d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f81812e58e0" loc="57:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f81812e58e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f81812e0020"/>
        <function-ref name="fired" scoped="" ref="0x7f81812e34c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f81812e1300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f81812e3e00"/>
        <function-ref name="getdt" scoped="" ref="0x7f81812e0960"/>
        <function-ref name="gett0" scoped="" ref="0x7f81812e04c0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f81812e3960"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f81812e4560"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f81812e1930"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f81812e4a50"/>
        <function-ref name="stop" scoped="" ref="0x7f81812e3020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f81803cc020" loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f81803cc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f81803cc3a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f81803cc530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f81803d4180" loc="65:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f81803d4180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f81803d0630"/>
        <function-ref name="fired" scoped="" ref="0x7f81803d2bf0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f81803d1990"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f81803d1510"/>
        <function-ref name="getdt" scoped="" ref="0x7f81803cf020"/>
        <function-ref name="gett0" scoped="" ref="0x7f81803d0ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f81803d1090"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f81803d4d70"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f81803d0020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f81803d22a0"/>
        <function-ref name="stop" scoped="" ref="0x7f81803d2770"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f81803cd8b0" loc="67:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f81803cd8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f81803cdc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Platform" ref="0x7f81803cf410" loc="66:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f81803cf410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f81803cd4d0"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f81803cd660"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f81803cfab0"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f81803cfc40"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f81803cfdd0"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f81803cd020"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f81803cd1b0"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f81803cd340"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f81803cf790"/>
        <function-ref name="node_id" scoped="" ref="0x7f81803cf920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f81803dbbc0" loc="63:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f81803dbbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f81803d5220"/>
        <function-ref name="fired" scoped="" ref="0x7f81803d8740"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f81803d7570"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f81803d70d0"/>
        <function-ref name="getdt" scoped="" ref="0x7f81803d5b60"/>
        <function-ref name="gett0" scoped="" ref="0x7f81803d56c0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f81803d8be0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f81803da860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f81803d7ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f81803dad50"/>
        <function-ref name="stop" scoped="" ref="0x7f81803d82a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f81812d7a20" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f81812d7a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f81812d66b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f81812d6d20" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f81812d6d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f81812d4b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f81812d3550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f81812d3090"/>
        <function-ref name="overflow" scoped="" ref="0x7f81812d3a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f81812cdce0" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="CC2420PacketC.DummyTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f81812cdce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f81812b8220"/>
        <function-ref name="fired" scoped="" ref="0x7f81812ba7c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f81812b9590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f81812b9110"/>
        <function-ref name="getdt" scoped="" ref="0x7f81812b8b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f81812b86a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f81812bac40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f81812bb940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f81812b9ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f81812bbe10"/>
        <function-ref name="stop" scoped="" ref="0x7f81812ba340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f81812c3610" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f81812c3610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f81812c0c40"/>
        <function-ref name="fired" scoped="" ref="0x7f81812c11e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f81812c0020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f81812c1ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f81812bf590"/>
        <function-ref name="gett0" scoped="" ref="0x7f81812bf110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f81812c1660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f81812c2390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f81812c0630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f81812c2860"/>
        <function-ref name="stop" scoped="" ref="0x7f81812c2d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f81812a62f0" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f81812a62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812a6870"/>
        <function-ref name="write" scoped="" ref="0x7f81812a6a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f81812b1670" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f81812b1670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81812b19f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f81812aa2f0" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f81812aa2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812aa670"/>
        <function-ref name="write" scoped="" ref="0x7f81812aa800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f81812a5ce0" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f81812a5ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812a40a0"/>
        <function-ref name="write" scoped="" ref="0x7f81812a4230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f818129d500" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f818129d500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818129d880"/>
        <function-ref name="write" scoped="" ref="0x7f818129da10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f81812a4500" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f81812a4500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812a4880"/>
        <function-ref name="write" scoped="" ref="0x7f81812a4a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f8181291900" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f8181291900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181291c80"/>
        <function-ref name="write" scoped="" ref="0x7f8181291e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f8181293900" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f8181293900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181293c80"/>
        <function-ref name="write" scoped="" ref="0x7f8181293e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f81812b09c0" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f81812b09c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81812b0d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f8181299ce0" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f8181299ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812980a0"/>
        <function-ref name="write" scoped="" ref="0x7f8181298230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f8181295900" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f8181295900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181295c80"/>
        <function-ref name="write" scoped="" ref="0x7f8181295e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f81812a92f0" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f81812a92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812a9670"/>
        <function-ref name="write" scoped="" ref="0x7f81812a9800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f81812a72f0" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f81812a72f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812a7670"/>
        <function-ref name="write" scoped="" ref="0x7f81812a7800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f818129fce0" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f818129fce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818129e0a0"/>
        <function-ref name="write" scoped="" ref="0x7f818129e230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f81812a0500" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f81812a0500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812a0880"/>
        <function-ref name="write" scoped="" ref="0x7f81812a0a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f81812a4ce0" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f81812a4ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812a30a0"/>
        <function-ref name="write" scoped="" ref="0x7f81812a3230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f81812b2020" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f81812b2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f81812b23a0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f81812b2530"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f81812b26c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f81812ad370" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f81812ad370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81812ad6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f81812ad9c0" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f81812ad9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81812ade40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f8181297120" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f8181297120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812974a0"/>
        <function-ref name="write" scoped="" ref="0x7f8181297630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f81812ac160" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f81812ac160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81812ac4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f8181293120" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f8181293120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812934a0"/>
        <function-ref name="write" scoped="" ref="0x7f8181293630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f81812af6b0" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f81812af6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81812afa30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f8181299500" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f8181299500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181299880"/>
        <function-ref name="write" scoped="" ref="0x7f8181299a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f81812a9ad0" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f81812a9ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812a9e50"/>
        <function-ref name="write" scoped="" ref="0x7f81812a7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f81812aaad0" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f81812aaad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812aae50"/>
        <function-ref name="write" scoped="" ref="0x7f81812a9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f81812b1020" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f81812b1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81812b13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f818129a500" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f818129a500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818129a880"/>
        <function-ref name="write" scoped="" ref="0x7f818129aa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f818129dce0" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f818129dce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818129c0a0"/>
        <function-ref name="write" scoped="" ref="0x7f818129c230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f818129ace0" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f818129ace0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812990a0"/>
        <function-ref name="write" scoped="" ref="0x7f8181299230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f8181291120" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f8181291120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812914a0"/>
        <function-ref name="write" scoped="" ref="0x7f8181291630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f8181292120" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f8181292120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812924a0"/>
        <function-ref name="write" scoped="" ref="0x7f8181292630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f81812a0ce0" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f81812a0ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818129f0a0"/>
        <function-ref name="write" scoped="" ref="0x7f818129f230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f818129c500" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f818129c500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818129c880"/>
        <function-ref name="write" scoped="" ref="0x7f818129ca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f8181295120" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f8181295120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812954a0"/>
        <function-ref name="write" scoped="" ref="0x7f8181295630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f81812a3ce0" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f81812a3ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812a10a0"/>
        <function-ref name="write" scoped="" ref="0x7f81812a1230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f8181290120" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f8181290120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f81812904a0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f8181290630"/>
        <function-ref name="write" scoped="" ref="0x7f81812907c0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f8181290950"/>
        <function-ref name="readDone" scoped="" ref="0x7f8181290ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f81812b2990" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f81812b2990"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81812b2d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f81812abae0" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f81812abae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812abe60"/>
        <function-ref name="write" scoped="" ref="0x7f81812aa020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f81812a7ad0" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f81812a7ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812a7e50"/>
        <function-ref name="write" scoped="" ref="0x7f81812a6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f818129e500" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f818129e500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818129e880"/>
        <function-ref name="write" scoped="" ref="0x7f818129ea10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f81812a3500" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f81812a3500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812a3880"/>
        <function-ref name="write" scoped="" ref="0x7f81812a3a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f818129ece0" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f818129ece0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818129d0a0"/>
        <function-ref name="write" scoped="" ref="0x7f818129d230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f81812a6cd0" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f81812a6cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812a50a0"/>
        <function-ref name="write" scoped="" ref="0x7f81812a5230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f81812b1cc0" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f81812b1cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81812b00a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f81812a5500" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f81812a5500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812a5880"/>
        <function-ref name="write" scoped="" ref="0x7f81812a5a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f81812b3250" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f81812b3250"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f81812b35d0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f81812b3760"/>
        <function-ref name="request" scoped="" ref="0x7f81812b38f0"/>
        <function-ref name="granted" scoped="" ref="0x7f81812b3a80"/>
        <function-ref name="isOwner" scoped="" ref="0x7f81812b3c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f81812ac7b0" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f81812ac7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81812acb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f81812ab490" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f81812ab490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81812ab810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f8181296900" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f8181296900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181296c80"/>
        <function-ref name="write" scoped="" ref="0x7f8181296e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f8181296120" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f8181296120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812964a0"/>
        <function-ref name="write" scoped="" ref="0x7f8181296630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f81812afd00" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f81812afd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81812ad0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f8181297900" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f8181297900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181297c80"/>
        <function-ref name="write" scoped="" ref="0x7f8181297e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f8181292900" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f8181292900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181292c80"/>
        <function-ref name="write" scoped="" ref="0x7f8181292e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f818129f500" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f818129f500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818129f880"/>
        <function-ref name="write" scoped="" ref="0x7f818129fa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f818129cce0" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f818129cce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f818129a0a0"/>
        <function-ref name="write" scoped="" ref="0x7f818129a230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f81812b0370" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f81812b0370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81812b06f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f81812af060" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f81812af060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81812af3e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f81812a1500" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f81812a1500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812a1880"/>
        <function-ref name="write" scoped="" ref="0x7f81812a1a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f81812ace00" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f81812ace00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f81812ab1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f81812a1ce0" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f81812a1ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f81812a00a0"/>
        <function-ref name="write" scoped="" ref="0x7f81812a0230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f8181298500" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f8181298500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f8181298c80"/>
        <function-ref name="write" scoped="" ref="0x7f8181298e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f8181290db0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f8181290db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f818128f180"/>
        <function-ref name="writeDone" scoped="" ref="0x7f818128f310"/>
        <function-ref name="write" scoped="" ref="0x7f818128f4a0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f818128f630"/>
        <function-ref name="readDone" scoped="" ref="0x7f818128f7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f8181265a20" loc="46:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f8181265a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f8181265da0"/>
        <function-ref name="rand32" scoped="" ref="0x7f8181264020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f8181263920" loc="45:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7f8181263920"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f8181265560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f8181269990" loc="44:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f8181269990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f8181269d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f818125ba20" loc="48:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f818125ba20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f818125bda0"/>
        <function-ref name="rand32" scoped="" ref="0x7f8181259020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f818125c940" loc="47:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7f818125c940"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f818125b560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f818125c080" loc="46:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f818125c080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f818125c400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f8181267aa0" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="CC2420CsmaC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f8181267aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f8181267e20"/>
        <function-ref name="toIdle" scoped="" ref="0x7f8181261020"/>
        <function-ref name="isState" scoped="" ref="0x7f81812611b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f8181261340"/>
        <function-ref name="requestState" scoped="" ref="0x7f81812614d0"/>
        <function-ref name="forceState" scoped="" ref="0x7f8181261660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f8181243020" loc="44:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f8181243020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81812433a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8181243530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81812436c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f8181243850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81812439e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f8181244220" loc="40:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f8181244220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81812445a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8181244730"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81812448c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f8181244a50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8181244be0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f818123fe60" loc="45:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f818123fe60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f818123e210"/>
        <function-ref name="getPayload" scoped="" ref="0x7f818123e3a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f818123e530"/>
        <function-ref name="cancel" scoped="" ref="0x7f818123e6c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f818123e850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f8181242a10" loc="40:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f8181242a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8181242d90"/>
        <function-ref name="getPayload" scoped="" ref="0x7f818123f020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f818123f1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f818123f340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f818123f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f818123d8f0" loc="47:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f818123d8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f818123dc70"/>
        <function-ref name="rand32" scoped="" ref="0x7f818123de00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f818123f750" loc="41:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f818123f750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f818123fad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f818123c170" loc="48:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f818123c170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f818123c4f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f818123c680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f818123c810"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="State" ref="0x7f818123eae0" loc="46:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f818123eae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f818123ee60"/>
        <function-ref name="toIdle" scoped="" ref="0x7f818123d020"/>
        <function-ref name="isState" scoped="" ref="0x7f818123d1b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f818123d340"/>
        <function-ref name="requestState" scoped="" ref="0x7f818123d4d0"/>
        <function-ref name="forceState" scoped="" ref="0x7f818123d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f8181240690" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="UniqueSendC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f8181240690"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f8181240a10"/>
        <function-ref name="toIdle" scoped="" ref="0x7f8181240ba0"/>
        <function-ref name="isState" scoped="" ref="0x7f8181240d30"/>
        <function-ref name="isIdle" scoped="" ref="0x7f818122b020"/>
        <function-ref name="requestState" scoped="" ref="0x7f818122b1b0"/>
        <function-ref name="forceState" scoped="" ref="0x7f818122b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f8181224950" loc="47:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f8181224950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f8181224cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f8181227aa0" loc="42:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f8181227aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f8181227e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7f8181224200" loc="43:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7f8181224200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f8181224580"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f818121f3f0" loc="49:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f818121f3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f818121f770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f8181220b70" loc="45:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f8181220b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f818121f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f8181223e30" loc="43:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f8181223e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81812201e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f818121fa70" loc="50:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f818121fa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f818121fdf0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f818121e020"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f818121e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7f8181220570" loc="44:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7f8181220570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81812208f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f81811f1020" loc="75:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f81811f1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81811f13a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f81811f16b0" loc="76:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f81811f16b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81811f1a30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81811f1bc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81811f1d50"/>
        <function-ref name="cancel" scoped="" ref="0x7f81811f0020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81811f01b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f81811f58e0" loc="65:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f81811f58e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81811f5c60"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81811f5df0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81811f4020"/>
        <function-ref name="cancel" scoped="" ref="0x7f81811f41b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81811f4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f81811f4c90" loc="68:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f81811f4c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81811f30a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81811f3230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81811f33c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f81811f3550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81811f36e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f81811f45e0" loc="66:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f81811f45e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81811f4960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f81811f6be0" loc="64:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f81811f6be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f81811f5020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f81811f51b0"/>
        <function-ref name="request" scoped="" ref="0x7f81811f5340"/>
        <function-ref name="granted" scoped="" ref="0x7f81811f54d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f81811f5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f81811f3a50" loc="69:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f81811f3a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81811f3dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f81811f2170" loc="71:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f81811f2170"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f81811f24f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f81811f2680"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81811f2810"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81811f29a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f81811f2b30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f81811e7d70" loc="58:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f81811e7d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81811e6180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81811e6310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81811e64a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f81811e6630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81811e67c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f81811e6b10" loc="59:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f81811e6b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81811e5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantTask" ref="0x7f81811b8db0" loc="184:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantTask" scoped="" ref="0x7f81811b8db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f81811b6180"/>
        <function-ref name="runTask" scoped="" ref="0x7f81811b6310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f81811e52f0" loc="60:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f81811e52f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f81811e5670"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f81811e5800"/>
        <function-ref name="getRssi" scoped="" ref="0x7f81811e5990"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f81811e5b20"/>
        <function-ref name="getPower" scoped="" ref="0x7f81811e5cb0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f81811e5e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f81811e9a20" loc="51:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f81811e9a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81811e9da0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81811e8020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81811e81b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f81811e8340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81811e84d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f81811e4b70" loc="62:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f81811e4b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f81811e3020"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f81811e31b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f81811e3340"/>
        <function-ref name="dequeue" scoped="" ref="0x7f81811e34d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f81811e4170" loc="61:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f81811e4170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f81811e44f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f81811e4680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f81811e4810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f81811e9370" loc="49:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7f81811e9370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81811e96f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f81811eb7b0" loc="46:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f81811eb7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f81811ebb30"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f81811ebcc0"/>
        <function-ref name="request" scoped="" ref="0x7f81811ebe50"/>
        <function-ref name="granted" scoped="" ref="0x7f81811ea020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f81811ea1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f81811ea4d0" loc="48:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7f81811ea4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81811ea850"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81811ea9e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81811eab70"/>
        <function-ref name="cancel" scoped="" ref="0x7f81811ead00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81811e9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f81811e8840" loc="52:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f81811e8840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81811e8bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f81811e7020" loc="54:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f81811e7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f81811e73a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f81811e7530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81811e76c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81811e7850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f81811e79e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f8181197dd0" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f8181197dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f8181196180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f8181196410" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f8181196410"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f8181196790"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f8181196920"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f8181196ab0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f8181196c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f818118bb80" loc="46:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f818118bb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f818118a020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f818118a1b0"/>
        <function-ref name="start" scoped="" ref="0x7f818118a340"/>
        <function-ref name="stop" scoped="" ref="0x7f818118a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f8181189860" loc="51:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f8181189860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8181189be0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8181189d70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f8181188020"/>
        <function-ref name="cancel" scoped="" ref="0x7f81811881b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8181188340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f8181188690" loc="52:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f8181188690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f8181188a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f818118fce0" loc="43:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f818118fce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f818118c0a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f818118c230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f818118c3c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f818118c550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f818118c6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f818118b080" loc="45:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f818118b080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f818118b400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f818118b590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f818118b720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f818118b8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendState" ref="0x7f818118a800" loc="47:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendState" scoped="" ref="0x7f818118a800"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f818118ab80"/>
        <function-ref name="toIdle" scoped="" ref="0x7f818118ad10"/>
        <function-ref name="isState" scoped="" ref="0x7f8181189020"/>
        <function-ref name="isIdle" scoped="" ref="0x7f81811891b0"/>
        <function-ref name="requestState" scoped="" ref="0x7f8181189340"/>
        <function-ref name="forceState" scoped="" ref="0x7f81811894d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f8181188d90" loc="53:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7f8181188d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f8181187180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f8181187310"/>
        <function-ref name="start" scoped="" ref="0x7f81811874a0"/>
        <function-ref name="stop" scoped="" ref="0x7f8181187630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f818118c980" loc="44:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f818118c980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f818118cd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f81811842d0" loc="41:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
      <component-ref qname="DummyLplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f81811842d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f8181184650"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f81811847e0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f8181184970"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f8181184b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f8181186580" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="DummyLplC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f8181186580"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f8181186900"/>
        <function-ref name="toIdle" scoped="" ref="0x7f8181186a90"/>
        <function-ref name="isState" scoped="" ref="0x7f8181186c20"/>
        <function-ref name="isIdle" scoped="" ref="0x7f8181186db0"/>
        <function-ref name="requestState" scoped="" ref="0x7f8181185020"/>
        <function-ref name="forceState" scoped="" ref="0x7f81811851b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f8181176d70" loc="45:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f8181176d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8181175180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8181175310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81811754a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f8181175630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81811757c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f8181179350" loc="40:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f8181179350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81811796d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8181179860"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81811799f0"/>
        <function-ref name="cancel" scoped="" ref="0x7f8181179b80"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8181179d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f8181176020" loc="41:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f8181176020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f81811763a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f8181176530"/>
        <function-ref name="getRetries" scoped="" ref="0x7f81811766c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f8181176850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f81811769e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7f81811711c0" loc="44:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f81811711c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f8181171540"/>
        <function-ref name="noAck" scoped="" ref="0x7f81811716d0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f8181171860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f8181174410" loc="40:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f8181174410"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f8181174790"/>
        <function-ref name="setRetries" scoped="" ref="0x7f8181174920"/>
        <function-ref name="getRetries" scoped="" ref="0x7f8181174ab0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f8181174c40"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f8181174dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f8181152690" loc="59:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f8181152690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f8181152a10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f8181153860" loc="58:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f8181153860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8181153be0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8181153d70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f8181152020"/>
        <function-ref name="cancel" scoped="" ref="0x7f81811521b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8181152340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7f818114f610" loc="62:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f818114f610"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f818114f990"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f818114fb20"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f818114fcb0"/>
        <function-ref name="syncDone" scoped="" ref="0x7f818114fe40"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f818114e020"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f818114e1b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f818114e340"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f818114e4d0"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f818114e660"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f818114e7f0"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f818114e980"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f818114eb10"/>
        <function-ref name="sync" scoped="" ref="0x7f818114eca0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f818114d020"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f818114d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f81811548b0" loc="54:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f81811548b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f8181154c30"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f8181154dc0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f8181153020"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f81811531b0"/>
        <function-ref name="setCca" scoped="" ref="0x7f8181153340"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f81811534d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f8181155ce0" loc="53:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7f8181155ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f81811540a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7f818114c1f0" loc="64:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7f818114c1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f818114c570"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f818114c700"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f818114c890"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f818114ca20"/>
        <function-ref name="setCca" scoped="" ref="0x7f818114cbb0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f818114cd40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f8181156a80" loc="52:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f8181156a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8181156e00"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f8181155020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81811551b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f8181155340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f81811554d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f818115a020" loc="48:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f818115a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f818115a3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f818115a530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f818115a6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f818115a850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f818115a9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f8181158df0" loc="50:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f8181158df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81811571c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f8181152ce0" loc="60:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f8181152ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f81811500a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f8181150230"/>
        <function-ref name="getRssi" scoped="" ref="0x7f81811503c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f8181150550"/>
        <function-ref name="getPower" scoped="" ref="0x7f81811506e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f8181150870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f818114d4d0" loc="63:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f818114d4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f818114d950"/>
        <function-ref name="changed" scoped="" ref="0x7f818114dae0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f818114dc70"/>
        <function-ref name="setAddress" scoped="" ref="0x7f818114de00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f8181150b70" loc="61:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f8181150b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f818114f020"/>
        <function-ref name="getHeader" scoped="" ref="0x7f818114f1b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f818114f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f8181158210" loc="49:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f8181158210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f8181158590"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f818114bd30" loc="67:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f818114bd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f818114a0e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f818114a270"/>
        <function-ref name="led1On" scoped="" ref="0x7f818114a400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f818114a590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f818114a720"/>
        <function-ref name="get" scoped="" ref="0x7f818114a8b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f818114aa40"/>
        <function-ref name="led2Off" scoped="" ref="0x7f81811491b0"/>
        <function-ref name="set" scoped="" ref="0x7f818114abd0"/>
        <function-ref name="led0On" scoped="" ref="0x7f818114ad60"/>
        <function-ref name="led2On" scoped="" ref="0x7f8181149020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f8181157470" loc="51:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f8181157470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f81811577f0"/>
        <function-ref name="source" scoped="" ref="0x7f8181157980"/>
        <function-ref name="address" scoped="" ref="0x7f8181157b10"/>
        <function-ref name="destination" scoped="" ref="0x7f8181157ca0"/>
        <function-ref name="setSource" scoped="" ref="0x7f8181157e30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f8181156020"/>
        <function-ref name="type" scoped="" ref="0x7f81811561b0"/>
        <function-ref name="setType" scoped="" ref="0x7f8181156340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f81811564d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f8181156660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f81811567f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioResource" ref="0x7f818114b0f0" loc="66:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioResource" scoped="" ref="0x7f818114b0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f818114b470"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f818114b600"/>
        <function-ref name="request" scoped="" ref="0x7f818114b790"/>
        <function-ref name="granted" scoped="" ref="0x7f818114b920"/>
        <function-ref name="isOwner" scoped="" ref="0x7f818114bab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f81810c15c0" loc="46:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f81810c15c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f81810c1940"/>
        <function-ref name="stopDone" scoped="" ref="0x7f81810c1ad0"/>
        <function-ref name="start" scoped="" ref="0x7f81810c1c60"/>
        <function-ref name="stop" scoped="" ref="0x7f81810c1df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f81810be600" loc="47:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f81810be600"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81810be980"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81810beb10"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81810beca0"/>
        <function-ref name="cancel" scoped="" ref="0x7f81810bee30"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81810bd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f81810bde10" loc="49:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f81810bde10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f81810bc1c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f81810bc350"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81810bc4e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81810bc670"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f81810bc800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f81810bd800" loc="48:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f81810bd800"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f81810bdb80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f81810bab20" loc="53:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f81810bab20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f81810b9020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f81810b91b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f81810b9340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f81810b94d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f81810b9660"/>
        <function-ref name="get" scoped="" ref="0x7f81810b97f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f81810b9980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f81810b8020"/>
        <function-ref name="set" scoped="" ref="0x7f81810b9b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f81810b9ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f81810b9e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f81810ba1a0" loc="51:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f81810ba1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f81810ba520"/>
        <function-ref name="noAck" scoped="" ref="0x7f81810ba6b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f81810ba840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f81810bcab0" loc="50:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f81810bcab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f81810bce30"/>
        <function-ref name="source" scoped="" ref="0x7f81810bb020"/>
        <function-ref name="address" scoped="" ref="0x7f81810bb1b0"/>
        <function-ref name="destination" scoped="" ref="0x7f81810bb340"/>
        <function-ref name="setSource" scoped="" ref="0x7f81810bb4d0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f81810bb660"/>
        <function-ref name="type" scoped="" ref="0x7f81810bb7f0"/>
        <function-ref name="setType" scoped="" ref="0x7f81810bb980"/>
        <function-ref name="isForMe" scoped="" ref="0x7f81810bbb10"/>
        <function-ref name="setGroup" scoped="" ref="0x7f81810bbca0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f81810bbe30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f818105b120" loc="54:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f818105b120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f818105b4a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f818105b630"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f818105b7c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f818105b950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f818105bae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f818105bd70" loc="55:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f818105bd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f818105a180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f8181060110" loc="47:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f8181060110"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81810604b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8181060640"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81810607d0"/>
        <function-ref name="cancel" scoped="" ref="0x7f8181060960"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8181060af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f818105da40" loc="50:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f818105da40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f818105ddc0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f818105c020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f818105c1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f818105c340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f818105c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f8181060e70" loc="48:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f8181060e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f818105f240"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f818105c720" loc="51:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f818105c720"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f818105caa0"/>
        <function-ref name="noAck" scoped="" ref="0x7f818105cc30"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f818105cdc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f818105f490" loc="49:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f818105f490"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f818105f810"/>
        <function-ref name="source" scoped="" ref="0x7f818105f9a0"/>
        <function-ref name="address" scoped="" ref="0x7f818105fb30"/>
        <function-ref name="destination" scoped="" ref="0x7f818105fcc0"/>
        <function-ref name="setSource" scoped="" ref="0x7f818105fe50"/>
        <function-ref name="setDestination" scoped="" ref="0x7f818105d020"/>
        <function-ref name="type" scoped="" ref="0x7f818105d1b0"/>
        <function-ref name="setType" scoped="" ref="0x7f818105d340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f818105d4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f818105d660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f818105d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f81810568d0" loc="50:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f81810568d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f8181056c50"/>
        <function-ref name="stopDone" scoped="" ref="0x7f8181056de0"/>
        <function-ref name="start" scoped="" ref="0x7f8181055020"/>
        <function-ref name="stop" scoped="" ref="0x7f81810551b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f8181054480" loc="52:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f8181054480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f8182512960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8181054800"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8181054990"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f8181054b20"/>
        <function-ref name="cancel" scoped="" ref="0x7f8181054cb0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8181054e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f8181056280" loc="49:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f8181056280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f8181056600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f8181055940" loc="51:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f8181055940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f8182512960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f8181055cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f8181052dc0" loc="56:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f8181052dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f8181050180"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f8181050310"/>
        <function-ref name="led1On" scoped="" ref="0x7f81810504a0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f8181050630"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f81810507c0"/>
        <function-ref name="get" scoped="" ref="0x7f8181050950"/>
        <function-ref name="led1Off" scoped="" ref="0x7f8181050ae0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f818104c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f8181050c70"/>
        <function-ref name="led0On" scoped="" ref="0x7f8181050e00"/>
        <function-ref name="led2On" scoped="" ref="0x7f818104c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7f81810524a0" loc="55:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f81810524a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f8182512960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f8181052820"/>
        <function-ref name="offset" scoped="" ref="0x7f81810529b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f8181052b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f81810492f0" loc="66:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f81810492f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f8181049670"/>
        <function-ref name="stopDone" scoped="" ref="0x7f8181049800"/>
        <function-ref name="start" scoped="" ref="0x7f8181049990"/>
        <function-ref name="stop" scoped="" ref="0x7f8181049b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7f8180fe2e40" loc="332:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x7f8180fe2e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f8180fe11e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f8180fe1370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f8181037060" loc="74:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f8181037060"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f81810373e0"/>
        <function-ref name="stop" scoped="" ref="0x7f8181037570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7f8181019d10" loc="191:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x7f8181019d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f81810180e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f8181018270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f818104cc70" loc="65:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f818104cc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f8181049020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7f8181034c50" loc="75:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x7f8181034c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7f8181036020"/>
        <function-ref name="flush" scoped="" ref="0x7f81810361b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7f8180fe4400" loc="322:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x7f8180fe4400"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f8180fe4780"/>
        <function-ref name="runTask" scoped="" ref="0x7f8180fe4910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7f81810388e0" loc="72:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f81810388e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f8181038c60"/>
        <function-ref name="resetSend" scoped="" ref="0x7f8181038df0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f8181046020"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f81810461b0"/>
        <function-ref name="putData" scoped="" ref="0x7f8181046340"/>
        <function-ref name="putDone" scoped="" ref="0x7f81810464d0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f8181046660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f81810468e0" loc="73:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f81810468e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f8181046c60"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f8181046df0"/>
        <function-ref name="led1On" scoped="" ref="0x7f818103d020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f818103d1b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f818103d340"/>
        <function-ref name="get" scoped="" ref="0x7f818103d4d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f818103d660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f818103dca0"/>
        <function-ref name="set" scoped="" ref="0x7f818103d7f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f818103d980"/>
        <function-ref name="led2On" scoped="" ref="0x7f818103db10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7f8180fdd0c0" loc="341:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f8180fdd0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f8180fdd440"/>
        <function-ref name="runTask" scoped="" ref="0x7f8180fdd5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7f8181042130" loc="67:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f8181042130"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f81810424b0"/>
        <function-ref name="nextByte" scoped="" ref="0x7f8181042640"/>
        <function-ref name="startSend" scoped="" ref="0x7f81810427d0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f8181042960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7f818103f5c0" loc="68:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f818103f5c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f818103f940"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f818103fad0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f818103fc60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7f8180f13c50" loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x7f8180f13c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f8180f12020"/>
        <function-ref name="runTask" scoped="" ref="0x7f8180f121b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f8180f17830" loc="51:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f8180f17830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f8182512960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8180f17bd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8180f17d60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f8180f16020"/>
        <function-ref name="cancel" scoped="" ref="0x7f8180f161b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8180f16340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7f8180f12480" loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x7f8180f12480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f8180f12800"/>
        <function-ref name="runTask" scoped="" ref="0x7f8180f12990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f8180f17110" loc="50:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f8180f17110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f8182512960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f8180f174b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7f8180f16760" loc="54:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x7f8180f16760"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f8182512960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f8180f16b00"/>
        <function-ref name="offset" scoped="" ref="0x7f8180f16c90"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f8180f16e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f8180f14590" loc="57:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f8180f14590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f8180f14910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f8180f14aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7f8180f14c30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f8180f14dc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f8180f13020"/>
        <function-ref name="get" scoped="" ref="0x7f8180f131b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f8180f13340"/>
        <function-ref name="led2On" scoped="" ref="0x7f8180f13980"/>
        <function-ref name="set" scoped="" ref="0x7f8180f13660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f8180f134d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f8180f137f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7f8180f159d0" loc="56:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f8180f159d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f8180f15d50"/>
        <function-ref name="nextByte" scoped="" ref="0x7f8180f14020"/>
        <function-ref name="startSend" scoped="" ref="0x7f8180f141b0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f8180f14340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7f8180f150e0" loc="55:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f8180f150e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f8180f15460"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f8180f155f0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f8180f15780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7f8180f02d20" loc="50:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f8180f02d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8180f0c0e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f8180f0c270"/>
        <function-ref name="receive" scoped="" ref="0x7f8180f0c400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f8180f0c590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f8180f0c720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f8180f0c8b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8180f0ca40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7f8180f10b60" loc="48:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f8180f10b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f8180f0d020"/>
        <function-ref name="resetSend" scoped="" ref="0x7f8180f0d1b0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f8180f0d340"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f8180f0d4d0"/>
        <function-ref name="putData" scoped="" ref="0x7f8180f0d660"/>
        <function-ref name="putDone" scoped="" ref="0x7f8180f0d7f0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f8180f0d980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f8180f0ccc0" loc="51:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f8180f0ccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f8180f0b0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f8180f0b230"/>
        <function-ref name="led1On" scoped="" ref="0x7f8180f0b3c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f8180f0b550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f8180f0b6e0"/>
        <function-ref name="get" scoped="" ref="0x7f8180f0b870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f8180f0ba00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f8180f001b0"/>
        <function-ref name="set" scoped="" ref="0x7f8180f0bb90"/>
        <function-ref name="led0On" scoped="" ref="0x7f8180f0bd20"/>
        <function-ref name="led2On" scoped="" ref="0x7f8180f00020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f8180ee3020" loc="6:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f8180ee3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8180ee33a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f8180ee3530"/>
        <function-ref name="receive" scoped="" ref="0x7f8180ee36c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f8180ee3850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f8180ee5890" loc="5:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f8180ee5890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8180ee5c10"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f8180ee5da0"/>
        <function-ref name="receive" scoped="" ref="0x7f8180ee4020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f8180ee41b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f8180ee4340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f8180ee44d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8180ee4660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f8180ee5080" loc="4:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f8180ee5080"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f8180ee5400"/>
        <function-ref name="stop" scoped="" ref="0x7f8180ee5590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f8180d52c70" loc="45:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f8180d52c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f8180d50020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f8180d501b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f8180d4f440" loc="47:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f8180d4f440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8180d4f7c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f8180d4f950"/>
        <function-ref name="receive" scoped="" ref="0x7f8180d4fae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f8180d4fc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f8180d4e020" loc="49:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f8180d4e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f8180d4e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f8180d50440" loc="46:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f8180d50440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8180d507c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f8180d50950"/>
        <function-ref name="receive" scoped="" ref="0x7f8180d50ae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f8180d50c70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f8180d50e00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f8180d4f020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8180d4f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f8180d52020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f8180d52020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8180d523a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8180d52530"/>
        <function-ref name="request" scoped="" ref="0x7f8180d526c0"/>
        <function-ref name="granted" scoped="" ref="0x7f8180d52850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8180d529e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f8180ed3a30" loc="42:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f8180ed3a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f8180ed3db0"/>
        <function-ref name="configure" scoped="" ref="0x7f8180ed2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f8180ecf020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f8180ecf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8180ecf3a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f8180ecf530"/>
        <function-ref name="receive" scoped="" ref="0x7f8180ecf6c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f8180ecf850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f8180ecc450" loc="47:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f8180ecc450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f8180ecc7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f8180ed2860" loc="43:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f8180ed2860"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8180ed2be0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f8180ed2d70"/>
        <function-ref name="receive" scoped="" ref="0x7f8180ed0020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f8180ed01b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f8180ed0340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f8180ed04d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8180ed0660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f8180ece1d0" loc="46:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f8180ece1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8180ece550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8180ece6e0"/>
        <function-ref name="request" scoped="" ref="0x7f8180ece870"/>
        <function-ref name="granted" scoped="" ref="0x7f8180ecea00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8180eceb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f8180ed47a0" loc="41:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f8180ed47a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8180ed4b20"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8180ed4cb0"/>
        <function-ref name="request" scoped="" ref="0x7f8180ed4e40"/>
        <function-ref name="granted" scoped="" ref="0x7f8180ed3020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8180ed31b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f8180ecb1d0" loc="48:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f8180ecb1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f8180ecb550"/>
        <function-ref name="txDone" scoped="" ref="0x7f8180ecb6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f8180e60dc0" loc="47:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f8180e60dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f8180e5f180"/>
        <function-ref name="configure" scoped="" ref="0x7f8180e5f310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f8180e5e890" loc="49:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f8180e5e890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8180e5ec30"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f8180e5edc0"/>
        <function-ref name="receive" scoped="" ref="0x7f8180e5d020"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f8180e5d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f8180e5c3e0" loc="52:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f8180e5c3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f8180e5c780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f8180e5ca50" loc="53:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f8180e5ca50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f8180e5cdd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f8180e5a020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f8180e5a1b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f8180e5a340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f8180e5a4d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f8180e5a660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f8180e5a7f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f8180e5a980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f8180e5ab10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f8180e5aca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f8180e5ae30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f8180e59020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f8180e591b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f8180e59440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f8180e595d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f8180e59760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f8180e598f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f8180e59a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f8180e59c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f8180e59da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f8180e58020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f8180e581b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f8180e58340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f8180e584d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f8180e58660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f8180e589f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f8180e58b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f8180e58d10"/>
        <function-ref name="tx" scoped="" ref="0x7f8180e57020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f8180e571b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f8180e57340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f8180e574d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f8180e57660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f8180e577f0"/>
        <function-ref name="rx" scoped="" ref="0x7f8180e57980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f8180e57b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f8180e57ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f8180e57e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f8180e56020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f8180e561b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f8180e5f6d0" loc="48:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f8180e5f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8180e5fa70"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f8180e5fc00"/>
        <function-ref name="receive" scoped="" ref="0x7f8180e5fd90"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f8180e5e020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f8180e5e1b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f8180e5e340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8180e5e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f8180e55020" loc="55:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f8180e55020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f8180e55e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8180e54800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8180e54340"/>
        <function-ref name="overflow" scoped="" ref="0x7f8180e54cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f8180e5d5b0" loc="51:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f8180e5d5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8180e5d950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8180e5dae0"/>
        <function-ref name="request" scoped="" ref="0x7f8180e5dc70"/>
        <function-ref name="granted" scoped="" ref="0x7f8180e5de00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8180e5c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f8180e60020" loc="46:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f8180e60020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8180e603c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8180e60550"/>
        <function-ref name="request" scoped="" ref="0x7f8180e606e0"/>
        <function-ref name="granted" scoped="" ref="0x7f8180e60870"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8180e60a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f8180e565b0" loc="54:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f8180e565b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f8180e56950"/>
        <function-ref name="txDone" scoped="" ref="0x7f8180e56ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f8180e53120" loc="56:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f8180e53120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f8180e534a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f8180e53630"/>
        <function-ref name="led1On" scoped="" ref="0x7f8180e537c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f8180e53950"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f8180e53ae0"/>
        <function-ref name="get" scoped="" ref="0x7f8180e53c70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f8180e53e00"/>
        <function-ref name="led2On" scoped="" ref="0x7f8180e524d0"/>
        <function-ref name="set" scoped="" ref="0x7f8180e521b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f8180e52020"/>
        <function-ref name="led0On" scoped="" ref="0x7f8180e52340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f8180e44860" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f8180e44860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f8180e44be0"/>
        <function-ref name="txDone" scoped="" ref="0x7f8180e44d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f8180e47500" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f8180e47500"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f8180e47880"/>
        <function-ref name="stop" scoped="" ref="0x7f8180e47a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f8180e47d30" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f8180e47d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f8180e4a0e0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f8180e4a270"/>
        <function-ref name="setUctl" scoped="" ref="0x7f8180e4a400"/>
        <function-ref name="enableUart" scoped="" ref="0x7f8180e4a590"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f8180e4a720"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f8180e4a8b0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f8180e4aa40"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f8180e4abd0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f8180e4ad60"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f8180e49020"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f8180e491b0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f8180e49340"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f8180e494d0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f8180e49760"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f8180e498f0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f8180e49a80"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f8180e49c10"/>
        <function-ref name="isUart" scoped="" ref="0x7f8180e49da0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f8180e46020"/>
        <function-ref name="isSpi" scoped="" ref="0x7f8180e461b0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f8180e46340"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f8180e464d0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f8180e46660"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f8180e467f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f8180e46980"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f8180e46d10"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f8180e45020"/>
        <function-ref name="setUbr" scoped="" ref="0x7f8180e451b0"/>
        <function-ref name="tx" scoped="" ref="0x7f8180e45340"/>
        <function-ref name="getUctl" scoped="" ref="0x7f8180e454d0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f8180e45660"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f8180e457f0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f8180e45980"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f8180e45b10"/>
        <function-ref name="rx" scoped="" ref="0x7f8180e45ca0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f8180e45e30"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f8180e44020"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f8180e441b0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f8180e44340"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f8180e444d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f8180e35890" loc="66:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f8180e35890"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8180e35c10"/>
        <function-ref name="isInput" scoped="" ref="0x7f8180e35da0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8180e34020"/>
        <function-ref name="clr" scoped="" ref="0x7f8180e33c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f8180e34340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8180e344d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8180e34660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8180e347f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8180e34980"/>
        <function-ref name="get" scoped="" ref="0x7f8180e34b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8180e34ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8180e34e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8180e33020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8180e332b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8180e33440"/>
        <function-ref name="set" scoped="" ref="0x7f8180e335d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8180e33760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8180e341b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8180e338f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8180e33a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f8180e3a020" loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f8180e3a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f8180e3a3a0"/>
        <function-ref name="txDone" scoped="" ref="0x7f8180e3a530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f8180e32020" loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f8180e32020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8180e323a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8180e32530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8180e326c0"/>
        <function-ref name="clr" scoped="" ref="0x7f8180e304d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8180e329e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8180e32b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8180e32d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8180e31020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8180e311b0"/>
        <function-ref name="get" scoped="" ref="0x7f8180e31340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8180e314d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8180e31660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8180e317f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8180e31a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8180e31c10"/>
        <function-ref name="set" scoped="" ref="0x7f8180e31da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8180e30020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8180e32850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8180e301b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8180e30340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f8180e30890" loc="68:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f8180e30890"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8180e30c10"/>
        <function-ref name="isInput" scoped="" ref="0x7f8180e30da0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8180e2f020"/>
        <function-ref name="clr" scoped="" ref="0x7f8180e2ec10"/>
        <function-ref name="toggle" scoped="" ref="0x7f8180e2f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8180e2f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8180e2f660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8180e2f7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8180e2f980"/>
        <function-ref name="get" scoped="" ref="0x7f8180e2fb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8180e2fca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8180e2fe30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8180e2e020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8180e2e2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8180e2e440"/>
        <function-ref name="set" scoped="" ref="0x7f8180e2e5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8180e2e760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8180e2f1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8180e2e8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8180e2ea80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f8180e3f3c0" loc="61:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f8180e3f3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f8180e3f740"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f8180e3f8d0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f8180e3fa60"/>
        <function-ref name="enableUart" scoped="" ref="0x7f8180e3fbf0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f8180e3fd80"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f8180e3e020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f8180e3e1b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f8180e3e340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f8180e3e4d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f8180e3e660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f8180e3e7f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f8180e3e980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f8180e3eb10"/>
        <function-ref name="getUbr" scoped="" ref="0x7f8180e3eda0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f8180e3d020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f8180e3d1b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f8180e3d340"/>
        <function-ref name="isUart" scoped="" ref="0x7f8180e3d4d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f8180e3d660"/>
        <function-ref name="isSpi" scoped="" ref="0x7f8180e3d7f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f8180e3d980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f8180e3db10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f8180e3dca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f8180e3de30"/>
        <function-ref name="getMode" scoped="" ref="0x7f8180e3c020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f8180e3c3b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f8180e3c540"/>
        <function-ref name="setUbr" scoped="" ref="0x7f8180e3c6d0"/>
        <function-ref name="tx" scoped="" ref="0x7f8180e3c860"/>
        <function-ref name="getUctl" scoped="" ref="0x7f8180e3c9f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f8180e3cb80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f8180e3cd10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f8180e3b020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f8180e3b1b0"/>
        <function-ref name="rx" scoped="" ref="0x7f8180e3b340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f8180e3b4d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f8180e3b660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f8180e3b7f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f8180e3b980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f8180e3bb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f8180e429c0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f8180e429c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f8180e42d40"/>
        <function-ref name="stop" scoped="" ref="0x7f8180e3f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f8180e37020" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f8180e37020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8180e373a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f8180e37530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8180e376c0"/>
        <function-ref name="clr" scoped="" ref="0x7f8180e354d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f8180e379e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8180e37b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8180e37d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8180e36020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8180e361b0"/>
        <function-ref name="get" scoped="" ref="0x7f8180e36340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8180e364d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8180e36660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8180e367f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8180e36a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8180e36c10"/>
        <function-ref name="set" scoped="" ref="0x7f8180e36da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8180e35020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8180e37850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8180e351b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8180e35340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f8180e3a8f0" loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f8180e3a8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f8180e3ac70"/>
        <function-ref name="isInput" scoped="" ref="0x7f8180e3ae00"/>
        <function-ref name="setResistor" scoped="" ref="0x7f8180e39020"/>
        <function-ref name="clr" scoped="" ref="0x7f8180e38c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f8180e39340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f8180e394d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f8180e39660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f8180e397f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f8180e39980"/>
        <function-ref name="get" scoped="" ref="0x7f8180e39b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f8180e39ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f8180e39e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f8180e38020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f8180e382b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f8180e38440"/>
        <function-ref name="set" scoped="" ref="0x7f8180e385d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f8180e38760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f8180e391b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f8180e388f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f8180e38a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f8180db17c0" loc="43:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f8180db17c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248ec80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f818248d020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f8180dae620"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f8180dac020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f8180daeae0"/>
        <function-ref name="overflow" scoped="" ref="0x7f8180dac4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f81802cca90" loc="43:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f81802cca90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f81802cce10"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f81802cb020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f81802c6be0" loc="48:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f81802c6be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f81802c5020"/>
        <function-ref name="configure" scoped="" ref="0x7f81802c51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f81802c6440" loc="46:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f81802c6440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f81802c67c0"/>
        <function-ref name="txDone" scoped="" ref="0x7f81802c6950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f81802cde00" loc="42:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f81802cde00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f81802cc1c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f81802cc350"/>
        <function-ref name="request" scoped="" ref="0x7f81802cc4e0"/>
        <function-ref name="granted" scoped="" ref="0x7f81802cc670"/>
        <function-ref name="isOwner" scoped="" ref="0x7f81802cc800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f81802cba50" loc="45:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f81802cba50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f81802cbdd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f81802ca020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f81802ca1b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f81802ca340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f81802ca4d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f81802ca660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f81802ca7f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f81802ca980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f81802cab10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f81802caca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f81802cae30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f81802c9020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f81802c91b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f81802c9440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f81802c95d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f81802c9760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f81802c98f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f81802c9a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f81802c9c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f81802c9da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f81802c8020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f81802c81b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f81802c8340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f81802c84d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f81802c8660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f81802c89f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f81802c8b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f81802c8d10"/>
        <function-ref name="tx" scoped="" ref="0x7f81802c7020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f81802c71b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f81802c7340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f81802c74d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f81802c7660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f81802c77f0"/>
        <function-ref name="rx" scoped="" ref="0x7f81802c7980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f81802c7b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f81802c7ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f81802c7e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f81802c6020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f81802c61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f81802cb2b0" loc="44:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f81802cb2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f81802cb630"/>
        <function-ref name="userId" scoped="" ref="0x7f81802cb7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f8180d94510" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f8180d94510"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f8180d94890"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f8180d94a20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f8180d92af0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f8180d92af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f8180d92e70"/>
        <function-ref name="configure" scoped="" ref="0x7f8180d91030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f8180d96510" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f8180d96510"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f8180d96890"/>
        <function-ref name="txDone" scoped="" ref="0x7f8180d96a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f8180d95280" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f8180d95280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8180d95600"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8180d95790"/>
        <function-ref name="request" scoped="" ref="0x7f8180d95920"/>
        <function-ref name="granted" scoped="" ref="0x7f8180d95ab0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8180d95c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f8180d94d20" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f8180d94d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f8180d920e0"/>
        <function-ref name="userId" scoped="" ref="0x7f8180d92270"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f8180d8e120" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f8180d8e120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f8180d8e4a0"/>
        <function-ref name="userId" scoped="" ref="0x7f8180d8e630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f8180d90230" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f8180d90230"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f8180d905d0"/>
        <function-ref name="txDone" scoped="" ref="0x7f8180d90760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f8180d8fad0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f8180d8fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8180d8fe50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f8180d90b60" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f8180d90b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f8180d8f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f8180d8f2f0" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f8180d8f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f8180d8f670"/>
        <function-ref name="txDone" scoped="" ref="0x7f8180d8f800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f8180d88bd0" loc="59:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f8180d88bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f8180d87020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f8180d871b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f8180d86950" loc="64:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f8180d86950"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f8180d86cf0"/>
        <function-ref name="configure" scoped="" ref="0x7f8180d86e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f8180d87400" loc="60:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f8180d87400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8180d87780"/>
        <function-ref name="requested" scoped="" ref="0x7f8180d87910"/>
        <function-ref name="granted" scoped="" ref="0x7f8180d87aa0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8180d87c30"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f8180d87dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f8180d8ae30" loc="58:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f8180d8ae30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8180d88210"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8180d883a0"/>
        <function-ref name="request" scoped="" ref="0x7f8180d88530"/>
        <function-ref name="granted" scoped="" ref="0x7f8180d886c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8180d88850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f8180d850f0" loc="65:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f8180d850f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f8180d85470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f8180d86060" loc="61:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f8180d86060"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f8180d863e0"/>
        <function-ref name="userId" scoped="" ref="0x7f8180d86570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f8180260020" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f8180260020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f81802603a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f8180260630" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f8180260630"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f81802609b0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f8180260b40"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f8180260cd0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f8180260e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f818025d6c0" loc="99:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f818025d6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f818025da60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f818025dbf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f818025b9d0" loc="105:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f818025b9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f818025bd70"/>
        <function-ref name="configure" scoped="" ref="0x7f8180259020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f81802592b0" loc="106:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f81802592b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f8180259630"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f81802597c0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f8180259950"/>
        <function-ref name="dequeue" scoped="" ref="0x7f8180259ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f818025de40" loc="100:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f818025de40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f818025c1e0"/>
        <function-ref name="requested" scoped="" ref="0x7f818025c370"/>
        <function-ref name="granted" scoped="" ref="0x7f818025c500"/>
        <function-ref name="isOwner" scoped="" ref="0x7f818025c690"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f818025c820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f8180259d30" loc="107:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f8180259d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f81802580e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f8180258270"/>
        <function-ref name="led1On" scoped="" ref="0x7f8180258400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f8180258590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f8180258720"/>
        <function-ref name="get" scoped="" ref="0x7f81802588b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f8180258a40"/>
        <function-ref name="led0On" scoped="" ref="0x7f81802571b0"/>
        <function-ref name="set" scoped="" ref="0x7f8180258d60"/>
        <function-ref name="led2On" scoped="" ref="0x7f8180258bd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f8180257020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f818025e850" loc="98:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f818025e850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f818025ebf0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f818025ed80"/>
        <function-ref name="request" scoped="" ref="0x7f818025d020"/>
        <function-ref name="granted" scoped="" ref="0x7f818025d1b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f818025d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f818025b2d0" loc="104:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f818025b2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f818025b650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f818025ca70" loc="101:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f818025ca70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f818025cdf0"/>
        <function-ref name="userId" scoped="" ref="0x7f818025b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f8180257480" loc="155:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f8180257480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f8180257800"/>
        <function-ref name="runTask" scoped="" ref="0x7f8180257990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f8180d81780" loc="72:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f8180d81780"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f8180d81b00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f8180d81d50" loc="73:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f8180d81d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8180d6a100"/>
        <function-ref name="requested" scoped="" ref="0x7f8180d6a290"/>
        <function-ref name="granted" scoped="" ref="0x7f8180d6a420"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8180d6a5b0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f8180d6a740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7f8180d81020" loc="70:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f8180d81020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f8180d813a0"/>
        <function-ref name="stop" scoped="" ref="0x7f8180d81530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f8180d6a990" loc="74:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f8180d6a990"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f8180d6ad10"/>
        <function-ref name="userId" scoped="" ref="0x7f8180d69020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f8180223e00" loc="62:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f8180223e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f81802221c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f8180222410" loc="63:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f8180222410"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8180222790"/>
        <function-ref name="requested" scoped="" ref="0x7f8180222920"/>
        <function-ref name="granted" scoped="" ref="0x7f8180222ab0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8180222c40"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f8180222dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7f81802236a0" loc="60:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f81802236a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f8180223a20"/>
        <function-ref name="stop" scoped="" ref="0x7f8180223bb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f8180220060" loc="64:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f8180220060"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f81802203e0"/>
        <function-ref name="userId" scoped="" ref="0x7f8180220570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7f8180d4a8e0" loc="3:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f8180d4a8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f8180d4ac60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f8180d49020" loc="4:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f8180d49020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f8180d493a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f8180d49530"/>
        <function-ref name="request" scoped="" ref="0x7f8180d496c0"/>
        <function-ref name="granted" scoped="" ref="0x7f8180d49850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f8180d499e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f8180d4a080" loc="2:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f8180d4a080"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f8180d4a400"/>
        <function-ref name="stop" scoped="" ref="0x7f8180d4a590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7f8180d38a30" loc="47:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x7f8180d38a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f8180d38db0"/>
        <function-ref name="offset" scoped="" ref="0x7f8180d34020"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f8180d341b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f8180d25060" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="BaseStationC.TimerTramaTDMA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f8180d25060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f8180d22630"/>
        <function-ref name="fired" scoped="" ref="0x7f8180d24ac0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f8180d23920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f8180d234a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f8180d20020"/>
        <function-ref name="gett0" scoped="" ref="0x7f8180d22ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f8180d23020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f8180d25c50"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f8180d22020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f8180d24170"/>
        <function-ref name="stop" scoped="" ref="0x7f8180d24640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f8180d1fb00" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="BaseStationC.TimerLeds"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f8180d1fb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f818248e4d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f818248e840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f8180d1a110"/>
        <function-ref name="fired" scoped="" ref="0x7f8180d1d5b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f8180d1c4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f8180d1c020"/>
        <function-ref name="getdt" scoped="" ref="0x7f8180d1aa10"/>
        <function-ref name="gett0" scoped="" ref="0x7f8180d1a590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f8180d1da30"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f8180d1e750"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f8180d1cab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f8180d1ec20"/>
        <function-ref name="stop" scoped="" ref="0x7f8180d1d130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f8180c8d020" loc="49:../../../tos/system/AMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f8180c8d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8180c8d3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8180c8d530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f8180c8d6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f8180c8d850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8180c8d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f8180c8dc30" loc="50:../../../tos/system/AMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f8180c8dc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8180c8c020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f8180c8c1b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8180c8c340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f8180c8c4d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f8180c8c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f8180c8c8b0" loc="51:../../../tos/system/AMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f8180c8c8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f8180c8cc30"/>
        <function-ref name="source" scoped="" ref="0x7f8180c8cdc0"/>
        <function-ref name="address" scoped="" ref="0x7f8180c8a020"/>
        <function-ref name="destination" scoped="" ref="0x7f8180c8a1b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f8180c8a340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f8180c8a4d0"/>
        <function-ref name="type" scoped="" ref="0x7f8180c8a660"/>
        <function-ref name="setType" scoped="" ref="0x7f8180c8a7f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f8180c8a980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f8180c8ab10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f8180c8aca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f8180c89020" loc="52:../../../tos/system/AMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f8180c89020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f8180c893a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f8180c89530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f8180c896c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f818020e920" loc="49:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f818020e920"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f818020eca0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f818020ee30"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f818020d020"/>
        <function-ref name="cancel" scoped="" ref="0x7f818020d1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f818020d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f818020d590" loc="50:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f818020d590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f818020d910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f818020daa0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f818020dc30"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f818020ddc0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f818020c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f818020c270" loc="51:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f818020c270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f818020c5f0"/>
        <function-ref name="source" scoped="" ref="0x7f818020c780"/>
        <function-ref name="address" scoped="" ref="0x7f818020c910"/>
        <function-ref name="destination" scoped="" ref="0x7f818020caa0"/>
        <function-ref name="setSource" scoped="" ref="0x7f818020cc30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f818020cdc0"/>
        <function-ref name="type" scoped="" ref="0x7f818020b020"/>
        <function-ref name="setType" scoped="" ref="0x7f818020b1b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f818020b340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f818020b4d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f818020b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f818020b8f0" loc="52:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="BaseStationC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f818020b8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f818020bc70"/>
        <function-ref name="noAck" scoped="" ref="0x7f818020be00"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f818020a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f8180201390" loc="44:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="BaseStationC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f8180201390"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8180201710"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81802018a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f8180201a30"/>
        <function-ref name="cancel" scoped="" ref="0x7f8180201bc0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8180201d50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f81801ff060" loc="46:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="BaseStationC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f81801ff060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f81801ff3e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f81801ff570"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f81801ff700"/>
        <function-ref name="cancel" scoped="" ref="0x7f81801ff890"/>
        <function-ref name="sendDone" scoped="" ref="0x7f81801ffa20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f81801ffc70" loc="47:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="BaseStationC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f81801ffc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f81801fe020"/>
        <function-ref name="source" scoped="" ref="0x7f81801fe1b0"/>
        <function-ref name="address" scoped="" ref="0x7f81801fe340"/>
        <function-ref name="destination" scoped="" ref="0x7f81801fe4d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f81801fe660"/>
        <function-ref name="setDestination" scoped="" ref="0x7f81801fe7f0"/>
        <function-ref name="type" scoped="" ref="0x7f81801fe980"/>
        <function-ref name="setType" scoped="" ref="0x7f81801feb10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f81801feca0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f81801fee30"/>
        <function-ref name="localGroup" scoped="" ref="0x7f81801fd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f8180cf4930" loc="43:../../../tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f8180cf4930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8180cf4cb0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8180cf4e40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f8180cf1020"/>
        <function-ref name="cancel" scoped="" ref="0x7f8180cf11b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8180cf1340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f8180ca1400" loc="51:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f8180ca1400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8180ca17a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8180ca1930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f8180ca1ac0"/>
        <function-ref name="cancel" scoped="" ref="0x7f8180ca1c50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8180ca1de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f8180ca4df0" loc="47:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f8180ca4df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f8180ca21c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8180ca2350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f8180ca24e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f8180ca2670"/>
        <function-ref name="sendDone" scoped="" ref="0x7f8180ca2800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f8180c9f720" loc="53:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f8180c9f720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8180c9faa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f8180c9fc30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8180c9fdc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f8180c9e020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f8180c9e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBusy" ref="0x7f8180ca2b80" loc="48:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBusy" scoped="" ref="0x7f8180ca2b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBusy"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="busy" scoped="" ref="0x7f8180ca1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f8180c9e480" loc="184:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="errorTask" scoped="" ref="0x7f8180c9e480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f8180c9e800"/>
        <function-ref name="runTask" scoped="" ref="0x7f8180c9e990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f8180c9ec60" loc="140:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CancelTask" scoped="" ref="0x7f8180c9ec60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f8180c9d020"/>
        <function-ref name="runTask" scoped="" ref="0x7f8180c9d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f8180ca0060" loc="52:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f8180ca0060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f8180ca03e0"/>
        <function-ref name="source" scoped="" ref="0x7f8180ca0570"/>
        <function-ref name="address" scoped="" ref="0x7f8180ca0700"/>
        <function-ref name="destination" scoped="" ref="0x7f8180ca0890"/>
        <function-ref name="setSource" scoped="" ref="0x7f8180ca0a20"/>
        <function-ref name="setDestination" scoped="" ref="0x7f8180ca0bb0"/>
        <function-ref name="type" scoped="" ref="0x7f8180ca0d40"/>
        <function-ref name="setType" scoped="" ref="0x7f8180c9f020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f8180c9f1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f8180c9f340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f8180c9f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f8180c80020" loc="46:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="BaseStationC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f8180c80020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f8180c803a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f8180c80530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f8180c806c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f8180c80850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f8180c809e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f8180c86910" loc="45:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="BaseStationC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f8180c86910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f8180c86c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f8180c80c30" loc="47:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="BaseStationC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f8180c80c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f8180c7f020"/>
        <function-ref name="source" scoped="" ref="0x7f8180c7f1b0"/>
        <function-ref name="address" scoped="" ref="0x7f8180c7f340"/>
        <function-ref name="destination" scoped="" ref="0x7f8180c7f4d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f8180c7f660"/>
        <function-ref name="setDestination" scoped="" ref="0x7f8180c7f7f0"/>
        <function-ref name="type" scoped="" ref="0x7f8180c7f980"/>
        <function-ref name="setType" scoped="" ref="0x7f8180c7fb10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f8180c7fca0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f8180c7fe30"/>
        <function-ref name="localGroup" scoped="" ref="0x7f8180c7e020"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f81825bfc60" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f81825c0770" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Platform" loc="51:../../../tos/interfaces/Platform.nc">
      <function command="" provided="0" name="jiffiesRawSize" ref="0x7f81825b4d50" loc="109:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="node_id" ref="0x7f81825b0c00" loc="182:../../../tos/interfaces/Platform.nc">
        <documentation loc="164:../../../tos/interfaces/Platform.nc">
          <short>&#10; Platform dependent node id.</short>
          <long>&#10; Platform dependent node id.&#10;&#10; Get a Platform defined node id.  This will typically be a serial number&#10; or mac address.&#10;&#10; Platform define PLATFORM_SERIAL_NUM_SIZE determines the&#10; size.  If not defined defaults to 4 bytes (uint32_t).  But platforms&#10; really should define it to be clear.  (see platform.h)&#10;&#10; input:  *lenp      pointer where to place the length of the number.&#10;&#10; output: *lenp      length filled in if non-null.&#10; return: *uint8_t   pointer to the serial_num or NULL.&#10;&#10; a Node Id is assumed to be a sequence of bytes starting with the&#10; msb first.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lenp" ref="0x7f81825b0940" loc="182:../../../tos/interfaces/Platform.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRawSize" ref="0x7f81825b5030" loc="79:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRaw" ref="0x7f81825b6870" loc="78:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesExpired" ref="0x7f81825b2b40" loc="126:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f81825b2550" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f81825b28b0" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIntPriority" ref="0x7f81825b0020" loc="162:../../../tos/interfaces/Platform.nc">
        <documentation loc="153:../../../tos/interfaces/Platform.nc">
          <short>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.</short>
          <long>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.&#10;   modern computer hardware allows the assignment of different priorities&#10;   to interrupt sources.  This is inherently a platform thing.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="irq_number" ref="0x7f81825b1cd0" loc="162:../../../tos/interfaces/Platform.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set_unaligned_traps" ref="0x7f81825b15a0" loc="150:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on_off" ref="0x7f81825b1320" loc="150:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesRaw" ref="0x7f81825b45b0" loc="108:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="localTime" ref="0x7f81825b60e0" loc="64:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsExpired" ref="0x7f81825b5dd0" loc="95:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f81825b57e0" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f81825b5b40" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f8182572b40" loc="48:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f8182575de0" loc="43:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f8182572420" loc="47:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f8182575700" loc="42:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f81825735a0" loc="45:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f81825788f0" loc="40:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f8182575020" loc="41:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f8182573cc0" loc="46:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f81826e07e0" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f81829a8700"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f8182606a80" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f81826041f0" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f81826062b0" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f818277e020" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f818311ee80" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f8182a66e20" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f8182a66610" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f8182a5a770" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event.&#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f8182a58020" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f81825035c0" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f8182503340" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f8182502ab0" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f8182502830" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f8182504920" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f8182503e10" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f81824b0060" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
              <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81824b26e0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f81824b2a30" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f81824b2d60" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f81824ad110" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81824ffe20" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f81824ab2a0" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81824ab020" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f81824a9620" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81824a9020" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f81824a9350" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f81824a86d0" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f81824aa730" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81824aa170" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f81824aa4a0" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <function command="" provided="0" name="send" ref="0x7f81824bb2c0" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f81825135f0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f81824bd7e0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f81825135f0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f81824bdb60" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f81824bb020" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f81824b7970" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81824b7370" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f81824b76a0" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f81824b6a60" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f81824ba630" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81824ba3b0" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f81824b8b80" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81824b85a0" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f81824b88f0" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f818248ddd0" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f818248ddd0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f8182485c10" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f8182489420" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f81824872b0" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f8182488bd0" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f8182487020" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f8182488420" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f8182484c60" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f81824843e0" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f8182489c00" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f818248c970" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f818248c6f0" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f81824852b0" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f8182487c50" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f8182485020" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f818248a4d0" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f818248a250" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f818248acd0" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f8182475570" loc="61:../../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f8182475d20" loc="67:../../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f8182473540" loc="72:../../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f81824724d0" loc="83:../../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f8182471c20" loc="100:../../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f8182470480" loc="117:../../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f8182473cd0" loc="77:../../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f818246e020" loc="134:../../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f8182470d70" loc="134:../../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f8182476db0" loc="56:../../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f8182472cb0" loc="89:../../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f8182471470" loc="94:../../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f81824972a0" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f8182513210"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f8182497020" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f81824a1d60" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f81825135f0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f81824a1ae0" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f81824a41f0" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f81825135f0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f81824a4cb0" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f81825135f0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f81824a4a30" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f818249e7a0" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f81825135f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f818249e1c0" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f818249e510" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f81825135f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f81824a02b0" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f81825135f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f81824a2c40" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f81824a0020" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f81825135f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f818249bbf0" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f818249b970" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f818249d020" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f81824999a0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f8182499cc0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f8182514de0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f818249c9f0" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f818249c770" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f8182496730" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f8182513210"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f8182496150" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f81824964a0" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f8182513210"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f8182495580" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f8182513210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f81823d90e0" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f81823d9810" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f81823da270" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f81823d8760" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f81823da970" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f81823d8020" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f81823dc440" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f81823dcb10" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f81823ae070" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f81823ae7c0" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f81823a92e0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f81823a9060" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullUp" ref="0x7f81823a8d30" loc="126:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f81823b0870" loc="59:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f81823ad780" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f81823a6520" loc="134:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="129:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDriveStrength" ref="0x7f81823a5020" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="136:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short> &#10; Set port drive strength.</short>
          <long> &#10; Set port drive strength.&#10; @param mode: MSP430_PORT_DRIVE_STRENGTH_*&#10; @return EINVAL if invalid mode or pin doesn't support drive&#10;     strength config.&#10; FAIL if pin is not an output&#10; SUCCESS if pin supports it, is an output, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f81823a6d70" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f81823ad020" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f81823af870" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getDriveStrength" ref="0x7f81823a5910" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get drive strength.</short>
          <long>&#10; Get drive strength.&#10; @return MSP430_PORT_DRIVE_STRENGTH_*&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f81823aa020" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullDown" ref="0x7f81823a85f0" loc="125:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f81823af070" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorOff" ref="0x7f81823a9b80" loc="124:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; set resistor mode directly.</short>
          <long>&#10; set resistor mode directly.&#10;&#10; You have to know what you are doing when you use these.  These routines&#10; assume that the port is set for input (PxDIR).  The routines explicitly&#10; change the value of the bits setting in PxOUT.&#10;&#10; The advantage of using these routines is efficiency because there is no&#10; mode checking.  In addition, no error check is done to make sure that the&#10; port is in input mode.  The thing is, first, this is something that you&#10; get right once and then it doesn't change so why check and, second no&#10; one actually checks the error return because there really isn't any&#10; point to doing the check because this isn't something you actually need&#10; to check the return code for.  So why have one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f81823b49c0" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="46:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f81823ab020" loc="91:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f81823aa7c0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f81823ab7e0" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f81823b0120" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f81820ff020" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f81820ff020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f81820ff260" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f81820ff260"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x7f81820fc0b0" loc="63:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f81820ff260"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820fde00" loc="63:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7f81820fb2a0" loc="70:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820fb020" loc="70:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x7f81820ffe20" loc="49:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820ffba0" loc="49:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f81820f9610" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f81820ff260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820f9020" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f81820f9380" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f81820ff260"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x7f81820ee680" loc="65:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820ee060" loc="65:../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x7f81820ee3f0" loc="65:../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x7f81820ed850" loc="71:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820ed5d0" loc="71:../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x7f81820ef810" loc="57:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x7f81820f2d60" loc="52:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x7f81820f2ae0" loc="52:../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f81821042e0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f8182104060" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f8182103510" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f8182103290" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f8182101680" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f8182101400" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioBackoff" loc="54:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <short>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.</short>
        <long>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.  &#10; &#10; This is because of fan-out issues with multiple components wanting to&#10; affect backoffs for whatever they're interested in:&#10; If you signal out an *event* to request an initial backoff and&#10; several components happen to be listening, then those components&#10; would be required to return a backoff value.  We don't want that&#10; behavior.&#10; With this strategy, components can listen for the requests and then&#10; decide if they want to affect the behavior.  If the component wants to&#10; affect the behavior, it calls back using the setXYZBackoff(..) command.&#10; If several components call back, then the last component to get its &#10; word in has the final say. &#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="requestCca" ref="0x7f81820c4520" loc="95:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="90:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on whether or not to use CCA on the outbound packet.</short>
          <long>&#10; Request for input on whether or not to use CCA on the outbound packet.&#10; Replies should come in the form of setCca(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820c42a0" loc="95:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestInitialBackoff" ref="0x7f81820c7780" loc="81:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="76:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; </short>
          <long>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820c7500" loc="81:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCongestionBackoff" ref="0x7f81820c9e70" loc="66:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="62:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestCongestionBackoff event&#10; </short>
          <long>&#10; Must be called within a requestCongestionBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f81820c9bf0" loc="66:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInitialBackoff" ref="0x7f81820c9350" loc="60:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="56:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestInitialBackoff event&#10; </short>
          <long>&#10; Must be called within a requestInitialBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f81820c90d0" loc="60:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCca" ref="0x7f81820c88d0" loc="73:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="68:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Enable CCA for the outbound packet.</short>
          <long>&#10; Enable CCA for the outbound packet.  Must be called within a requestCca&#10; event&#10; @param ccaOn TRUE to enable CCA, which is the default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ccaOn" ref="0x7f81820c8650" loc="73:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestCongestionBackoff" ref="0x7f81820c5690" loc="88:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="83:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; </short>
          <long>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820c5410" loc="88:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x7f81820b8e60" loc="59:../../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f81825135f0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7f81820b8850" loc="59:../../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f81825135f0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f81820b8bd0" loc="59:../../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Packet" loc="40:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <function command="" provided="0" name="setPower" ref="0x7f81820d3120" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="49:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Set transmission power for a given packet.</short>
          <long>&#10; Set transmission power for a given packet. Valid ranges are&#10; between 0 and 31.&#10;&#10; @param p_msg the message.&#10; @param power transmission power.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f81820d4ae0" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="power" ref="0x7f81820d4e30" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setNetwork" ref="0x7f81820cf710" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f81820cf110" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="networkId" ref="0x7f81820cf480" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRssi" ref="0x7f81820d3c00" loc="64:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="58:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get rssi value for a given packet.</short>
          <long>&#10; Get rssi value for a given packet. For received packets, it is&#10; the received signal strength when receiving that packet. For sent&#10; packets, it is the received signal strength of the ack if an ack&#10; was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="signed char" size="I:1" alignment="I:1">
            <typename><typedef-ref name="int8_t" ref="0x7f8183112110"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f81820d3980" loc="64:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNetwork" ref="0x7f81820d0620" loc="75:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f81820d03a0" loc="75:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPower" ref="0x7f81820d42e0" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="42:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get transmission power setting for current packet.</short>
          <long>&#10; Get transmission power setting for current packet.&#10;&#10; @param the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f81820d4060" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLqi" ref="0x7f81820d2760" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="66:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get lqi value for a given packet.</short>
          <long>&#10; Get lqi value for a given packet. For received packets, it is the&#10; link quality indicator value when receiving that packet. For sent&#10; packets, it is the link quality indicator value of the ack if an&#10; ack was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f81820d24e0" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x7f81820bc6c0" loc="65:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820bc440" loc="65:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x7f81820c0790" loc="46:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820c0170" loc="46:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x7f81820c0500" loc="46:../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x7f81820be680" loc="59:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820be400" loc="59:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x7f81820bfb90" loc="53:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820bf570" loc="53:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x7f81820bf900" loc="53:../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x7f81820bb6c0" loc="71:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820bb440" loc="71:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x7f81820cc2a0" loc="47:../../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820cc020" loc="47:../../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f81820ab2b0" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820b2c40" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f81820ab020" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f81820a7890" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820a7290" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f81820a75c0" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f81820a69b0" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f81820a95f0" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820a9370" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f81820a8ac0" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81820a84e0" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f81820a8830" loc="100:../../../tos/interfaces/Send.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f81820ae120" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.&#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource&#10;&#10; @note This command should never be called between putting in a request&#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event,&#10;       we have opted to keep thing simple and warn you about the potential&#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f81820b0120" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f81820b1770" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f81820b0910" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f81820aeb70" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Transmit" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <short>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f81820853a0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send a message&#10;&#10; </short>
          <long>&#10; Send a message&#10;&#10; @param p_msg message to send.&#10; @param useCca TRUE if this Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f8182089dc0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="useCca" ref="0x7f8182085110" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f81820846a0" loc="65:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="60:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Cancel sending of the message.</short>
          <long>&#10; Cancel sending of the message.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="modify" ref="0x7f8182081e70" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="75:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Modify the contents of a packet.</short>
          <long>&#10; Modify the contents of a packet. This command can only be used&#10; when an SFD capture event for the sending packet is signalled.&#10;&#10; @param offset in the message to start modifying.&#10; @param buf to data to write&#10; @param len of bytes to write&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f8182081060" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f81820818a0" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f8182081bd0" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f8182083840" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="67:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Signal that a message has been sent&#10;&#10; </short>
          <long>&#10; Signal that a message has been sent&#10;&#10; @param p_msg message to send.&#10; @param error notifaction of how the operation went.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f8182083260" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f81820835b0" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resend" ref="0x7f8182085e30" loc="58:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send the previous message again&#10; </short>
          <long>&#10; Send the previous message again&#10; @param useCca TRUE if this re-Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="useCca" ref="0x7f8182085bb0" loc="58:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../../tos/interfaces/Random.nc">
      <documentation loc="34:../../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7f818207d0e0" loc="52:../../../tos/interfaces/Random.nc">
        <documentation loc="48:../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 16-bit pseudorandom number.</short>
          <long> &#10; Produces a 16-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7f8182086870" loc="46:../../../tos/interfaces/Random.nc">
        <documentation loc="42:../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f8182090a40" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f8182088270" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420PacketBody" loc="37:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <short>&#10; Internal interface for the CC2420 to get portions of a packet.</short>
        <long>&#10; Internal interface for the CC2420 to get portions of a packet.&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="getPayload" ref="0x7f81820772e0" loc="49:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="45:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the payload region of the message, after any headers&#10;    works with extended addressing mode&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f8182077020" loc="49:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getHeader" ref="0x7f8182079710" loc="42:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="39:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_header_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_header" ref="0x7f81824fdde0"/>
              <typename><typedef-ref name="cc2420_header_t" ref="0x7f81824fb7d0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f8182079410" loc="42:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMetadata" ref="0x7f8182076620" loc="53:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="50:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_metadata_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_metadata" ref="0x7f81824f93b0"/>
              <typename><typedef-ref name="cc2420_metadata_t" ref="0x7f81824f8c60"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f8182076320" loc="53:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Power" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio power operations (e.g. voltage&#10; regulator, oscillator, etc). However, it does not include&#10; transmission power, see the CC2420Config interface.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="startOscillator" ref="0x7f818208d6e0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="65:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the oscillator.</short>
          <long>&#10; Start the oscillator. On SUCCESS, &#60;code>startOscillator&#60;/code>&#10; will be signalled when the oscillator has been started.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rfOff" ref="0x7f818208b840" loc="97:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="92:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Disable RX.</short>
          <long>&#10; Disable RX.&#10;&#10; @return SUCCESS if receive mode has been disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxOn" ref="0x7f818208b070" loc="90:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="85:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Enable RX.</short>
          <long>&#10; Enable RX.&#10;&#10; @return SUCCESS if receive mode has been enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startVReg" ref="0x7f8182092e20" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the voltage regulator on the CC2420.</short>
          <long>&#10; Start the voltage regulator on the CC2420. On SUCCESS,&#10; &#60;code>startVReg()&#60;/code> will be signalled when the voltage&#10; regulator is fully on.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopVReg" ref="0x7f818208fe80" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="58:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the voltage regulator immediately.</short>
          <long>&#10; Stop the voltage regulator immediately.&#10;&#10; @return SUCCESS always&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startOscillatorDone" ref="0x7f818208c020" loc="76:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="73:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the oscillator has been started.</short>
          <long>&#10; Signals that the oscillator has been started.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopOscillator" ref="0x7f818208c840" loc="83:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="78:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the oscillator.</short>
          <long>&#10; Stop the oscillator.&#10;&#10; @return SUCCESS if the oscillator was stopped, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startVRegDone" ref="0x7f818208f6c0" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the voltage regulator has been started.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="State" loc="38:../../../tos/interfaces/State.nc">
      <documentation loc="33:../../../tos/interfaces/State.nc">
        <short>&#10; State machine interface&#10; </short>
        <long>&#10; State machine interface&#10; @author David Moss - dmm@rincon.com&#10;</long>
      </documentation>
      <function command="" provided="0" name="getState" ref="0x7f8182071d00" loc="71:../../../tos/interfaces/State.nc">
        <documentation loc="68:../../../tos/interfaces/State.nc">
          <short>&#10; Get the current state&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toIdle" ref="0x7f8182072350" loc="56:../../../tos/interfaces/State.nc">
        <documentation loc="53:../../../tos/interfaces/State.nc">
          <short>&#10; Set the current state back to S_IDLE&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isState" ref="0x7f8182071530" loc="66:../../../tos/interfaces/State.nc">
        <documentation loc="63:../../../tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in the given state&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="myState" ref="0x7f81820712b0" loc="66:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isIdle" ref="0x7f8182072ac0" loc="61:../../../tos/interfaces/State.nc">
        <documentation loc="58:../../../tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in S_IDLE&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requestState" ref="0x7f8182073020" loc="45:../../../tos/interfaces/State.nc">
        <documentation loc="40:../../../tos/interfaces/State.nc">
          <short>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.</short>
          <long>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.&#10; @return SUCCESS if the state is change, FAIL if it isn't&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7f818207bc90" loc="45:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="forceState" ref="0x7f8182073ad0" loc="51:../../../tos/interfaces/State.nc">
        <documentation loc="47:../../../tos/interfaces/State.nc">
          <short>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.</short>
          <long>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7f8182073850" loc="51:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Config" loc="46:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio configurations. All get() and set()&#10; commands are single-phase. After setting some values, a call to&#10; sync() is required for the changes to propagate to the cc2420&#10; hardware chip. This interface allows setting multiple parameters&#10; before calling sync().&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/06/16 15:33:32 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="setAutoAck" ref="0x7f8182015870" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="100:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync must be called for acknowledgement changes to take effect&#10; </short>
          <long>&#10; Sync must be called for acknowledgement changes to take effect&#10; @param enableAutoAck TRUE to enable auto acknowledgements&#10; @param hwAutoAck TRUE to default to hardware auto acks, FALSE to&#10;     default to software auto acknowledgements&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAutoAck" ref="0x7f8182015290" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </variable>
          <variable name="hwAutoAck" ref="0x7f81820155e0" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAddressRecognitionEnabled" ref="0x7f81820161f0" loc="93:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="90:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddressRecognition" ref="0x7f8182017880" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="81:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @param enableAddressRecognition TRUE to turn address recognition on&#10; @param useHwAddressRecognition TRUE to perform address recognition first&#10;     in hardware. This doesn't affect software address recognition. The&#10;     driver must sync with the chip after changing this value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAddressRecognition" ref="0x7f8182017210" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </variable>
          <variable name="useHwAddressRecognition" ref="0x7f81820175f0" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="syncDone" ref="0x7f818201dc10" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f818201d990" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAddressRecognitionDefault" ref="0x7f8182016a70" loc="98:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="95:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is performed first in hardware.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShortAddr" ref="0x7f8182019730" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f81820194b0" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f818201cd30" loc="61:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f818201cab0" loc="61:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAutoAckEnabled" ref="0x7f8182013ae0" loc="117:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="114:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if auto acks are enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPanAddr" ref="0x7f81820189c0" loc="78:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f8182018740" loc="78:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAutoAckDefault" ref="0x7f81820132b0" loc="112:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="108:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if hardware auto acks are the default, FALSE if software&#10;     acks are the default&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getExtAddr" ref="0x7f818201b4d0" loc="66:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="63:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Get the long address of the radio: set in hardware&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7f81820f1ac0"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7f81820e8240"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShortAddr" ref="0x7f818201bcc0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="68:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the short address of the radio.</short>
          <long>&#10; Change the short address of the radio.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sync" ref="0x7f818201d1f0" loc="54:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="48:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync configuration changes with the radio hardware.</short>
          <long>&#10; Sync configuration changes with the radio hardware. This only&#10; applies to set commands below.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f818201c390" loc="60:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the channel of the radio, between 11 and 26&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPanAddr" ref="0x7f8182018020" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="74:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the PAN address of the radio.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../../tos/interfaces/Read.nc">
      <documentation loc="33:../../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10;&#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f81820114a0" loc="49:../../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f81820114a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7f8182011d60" loc="55:../../../tos/interfaces/Read.nc">
        <documentation loc="50:../../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10;&#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f818200eac0" loc="63:../../../tos/interfaces/Read.nc">
        <documentation loc="57:../../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f81820114a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f818200e510" loc="63:../../../tos/interfaces/Read.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </variable>
          <variable name="val" ref="0x7f818200e830" loc="63:../../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f81820114a0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Register" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
      <documentation loc="33:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <short>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio.</short>
        <long>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio. The return values (when appropriate) refer to the&#10; status byte returned on the CC2420 SO pin. A full list of RW&#10; registers can be found on page 61 of the CC2420 datasheet (rev&#10; 1.2). Page 25 of the same document describes the protocol for&#10; interacting with these registers over the CC2420 SPI bus.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f8181fe4c10" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="49:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Read a 16-bit data word from the register.</short>
          <long>&#10; Read a 16-bit data word from the register.&#10;&#10; @param data pointer to place the register value.&#10; @return status byte from the read.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f81824fe020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f8181fe4990" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f8181fe3710" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Write a 16-bit data word to the register.</short>
          <long>&#10; Write a 16-bit data word to the register.&#10; &#10; @param data value to write to register.&#10; @return status byte from the write.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f81824fe020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f8181fe3490" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalIeeeEui64" loc="43:../../../tos/interfaces/LocalIeeeEui64.nc">
      <documentation loc="39:../../../tos/interfaces/LocalIeeeEui64.nc">
        <short>&#10; Interface to read the 64-bit IEEE EUI.</short>
        <long>&#10; Interface to read the 64-bit IEEE EUI.&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="getId" ref="0x7f8182004c50" loc="48:../../../tos/interfaces/LocalIeeeEui64.nc">
        <documentation loc="44:../../../tos/interfaces/LocalIeeeEui64.nc">
          <short>&#10; Get the 64-bit IEEE EUI.</short>
          <long>&#10; Get the 64-bit IEEE EUI.&#10; @returns the 64-bit IEEE EUI type, defined in tos/types/IeeeEui64.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalIeeeEui64"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7f81820f1ac0"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7f81820e8240"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f8181fff020" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f8181fff020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f8181fff260" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f8181fff260"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f8181ffce00" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f8181fff260"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f8181ffee40" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f8181ffc460" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f8181fff260"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f8181fff260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f8181ffde60" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f8181fff260"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f8181ffc1d0" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f8181fff260"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f8181ffd640" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f8181ffa620" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f8181fff260"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f8181fffdc0" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f8181fff260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f8181fffb40" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f8181fff260"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f8181ffe680" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x7f8181fec560" loc="50:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f81825135f0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x7f8181feb4f0" loc="60:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x7f8181fecd40" loc="55:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f8182513210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x7f8181feecd0" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f8182513210"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f81825135f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x7f8181fee6f0" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f8182513210"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7f8181feea40" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f81825135f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Strobe" loc="44:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
      <documentation loc="33:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <short>&#10; Interface representing one of the CC2420 command strobe registers.</short>
        <long>&#10; Interface representing one of the CC2420 command strobe registers.&#10; Writing to one of these registers enacts a command on the CC2420,&#10; such as power-up, transmission, or clear a FIFO.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="strobe" ref="0x7f8181fdfe40" loc="53:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <documentation loc="46:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
          <short>&#10; Send a command strobe to the register.</short>
          <long>&#10; Send a command strobe to the register. The return value is the&#10; CC2420 status register. Table 5 on page 27 of the CC2420&#10; datasheet (v1.2) describes the contents of this register.&#10; &#10; @return Status byte from the CC2420.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Strobe"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f81824fe020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Ram" loc="41:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <short>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f8181fe9e80" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="43:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Read data from a RAM.</short>
          <long>&#10; Read data from a RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f81824fe020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f8181fe9020" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f8181fe9890" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f8181fe9be0" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f8181fe6610" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="54:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Write data to RAM.</short>
          <long>&#10; Write data to RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f81824fe020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f8181fe8770" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f8181fe6020" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f8181fe6370" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="43:../../../tos/interfaces/GpioInterrupt.nc">
      <documentation loc="34:../../../tos/interfaces/GpioInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.5 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f8181ff0c30" loc="68:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="63:../../../tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f8181ff0470" loc="61:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="56:../../../tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; </short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0x7f8181ff1ce0" loc="54:../../../tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0x7f8181ff1420" loc="53:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:../../../tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f8181f25560" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f8181f24020" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f8181f25c60" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f8181f24a00" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f8181f24780" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f8181f23410" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f8181f23190" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f8181f23b00" loc="46:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f8181f323e0" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f8181f31c60" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f8181f319e0" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f8181f32b10" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f8181f36650" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f8181f31270" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f8181f35570" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f8181f34cc0" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f8181f36de0" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f8181f35c80" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f8181f345c0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f8181f34340" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f8181f306a0" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f8181f30420" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f8181f2abc0" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10;&#10; It has a predefined idea of what mode that capture should occur in.&#10; If that doesn't work for you, use setControl.&#10;&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; @param ccis configures which input channel to use.&#10;&#10; Msp430Timer.h has convenience definitions:&#10;&#10;     MSP430TIMER_CM_NONE,            MSP430TIMER_CCI_A&#10;     MSP430TIMER_CM_RISING,          MSP430TIMER_CCI_B&#10;     MSP430TIMER_CM_FALLING,         MSP430TIMER_CCI_GND&#10;     MSP430TIMER_CM_BOTH             MSP430TIMER_CCI_VCC&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f8181f2a5f0" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
          <variable name="ccis" ref="0x7f8181f2a930" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f8181f37b60" loc="41:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f8182569550"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f8182567020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f8181f295c0" loc="76:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f8181f284d0" loc="78:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f8181f2bd30" loc="56:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short>&#10; Sets the time in compare mode.</short>
          <long>&#10; Sets the time in compare mode.&#10;&#10; setControlAsCompare has a predefined, hardcoded idea of&#10; how the control register should be set for doing a compare.&#10;&#10; Your mileage may vary and this may not work for you.   In&#10; which case you set use setControl.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f8181f29d00" loc="77:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f8181f2d350" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f8181f2dae0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f8181f2b5a0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f8182569550"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f8182567020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f8181f2b320" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f8182569550"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f8182567020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f8181f10020" loc="45:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="42:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f8181f0d6a0" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="76:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f8181f0d420" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f8181f0c2a0" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="87:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f8181f0c020" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f8181f0fc10" loc="74:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="71:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f8181f0f350" loc="69:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="59:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f8181f109d0" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f8181f10750" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f8181ee21f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f8181d93e10" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f8181d93e10"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f8181d8e070" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f8181d8e070"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f8181d8e990" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return counter value.</short>
          <long>&#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f8181d8e070"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f8181d8dad0" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f8181d8d270" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f8181d8b270" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x7f8181cbb190" loc="54:../../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f8181cba350" loc="66:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f8181cbbb30" loc="61:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f8181cbb8b0" loc="61:../../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x7f8181cbe8f0" loc="53:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Interrupt" loc="39:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
      <documentation loc="34:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f8181c955a0" loc="54:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="51:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.</short>
          <long> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f8181c92020" loc="85:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f8181c97dc0" loc="49:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="46:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Disables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Disables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0x7f8181c936d0" loc="80:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Sets whether the edge should be high to low or low to high.</short>
          <long>&#10; Sets whether the edge should be high to low or low to high.&#10;&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition.&#10;&#10; DEPRECATED.&#10;&#10; The if generates extra code that doesn't need to be there.   Replaced&#10; by edge{Rising,Falling}();&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0x7f8181c93450" loc="80:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="edgeFalling" ref="0x7f8181c94d30" loc="67:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x7f8181c97620" loc="44:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Enables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Enables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edgeRising" ref="0x7f8181c945d0" loc="66:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="63:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Sets rising or falling edge for the interrupt generation&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x7f8181c95da0" loc="61:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="56:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Gets the current input value of a port.</short>
          <long> &#10; Gets the current input value of a port.&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ChipSpiResource" loc="17:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
      <documentation loc="2:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <short>&#10; Interface for the SPI resource for an entire chip.</short>
        <long>&#10; Interface for the SPI resource for an entire chip.  The chip accesses&#10; the platform SPI resource one time, but can have multiple clients &#10; using the SPI bus on top.  When all of the clients are released, the&#10; chip will normally try to release itself from the platforms SPI bus.&#10; In some cases, this isn't desirable - so even though upper components&#10; aren't actively using the SPI bus, they can tell the chip to hold onto&#10; it so they can have immediate access when they need. &#10;&#10; Any component that aborts a release MUST attempt the release at a later&#10; time if they don't acquire and release the SPI bus naturally after the&#10; abort.&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="releasing" ref="0x7f8181b40810" loc="24:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="19:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; The SPI bus is about to be automatically released.</short>
          <long>&#10; The SPI bus is about to be automatically released.  Modules that aren't&#10; using the SPI bus but still want the SPI bus to stick around must call&#10; abortRelease() within the event.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="abortRelease" ref="0x7f8181b3f0e0" loc="31:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="27:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Abort the release of the SPI bus.</short>
          <long>&#10; Abort the release of the SPI bus.  This must be called only with the&#10; releasing() event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="attemptRelease" ref="0x7f8181b3f920" loc="39:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="33:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Release the SPI bus if there are no objections&#10; </short>
          <long>&#10; Release the SPI bus if there are no objections&#10; @return SUCCESS if the SPI bus is released from the chip.&#10;      FAIL if the SPI bus is already in use.&#10;      EBUSY if some component aborted the release.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Fifo" loc="40:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <short>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="continueRead" ref="0x7f8181b17420" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Continue reading from the FIFO without having to send the address&#10; byte again.</short>
          <long>&#10; Continue reading from the FIFO without having to send the address&#10; byte again. The &#60;code>readDone&#60;/code> event will be signalled&#10; upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f8181b19e10" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f8181b17190" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="writeDone" ref="0x7f8181b12700" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="84:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a write operation.</short>
          <long>&#10; Signals the completion of a write operation.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes written.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f8181b14d90" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f8181b12110" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f8181b12460" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f8181b14020" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="73:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start writing the FIFO.</short>
          <long>&#10; Start writing the FIFO. The &#60;code>writeDone&#60;/code> event will be&#10; signalled upon completion.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f81824fe020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f8181b15970" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f8181b15cc0" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="beginRead" ref="0x7f8181b19020" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="42:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start reading from the FIFO.</short>
          <long>&#10; Start reading from the FIFO. The &#60;code>readDone&#60;/code> event will&#10; be signalled upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f81824fe020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f8181b1a9d0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f8181b1ad20" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f8181b16b90" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="64:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a read operation.</short>
          <long>&#10; Signals the completion of a read operation.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes read.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f8181b16250" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f8181b165a0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f8181b168f0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="60:../../../tos/interfaces/SpiPacket.nc">
      <documentation loc="34:../../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both.&#10;&#10; The SPI bus both sends and receives at the same time.  So this interface&#10; can be used to send, receive, or both.  The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; This is split phase and typically is implemented using interrupts.  However&#10; as the SPI clock is increased the interrupt overhead become more onerous&#10; wrt each byte time being transfered.  See SpiBLock for a single phase&#10; transfer mechanism that doesn't have interrupt overhead issues.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f8181af7a40" loc="76:../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="62:../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f8181af70d0" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f8181af7460" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f8181af77a0" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f8181af3020" loc="88:../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="78:../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f8181af62a0" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f8181af6630" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f8181af6970" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f8181af6ce0" loc="89:../../../tos/interfaces/SpiPacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7f8181afa8f0" loc="45:../../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7f8181afa670" loc="45:../../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f8181a19b70" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f8181a164e0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430SpiConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
        <short>&#10; Interface used by Msp430Spi clients to reconfigure the SPI before use&#10; </short>
        <long>&#10; Interface used by Msp430Spi clients to reconfigure the SPI before use&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f8181a15aa0" loc="39:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
        <interfacedef-ref qname="Msp430SpiConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f8181a4b2b0"/></typename>
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f8181a4ce00"/></type-tag>
            </type-qualified>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x7f8181a146f0" loc="62:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f8181a14470" loc="62:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x7f8181a12b30" loc="74:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f8181a128b0" loc="74:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x7f8181a12020" loc="68:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f8181a115f0" loc="81:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f8181a11370" loc="81:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f8181a07020" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f8181a08750" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART. &#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information.&#10;&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7f8181a00740" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f8181a004c0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f8181a03cd0" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART.&#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information. I.e. calling &#60;code>tx&#60;/done> will transmit a byte of&#10; data in the mode (SPI or UART) the USART has been set to before.&#10;&#10; @author Vlado Handziski (handzisk@tkn.tu-berlin.de)&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f81819db7c0" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7f81819e72d0" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7f81819f4020" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f8181a67020"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f8181a67860"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f81819f7cf0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f8181a67020"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f8181a67860"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7f81819ea3b0" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7f81819f1530" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f8181a62020"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f8181a62860"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f81819f12b0" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f8181a62020"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f8181a62860"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f81819e19e0" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7f81819dd020" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7f81819f2a90" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f8181a66ec0"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7f8181a65680"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7f81819f1d20" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f8181a62020"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7f8181a62860"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7f81819edb90" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7f81819ed910" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7f81819ed1f0" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7f81819e12b0" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7f81819f22a0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f8181a66ec0"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f8181a65680"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f81819f2020" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f8181a66ec0"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f8181a65680"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7f81819ef020" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f81819df190" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7f81819efa00" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7f81819ef780" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7f81819eb480" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7f81819ebc00" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f81819e2420" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7f81819e4190" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7f81819e8350" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f81819e2b60" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7f81819e7ab0" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7f81819df8b0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f81819ec390" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f8181a6dd80"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7f8181a694d0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7f81819de070" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7f81819db020" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7f81819f0700" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7f81819f0480" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f81819da2a0" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f81819da020" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7f81819f4800" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f8181a67020"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7f8181a67860"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7f81819eab20" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f81819e6270" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7f81819e3ba0" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f8181a36b50"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f8181a36730"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f81819e3920" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f8181a36b50"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f8181a36730"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7f81819e4ca0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f8181a4b2b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f8181a4ce00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f81819e4a20" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f8181a4b2b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f8181a4ce00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f81819daac0" loc="227:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="222:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return byte received&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7f81819de860" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7f81819ecba0" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7f81819dd780" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7f81819e69e0" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7f81819e8b30" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f8181973020" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <function command="" provided="0" name="disableOwnAddress" ref="0x7f818194c9d0" loc="80:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7f818195e020" loc="31:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7f8181952620" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f81819523a0" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7f81819675b0" loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7f8181950c50" loc="71:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7f81819575e0" loc="49:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7f818195f070" loc="28:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7f818195c020" loc="34:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f8181960020" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7f8181961d30" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7f81819634b0" loc="21:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7f818195a020" loc="41:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7f8181951550" loc="66:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7f818194c270" loc="78:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7f8181954c30" loc="61:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7f8181947350" loc="91:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7f81819439d0" loc="100:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7f8181965420" loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7f818195b740" loc="38:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7f81819591f0" loc="45:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7f81819608e0" loc="27:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7f8181968350" loc="7:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7f8181954460" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f81819541e0" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7f818196cc00" loc="6:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7f81819504d0" loc="69:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7f818194b190" loc="81:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7f8181946b00" loc="94:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7f8181943270" loc="97:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7f818194eb90" loc="74:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7f818194b8c0" loc="83:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7f8181952db0" loc="65:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7f8181948390" loc="87:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7f8181965b40" loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7f81819567e0" loc="53:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7f81819497b0" loc="86:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7f818194dac0" loc="77:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7f8181959de0" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7f8181959b60" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7f81819442d0" loc="95:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7f8181955a60" loc="57:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7f818194e420" loc="72:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7f8181968e10" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f8181a234a0"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f8181a23080"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f8181968b90" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f8181a234a0"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f8181a23080"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7f818195b020" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7f8181964cb0" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f8181964a30" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7f818195a980" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f818195a700" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7f8181948b60" loc="90:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7f8181961620" loc="24:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7f8181964350" loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7f81819552a0" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7f8181955020" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7f8181967ce0" loc="12:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7f8181949020" loc="84:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7f818194d350" loc="75:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7f8181951cc0" loc="68:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7f8181956020" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7f8181957d30" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7f818195c740" loc="35:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7f818195f7b0" loc="29:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7f8181944a40" loc="96:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7f8181963e30" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f8181963bb0" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7f8181947b10" loc="92:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7f818195e750" loc="32:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7f8181946350" loc="93:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f818189e020" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f818189e880" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="38:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f8181869dc0" loc="54:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f8181867020" loc="71:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f8181869530" loc="44:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="39:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f81818686d0" loc="63:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f8181867950" loc="79:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwnerInfo" loc="2:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
      <function command="" provided="0" name="inUse" ref="0x7f8181865b20" loc="9:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
        <documentation loc="3:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
          <short>&#10; Check whether a DefaultOwner has an active client.</short>
          <long>&#10; Check whether a DefaultOwner has an active client.&#10;&#10; @return TRUE If client is active.&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f818185a4c0" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f8181863490"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f818185a240" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f8181863490"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f818185d420" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f818185c020" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f8181863490"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f818185dca0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f8181863490"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f818185c930" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f8181863490"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadId48" loc="8:../../../tos/chips/ds2411/ReadId48.nc">
      <documentation loc="4:../../../tos/chips/ds2411/ReadId48.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f81816515e0" loc="13:../../../tos/chips/ds2411/ReadId48.nc">
        <interfacedef-ref qname="ReadId48"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f8181651360" loc="13:../../../tos/chips/ds2411/ReadId48.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="OneWireReadWrite" loc="9:../../../tos/lib/onewire/OneWireReadWrite.nc">
      <documentation loc="5:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f818163eb00" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7f818163e1c0" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f818163e530" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f818163e860" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f818163d880" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f818163d2c0" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f818163d5f0" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f8181624530" loc="59:../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f8181624530"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f8181624770" loc="59:../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f8181624770"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7f81816232e0" loc="66:../../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f8181624770"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f8181623060" loc="66:../../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f8181624770"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveIndicator" loc="37:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <short>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; </short>
        <long>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="isReceiving" ref="0x7f81815bf580" loc="43:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <documentation loc="39:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the indicator is showing we are actively receiving at this&#10; level&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveIndicator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Receive" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <short>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2008-06-17 07:28:24 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f818158e9e0" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Signals that a message has been received.</short>
          <long>&#10; Signals that a message has been received.&#10;&#10; @param type of the message received.&#10; @param message pointer to message received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0x7f818158e020" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
          <variable name="message" ref="0x7f818158e750" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd_dropped" ref="0x7f818158f7f0" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="51:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that the packet has been dropped by the radio&#10; (e.g.</short>
          <long>&#10; Notification that the packet has been dropped by the radio&#10; (e.g. due to address rejection).&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd" ref="0x7f818158f020" loc="49:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that an SFD capture has occured.</short>
          <long>&#10; Notification that an SFD capture has occured.&#10;&#10; @param time at which the capture happened.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f8181592d30" loc="49:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeSyncOffset" loc="43:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
      <function command="" provided="0" name="get" ref="0x7f81815a33d0" loc="58:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="52:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns the offset of where the timesync timestamp is sotred in a&#10; CC2420 packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81815a3150" loc="58:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x7f81815a43d0" loc="50:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="45:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns TRUE if the current message should be timestamped.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81815a4150" loc="50:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f81815a0350" loc="72:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="67:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10; Cancels any pending requests to timestamp the message in MAC.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81815a00d0" loc="72:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f81815a2390" loc="65:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="60:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10;  Sets the current message to be timestamped in the MAC layer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f81815a2110" loc="65:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f818142c910" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f818142c910"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f8181429270" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f8183111920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSkew" loc="51:../../../tos/lib/timer/TimeSkew.nc">
      <documentation loc="35:../../../tos/lib/timer/TimeSkew.nc">
        <short>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.</short>
        <long>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.  Under various circumstances&#10; adjustments may be made by this underlying timing that can result&#10; in time skew.&#10;&#10; Typically this can occur when the RTC (Real Time Clock) subsystem&#10; has had its time adjusted for example via a GPS providing synchronized&#10; time.  If this skew is below a reasonable threshold (platform dependent)&#10; TimeSkew.skew(skew_val) will be signalled.  Beyond that threshold&#10; it might be better to reboot and reestablish reasonable time via&#10; those mechanisms.&#10;&#10; @author Eric B.Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function event="" provided="0" name="skew" ref="0x7f818134be80" loc="62:../../../tos/lib/timer/TimeSkew.nc">
        <documentation loc="52:../../../tos/lib/timer/TimeSkew.nc">
          <short>&#10; Signaled when the underlying timing system has detected timing&#10; skew.</short>
          <long>&#10; Signaled when the underlying timing system has detected timing&#10; skew.&#10;&#10; @param skew    estimated skew computed.  in millisecs (units platform&#10;                dependent, typically binary millisecs).&#10;                > 0, time has been moved into the future (we were slow).&#10;                &#60; 0, time has been shifted backwards, (we were fast).&#10;                = 0, skew is beyond platform limits.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSkew"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f8183112930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skew" ref="0x7f818134bc00" loc="62:../../../tos/lib/timer/TimeSkew.nc">
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f8183112930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7f81812665e0" loc="53:../../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f81812665e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7f81812632a0" loc="64:../../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f81812665e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7f8181263020" loc="64:../../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f81812665e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7f818104db00" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f818104d4f0" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7f818104d870" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7f8181053c70" loc="15:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7f818104eb60" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f818104e560" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f81824c0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f81824bd020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7f818104e8d0" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7f8181034960" loc="54:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f81810341f0" loc="49:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7f8181047c20" loc="56:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7f818103b0e0" loc="72:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7f818103ad00" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f818103aa80" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7f818103b960" loc="79:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7f818103c7e0" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f818103c560" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7f81810385b0" loc="100:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7f818103a270" loc="85:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7f8181044780" loc="71:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7f81810430e0" loc="81:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7f8181048d80" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7f8181048b00" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7f8181043c60" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f81810439e0" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7f81810418f0" loc="62:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7f81810405b0" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f8181040330" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7f818103f0b0" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f8181040e00" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f8180f0ac40" loc="48:../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f8180f0a670" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f8180f0a9b0" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f8180f04a70" loc="79:../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f8180f047f0" loc="79:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f8180f03890" loc="90:../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f8180f032c0" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f8180f03600" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f8180f06610" loc="65:../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f8180f022c0" loc="99:../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f8180f01820" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f8180f01b60" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f8180f02020" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f8180f04020" loc="72:../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f8180f08610" loc="57:../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f8180f07bd0" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f8180f08020" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f8183111520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f8180f08370" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
              <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f8180ee15b0" loc="50:../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f8180ee1330" loc="50:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7f8180ee1df0" loc="59:../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f8180ee0cf0" loc="69:../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f8180ee0700" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f8180ee0a60" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f8183111160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7f8180edeb50" loc="79:../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <short>&#10; Interface used by Msp430Uart clients to reconfigure the UART before use&#10; </short>
        <long>&#10; Interface used by Msp430Uart clients to reconfigure the UART before use&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f8180ed64c0" loc="39:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f8181a36b50"/></typename>
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f8181a36730"/></type-tag>
            </type-qualified>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f8180e48860" loc="95:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f8180e470e0" loc="105:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f8182a64020"/>
            <typename><typedef-ref name="error_t" ref="0x7f8182a5f1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:../../../tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:../../../tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x7f8180d7fce0" loc="62:../../../tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:../../../tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBusy" loc="2:../../../tos/interfaces/SendBusy.nc">
      <function command="" provided="0" name="busy" ref="0x7f8180ce81f0" loc="9:../../../tos/interfaces/SendBusy.nc">
        <documentation loc="3:../../../tos/interfaces/SendBusy.nc">
          <short>&#10; Check whether send queue entry is in use&#10;&#10; </short>
          <long>&#10; Check whether send queue entry is in use&#10;&#10; @return TRUE If client is active.&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBusy"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f8182a6a090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
