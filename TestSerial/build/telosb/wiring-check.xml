<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="69:TestSerialAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fdb52594130"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fdb52190500"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fdb52190500"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fdb5218a280"/></to>
    </wire>
    <wire loc="70:TestSerialAppC.nc">
      <from><interface-ref name="Control" scoped="" ref="0x7fdb525a2460"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fdb5218e740"/></to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fdb5218e740"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fdb520f78d0"/></to>
    </wire>
    <wire loc="71:TestSerialAppC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fdb52541790"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb5217cb20"/>
      <arguments>
        <value cst="I:137">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:TestSerialAppC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fdb525386b0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fdb5217d7f0"/>
      <arguments>
        <value cst="I:137">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:TestSerialAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fdb52597b50"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fdb525ac820"/></to>
    </wire>
    <wire loc="51:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fdb525ac820"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fdb524fb020"/></to>
    </wire>
    <wire loc="74:TestSerialAppC.nc">
      <from><interface-ref name="MilliTimer" scoped="" ref="0x7fdb52542020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51b56980"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb51b56980"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fdb51b4db60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:TestSerialAppC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fdb525207a0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fdb5217a2b0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fdb5217a2b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fdb520fea40"/></to>
    </wire>
    <wire loc="53:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fdb524d2c40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb524f99c0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fdb524f27b0"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7fdb524d5360"/></to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fdb524d5360"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fdb521ba9e0"/></to>
    </wire>
    <wire loc="55:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fdb524f8980"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7fdb524d46a0"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fdb524d46a0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fdb521a4020"/></to>
    </wire>
    <wire loc="56:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fdb524f7ca0"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7fdb524d39c0"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fdb524d39c0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fdb5219f630"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7fdb522bcde0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb524d2c40"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fdb521a9c50"/></from>
      <to><interface-ref name="Port54" scoped="" ref="0x7fdb52463020"/></to>
    </wire>
    <wire loc="737:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7fdb52463020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5230d860"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fdb521a32f0"/></from>
      <to><interface-ref name="Port55" scoped="" ref="0x7fdb524618a0"/></to>
    </wire>
    <wire loc="738:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7fdb524618a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb52308e60"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fdb5219e7a0"/></from>
      <to><interface-ref name="Port56" scoped="" ref="0x7fdb5245e020"/></to>
    </wire>
    <wire loc="739:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7fdb5245e020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523023f0"/></to>
    </wire>
    <wire loc="693:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7fdb524b6d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523bce60"/></to>
    </wire>
    <wire loc="706:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7fdb5249ce50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523853f0"/></to>
    </wire>
    <wire loc="844:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7fdb524123d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523753f0"/></to>
    </wire>
    <wire loc="864:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7fdb524173e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522d7e60"/></to>
    </wire>
    <wire loc="845:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7fdb524403f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb52370860"/></to>
    </wire>
    <wire loc="711:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7fdb52497e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5237be60"/></to>
    </wire>
    <wire loc="724:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7fdb5247d020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523433f0"/></to>
    </wire>
    <wire loc="748:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7fdb5244f020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522e13f0"/></to>
    </wire>
    <wire loc="848:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7fdb5243b3f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523643f0"/></to>
    </wire>
    <wire loc="858:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7fdb524263e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522f8e60"/></to>
    </wire>
    <wire loc="870:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7fdb524083f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522d13f0"/></to>
    </wire>
    <wire loc="696:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7fdb524ae580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523ace60"/></to>
    </wire>
    <wire loc="849:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7fdb52439bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5235f860"/></to>
    </wire>
    <wire loc="701:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7fdb524a9580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523a1860"/></to>
    </wire>
    <wire loc="714:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7fdb5248f710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5236ae60"/></to>
    </wire>
    <wire loc="727:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7fdb524768a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523333f0"/></to>
    </wire>
    <wire loc="740:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7fdb5245c8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522fd860"/></to>
    </wire>
    <wire loc="751:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7fdb524488a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522d13f0"/></to>
    </wire>
    <wire loc="691:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7fdb524bbd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523c73f0"/></to>
    </wire>
    <wire loc="704:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7fdb524a2d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523909f0"/></to>
    </wire>
    <wire loc="717:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7fdb52488e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5235ae60"/></to>
    </wire>
    <wire loc="843:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7fdb52443bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523753f0"/></to>
    </wire>
    <wire loc="861:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7fdb5241fbb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522e7e60"/></to>
    </wire>
    <wire loc="868:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7fdb5240bbb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522d13f0"/></to>
    </wire>
    <wire loc="854:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7fdb5242fbc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523123f0"/></to>
    </wire>
    <wire loc="722:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7fdb52483e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5234fa60"/></to>
    </wire>
    <wire loc="735:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7fdb52469020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb52318e60"/></to>
    </wire>
    <wire loc="746:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7fdb52454020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522ec860"/></to>
    </wire>
    <wire loc="862:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7fdb5241c3e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522e13f0"/></to>
    </wire>
    <wire loc="851:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7fdb524363e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523233f0"/></to>
    </wire>
    <wire loc="694:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7fdb524b3580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523b63f0"/></to>
    </wire>
    <wire loc="707:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7fdb52499710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb52380860"/></to>
    </wire>
    <wire loc="744:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7fdb52459020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522f8e60"/></to>
    </wire>
    <wire loc="712:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7fdb52494710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523753f0"/></to>
    </wire>
    <wire loc="725:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7fdb5247b8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5233e860"/></to>
    </wire>
    <wire loc="749:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7fdb5244d8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522dc860"/></to>
    </wire>
    <wire loc="853:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7fdb524313f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb52318e60"/></to>
    </wire>
    <wire loc="689:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7fdb524becb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523d2860"/></to>
    </wire>
    <wire loc="702:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7fdb524a7d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5239ce60"/></to>
    </wire>
    <wire loc="715:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7fdb5248de50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523643f0"/></to>
    </wire>
    <wire loc="728:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7fdb52473020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5232e860"/></to>
    </wire>
    <wire loc="855:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7fdb5242c3f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5235ae60"/></to>
    </wire>
    <wire loc="859:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7fdb52424bb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522f23f0"/></to>
    </wire>
    <wire loc="865:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7fdb52415bb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522d13f0"/></to>
    </wire>
    <wire loc="733:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7fdb5246e020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523233f0"/></to>
    </wire>
    <wire loc="856:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7fdb5242abc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523543f0"/></to>
    </wire>
    <wire loc="692:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7fdb524b8580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523c1860"/></to>
    </wire>
    <wire loc="705:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7fdb5249f710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5238be60"/></to>
    </wire>
    <wire loc="718:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7fdb52485710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523543f0"/></to>
    </wire>
    <wire loc="852:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7fdb52434bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5231e860"/></to>
    </wire>
    <wire loc="863:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7fdb5241abb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522dc860"/></to>
    </wire>
    <wire loc="723:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7fdb524808a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5234ae60"/></to>
    </wire>
    <wire loc="736:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7fdb524678a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523123f0"/></to>
    </wire>
    <wire loc="747:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7fdb524528a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522e7e60"/></to>
    </wire>
    <wire loc="695:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7fdb524b1d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523b1860"/></to>
    </wire>
    <wire loc="745:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7fdb524578a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522f23f0"/></to>
    </wire>
    <wire loc="700:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7fdb524acd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523a63f0"/></to>
    </wire>
    <wire loc="713:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7fdb52492e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb52370860"/></to>
    </wire>
    <wire loc="726:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7fdb52478020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb52339e60"/></to>
    </wire>
    <wire loc="750:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7fdb5244a020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522d7e60"/></to>
    </wire>
    <wire loc="690:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7fdb524bd580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523cde60"/></to>
    </wire>
    <wire loc="703:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7fdb524a4580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb523953f0"/></to>
    </wire>
    <wire loc="716:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7fdb5248a710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5235f860"/></to>
    </wire>
    <wire loc="729:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7fdb524718a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb52329e60"/></to>
    </wire>
    <wire loc="860:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7fdb524213e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522ec860"/></to>
    </wire>
    <wire loc="847:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7fdb52410ba0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5236ae60"/></to>
    </wire>
    <wire loc="846:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7fdb5243ebc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5236ae60"/></to>
    </wire>
    <wire loc="734:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7fdb5246c8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5231e860"/></to>
    </wire>
    <wire loc="867:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7fdb5240d3e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522d7e60"/></to>
    </wire>
    <wire loc="871:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7fdb52406bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb522fd860"/></to>
    </wire>
    <wire loc="842:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7fdb52445060"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fdb5237be60"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fdb522cee50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb522be1a0"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7fdb522ca020"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7fdb522be810"/></to>
    </wire>
    <wire loc="50:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7fdb522bc020"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7fdb522a5900"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/telosb/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7fdb522a5900"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb5228c850"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7fdb522bc700"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb522bf640"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fdb5228c850"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb522721c0"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fdb52283de0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fdb52272830"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7fdb526c8c80"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7fdb52271af0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52190c00"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb51b478c0"/></to>
    </wire>
    <wire loc="73:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52190c00"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb5136bcf0"/></to>
    </wire>
    <wire loc="59:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52190c00"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb520f7280"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fdb5218a8f0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fdb52a4d1e0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fdb52a4d1e0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fdb525f2140"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7fdb521883a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb522cee50"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52188aa0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52190c00"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7fdb52a40940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb525f1040"/></to>
    </wire>
    <wire loc="56:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7fdb525ec490"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7fdb528259a0"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fdb520f78d0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fdb520e6810"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fdb5217d7f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fdb52101110"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fdb5217cb20"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb52101e70"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb521604c0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb520fd720"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fdb521671e0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fdb52100490"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fdb520f7280"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb520e61c0"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fdb520f2dc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fdb52160e40"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fdb520fc120"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fdb520f5480"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fdb520fcd70"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb520f6940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fdb520f24a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7fdb51b69a30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fdb520f5480"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fdb51fb5de0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fdb520f6940"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fdb51fb56c0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7fdb51fb4c20"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fdb520f24a0"/></to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fdb520db020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fdb520f2dc0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fdb51fb2920"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fdb520f2dc0"/></to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fdb51fa8cc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fdb520f2dc0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fdb51fb3590"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fdb520dcc40"/></to>
    </wire>
    <wire loc="75:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7fdb51fb3e80"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7fdb520e07d0"/></to>
    </wire>
    <wire loc="77:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7fdb520df020"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7fdb51fade00"/></to>
    </wire>
    <wire loc="78:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7fdb520d1580"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fdb51f83080"/></to>
    </wire>
    <wire loc="17:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7fdb51f83080"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fdb51b7b080"/></to>
    </wire>
    <wire loc="80:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fdb51fa0d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fdb51f83890"/></to>
    </wire>
    <wire loc="13:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fdb51f83890"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fdb51b82440"/></to>
    </wire>
    <wire loc="332:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7fdb5207e6e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb52a40940"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7fdb520b54f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb52a40940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7fdb52082c70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb52a40940"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7fdb5207ba00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb52a40940"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7fdb51fb0020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb52a40940"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7fdb51fb0800"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb52a40940"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="14:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fdb51f81020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fdb51b80440"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fdb51b80440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fdb51f155c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fdb51b82440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fdb51f18040"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="18:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fdb51b7f020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fdb51b7b8e0"/></to>
    </wire>
    <wire loc="19:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fdb51b7a020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb51b83020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fdb51b83020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb51f1c7a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb51b83c70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb51555020"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb51555020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb51c51d50"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fdb51f13a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fdb51b7f020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb5154f440"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb51f192c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7fdb51f14730"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb51556340"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fdb51556340"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb51c52a60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7fdb51f111d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fdb51550c10"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fdb51550c10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fdb51c55cd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb51f192c0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb51e84dc0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fdb51f155c0"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fdb51e82890"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fdb51f18040"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fdb51e836d0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fdb51f1c7a0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb51e84020"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fdb51e803e0"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fdb51f13a40"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7fdb51e815b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7fdb51f14730"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7fdb51e7a5b0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7fdb51f111d0"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7fdb51e80a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fdb51e6bd30"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fdb51e6bd30"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7fdb51e633c0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fdb51e79020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fdb51dd57c0"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fdb51dd57c0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fdb51dcf810"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fdb51e77120"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fdb525ac820"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fdb51e67860"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fdb51e5e020"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb51e6b500"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb51e669c0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7fdb51e5e8f0"/></from>
      <to><interface-ref name="SIMO1" scoped="" ref="0x7fdb52434bc0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7fdb51e5b020"/></from>
      <to><interface-ref name="SOMI1" scoped="" ref="0x7fdb524313f0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7fdb51e59890"/></from>
      <to><interface-ref name="UCLK1" scoped="" ref="0x7fdb5242fbc0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7fdb51e56020"/></from>
      <to><interface-ref name="URXD1" scoped="" ref="0x7fdb5242abc0"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7fdb51e54890"/></from>
      <to><interface-ref name="UTXD1" scoped="" ref="0x7fdb5242c3f0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fdb51dcf810"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fdb51c80b80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fdb51c6dc50"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fdb51da4cd0"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7fdb51da4cd0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51d4d260"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7fdb51da7a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fdb51cf2220"/></to>
    </wire>
    <wire loc="139:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7fdb51da25a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fdb51ceb6d0"/></to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7fdb51da8a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fdb51cf9cb0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7fdb51d953e0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fdb51cd17a0"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7fdb51daebb0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fdb51cf9020"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7fdb51d96570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fdb51cd2ac0"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7fdb51d8cda0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fdb51cba7a0"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7fdb51d94410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fdb51cccb30"/></to>
    </wire>
    <wire loc="112:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7fdb51dbc020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fdb51d476d0"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7fdb51d9cda0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fdb51ce1cb0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7fdb51d9c020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fdb51ce1020"/></to>
    </wire>
    <wire loc="146:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7fdb51d9ea50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fdb51ce3b30"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7fdb51da5da0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fdb51cf02f0"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7fdb51d92890"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fdb51ccacb0"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7fdb51d9bd40"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fdb51cdb220"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7fdb51da5020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fdb51cf1610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7fdb51dc7120"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51d553e0"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7fdb51d93890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fdb51cca020"/></to>
    </wire>
    <wire loc="119:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7fdb51db3730"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fdb51cfbb30"/></to>
    </wire>
    <wire loc="175:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7fdb51d918c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fdb51cc3220"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7fdb51da96d0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fdb51d007a0"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7fdb51d98020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fdb51cd92f0"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7fdb51daf840"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fdb51d01ac0"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7fdb51d99160"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fdb51cda610"/></to>
    </wire>
    <wire loc="177:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7fdb51d8fae0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fdb51cc12f0"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7fdb51d97020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fdb51cd36d0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7fdb51d9fa20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fdb51ce97a0"/></to>
    </wire>
    <wire loc="176:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7fdb51d90d40"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fdb51cc2610"/></to>
    </wire>
    <wire loc="183:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7fdb51d8c020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fdb51cbbac0"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7fdb51da0a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fdb51ceaac0"/></to>
    </wire>
    <wire loc="182:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7fdb51d8ea50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fdb51cbc6d0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7fdb51d532f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fdb51d54bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7fdb51d53940"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7fdb51cb33f0"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7fdb51d51020"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7fdb51cb3b80"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb51cff610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51d553e0"/></to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fdb51cfec50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fdb51d54bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb51cf8b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51d553e0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fdb51cf52f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fdb51d54bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb51cef160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51d553e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fdb51cee7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fdb51d54bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7fdb51d4b100"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fdb51d4ca60"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7fdb51d4b750"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7fdb51cb1430"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7fdb51d4bda0"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7fdb51cb1bc0"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb51ce8610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51d4d260"/></to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fdb51ce7c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fdb51d4ca60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb51ce0b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51d4d260"/></to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fdb51cde2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fdb51d4ca60"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb51cd8160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51d4d260"/></to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fdb51cd77a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fdb51d4ca60"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb51cd0610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51d4d260"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fdb51ccfc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fdb51d4ca60"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb51cc9b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51d4d260"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fdb51cc72f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fdb51d4ca60"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb51cc0160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51d4d260"/></to>
    </wire>
    <wire loc="179:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fdb51cbf7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fdb51d4ca60"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb51cb9610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51d4d260"/></to>
    </wire>
    <wire loc="186:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fdb51cb8c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fdb51d4ca60"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fdb51554020"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fdb51e6bd30"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb515557c0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51c4f590"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51c4f590"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51bb8e80"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb51c4e370"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb5154f440"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb51c51d50"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb51bb9a60"/></to>
    </wire>
    <wire loc="81:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb51bb9a60"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb513673a0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7fdb51c55cd0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fdb51c4a0d0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fdb51c52a60"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb51bbaca0"/></to>
    </wire>
    <wire loc="80:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fdb51bbaca0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fdb51368540"/></to>
    </wire>
    <wire loc="83:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51bb8e80"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb513658b0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7fdb51c380a0"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fdb51e67860"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb51bb6790"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb51c4e370"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51c37020"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51bb8e80"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb51bb1d50"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb51bb8270"/></to>
    </wire>
    <wire loc="82:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb51bb8270"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb51367b20"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb51bb1020"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb51e6b500"/></to>
    </wire>
    <wire loc="84:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb513647e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb51bb6790"/></to>
    </wire>
    <wire loc="85:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7fdb513640e0"/></from>
      <to><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7fdb51bb5020"/></to>
    </wire>
    <wire loc="87:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fdb51363020"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7fdb5136a330"/></to>
    </wire>
    <wire loc="155:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7fdb51361160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb52a40940"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb5132c470"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb51bb1020"/></to>
    </wire>
    <wire loc="82:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x7fdb5132cbd0"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x7fdb51bb1780"/></to>
    </wire>
    <wire loc="84:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb5132b270"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb51bb1d50"/></to>
    </wire>
    <wire loc="85:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb5132be80"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51b9b990"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fdb51b4db60"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fdb51b44700"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fdb51b44700"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb519b78e0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fdb51b478c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb51a65020"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fdb519b78e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb512a3440"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fdb51b3d1a0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fdb519a8020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fdb51a65020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb5131b490"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7fdb519b0020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fdb51a392f0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fdb51a34850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fdb51a65870"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fdb51a65870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fdb51314140"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fdb5199e300"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fdb51ac9b70"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fdb51ac9b70"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fdb51aa7cf0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fdb5131b490"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fdb51300e60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7fdb5130eb90"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fdb5131bce0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fdb5131bce0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fdb512fe720"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fdb51311690"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fdb51ac9b70"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fdb512fb910"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fdb51306c50"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fdb51306c50"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fdb51b1ebf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fdb512f9020"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fdb513032b0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fdb513032b0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fdb51b1a8b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fdb512f8440"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fdb513025d0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fdb513025d0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fdb51b17210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fdb51b1ebf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fdb51da4cd0"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fdb51b1a8b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7fdb51da25a0"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fdb51b17210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7fdb51da0a20"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fdb51b1ebf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fdb51da4cd0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fdb51b1a8b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7fdb51d9bd40"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fdb51b17210"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7fdb51d99160"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fdb51b1ebf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fdb51da4cd0"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fdb51b1a8b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7fdb51d97020"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fdb51b17210"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7fdb51d96570"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fdb51b1ebf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fdb51da4cd0"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fdb51b1a8b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7fdb51d94410"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fdb51b17210"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7fdb51d93890"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fdb51b1ebf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fdb51da4cd0"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fdb51b1a8b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7fdb51d918c0"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fdb51b17210"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7fdb51d90d40"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fdb51b1ebf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fdb51da4cd0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fdb51b1a8b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7fdb51d8ea50"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fdb51b17210"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7fdb51d8c020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7fdb51aa40f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fdb51dcf810"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7fdb51a309c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb52a40940"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7fdb5129ea90"/></from>
      <to><interface-ref name="TimerFrom" scoped="" ref="0x7fdb519b0020"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimeSkew" scoped="" ref="0x7fdb51296270"/></from>
      <to><interface-ref name="TimeSkew" scoped="" ref="0x7fdb519ab450"/></to>
    </wire>
    <wire loc="68:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7fdb51298d10"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7fdb522ca020"/></to>
    </wire>
    <wire loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7fdb512968c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fdb52a40940"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="TestSerialC" loc="57:TestSerialC.nc">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../../tos/system/LedsC.nc">
      <documentation loc="34:../../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="40:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="37:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; Digital pin i/o abstraction, TI MSP430 processors.</short>
        <long>&#10; Digital pin i/o abstraction, TI MSP430 processors.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @author Joao Goncalves &#60;joao.m.goncalves@ist.utl.pt>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="79(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="79(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="79(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="79(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="79(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="79(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="79(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="79(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="79(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="79(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="79(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="79(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="79(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="79(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="79(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="79(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="79(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="79(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="79(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="79(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="79(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="79(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="79(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="79(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="79(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="79(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="79(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="79(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="79(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="79(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="79(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="79(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="79(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="79(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="79(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="79(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="79(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="79(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="79(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="79(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="79(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="79(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="79(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="79(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="79(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="79(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="79(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="79(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformC" loc="41:../../../tos/platforms/telosa/PlatformC.nc">
      <documentation loc="35:../../../tos/platforms/telosa/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/telosa/PlatformP.nc" safe="">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="1:../../../tos/platforms/telosb/MotePlatformC.nc" safe="">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/telosb/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="200:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/x1xxx/McuSleepC.nc" safe="">
      <documentation loc="36:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MoteClockP" loc="38:../../../tos/platforms/telosb/MoteClockP.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockP.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RealMainP" loc="65:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="45:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="33:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="53:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="2:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <instance number="0">
        <component-ref qname="Msp430Uart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P" loc="39:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P.UartP" loc="44(Msp430Uart1P.UartP):../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <documentation loc="36:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart1C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <documentation loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
        <short>&#10; An HPL abstraction of USART1 on the MSP430.</short>
        <long>&#10; An HPL abstraction of USART1 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart1P" loc="59:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC" loc="48:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <documentation loc="36:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="41(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="41(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="41(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="41(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="41(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="41(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="41(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="41(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="41(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="41(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="41(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="41(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525aa020"/>
            <typename><typedef-ref name="T32khz" ref="0x7fdb525aa390"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="40(PlatformSerialC.UartC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P" loc="38:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.UsartShareP" loc="37(Msp430UsartShare1P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC" loc="56(Msp430UsartShare1P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart1.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Queue" loc="42(Msp430UsartShare1P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Arbiter" loc="96(Msp430UsartShare1P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC" loc="67(Msp430UsartShare1P.PowerManagerC):../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC.PowerManager" loc="58(Msp430UsartShare1P.PowerManagerC.PowerManager):../../../tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:../../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="TelosSerialP" loc="1:../../../tos/platforms/telosa/TelosSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TestSerialAppC.TimerMilliC" loc="44(TestSerialAppC.TimerMilliC):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525aa020"/>
            <typename><typedef-ref name="T32khz" ref="0x7fdb525aa390"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525aa020"/>
            <typename><typedef-ref name="T32khz" ref="0x7fdb525aa390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525aa020"/>
            <typename><typedef-ref name="T32khz" ref="0x7fdb525aa390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="55(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC.VT" loc="61(HilTimerMilliC.VirtualizeTimerC.VT):../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerImplP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb51a2b530"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7fdb52402bf0" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7fdb523ff020" loc="81:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7fdb523ff3d0" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7fdb523ff780" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7fdb523ffaf0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart1C" loc="42:../../../tos/chips/msp430/usart/Msp430Uart1C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="44:../../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <documentation loc="36:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7fdb51d87930" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7fdb51d87cd0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7fdb51d850d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7fdb51d85450" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7fdb51d857d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7fdb51d85b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7fdb51d84020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7fdb51d843b0" loc="49:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7fdb51d84780" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7fdb51d49c80" loc="42:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7fdb51d460d0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fdb51c81c80" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fdb51c81c80"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart1C" loc="40:../../../tos/chips/msp430/usart/Msp430Usart1C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="56:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7fdb51c359a0" loc="56:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7fdb51c28cf0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="96:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7fdb51c09200" loc="96:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:../../../tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:../../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fdb51af93b0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fdb51af93b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7fdb51ac06b0" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7fdb51ac06b0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7fdb51ac0e80" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7fdb51ac0e80"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7fdb51abf290" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7fdb51abf290"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7fdb51abfa70" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7fdb51abfa70"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7fdb51abfe40" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7fdb51abe670" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7fdb51abe670"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7fdb51ac76d0" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7fdb51ac76d0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7fdb51a9c020" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7fdb51a9c020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7fdb51a9c410" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7fdb51a9c410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7fdb51a9cbf0" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7fdb51a9cbf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7fdb51a9b020" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb51a61cc0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb51a61cc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb51a2b530" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb51a2b530"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7fdb51a2b880" loc="56:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="VirtualizeTimerImplP" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb51a1d980" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb51a1d980"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7fdb51a1dcd0" loc="62:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb519a7550" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb519a7550"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="Boot" ref="0x7fdb52594130" loc="61:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fdb52594130"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fdb525944b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7fdb525386b0" loc="63:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fdb525386b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb52538a30"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52538bc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb52538d50"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52595020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb525951b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7fdb525207a0" loc="65:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fdb525207a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb52520b20"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb52520cb0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52520e40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb5252a020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb5252a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x7fdb52541790" loc="62:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fdb52541790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52541b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MilliTimer" ref="0x7fdb52542020" loc="64:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MilliTimer" scoped="" ref="0x7fdb52542020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb5252c630"/>
        <function-ref name="fired" scoped="" ref="0x7fdb52539a60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb5252d920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb5252d4a0"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb5252b020"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb5252cab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb5252d020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb52542c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb5252c020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb52539110"/>
        <function-ref name="stop" scoped="" ref="0x7fdb525395e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fdb52597b50" loc="60:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fdb52597b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb525a5020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb525a51b0"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb525a5340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb525a54d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb525a5660"/>
        <function-ref name="get" scoped="" ref="0x7fdb525a57f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb525a5980"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb525a1020"/>
        <function-ref name="set" scoped="" ref="0x7fdb525a5b10"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb525a5ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb525a5e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Control" ref="0x7fdb525a2460" loc="59:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fdb525a2460"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb525a27e0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb525a2970"/>
        <function-ref name="start" scoped="" ref="0x7fdb525a2b00"/>
        <function-ref name="stop" scoped="" ref="0x7fdb525a2c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fdb525ac820" loc="46:../../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fdb525ac820"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb525acba0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb525acd30"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb524ff020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb524ff1b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb524ff340"/>
        <function-ref name="get" scoped="" ref="0x7fdb524ff4d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb524ff660"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb524ffca0"/>
        <function-ref name="set" scoped="" ref="0x7fdb524ff7f0"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb524ff980"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb524ffb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7fdb524f27b0" loc="50:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7fdb524f27b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524f2b30"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524f2cc0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524f2e50"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524f8020"/>
        <function-ref name="get" scoped="" ref="0x7fdb524f81b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524f8340"/>
        <function-ref name="set" scoped="" ref="0x7fdb524f84d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524f8660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb524f99c0" loc="46:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fdb524f99c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb524f9d40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7fdb524f8980" loc="51:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7fdb524f8980"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524f8d00"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524f7020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524f71b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524f7340"/>
        <function-ref name="get" scoped="" ref="0x7fdb524f74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524f7660"/>
        <function-ref name="set" scoped="" ref="0x7fdb524f77f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524f7980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fdb524fb020" loc="47:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fdb524fb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb524fb3a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb524fb530"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb524fb6c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb524fb850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb524fb9e0"/>
        <function-ref name="get" scoped="" ref="0x7fdb524fbb70"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb524fbd00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb524fa4d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb524fa020"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb524fa1b0"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb524fa340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7fdb524f7ca0" loc="52:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7fdb524f7ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524f10a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524f1230"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524f13c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524f1550"/>
        <function-ref name="get" scoped="" ref="0x7fdb524f16e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524f1870"/>
        <function-ref name="set" scoped="" ref="0x7fdb524f1a00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524f1b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7fdb524d5360" loc="41:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7fdb524d5360"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524d56e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524d5870"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524d5a00"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524d5b90"/>
        <function-ref name="get" scoped="" ref="0x7fdb524d5d20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524d4020"/>
        <function-ref name="set" scoped="" ref="0x7fdb524d41b0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524d4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7fdb524d46a0" loc="42:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7fdb524d46a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524d4a20"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524d4bb0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524d4d40"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524d3020"/>
        <function-ref name="get" scoped="" ref="0x7fdb524d31b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524d3340"/>
        <function-ref name="set" scoped="" ref="0x7fdb524d34d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524d3660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7fdb524d2c40" loc="44:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fdb524d2c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb524d1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7fdb524d39c0" loc="43:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7fdb524d39c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524d3d40"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524d2020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524d21b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524d2340"/>
        <function-ref name="get" scoped="" ref="0x7fdb524d24d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524d2660"/>
        <function-ref name="set" scoped="" ref="0x7fdb524d27f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524d2980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7fdb524b6d50" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7fdb524b6d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524b5100"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524b5290"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524b5420"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524b31b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524b5740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524b58d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524b5a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524b5bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524b5d80"/>
        <function-ref name="get" scoped="" ref="0x7fdb524b4020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524b41b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524b4340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524b44d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524b4760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524b48f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb524b4a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524b4c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524b55b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524b4da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524b3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7fdb5249ce50" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7fdb5249ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5249b210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5249b3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5249b530"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52499340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5249b850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5249b9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5249bb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5249bd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5249a020"/>
        <function-ref name="get" scoped="" ref="0x7fdb5249a1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5249a340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5249a4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5249a660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5249a8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5249aa80"/>
        <function-ref name="set" scoped="" ref="0x7fdb5249ac10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5249ada0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5249b6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52499020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524991b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7fdb524123d0" loc="205:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7fdb524123d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52412750"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524128e0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52412a70"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524107f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52412d90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52411020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524111b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52411340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524114d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52411660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524117f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52411980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52411b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52411da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52410020"/>
        <function-ref name="set" scoped="" ref="0x7fdb524101b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52410340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52412c00"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524104d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52410660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7fdb524173e0" loc="201:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7fdb524173e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52417760"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524178f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52417a80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524157f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52417da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52416020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524161b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52416340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524164d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52416660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524167f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52416980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52416b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52416da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52415020"/>
        <function-ref name="set" scoped="" ref="0x7fdb524151b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52415340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52417c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524154d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52415660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7fdb524403f0" loc="183:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7fdb524403f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52440770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52440900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52440a90"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5243e7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52440db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5243f020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5243f1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5243f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5243f4d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5243f660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5243f7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5243f980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5243fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5243fda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5243e020"/>
        <function-ref name="set" scoped="" ref="0x7fdb5243e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5243e340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52440c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5243e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5243e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7fdb52497e50" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7fdb52497e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52496210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524963a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52496530"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52494340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52496850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524969e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52496b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52496d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52495020"/>
        <function-ref name="get" scoped="" ref="0x7fdb524951b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52495340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524954d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52495660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524958f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52495a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb52495c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52495da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524966c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52494020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524941b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7fdb5247d020" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7fdb5247d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5247d3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5247d530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5247d6c0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5247b4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5247d9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5247db70"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5247dd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5247c020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5247c1b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5247c340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5247c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5247c660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5247c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5247ca80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5247cc10"/>
        <function-ref name="set" scoped="" ref="0x7fdb5247cda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5247b020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5247d850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5247b1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5247b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7fdb52463020" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7fdb52463020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524633a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52463530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524636c0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524614d0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524639e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52463b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52463d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52462020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524621b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52462340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524624d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52462660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524627f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52462a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52462c10"/>
        <function-ref name="set" scoped="" ref="0x7fdb52462da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52461020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52463850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524611b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52461340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7fdb5244f020" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7fdb5244f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5244f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5244f530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5244f6c0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5244d4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5244f9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5244fb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5244fd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5244e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5244e1b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5244e340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5244e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5244e660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5244e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5244ea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5244ec10"/>
        <function-ref name="set" scoped="" ref="0x7fdb5244eda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5244d020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5244f850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5244d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5244d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7fdb5243b3f0" loc="185:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7fdb5243b3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5243b770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5243b900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5243ba90"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524397f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5243bdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5243a020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5243a1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5243a340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5243a4d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5243a660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5243a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5243a980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5243ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5243ada0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52439020"/>
        <function-ref name="set" scoped="" ref="0x7fdb524391b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52439340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5243bc20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524394d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52439660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7fdb524263e0" loc="195:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7fdb524263e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52426760"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524268f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52426a80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524247f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52426da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52425020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524251b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52425340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524254d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52425660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524257f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52425980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52425b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52425da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52424020"/>
        <function-ref name="set" scoped="" ref="0x7fdb524241b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52424340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52426c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524244d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52424660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7fdb524083f0" loc="211:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7fdb524083f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52408770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52408900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52408a90"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524067f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52408db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52407020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524071b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52407340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524074d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52407660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524077f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52407980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52407b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52407da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52406020"/>
        <function-ref name="set" scoped="" ref="0x7fdb524061b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52406340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52408c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524064d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52406660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7fdb524ae580" loc="57:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7fdb524ae580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524ae900"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524aea90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524aec20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524ac980"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524ad020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524ad1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524ad340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524ad4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524ad660"/>
        <function-ref name="get" scoped="" ref="0x7fdb524ad7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524ad980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524adb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524adca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524ac020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524ac1b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb524ac340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524ac4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524aedb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524ac660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524ac7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7fdb52439bc0" loc="186:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7fdb52439bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52438020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524381b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52438340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52436020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52438660"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524387f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52438980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52438b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52438ca0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52438e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52437020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524371b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52437340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524375d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52437760"/>
        <function-ref name="set" scoped="" ref="0x7fdb524378f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52437a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524384d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52437c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52437da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7fdb524a9580" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7fdb524a9580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524a9900"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524a9a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524a9c20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524a7980"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524a8020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524a81b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524a8340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524a84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524a8660"/>
        <function-ref name="get" scoped="" ref="0x7fdb524a87f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524a8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524a8b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524a8ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524a7020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524a71b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb524a7340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524a74d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524a9db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524a7660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524a77f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7fdb5248f710" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7fdb5248f710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5248fa90"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5248fc20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5248fdb0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5248da80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5248e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5248e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5248e4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5248e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5248e7f0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5248e980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5248eb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5248eca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5248ee30"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5248d120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5248d2b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5248d440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5248d5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5248e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5248d760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5248d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7fdb524768a0" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7fdb524768a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52476c20"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52476db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52475020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52474c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52475340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524754d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52475660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524757f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52475980"/>
        <function-ref name="get" scoped="" ref="0x7fdb52475b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52475ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52475e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52474020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524742b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52474440"/>
        <function-ref name="set" scoped="" ref="0x7fdb524745d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52474760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524751b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524748f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52474a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7fdb5245c8a0" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7fdb5245c8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5245cc20"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5245cdb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5245b020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5245ac10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5245b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5245b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5245b660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5245b7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5245b980"/>
        <function-ref name="get" scoped="" ref="0x7fdb5245bb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5245bca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5245be30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5245a020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5245a2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5245a440"/>
        <function-ref name="set" scoped="" ref="0x7fdb5245a5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5245a760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5245b1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5245a8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5245aa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7fdb524488a0" loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7fdb524488a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52448c20"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52448db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52447020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52446c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52447340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524474d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52447660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524477f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52447980"/>
        <function-ref name="get" scoped="" ref="0x7fdb52447b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52447ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52447e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52446020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524462b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52446440"/>
        <function-ref name="set" scoped="" ref="0x7fdb524465d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52446760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524471b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524468f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52446a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7fdb524bbd50" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7fdb524bbd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524ba100"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524ba290"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524ba420"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524b81b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524ba740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524ba8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524baa60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524babf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524bad80"/>
        <function-ref name="get" scoped="" ref="0x7fdb524b9020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524b91b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524b9340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524b94d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524b9760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524b98f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb524b9a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524b9c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524ba5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524b9da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524b8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7fdb524a2d50" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7fdb524a2d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524a1210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524a13a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524a1530"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5249f340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524a1850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524a19e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524a1b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524a1d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524a0020"/>
        <function-ref name="get" scoped="" ref="0x7fdb524a01b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524a0340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524a04d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524a0660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524a08f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524a0a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb524a0c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524a0da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524a16c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5249f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5249f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7fdb52488e50" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7fdb52488e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52487210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524873a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52487530"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52485340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52487850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524879e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52487b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52487d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52486020"/>
        <function-ref name="get" scoped="" ref="0x7fdb524861b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52486340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524864d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52486660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524868f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52486a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb52486c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52486da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524876c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52485020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524851b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7fdb52443bc0" loc="182:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7fdb52443bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52442020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524421b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52442340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52440020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52442660"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524427f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52442980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52442b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52442ca0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52442e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52441020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524411b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52441340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524415d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52441760"/>
        <function-ref name="set" scoped="" ref="0x7fdb524418f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52441a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524424d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52441c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52441da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7fdb5241fbb0" loc="198:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7fdb5241fbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5241e020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5241e1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5241e340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5241c020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5241e660"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5241e7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5241e980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5241eb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5241eca0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5241ee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5241d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5241d1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5241d340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5241d5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5241d760"/>
        <function-ref name="set" scoped="" ref="0x7fdb5241d8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5241da80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5241e4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5241dc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5241dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7fdb5240bbb0" loc="209:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7fdb5240bbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5240a020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5240a1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5240a340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52408020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5240a660"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5240a7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5240a980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5240ab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5240aca0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5240ae30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52409020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524091b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52409340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524095d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52409760"/>
        <function-ref name="set" scoped="" ref="0x7fdb524098f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52409a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5240a4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52409c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52409da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7fdb5242fbc0" loc="191:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7fdb5242fbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5242e020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5242e1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5242e340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5242c020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5242e660"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5242e7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5242e980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5242eb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5242eca0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5242ee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5242d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5242d1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5242d340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5242d5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5242d760"/>
        <function-ref name="set" scoped="" ref="0x7fdb5242d8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5242da80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5242e4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5242dc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5242dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7fdb52483e50" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7fdb52483e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52482410"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524825a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52482730"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524804d0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52482a50"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52482be0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52482d70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52481020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524811b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52481340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524814d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52481660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524817f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52481a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52481c10"/>
        <function-ref name="set" scoped="" ref="0x7fdb52481da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52480020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524828c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524801b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52480340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7fdb52469020" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7fdb52469020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524693a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52469530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524696c0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524674d0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524699e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52469b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52469d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52468020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524681b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52468340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524684d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52468660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524687f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52468a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52468c10"/>
        <function-ref name="set" scoped="" ref="0x7fdb52468da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52467020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52469850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524671b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52467340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7fdb52454020" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7fdb52454020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524543a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52454530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524546c0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524524d0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524549e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52454b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52454d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52453020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524531b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52453340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524534d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52453660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524537f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52453a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52453c10"/>
        <function-ref name="set" scoped="" ref="0x7fdb52453da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52452020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52454850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524521b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52452340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7fdb5241c3e0" loc="199:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7fdb5241c3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5241c760"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5241c8f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5241ca80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5241a7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5241cda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5241b020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5241b1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5241b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5241b4d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5241b660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5241b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5241b980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5241bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5241bda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5241a020"/>
        <function-ref name="set" scoped="" ref="0x7fdb5241a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5241a340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5241cc10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5241a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5241a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7fdb524363e0" loc="188:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7fdb524363e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52436760"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524368f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52436a80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524347f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52436da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52435020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524351b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52435340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524354d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52435660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524357f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52435980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52435b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52435da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52434020"/>
        <function-ref name="set" scoped="" ref="0x7fdb524341b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52434340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52436c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524344d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52434660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7fdb524b3580" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7fdb524b3580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524b3900"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524b3a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524b3c20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524b1980"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524b2020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524b21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524b2340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524b24d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524b2660"/>
        <function-ref name="get" scoped="" ref="0x7fdb524b27f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524b2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524b2b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524b2ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524b1020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524b11b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb524b1340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524b14d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524b3db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524b1660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524b17f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7fdb52499710" loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7fdb52499710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52499a90"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52499c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52499db0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52497a80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524981b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52498340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524984d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52498660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524987f0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52498980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52498b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52498ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52498e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52497120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524972b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52497440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524975d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52498020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52497760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524978f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7fdb52459020" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7fdb52459020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524593a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52459530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524596c0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524574d0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524599e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52459b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52459d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52458020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524581b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52458340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524584d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52458660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524587f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52458a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52458c10"/>
        <function-ref name="set" scoped="" ref="0x7fdb52458da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52457020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52459850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524571b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52457340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7fdb52494710" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7fdb52494710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52494a90"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52494c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52494db0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52492a80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524931b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52493340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524934d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52493660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524937f0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52493980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52493b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52493ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52493e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52492120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524922b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52492440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524925d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52493020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52492760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524928f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7fdb5247b8a0" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7fdb5247b8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5247bc20"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5247bdb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5247a020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52479c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5247a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5247a4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5247a660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5247a7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5247a980"/>
        <function-ref name="get" scoped="" ref="0x7fdb5247ab10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5247aca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5247ae30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52479020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524792b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52479440"/>
        <function-ref name="set" scoped="" ref="0x7fdb524795d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52479760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5247a1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524798f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52479a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7fdb524618a0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7fdb524618a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52461c20"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52461db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52460020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5245fc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52460340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524604d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52460660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524607f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52460980"/>
        <function-ref name="get" scoped="" ref="0x7fdb52460b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52460ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52460e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5245f020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5245f2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5245f440"/>
        <function-ref name="set" scoped="" ref="0x7fdb5245f5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5245f760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524601b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5245f8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5245fa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7fdb5244d8a0" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7fdb5244d8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5244dc20"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5244ddb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5244c020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5244bc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5244c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5244c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5244c660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5244c7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5244c980"/>
        <function-ref name="get" scoped="" ref="0x7fdb5244cb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5244cca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5244ce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5244b020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5244b2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5244b440"/>
        <function-ref name="set" scoped="" ref="0x7fdb5244b5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5244b760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5244c1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5244b8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5244ba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7fdb524313f0" loc="190:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7fdb524313f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52431770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52431900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52431a90"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5242f7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52431db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52430020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524301b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52430340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524304d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52430660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524307f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52430980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52430b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52430da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5242f020"/>
        <function-ref name="set" scoped="" ref="0x7fdb5242f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5242f340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52431c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5242f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5242f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7fdb524becb0" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7fdb524becb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524cd0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524cd230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524cd3c0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524bd1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524cd6e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524cd870"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524cda00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524cdb90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524cdd20"/>
        <function-ref name="get" scoped="" ref="0x7fdb524cc020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524cc1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524cc340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524cc4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524cc760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524cc8f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb524cca80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524ccc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524cd550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524ccda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524bd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7fdb524a7d50" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7fdb524a7d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524a6100"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524a6290"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524a6420"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524a41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524a6740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524a68d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524a6a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524a6bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524a6d80"/>
        <function-ref name="get" scoped="" ref="0x7fdb524a5020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524a51b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524a5340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524a54d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524a5760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524a58f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb524a5a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524a5c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524a65b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524a5da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524a4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7fdb5248de50" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7fdb5248de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5248c210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5248c3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5248c530"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5248a340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5248c850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5248c9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5248cb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5248cd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5248b020"/>
        <function-ref name="get" scoped="" ref="0x7fdb5248b1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5248b340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5248b4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5248b660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5248b8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5248ba80"/>
        <function-ref name="set" scoped="" ref="0x7fdb5248bc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5248bda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5248c6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5248a020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5248a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7fdb52473020" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7fdb52473020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524733a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52473530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524736c0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524714d0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524739e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52473b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52473d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52472020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524721b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52472340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524724d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52472660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524727f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52472a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52472c10"/>
        <function-ref name="set" scoped="" ref="0x7fdb52472da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52471020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52473850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524711b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52471340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7fdb5242c3f0" loc="192:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7fdb5242c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5242c770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5242c900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5242ca90"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5242a7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5242cdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5242b020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5242b1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5242b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5242b4d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5242b660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5242b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5242b980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5242bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5242bda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5242a020"/>
        <function-ref name="set" scoped="" ref="0x7fdb5242a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5242a340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5242cc20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5242a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5242a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7fdb52424bb0" loc="196:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7fdb52424bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52423020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524231b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52423340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52421020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52423660"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524237f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52423980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52423b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52423ca0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52423e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52422020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524221b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52422340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524225d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52422760"/>
        <function-ref name="set" scoped="" ref="0x7fdb524228f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52422a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524234d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52422c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52422da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7fdb52415bb0" loc="202:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7fdb52415bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52414020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524141b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52414340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52412020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52414660"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524147f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52414980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52414b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52414ca0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52414e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52413020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524131b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52413340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524135d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52413760"/>
        <function-ref name="set" scoped="" ref="0x7fdb524138f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52413a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524144d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52413c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52413da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7fdb5246e020" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7fdb5246e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5246e3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5246e530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5246e6c0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5246c4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5246e9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5246eb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5246ed00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5246d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5246d1b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5246d340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5246d4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5246d660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5246d7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5246da80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5246dc10"/>
        <function-ref name="set" scoped="" ref="0x7fdb5246dda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5246c020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5246e850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5246c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5246c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7fdb5242abc0" loc="193:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7fdb5242abc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52428020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524281b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52428340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52426020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52428660"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524287f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52428980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52428b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52428ca0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52428e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52427020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524271b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52427340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524275d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52427760"/>
        <function-ref name="set" scoped="" ref="0x7fdb524278f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52427a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524284d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52427c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52427da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7fdb524b8580" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7fdb524b8580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524b8900"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524b8a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524b8c20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524b6980"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524b7020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524b71b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524b7340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524b74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524b7660"/>
        <function-ref name="get" scoped="" ref="0x7fdb524b77f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524b7980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524b7b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524b7ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524b6020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524b61b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb524b6340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524b64d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524b8db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524b6660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524b67f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7fdb5249f710" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7fdb5249f710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5249fa90"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5249fc20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5249fdb0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5249ca80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5249d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5249d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5249d4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5249d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5249d7f0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5249d980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5249db10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5249dca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5249de30"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5249c120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5249c2b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5249c440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5249c5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5249d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5249c760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5249c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7fdb52485710" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7fdb52485710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52485a90"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52485c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52485db0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52483a80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524841b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52484340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524844d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52484660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524847f0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52484980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52484b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52484ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52484e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52483120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524832b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52483440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524835d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52484020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52483760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524838f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7fdb52434bc0" loc="189:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7fdb52434bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52433020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524331b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52433340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52431020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52433660"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524337f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52433980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52433b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52433ca0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52433e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52432020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524321b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52432340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524325d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52432760"/>
        <function-ref name="set" scoped="" ref="0x7fdb524328f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52432a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524334d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52432c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52432da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7fdb5241abb0" loc="200:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7fdb5241abb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52419020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524191b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52419340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52417020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52419660"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524197f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52419980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52419b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52419ca0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52419e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52418020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524181b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52418340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524185d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52418760"/>
        <function-ref name="set" scoped="" ref="0x7fdb524188f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52418a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524194d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52418c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52418da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7fdb524808a0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7fdb524808a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52480c20"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52480db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5247f020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5247ec10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5247f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5247f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5247f660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5247f7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5247f980"/>
        <function-ref name="get" scoped="" ref="0x7fdb5247fb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5247fca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5247fe30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5247e020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5247e2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5247e440"/>
        <function-ref name="set" scoped="" ref="0x7fdb5247e5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5247e760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5247f1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5247e8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5247ea80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7fdb524678a0" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7fdb524678a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52467c20"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52467db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52466020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52465c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52466340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524664d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52466660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524667f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52466980"/>
        <function-ref name="get" scoped="" ref="0x7fdb52466b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52466ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52466e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52465020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524652b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52465440"/>
        <function-ref name="set" scoped="" ref="0x7fdb524655d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52465760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524661b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524658f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52465a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7fdb524528a0" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7fdb524528a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52452c20"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52452db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52451020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52450c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52451340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524514d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52451660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524517f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52451980"/>
        <function-ref name="get" scoped="" ref="0x7fdb52451b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52451ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52451e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52450020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524502b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52450440"/>
        <function-ref name="set" scoped="" ref="0x7fdb524505d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52450760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524511b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524508f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52450a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7fdb524b1d50" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7fdb524b1d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524b0100"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524b0290"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524b0420"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524ae1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524b0740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524b08d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524b0a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524b0bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524b0d80"/>
        <function-ref name="get" scoped="" ref="0x7fdb524af020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524af1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524af340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524af4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524af760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524af8f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb524afa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524afc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524b05b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524afda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524ae020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7fdb524578a0" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7fdb524578a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52457c20"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52457db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52456020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52455c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52456340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524564d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52456660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524567f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52456980"/>
        <function-ref name="get" scoped="" ref="0x7fdb52456b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52456ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52456e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52455020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524552b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52455440"/>
        <function-ref name="set" scoped="" ref="0x7fdb524555d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52455760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524561b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524558f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52455a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7fdb524acd50" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7fdb524acd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524ab100"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524ab290"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524ab420"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524a91b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524ab740"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524ab8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524aba60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524abbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524abd80"/>
        <function-ref name="get" scoped="" ref="0x7fdb524aa020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524aa1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524aa340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524aa4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524aa760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524aa8f0"/>
        <function-ref name="set" scoped="" ref="0x7fdb524aaa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524aac10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524ab5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524aada0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524a9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7fdb52492e50" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7fdb52492e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52491210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524913a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52491530"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5248f340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52491850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524919e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52491b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52491d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52490020"/>
        <function-ref name="get" scoped="" ref="0x7fdb524901b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52490340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524904d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52490660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524908f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52490a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb52490c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52490da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524916c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5248f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5248f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7fdb52478020" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7fdb52478020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524783a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52478530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524786c0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524764d0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524789e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52478b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52478d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52477020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524771b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52477340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524774d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52477660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524777f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52477a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52477c10"/>
        <function-ref name="set" scoped="" ref="0x7fdb52477da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52476020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52478850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524761b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52476340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7fdb5245e020" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7fdb5245e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5245e3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5245e530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5245e6c0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5245c4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5245e9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5245eb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5245ed00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5245d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5245d1b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5245d340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5245d4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5245d660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5245d7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5245da80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5245dc10"/>
        <function-ref name="set" scoped="" ref="0x7fdb5245dda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5245c020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5245e850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5245c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5245c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7fdb5244a020" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7fdb5244a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5244a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5244a530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5244a6c0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524484d0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5244a9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5244ab70"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5244ad00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52449020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524491b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52449340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524494d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52449660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524497f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52449a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52449c10"/>
        <function-ref name="set" scoped="" ref="0x7fdb52449da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52448020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5244a850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524481b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52448340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7fdb524bd580" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7fdb524bd580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524bd900"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524bda90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524bdc20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524bb980"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524bc020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524bc1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524bc340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524bc4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524bc660"/>
        <function-ref name="get" scoped="" ref="0x7fdb524bc7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524bc980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524bcb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524bcca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524bb020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524bb1b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb524bb340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524bb4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524bddb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524bb660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524bb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7fdb524a4580" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7fdb524a4580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524a4900"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524a4a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb524a4c20"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524a2980"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524a3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524a31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524a3340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524a34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524a3660"/>
        <function-ref name="get" scoped="" ref="0x7fdb524a37f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524a3980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524a3b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb524a3ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524a2020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524a21b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb524a2340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524a24d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524a4db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524a2660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524a27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7fdb5248a710" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7fdb5248a710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5248aa90"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5248ac20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5248adb0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52488a80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb524891b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52489340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524894d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52489660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524897f0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52489980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52489b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52489ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52489e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52488120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb524882b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52488440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb524885d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52489020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52488760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb524888f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7fdb524718a0" loc="90:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7fdb524718a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52471c20"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52471db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52470020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5246fc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52470340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524704d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52470660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb524707f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52470980"/>
        <function-ref name="get" scoped="" ref="0x7fdb52470b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52470ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52470e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5246f020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5246f2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5246f440"/>
        <function-ref name="set" scoped="" ref="0x7fdb5246f5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5246f760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524701b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5246f8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5246fa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7fdb524213e0" loc="197:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7fdb524213e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52421760"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524218f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52421a80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5241f7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52421da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52420020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524201b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52420340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524204d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52420660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524207f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52420980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52420b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52420da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5241f020"/>
        <function-ref name="set" scoped="" ref="0x7fdb5241f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5241f340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52421c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5241f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5241f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7fdb52410ba0" loc="206:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7fdb52410ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5240f020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5240f1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5240f340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5240d020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5240f660"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5240f7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5240f980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5240fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5240fca0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5240fe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5240e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5240e1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5240e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5240e5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5240e760"/>
        <function-ref name="set" scoped="" ref="0x7fdb5240e8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5240ea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5240f4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5240ec10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5240eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7fdb5243ebc0" loc="184:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7fdb5243ebc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5243d020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5243d1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5243d340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5243b020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5243d660"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5243d7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5243d980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5243db10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5243dca0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5243de30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5243c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5243c1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5243c340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5243c5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5243c760"/>
        <function-ref name="set" scoped="" ref="0x7fdb5243c8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5243ca80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5243d4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5243cc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5243cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7fdb5246c8a0" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7fdb5246c8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5246cc20"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5246cdb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5246b020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5246ac10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5246b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5246b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5246b660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5246b7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5246b980"/>
        <function-ref name="get" scoped="" ref="0x7fdb5246bb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5246bca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5246be30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5246a020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5246a2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5246a440"/>
        <function-ref name="set" scoped="" ref="0x7fdb5246a5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5246a760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5246b1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5246a8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5246aa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7fdb5240d3e0" loc="208:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7fdb5240d3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5240d760"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5240d8f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5240da80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5240b7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5240dda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5240c020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5240c1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5240c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5240c4d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5240c660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5240c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5240c980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5240cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5240cda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5240b020"/>
        <function-ref name="set" scoped="" ref="0x7fdb5240b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5240b340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5240dc10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5240b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5240b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7fdb52406bc0" loc="212:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7fdb52406bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52405020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb524051b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52405340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52403020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52405660"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb524057f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52405980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52405b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52405ca0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52405e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52404020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb524041b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52404340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb524045d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52404760"/>
        <function-ref name="set" scoped="" ref="0x7fdb524048f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52404a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb524054d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52404c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52404da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7fdb52445060" loc="181:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7fdb52445060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb524457e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52445970"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52445b00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb524437f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52445e20"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52444020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb524441b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52444340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb524444d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52444660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb524447f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52444980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52444b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52444da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52443020"/>
        <function-ref name="set" scoped="" ref="0x7fdb524431b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52443340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52445c90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb524434d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52443660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523d2860" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523d2860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb523d2be0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523d2d70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb523d1020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523d0c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb523d1340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523d14d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523d1660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb523d17f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523d1980"/>
        <function-ref name="get" scoped="" ref="0x7fdb523d1b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523d1ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523d1e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb523d0020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523d02b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb523d0440"/>
        <function-ref name="set" scoped="" ref="0x7fdb523d05d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb523d0760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523d08f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523d11b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523d0a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523cde60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523cde60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb523cc210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523cc3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb523cc530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523ca340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb523cc850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523cc9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523ccb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb523ccd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523cb020"/>
        <function-ref name="get" scoped="" ref="0x7fdb523cb1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523cb340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523cb4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb523cb660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523cb8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb523cba80"/>
        <function-ref name="set" scoped="" ref="0x7fdb523cbc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb523cbda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523ca020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523cc6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523ca1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523c73f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523c73f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb523c7770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523c7900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb523c7a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523c57f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb523c7db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523c6020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523c61b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb523c6340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523c64d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb523c6660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523c67f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523c6980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb523c6b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523c6da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb523c5020"/>
        <function-ref name="set" scoped="" ref="0x7fdb523c51b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb523c5340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523c54d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523c7c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523c5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523c1860" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523c1860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb523c1be0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523c1d70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb523c0020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523bfc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb523c0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523c04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523c0660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb523c07f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523c0980"/>
        <function-ref name="get" scoped="" ref="0x7fdb523c0b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523c0ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523c0e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb523bf020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523bf2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb523bf440"/>
        <function-ref name="set" scoped="" ref="0x7fdb523bf5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb523bf760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523bf8f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523c01b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523bfa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523bce60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523bce60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb523bb210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523bb3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb523bb530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523b9340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb523bb850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523bb9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523bbb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb523bbd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523ba020"/>
        <function-ref name="get" scoped="" ref="0x7fdb523ba1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523ba340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523ba4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb523ba660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523ba8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb523baa80"/>
        <function-ref name="set" scoped="" ref="0x7fdb523bac10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb523bada0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523b9020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523bb6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523b91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523b63f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523b63f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb523b6770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523b6900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb523b6a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523b47f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb523b6db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523b5020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523b51b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb523b5340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523b54d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb523b5660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523b57f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523b5980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb523b5b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523b5da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb523b4020"/>
        <function-ref name="set" scoped="" ref="0x7fdb523b41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb523b4340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523b44d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523b6c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523b4660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523b1860" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523b1860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb523b1be0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523b1d70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb523b0020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523afc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb523b0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523b04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523b0660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb523b07f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523b0980"/>
        <function-ref name="get" scoped="" ref="0x7fdb523b0b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523b0ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523b0e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb523af020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523af2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb523af440"/>
        <function-ref name="set" scoped="" ref="0x7fdb523af5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb523af760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523af8f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523b01b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523afa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523ace60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523ace60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb523ab210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523ab3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb523ab530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523a9340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb523ab850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523ab9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523abb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb523abd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523aa020"/>
        <function-ref name="get" scoped="" ref="0x7fdb523aa1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523aa340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523aa4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb523aa660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523aa8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb523aaa80"/>
        <function-ref name="set" scoped="" ref="0x7fdb523aac10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb523aada0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523a9020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523ab6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523a91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523a63f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523a63f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb523a6770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523a6900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb523a6a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523a47f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb523a6db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523a5020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523a51b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb523a5340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523a54d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb523a5660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523a57f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523a5980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb523a5b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523a5da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb523a4020"/>
        <function-ref name="set" scoped="" ref="0x7fdb523a41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb523a4340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523a44d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523a6c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523a4660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523a1860" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523a1860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb523a1be0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523a1d70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb523a0020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5239fc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb523a0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523a04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523a0660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb523a07f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523a0980"/>
        <function-ref name="get" scoped="" ref="0x7fdb523a0b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523a0ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523a0e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5239f020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5239f2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5239f440"/>
        <function-ref name="set" scoped="" ref="0x7fdb5239f5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5239f760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5239f8f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523a01b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5239fa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5239ce60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb5239ce60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5239a210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5239a3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5239a530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52398340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5239a850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5239a9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5239ab70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5239ad00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52399020"/>
        <function-ref name="get" scoped="" ref="0x7fdb523991b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52399340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523994d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52399660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523998f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52399a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb52399c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52399da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52398020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5239a6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523981b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523953f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523953f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52395770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52395900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52395a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523937f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52395db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52394020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523941b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52394340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523944d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52394660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523947f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52394980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52394b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52394da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52393020"/>
        <function-ref name="set" scoped="" ref="0x7fdb523931b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52393340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523934d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52395c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52393660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523909f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523909f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52390d70"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5238f020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5238f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5238eda0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5238f4d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5238f660"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5238f7f0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5238f980"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5238fb10"/>
        <function-ref name="get" scoped="" ref="0x7fdb5238fca0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5238fe30"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5238e020"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5238e1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5238e440"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5238e5d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5238e760"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5238e8f0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5238ea80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5238f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5238ec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5238be60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb5238be60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5238a210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5238a3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5238a530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52388340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5238a850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5238a9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5238ab70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5238ad00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52389020"/>
        <function-ref name="get" scoped="" ref="0x7fdb523891b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52389340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523894d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52389660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523898f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52389a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb52389c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52389da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52388020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5238a6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523881b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523853f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523853f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52385770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52385900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52385a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523837f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52385db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52384020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523841b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52384340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523844d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52384660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523847f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52384980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52384b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52384da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52383020"/>
        <function-ref name="set" scoped="" ref="0x7fdb523831b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52383340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523834d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52385c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52383660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52380860" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb52380860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52380be0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52380d70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5237f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5237ec10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5237f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5237f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5237f660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5237f7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5237f980"/>
        <function-ref name="get" scoped="" ref="0x7fdb5237fb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5237fca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5237fe30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5237e020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5237e2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5237e440"/>
        <function-ref name="set" scoped="" ref="0x7fdb5237e5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5237e760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5237e8f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5237f1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5237ea80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5237be60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb5237be60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5237a210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5237a3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5237a530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52378340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5237a850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5237a9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5237ab70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5237ad00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52379020"/>
        <function-ref name="get" scoped="" ref="0x7fdb523791b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52379340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523794d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52379660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523798f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52379a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb52379c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52379da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52378020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5237a6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523781b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523753f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523753f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52375770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52375900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52375a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523737f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52375db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52374020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523741b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52374340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523744d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52374660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523747f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52374980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52374b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52374da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52373020"/>
        <function-ref name="set" scoped="" ref="0x7fdb523731b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52373340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523734d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52375c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52373660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52370860" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb52370860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52370be0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52370d70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5236e020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5236dc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5236e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5236e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5236e660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5236e7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5236e980"/>
        <function-ref name="get" scoped="" ref="0x7fdb5236eb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5236eca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5236ee30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5236d020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5236d2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5236d440"/>
        <function-ref name="set" scoped="" ref="0x7fdb5236d5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5236d760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5236d8f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5236e1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5236da80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5236ae60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb5236ae60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52369210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523693a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52369530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52367340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52369850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523699e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52369b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52369d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52368020"/>
        <function-ref name="get" scoped="" ref="0x7fdb523681b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52368340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523684d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52368660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523688f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52368a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb52368c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52368da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52367020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523696c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523671b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523643f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523643f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52364770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52364900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52364a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523627f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52364db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52363020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523631b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52363340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523634d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52363660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523637f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52363980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52363b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52363da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52362020"/>
        <function-ref name="set" scoped="" ref="0x7fdb523621b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52362340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523624d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52364c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52362660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5235f860" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb5235f860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5235fbe0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5235fd70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5235e020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5235dc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5235e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5235e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5235e660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5235e7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5235e980"/>
        <function-ref name="get" scoped="" ref="0x7fdb5235eb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5235eca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5235ee30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5235d020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5235d2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5235d440"/>
        <function-ref name="set" scoped="" ref="0x7fdb5235d5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5235d760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5235d8f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5235e1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5235da80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5235ae60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb5235ae60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52359210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523593a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52359530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52357340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52359850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523599e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52359b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52359d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52358020"/>
        <function-ref name="get" scoped="" ref="0x7fdb523581b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52358340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523584d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52358660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523588f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52358a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb52358c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52358da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52357020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523596c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523571b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523543f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523543f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52354770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52354900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52354a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523527f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52354db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52353020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523531b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52353340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523534d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52353660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523537f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52353980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52353b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52353da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52352020"/>
        <function-ref name="set" scoped="" ref="0x7fdb523521b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52352340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523524d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52354c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52352660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5234fa60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb5234fa60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5234fde0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5234e020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5234e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5234dda0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5234e4d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5234e660"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5234e7f0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5234e980"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5234eb10"/>
        <function-ref name="get" scoped="" ref="0x7fdb5234eca0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5234ee30"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5234d020"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5234d1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5234d440"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5234d5d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5234d760"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5234d8f0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5234da80"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5234e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5234dc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5234ae60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb5234ae60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52349210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523493a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52349530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52347340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52349850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523499e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52349b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52349d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52348020"/>
        <function-ref name="get" scoped="" ref="0x7fdb523481b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52348340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523484d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52348660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523488f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52348a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb52348c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52348da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52347020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523496c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523471b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523433f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523433f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52343770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52343900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52343a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523417f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52343db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52342020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523421b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52342340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523424d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52342660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523427f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52342980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52342b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52342da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52341020"/>
        <function-ref name="set" scoped="" ref="0x7fdb523411b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52341340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523414d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52343c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52341660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5233e860" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb5233e860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5233ebe0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5233ed70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5233d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5233cc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5233d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5233d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5233d660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5233d7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5233d980"/>
        <function-ref name="get" scoped="" ref="0x7fdb5233db10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5233dca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5233de30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5233c020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5233c2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5233c440"/>
        <function-ref name="set" scoped="" ref="0x7fdb5233c5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5233c760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5233c8f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5233d1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5233ca80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52339e60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb52339e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52338210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523383a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52338530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52336340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52338850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523389e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52338b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52338d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52337020"/>
        <function-ref name="get" scoped="" ref="0x7fdb523371b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52337340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523374d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52337660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523378f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52337a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb52337c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52337da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52336020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523386c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523361b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523333f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523333f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52333770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52333900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52333a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523317f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52333db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52332020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523321b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52332340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523324d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52332660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523327f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52332980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52332b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52332da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52331020"/>
        <function-ref name="set" scoped="" ref="0x7fdb523311b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52331340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523314d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52333c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52331660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5232e860" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb5232e860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5232ebe0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5232ed70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5232d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5232cc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5232d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5232d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5232d660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5232d7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5232d980"/>
        <function-ref name="get" scoped="" ref="0x7fdb5232db10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5232dca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5232de30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5232c020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5232c2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5232c440"/>
        <function-ref name="set" scoped="" ref="0x7fdb5232c5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5232c760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5232c8f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5232d1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5232ca80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52329e60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb52329e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52328210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523283a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52328530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52326340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52328850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523289e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52328b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52328d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52327020"/>
        <function-ref name="get" scoped="" ref="0x7fdb523271b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52327340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523274d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52327660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523278f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52327a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb52327c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52327da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52326020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523286c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523261b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523233f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523233f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52323770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52323900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52323a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523217f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52323db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52322020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523221b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52322340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523224d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52322660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523227f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52322980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52322b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52322da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52321020"/>
        <function-ref name="set" scoped="" ref="0x7fdb523211b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52321340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523214d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52323c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52321660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5231e860" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb5231e860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5231ebe0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5231ed70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5231c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5231bc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5231c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5231c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5231c660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5231c7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5231c980"/>
        <function-ref name="get" scoped="" ref="0x7fdb5231cb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5231cca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5231ce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5231b020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5231b2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5231b440"/>
        <function-ref name="set" scoped="" ref="0x7fdb5231b5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5231b760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5231b8f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5231c1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5231ba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52318e60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb52318e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52317210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523173a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52317530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52315340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52317850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523179e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52317b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52317d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52316020"/>
        <function-ref name="get" scoped="" ref="0x7fdb523161b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52316340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523164d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52316660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523168f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52316a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb52316c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52316da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52315020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523176c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523151b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523123f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523123f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52312770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52312900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52312a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523107f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52312db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52311020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523111b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52311340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523114d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52311660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523117f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52311980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52311b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52311da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52310020"/>
        <function-ref name="set" scoped="" ref="0x7fdb523101b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52310340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523104d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52312c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52310660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb5230d860" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb5230d860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5230dbe0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5230dd70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5230c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5230bc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5230c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5230c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5230c660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5230c7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5230c980"/>
        <function-ref name="get" scoped="" ref="0x7fdb5230cb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5230cca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5230ce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5230b020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5230b2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5230b440"/>
        <function-ref name="set" scoped="" ref="0x7fdb5230b5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5230b760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5230b8f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5230c1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5230ba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb52308e60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb52308e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52307210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb523073a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52307530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb52305340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52307850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb523079e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb52307b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52307d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb52306020"/>
        <function-ref name="get" scoped="" ref="0x7fdb523061b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb52306340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb523064d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52306660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb523068f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52306a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb52306c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52306da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb52305020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb523076c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb523051b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb523023f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb523023f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb52302770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb52302900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb52302a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb523007f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb52302db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb52301020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb523011b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb52301340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb523014d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb52301660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb523017f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb52301980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb52301b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb52301da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb52300020"/>
        <function-ref name="set" scoped="" ref="0x7fdb523001b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb52300340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb523004d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb52302c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb52300660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb522fd860" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb522fd860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb522fdbe0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb522fdd70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb522fc020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb522fbc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb522fc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb522fc4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb522fc660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb522fc7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb522fc980"/>
        <function-ref name="get" scoped="" ref="0x7fdb522fcb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb522fcca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb522fce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb522fb020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb522fb2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb522fb440"/>
        <function-ref name="set" scoped="" ref="0x7fdb522fb5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb522fb760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb522fb8f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb522fc1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb522fba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb522f8e60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb522f8e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb522f7210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb522f73a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb522f7530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb522f5340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb522f7850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb522f79e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb522f7b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb522f7d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb522f6020"/>
        <function-ref name="get" scoped="" ref="0x7fdb522f61b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb522f6340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb522f64d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb522f6660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb522f68f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb522f6a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb522f6c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb522f6da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb522f5020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb522f76c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb522f51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb522f23f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb522f23f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb522f2770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb522f2900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb522f2a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb522ef7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb522f2db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb522f0020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb522f01b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb522f0340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb522f04d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb522f0660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb522f07f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb522f0980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb522f0b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb522f0da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb522ef020"/>
        <function-ref name="set" scoped="" ref="0x7fdb522ef1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb522ef340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb522ef4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb522f2c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb522ef660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb522ec860" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb522ec860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb522ecbe0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb522ecd70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb522eb020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb522eac10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb522eb340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb522eb4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb522eb660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb522eb7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb522eb980"/>
        <function-ref name="get" scoped="" ref="0x7fdb522ebb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb522ebca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb522ebe30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb522ea020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb522ea2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb522ea440"/>
        <function-ref name="set" scoped="" ref="0x7fdb522ea5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb522ea760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb522ea8f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb522eb1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb522eaa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb522e7e60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb522e7e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb522e6210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb522e63a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb522e6530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb522e4340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb522e6850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb522e69e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb522e6b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb522e6d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb522e5020"/>
        <function-ref name="get" scoped="" ref="0x7fdb522e51b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb522e5340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb522e54d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb522e5660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb522e58f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb522e5a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb522e5c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb522e5da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb522e4020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb522e66c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb522e41b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb522e13f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb522e13f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb522e1770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb522e1900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb522e1a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb522df7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb522e1db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb522e0020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb522e01b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb522e0340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb522e04d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb522e0660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb522e07f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb522e0980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb522e0b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb522e0da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb522df020"/>
        <function-ref name="set" scoped="" ref="0x7fdb522df1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb522df340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb522df4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb522e1c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb522df660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb522dc860" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb522dc860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb522dcbe0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb522dcd70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb522db020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb522dac10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb522db340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb522db4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb522db660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb522db7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb522db980"/>
        <function-ref name="get" scoped="" ref="0x7fdb522dbb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb522dbca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb522dbe30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb522da020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb522da2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb522da440"/>
        <function-ref name="set" scoped="" ref="0x7fdb522da5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb522da760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb522da8f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb522db1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb522daa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb522d7e60" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb522d7e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb522d6210"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb522d63a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb522d6530"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb522d4340"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb522d6850"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb522d69e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb522d6b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb522d6d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb522d5020"/>
        <function-ref name="get" scoped="" ref="0x7fdb522d51b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb522d5340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb522d54d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb522d5660"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb522d58f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb522d5a80"/>
        <function-ref name="set" scoped="" ref="0x7fdb522d5c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb522d5da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb522d4020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb522d66c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb522d41b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fdb522d13f0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fdb522d13f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb522d1770"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb522d1900"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb522d1a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb522cf7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb522d1db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb522d0020"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb522d01b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb522d0340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb522d04d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb522d0660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb522d07f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb522d0980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb522d0b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb522d0da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb522cf020"/>
        <function-ref name="set" scoped="" ref="0x7fdb522cf1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb522cf340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb522cf4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb522d1c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb522cf660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb522cee50" loc="42:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fdb522cee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb522cb210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7fdb522ca020" loc="43:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7fdb522ca020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7fdb522c91b0"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7fdb522c9340"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7fdb522ca6c0"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7fdb522ca850"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7fdb522ca9e0"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7fdb522cab70"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7fdb522cad00"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7fdb522c9020"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7fdb522ca3a0"/>
        <function-ref name="node_id" scoped="" ref="0x7fdb522ca530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7fdb522bc700" loc="7:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7fdb522bc700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb522bca80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb522be1a0" loc="4:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fdb522be1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb522be520"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7fdb522bc020" loc="6:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7fdb522bc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb522bc3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7fdb522bcde0" loc="8:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7fdb522bcde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb522bb180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7fdb522be810" loc="5:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7fdb522be810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7fdb522bd980"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7fdb522bdb10"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7fdb522bd020"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7fdb522bd1b0"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7fdb522bd340"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7fdb522bd4d0"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7fdb522bd660"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7fdb522bd7f0"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7fdb522beb90"/>
        <function-ref name="node_id" scoped="" ref="0x7fdb522bed20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb522bf640" loc="2:../../../tos/platforms/telosb/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fdb522bf640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb522bf9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7fdb522a5900" loc="39:../../../tos/platforms/telosb/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7fdb522a5900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb522a5c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7fdb52283de0" loc="40:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fdb52283de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7fdb52288c70"/>
        <function-ref name="initTimerB" scoped="" ref="0x7fdb52288310"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7fdb522884a0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7fdb52288630"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7fdb52288180"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7fdb522887c0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7fdb52288950"/>
        <function-ref name="initClocks" scoped="" ref="0x7fdb52288ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb5228c850" loc="39:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fdb5228c850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb5228cbd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7fdb52272830" loc="203:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fdb52272830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7fdb522717f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7fdb52272d40"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7fdb52271020"/>
        <function-ref name="initTimerA" scoped="" ref="0x7fdb522711b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7fdb52272bb0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7fdb52271340"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7fdb522714d0"/>
        <function-ref name="initClocks" scoped="" ref="0x7fdb52271660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7fdb52271af0" loc="204:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fdb52271af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fdb52271e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb522721c0" loc="202:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fdb522721c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52272540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7fdb526c8c80" loc="55:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fdb526c8c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fdb528a30a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7fdb528259a0" loc="51:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7fdb528259a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fdb52825d20"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fdb52940020"/>
        <function-ref name="sleep" scoped="" ref="0x7fdb529401b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7fdb527663d0" loc="52:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7fdb527663d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7fdb52766750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430ClockInit" ref="0x7fdb5228a8b0" loc="39:../../../tos/platforms/telosb/MoteClockP.nc">
      <component-ref qname="MoteClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fdb5228a8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7fdb5223d7f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7fdb5228adc0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7fdb5223d020"/>
        <function-ref name="initTimerA" scoped="" ref="0x7fdb5223d1b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7fdb5228ac30"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7fdb5223d340"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7fdb5223d4d0"/>
        <function-ref name="initClocks" scoped="" ref="0x7fdb5223d660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fdb521a9c50" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fdb521a9c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb521a8020"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb521a81b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb521a8340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb521a6020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb521a8660"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb521a87f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb521a8980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb521a8b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb521a8ca0"/>
        <function-ref name="get" scoped="" ref="0x7fdb521a8e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb521a7020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb521a71b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb521a7340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb521a75d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb521a7760"/>
        <function-ref name="set" scoped="" ref="0x7fdb521a78f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb521a7a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb521a7c10"/>
        <function-ref name="clr" scoped="" ref="0x7fdb521a84d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb521a7da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fdb521ba9e0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fdb521ba9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb521bad60"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb521a9020"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb521a91b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb521a9340"/>
        <function-ref name="get" scoped="" ref="0x7fdb521a94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb521a9660"/>
        <function-ref name="set" scoped="" ref="0x7fdb521a97f0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb521a9980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fdb521a32f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fdb521a32f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb521a3670"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb521a3800"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb521a3990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb521a1660"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb521a3cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb521a3e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb521a2020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb521a21b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb521a2340"/>
        <function-ref name="get" scoped="" ref="0x7fdb521a24d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb521a2660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb521a27f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb521a2980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb521a2c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb521a2da0"/>
        <function-ref name="set" scoped="" ref="0x7fdb521a1020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb521a11b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb521a1340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb521a3b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb521a14d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fdb521a4020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fdb521a4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb521a43a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb521a4530"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb521a46c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb521a4850"/>
        <function-ref name="get" scoped="" ref="0x7fdb521a49e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb521a4b70"/>
        <function-ref name="set" scoped="" ref="0x7fdb521a4d00"/>
        <function-ref name="clr" scoped="" ref="0x7fdb521a3020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fdb5219e7a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fdb5219e7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5219eb20"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5219ecb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb5219ee40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb5219ca80"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5219d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5219d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb5219d4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb5219d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5219d7f0"/>
        <function-ref name="get" scoped="" ref="0x7fdb5219d980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb5219db10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb5219dca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb5219de30"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb5219c120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb5219c2b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5219c440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb5219c5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb5219c760"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5219d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb5219c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fdb5219f630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fdb5219f630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb5219f9b0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb5219fb40"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb5219fcd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb5219fe60"/>
        <function-ref name="get" scoped="" ref="0x7fdb5219e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb5219e1b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb5219e340"/>
        <function-ref name="clr" scoped="" ref="0x7fdb5219e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7fdb52190c00" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52190c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb5218d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fdb52190500" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fdb52190500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fdb52190880"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7fdb52188aa0" loc="69:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7fdb52188aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52188e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fdb5218a280" loc="66:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fdb5218a280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fdb5218a600"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7fdb521883a0" loc="68:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7fdb521883a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52188720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7fdb5218a8f0" loc="67:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fdb5218a8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb5218ac70"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fdb5218ae00"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fdb52188020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fdb52a40940" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7fdb52a40940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb52a40cc0"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb52a40e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fdb52a4d1e0" loc="46:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fdb52a4d1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb52a4d560"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fdb52a4d6f0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fdb52a4d880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fdb525f1040" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7fdb525f1040"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb525f13c0"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb525f1550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7fdb525ec490" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7fdb525ec490"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fdb525ec810"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fdb525ec9a0"/>
        <function-ref name="sleep" scoped="" ref="0x7fdb525ecb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fdb525f2140" loc="54:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fdb525f2140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb525f24c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fdb525f2650"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fdb525f27e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fdb5218e740" loc="46:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7fdb5218e740"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb5218eac0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb5218ec50"/>
        <function-ref name="start" scoped="" ref="0x7fdb5218ede0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb5217d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fdb5217d7f0" loc="47:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fdb5217d7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb52557210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb5217db70"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb5217dd00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb5217c020"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb5217c1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb5217c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fdb5217a2b0" loc="49:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fdb5217a2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb5217a630"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb5217a7c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb5217a950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb5217aae0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb5217ac70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb5217cb20" loc="48:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fdb5217cb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb52557210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb5217a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fdb52160e40" loc="53:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fdb52160e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb521771e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb52177370"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb52177500"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb52177690"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb52177820"/>
        <function-ref name="get" scoped="" ref="0x7fdb521779b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb52177b40"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb521661b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb52177cd0"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb52177e60"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb52166020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fdb521604c0" loc="51:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb521604c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fdb52160840"/>
        <function-ref name="noAck" scoped="" ref="0x7fdb521609d0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fdb52160b60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fdb521671e0" loc="50:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fdb521671e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb52167560"/>
        <function-ref name="source" scoped="" ref="0x7fdb521676f0"/>
        <function-ref name="address" scoped="" ref="0x7fdb52167880"/>
        <function-ref name="destination" scoped="" ref="0x7fdb52167a10"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb52167ba0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb52167d30"/>
        <function-ref name="type" scoped="" ref="0x7fdb52178020"/>
        <function-ref name="setType" scoped="" ref="0x7fdb521781b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb52178340"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb521784d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fdb52178660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fdb520fc120" loc="54:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7fdb520fc120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb520fc4a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb520fc630"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb520fc7c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb520fc950"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb520fcae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fdb520fcd70" loc="55:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7fdb520fcd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb520fb180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fdb52101110" loc="47:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fdb52101110"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb52557210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb521014b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb52101640"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb521017d0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb52101960"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb52101af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fdb520fea40" loc="50:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fdb520fea40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb520fedc0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fdb520fd020"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb520fd1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb520fd340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fdb520fd4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb52101e70" loc="48:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fdb52101e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fdb52557210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb52100240"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fdb520fd720" loc="51:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fdb520fd720"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fdb520fdaa0"/>
        <function-ref name="noAck" scoped="" ref="0x7fdb520fdc30"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fdb520fddc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fdb52100490" loc="49:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fdb52100490"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fdb52100810"/>
        <function-ref name="source" scoped="" ref="0x7fdb521009a0"/>
        <function-ref name="address" scoped="" ref="0x7fdb52100b30"/>
        <function-ref name="destination" scoped="" ref="0x7fdb52100cc0"/>
        <function-ref name="setSource" scoped="" ref="0x7fdb52100e50"/>
        <function-ref name="setDestination" scoped="" ref="0x7fdb520fe020"/>
        <function-ref name="type" scoped="" ref="0x7fdb520fe1b0"/>
        <function-ref name="setType" scoped="" ref="0x7fdb520fe340"/>
        <function-ref name="isForMe" scoped="" ref="0x7fdb520fe4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fdb520fe660"/>
        <function-ref name="localGroup" scoped="" ref="0x7fdb520fe7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fdb520f78d0" loc="50:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7fdb520f78d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb520f7c50"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb520f7de0"/>
        <function-ref name="start" scoped="" ref="0x7fdb520f6020"/>
        <function-ref name="stop" scoped="" ref="0x7fdb520f61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fdb520f5480" loc="52:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fdb520f5480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fdb52555d70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb520f5800"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb520f5990"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb520f5b20"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb520f5cb0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb520f5e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb520f7280" loc="49:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fdb520f7280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb520f7600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb520f6940" loc="51:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fdb520f6940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fdb52555d70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb520f6cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fdb520f2dc0" loc="56:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fdb520f2dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb520f1180"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb520f1310"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb520f14a0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb520f1630"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb520f17c0"/>
        <function-ref name="get" scoped="" ref="0x7fdb520f1950"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb520f1ae0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb520ee1b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb520f1c70"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb520f1e00"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb520ee020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7fdb520f24a0" loc="55:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fdb520f24a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fdb52555d70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fdb520f2820"/>
        <function-ref name="offset" scoped="" ref="0x7fdb520f29b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fdb520f2b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fdb520e6810" loc="66:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7fdb520e6810"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fdb520e6b90"/>
        <function-ref name="stopDone" scoped="" ref="0x7fdb520e6d20"/>
        <function-ref name="start" scoped="" ref="0x7fdb520e5020"/>
        <function-ref name="stop" scoped="" ref="0x7fdb520e51b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7fdb5207e6e0" loc="332:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x7fdb5207e6e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb5207ea60"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb5207ebf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7fdb520d1580" loc="74:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7fdb520d1580"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb520d1900"/>
        <function-ref name="stop" scoped="" ref="0x7fdb520d1a90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7fdb520b54f0" loc="191:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x7fdb520b54f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb520b5870"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb520b5a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb520e61c0" loc="65:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fdb520e61c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb520e6540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7fdb520cf180" loc="75:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x7fdb520cf180"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7fdb520cf500"/>
        <function-ref name="flush" scoped="" ref="0x7fdb520cf690"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7fdb52082c70" loc="322:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x7fdb52082c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb52081020"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb520811b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7fdb520df020" loc="72:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7fdb520df020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7fdb520df3a0"/>
        <function-ref name="resetSend" scoped="" ref="0x7fdb520df530"/>
        <function-ref name="dataReceived" scoped="" ref="0x7fdb520df6c0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7fdb520df850"/>
        <function-ref name="putData" scoped="" ref="0x7fdb520df9e0"/>
        <function-ref name="putDone" scoped="" ref="0x7fdb520dfb70"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7fdb520dfd00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fdb520db020" loc="73:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fdb520db020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb520db3a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb520db530"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb520db6c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb520db850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb520db9e0"/>
        <function-ref name="get" scoped="" ref="0x7fdb520dbb70"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb520dbd00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb520d54d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb520d5020"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb520d51b0"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb520d5340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7fdb5207ba00" loc="341:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7fdb5207ba00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb5207bd80"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb5207a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7fdb520e07d0" loc="67:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7fdb520e07d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7fdb520e0b50"/>
        <function-ref name="nextByte" scoped="" ref="0x7fdb520e0ce0"/>
        <function-ref name="startSend" scoped="" ref="0x7fdb520e0e70"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7fdb520e4030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7fdb520dcc40" loc="68:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fdb520dcc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7fdb520e3020"/>
        <function-ref name="byteReceived" scoped="" ref="0x7fdb520e31b0"/>
        <function-ref name="endPacket" scoped="" ref="0x7fdb520e3340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7fdb51fb0020" loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x7fdb51fb0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb51fb03a0"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb51fb0530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fdb51fb5de0" loc="51:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fdb51fb5de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fdb52555d70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51fb41c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fdb51fb4350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fdb51fb44e0"/>
        <function-ref name="cancel" scoped="" ref="0x7fdb51fb4670"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51fb4800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7fdb51fb0800" loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x7fdb51fb0800"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb51fb0b80"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb51fb0d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fdb51fb56c0" loc="50:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fdb51fb56c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fdb52555d70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fdb51fb5a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7fdb51fb4c20" loc="54:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x7fdb51fb4c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fdb52555d70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fdb51fb3020"/>
        <function-ref name="offset" scoped="" ref="0x7fdb51fb31b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fdb51fb3340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fdb51fb2920" loc="57:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fdb51fb2920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb51fb2ca0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb51fb2e30"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb51fb1020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb51fb11b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb51fb1340"/>
        <function-ref name="get" scoped="" ref="0x7fdb51fb14d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb51fb1660"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb51fb1ca0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51fb1980"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb51fb17f0"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb51fb1b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7fdb51fb3e80" loc="56:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7fdb51fb3e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7fdb51fb2220"/>
        <function-ref name="nextByte" scoped="" ref="0x7fdb51fb23b0"/>
        <function-ref name="startSend" scoped="" ref="0x7fdb51fb2540"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7fdb51fb26d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7fdb51fb3590" loc="55:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fdb51fb3590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7fdb51fb3910"/>
        <function-ref name="byteReceived" scoped="" ref="0x7fdb51fb3aa0"/>
        <function-ref name="endPacket" scoped="" ref="0x7fdb51fb3c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7fdb51fa0d20" loc="50:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fdb51fa0d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51fa80e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fdb51fa8270"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51fa8400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fdb51fa8590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fdb51fa8720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fdb51fa88b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51fa8a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7fdb51fade00" loc="48:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7fdb51fade00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7fdb51faa1c0"/>
        <function-ref name="resetSend" scoped="" ref="0x7fdb51faa350"/>
        <function-ref name="dataReceived" scoped="" ref="0x7fdb51faa4e0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7fdb51faa670"/>
        <function-ref name="putData" scoped="" ref="0x7fdb51faa800"/>
        <function-ref name="putDone" scoped="" ref="0x7fdb51faa990"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7fdb51faab20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fdb51fa8cc0" loc="51:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fdb51fa8cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb51fa70a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb51fa7230"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb51fa73c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb51fa7550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb51fa76e0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51fa7870"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb51fa7a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb51f9d1b0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51fa7b90"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb51fa7d20"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb51f9d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fdb51f81020" loc="6:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fdb51f81020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51f813a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fdb51f81530"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51f816c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fdb51f81850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fdb51f83890" loc="5:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fdb51f83890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51f83c10"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fdb51f83da0"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51f82020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fdb51f821b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fdb51f82340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fdb51f824d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51f82660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fdb51f83080" loc="4:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7fdb51f83080"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51f83400"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51f83590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fdb51b83c70" loc="45:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb51b83c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fdb51b82020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb51b821b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fdb51b80440" loc="47:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fdb51b80440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51b807c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fdb51b80950"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51b80ae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fdb51b80c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7fdb51b7f020" loc="49:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fdb51b7f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fdb51b7f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fdb51b82440" loc="46:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fdb51b82440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51b827c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fdb51b82950"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51b82ae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fdb51b82c70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fdb51b82e00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fdb51b80020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51b801b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fdb51b83020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fdb51b83020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb51b833a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb51b83530"/>
        <function-ref name="request" scoped="" ref="0x7fdb51b836c0"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51b83850"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb51b839e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7fdb51f192c0" loc="42:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb51f192c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fdb51f19640"/>
        <function-ref name="configure" scoped="" ref="0x7fdb51f197d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fdb51f155c0" loc="44:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fdb51f155c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51f15940"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fdb51f15ad0"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51f15c60"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fdb51f15df0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7fdb51f13a40" loc="47:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fdb51f13a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fdb51f13dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fdb51f18040" loc="43:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fdb51f18040"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51f183c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fdb51f18550"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51f186e0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fdb51f18870"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fdb51f18a00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fdb51f18b90"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51f18d20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7fdb51f14730" loc="46:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7fdb51f14730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb51f14ab0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb51f14c40"/>
        <function-ref name="request" scoped="" ref="0x7fdb51f14dd0"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51f13020"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb51f131b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fdb51f1c7a0" loc="41:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fdb51f1c7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb51f1cb20"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb51f1ccb0"/>
        <function-ref name="request" scoped="" ref="0x7fdb51f1ce40"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51f1b020"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb51f1b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7fdb51f111d0" loc="48:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7fdb51f111d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fdb51f11550"/>
        <function-ref name="txDone" scoped="" ref="0x7fdb51f116e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7fdb51e84dc0" loc="47:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb51e84dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fdb51e83180"/>
        <function-ref name="configure" scoped="" ref="0x7fdb51e83310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fdb51e82890" loc="49:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fdb51e82890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51e82c30"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fdb51e82dc0"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51e81020"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fdb51e811b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7fdb51e803e0" loc="52:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fdb51e803e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fdb51e80780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7fdb51e80a50" loc="53:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7fdb51e80a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fdb51e80dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fdb51e7e020"/>
        <function-ref name="setUctl" scoped="" ref="0x7fdb51e7e1b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7fdb51e7e340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fdb51e7e4d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fdb51e7e660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fdb51e7e7f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fdb51e7e980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fdb51e7eb10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fdb51e7eca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fdb51e7ee30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fdb51e7d020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fdb51e7d1b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7fdb51e7d440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fdb51e7d5d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fdb51e7d760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fdb51e7d8f0"/>
        <function-ref name="isUart" scoped="" ref="0x7fdb51e7da80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fdb51e7dc10"/>
        <function-ref name="isSpi" scoped="" ref="0x7fdb51e7dda0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fdb51e7c020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fdb51e7c1b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fdb51e7c340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fdb51e7c4d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51e7c660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fdb51e7c9f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fdb51e7cb80"/>
        <function-ref name="setUbr" scoped="" ref="0x7fdb51e7cd10"/>
        <function-ref name="tx" scoped="" ref="0x7fdb51e7b020"/>
        <function-ref name="getUctl" scoped="" ref="0x7fdb51e7b1b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7fdb51e7b340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fdb51e7b4d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fdb51e7b660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fdb51e7b7f0"/>
        <function-ref name="rx" scoped="" ref="0x7fdb51e7b980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fdb51e7bb10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fdb51e7bca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fdb51e7be30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fdb51e7a020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fdb51e7a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fdb51e836d0" loc="48:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fdb51e836d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fdb51e83a70"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fdb51e83c00"/>
        <function-ref name="receive" scoped="" ref="0x7fdb51e83d90"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fdb51e82020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fdb51e821b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fdb51e82340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fdb51e824d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fdb51e79020" loc="55:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fdb51e79020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525aa020"/>
            <typename><typedef-ref name="T32khz" ref="0x7fdb525aa390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb51e79e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51e78800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51e78340"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51e78cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7fdb51e815b0" loc="51:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7fdb51e815b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb51e81950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb51e81ae0"/>
        <function-ref name="request" scoped="" ref="0x7fdb51e81c70"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51e81e00"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb51e80020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fdb51e84020" loc="46:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fdb51e84020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb51e843c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb51e84550"/>
        <function-ref name="request" scoped="" ref="0x7fdb51e846e0"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51e84870"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb51e84a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7fdb51e7a5b0" loc="54:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7fdb51e7a5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fdb51e7a950"/>
        <function-ref name="txDone" scoped="" ref="0x7fdb51e7aae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fdb51e77120" loc="56:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fdb51e77120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb51e774a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb51e77630"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb51e777c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb51e77950"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb51e77ae0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51e77c70"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb51e77e00"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb51e764d0"/>
        <function-ref name="set" scoped="" ref="0x7fdb51e761b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb51e76020"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb51e76340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7fdb51e67860" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fdb51e67860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fdb51e67be0"/>
        <function-ref name="txDone" scoped="" ref="0x7fdb51e67d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7fdb51e6b500" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb51e6b500"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51e6b880"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51e6ba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7fdb51e6bd30" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fdb51e6bd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fdb51e6e0e0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fdb51e6e270"/>
        <function-ref name="setUctl" scoped="" ref="0x7fdb51e6e400"/>
        <function-ref name="enableUart" scoped="" ref="0x7fdb51e6e590"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fdb51e6e720"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fdb51e6e8b0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fdb51e6ea40"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fdb51e6ebd0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fdb51e6ed60"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fdb51e6d020"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fdb51e6d1b0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fdb51e6d340"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fdb51e6d4d0"/>
        <function-ref name="getUbr" scoped="" ref="0x7fdb51e6d760"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fdb51e6d8f0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fdb51e6da80"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fdb51e6dc10"/>
        <function-ref name="isUart" scoped="" ref="0x7fdb51e6dda0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fdb51e69020"/>
        <function-ref name="isSpi" scoped="" ref="0x7fdb51e691b0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fdb51e69340"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fdb51e694d0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fdb51e69660"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fdb51e697f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51e69980"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fdb51e69d10"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fdb51e68020"/>
        <function-ref name="setUbr" scoped="" ref="0x7fdb51e681b0"/>
        <function-ref name="tx" scoped="" ref="0x7fdb51e68340"/>
        <function-ref name="getUctl" scoped="" ref="0x7fdb51e684d0"/>
        <function-ref name="disableUart" scoped="" ref="0x7fdb51e68660"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fdb51e687f0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fdb51e68980"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fdb51e68b10"/>
        <function-ref name="rx" scoped="" ref="0x7fdb51e68ca0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fdb51e68e30"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fdb51e67020"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fdb51e671b0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fdb51e67340"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fdb51e674d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7fdb51e59890" loc="66:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7fdb51e59890"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51e59c10"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51e59da0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb51e58020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51e57c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51e58340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51e584d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb51e58660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb51e587f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51e58980"/>
        <function-ref name="get" scoped="" ref="0x7fdb51e58b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb51e58ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb51e58e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb51e57020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb51e572b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb51e57440"/>
        <function-ref name="set" scoped="" ref="0x7fdb51e575d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb51e57760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb51e581b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb51e578f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb51e57a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fdb51e5e020" loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fdb51e5e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fdb51e5e3a0"/>
        <function-ref name="txDone" scoped="" ref="0x7fdb51e5e530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7fdb51e56020" loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7fdb51e56020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51e563a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51e56530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb51e566c0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51e544d0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51e569e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51e56b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb51e56d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb51e55020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51e551b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51e55340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb51e554d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb51e55660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb51e557f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb51e55a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb51e55c10"/>
        <function-ref name="set" scoped="" ref="0x7fdb51e55da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb51e54020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb51e56850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb51e541b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb51e54340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7fdb51e54890" loc="68:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7fdb51e54890"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51e54c10"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51e54da0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb51e53020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51e52c10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51e53340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51e534d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb51e53660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb51e537f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51e53980"/>
        <function-ref name="get" scoped="" ref="0x7fdb51e53b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb51e53ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb51e53e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb51e52020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb51e522b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb51e52440"/>
        <function-ref name="set" scoped="" ref="0x7fdb51e525d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb51e52760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb51e531b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb51e528f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb51e52a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7fdb51e633c0" loc="61:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7fdb51e633c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fdb51e63740"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fdb51e638d0"/>
        <function-ref name="setUctl" scoped="" ref="0x7fdb51e63a60"/>
        <function-ref name="enableUart" scoped="" ref="0x7fdb51e63bf0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fdb51e63d80"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fdb51e62020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fdb51e621b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fdb51e62340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fdb51e624d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fdb51e62660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fdb51e627f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fdb51e62980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fdb51e62b10"/>
        <function-ref name="getUbr" scoped="" ref="0x7fdb51e62da0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fdb51e61020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fdb51e611b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fdb51e61340"/>
        <function-ref name="isUart" scoped="" ref="0x7fdb51e614d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fdb51e61660"/>
        <function-ref name="isSpi" scoped="" ref="0x7fdb51e617f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fdb51e61980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fdb51e61b10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fdb51e61ca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fdb51e61e30"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51e60020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fdb51e603b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fdb51e60540"/>
        <function-ref name="setUbr" scoped="" ref="0x7fdb51e606d0"/>
        <function-ref name="tx" scoped="" ref="0x7fdb51e60860"/>
        <function-ref name="getUctl" scoped="" ref="0x7fdb51e609f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7fdb51e60b80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fdb51e60d10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fdb51e5f020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fdb51e5f1b0"/>
        <function-ref name="rx" scoped="" ref="0x7fdb51e5f340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fdb51e5f4d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fdb51e5f660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fdb51e5f7f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fdb51e5f980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fdb51e5fb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7fdb51e669c0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb51e669c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51e66d40"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51e63020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7fdb51e5b020" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7fdb51e5b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51e5b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51e5b530"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb51e5b6c0"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51e594d0"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51e5b9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51e5bb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb51e5bd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb51e5a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51e5a1b0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51e5a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb51e5a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb51e5a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb51e5a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb51e5aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb51e5ac10"/>
        <function-ref name="set" scoped="" ref="0x7fdb51e5ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb51e59020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb51e5b850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb51e591b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb51e59340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7fdb51e5e8f0" loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7fdb51e5e8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fdb51e5ec70"/>
        <function-ref name="isInput" scoped="" ref="0x7fdb51e5ee00"/>
        <function-ref name="setResistor" scoped="" ref="0x7fdb51e5d020"/>
        <function-ref name="clr" scoped="" ref="0x7fdb51e5cc10"/>
        <function-ref name="toggle" scoped="" ref="0x7fdb51e5d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fdb51e5d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fdb51e5d660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7fdb51e5d7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fdb51e5d980"/>
        <function-ref name="get" scoped="" ref="0x7fdb51e5db10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7fdb51e5dca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fdb51e5de30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7fdb51e5c020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fdb51e5c2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7fdb51e5c440"/>
        <function-ref name="set" scoped="" ref="0x7fdb51e5c5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fdb51e5c760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7fdb51e5d1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fdb51e5c8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fdb51e5ca80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fdb51dd57c0" loc="43:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fdb51dd57c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525aa020"/>
            <typename><typedef-ref name="T32khz" ref="0x7fdb525aa390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb51dd2620"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51dd0020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51dd2ae0"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51dd04e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7fdb51dcf810" loc="43:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fdb51dcf810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525aa020"/>
            <typename><typedef-ref name="T32khz" ref="0x7fdb525aa390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb51dcc6a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51dcb090"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51dccb60"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51dcb550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7fdb51da7a50" loc="56:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7fdb51da7a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51da7dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51da6020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51da61b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51da6340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51da64d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51da6660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51da67f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51da6980"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51da6b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7fdb51da25a0" loc="61:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7fdb51da25a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51da2920"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51da2ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51da2c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51da2dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51da0020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51da01b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51da0340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51da04d0"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51da0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7fdb51da8a20" loc="55:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7fdb51da8a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51da8da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51da7020"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51da71b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51da7340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51da74d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51da7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7fdb51d953e0" loc="73:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7fdb51d953e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d95760"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51d958f0"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51d95a80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51d95c10"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51d95da0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51d94020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7fdb51daebb0" loc="54:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7fdb51daebb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51da8020"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51da81b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51da8340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51da84d0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51da8660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7fdb51d96570" loc="72:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7fdb51d96570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d968f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51d96a80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51d96c10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51d96da0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51d95020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7fdb51d8cda0" loc="82:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7fdb51d8cda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d8b180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51d8b310"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51d8b4a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51d8b630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51d8b7c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51d8b950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7fdb51d94410" loc="74:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7fdb51d94410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51d94790"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51d94920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51d94ab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51d94c40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51d94dd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51d93020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51d931b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51d93340"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51d934d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7fdb51dbc020" loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7fdb51dbc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51dbc3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51dbc530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51dbc6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51dbc850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51dbc9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51dbcb70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51dbcd00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51dbb020"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51dbb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7fdb51d9cda0" loc="66:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7fdb51d9cda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d9b180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51d9b310"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51d9b4a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51d9b630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51d9b7c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51d9b950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7fdb51d9c020" loc="65:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7fdb51d9c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d9c3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51d9c530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51d9c6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51d9c850"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51d9c9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7fdb51d9ea50" loc="64:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7fdb51d9ea50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51d9edd0"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51d9d020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51d9d1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51d9d340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51d9d4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51d9d660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51d9d7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51d9d980"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51d9db10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7fdb51da5da0" loc="58:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7fdb51da5da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51da4180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51da4310"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51da44a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51da4630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51da47c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51da4950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7fdb51d92890" loc="76:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7fdb51d92890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d92c10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51d92da0"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51d91020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51d911b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51d91340"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51d914d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7fdb51d9bd40" loc="67:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7fdb51d9bd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51d9a0e0"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51d9a270"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51d9a400"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51d9a590"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51d9a720"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51d9a8b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51d9aa40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51d9abd0"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51d9ad60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7fdb51da5020" loc="57:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7fdb51da5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51da53a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51da5530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51da56c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51da5850"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51da59e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7fdb51dc7120" loc="49:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7fdb51dc7120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51dc74a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51dc7630"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51dc77c0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51dc7950"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51dc7ae0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51dc7c70"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51dc7e00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51dc6020"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51dc61b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51dc6340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51dc64d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7fdb51d93890" loc="75:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7fdb51d93890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d93e10"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51d92020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51d921b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51d92340"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51d924d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7fdb51db3730" loc="53:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7fdb51db3730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51db3ab0"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51db3c40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51db3dd0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51dae020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51dae1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51dae340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51dae4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51dae660"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51dae7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7fdb51d918c0" loc="77:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7fdb51d918c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51d91c40"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51d91dd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51d90020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51d901b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51d90340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51d904d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51d90660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51d907f0"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51d90980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7fdb51da96d0" loc="52:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7fdb51da96d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51da9a50"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51da9be0"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51da9d70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51db3020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51db31b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51db3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7fdb51d98020" loc="69:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7fdb51d98020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d983a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51d98530"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51d986c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51d98850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51d989e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51d98b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7fdb51daf840" loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7fdb51daf840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51dafbc0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51dafd50"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51db4020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51db41b0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51db4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7fdb51d99160" loc="68:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7fdb51d99160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d994e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51d99670"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51d99800"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51d99990"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51d99b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7fdb51d8fae0" loc="79:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7fdb51d8fae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d8fe60"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51d8e020"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51d8e1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51d8e340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51d8e4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51d8e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7fdb51d97020" loc="71:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7fdb51d97020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51d973a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51d97530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51d976c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51d97850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51d979e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51d97b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51d97d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51d96020"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51d961b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7fdb51da4cd0" loc="60:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7fdb51da4cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51da30a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51da3230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51da33c0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51da3550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51da36e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51da3870"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51da3a00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51da3b90"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51da3d20"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51da2020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51da21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7fdb51d9fa20" loc="63:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7fdb51d9fa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d9fda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51d9e020"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51d9e1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51d9e340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51d9e4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51d9e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7fdb51d90d40" loc="78:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7fdb51d90d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d8f0e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51d8f270"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51d8f400"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51d8f590"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51d8f720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7fdb51d8c020" loc="81:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7fdb51d8c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d8c3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51d8c530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51d8c6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51d8c850"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51d8c9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7fdb51da0a20" loc="62:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7fdb51da0a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d9f020"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51d9f1b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51d9f340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51d9f4d0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51d9f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7fdb51d8ea50" loc="80:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7fdb51d8ea50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51d8edd0"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51d8d020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51d8d1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51d8d340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51d8d4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51d8d660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51d8d7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51d8d980"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51d8db10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7fdb51d53940" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7fdb51d53940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51d53cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7fdb51d532f0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fdb51d532f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51d53670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7fdb51d51020" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7fdb51d51020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51d513a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7fdb51d54bf0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fdb51d54bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51d53020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fdb51d553e0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb51d553e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51d55760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51d558f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51d55a80"/>
        <function-ref name="get" scoped="" ref="0x7fdb51d55c10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51d55da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51d54020"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51d541b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51d54340"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51d544d0"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51d54660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51d547f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7fdb51d4b750" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7fdb51d4b750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51d4bad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7fdb51d4b100" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fdb51d4b100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51d4b480"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7fdb51d4bda0" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7fdb51d4bda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51d4a180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7fdb51d4ca60" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fdb51d4ca60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51d4ce00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fdb51d4d260" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb51d4d260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51d4d5e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51d4d770"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51d4d900"/>
        <function-ref name="get" scoped="" ref="0x7fdb51d4da90"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51d4dc20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51d4ddb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51d4c020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51d4c1b0"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51d4c340"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51d4c4d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51d4c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fdb51d007a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fdb51d007a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d00b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51d00cb0"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51d00e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cff020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cff1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51cff340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fdb51d476d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fdb51d476d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51d47a50"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51d47be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51d47d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51d01020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51d011b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51d01340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51d014d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51d01660"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51d017f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fdb51cfec50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fdb51cfec50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51cfd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fdb51d01ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fdb51d01ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51d01e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51d00020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51d001b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51d00340"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51d004d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb51cff610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb51cff610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51cff990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51cffb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cffcb0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51cffe40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51cfe020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cfe1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51cfe340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cfe4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51cfe660"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51cfe7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51cfe980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fdb51cf9cb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fdb51cf9cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51cf80a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51cf8230"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51cf83c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cf8550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cf86e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51cf8870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fdb51cfbb30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fdb51cfbb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51cfa020"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51cfa1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cfa340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51cfa4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51cfa660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51cfa7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51cfa980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51cfab10"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51cfaca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fdb51cf52f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fdb51cf52f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51cf5670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fdb51cf9020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fdb51cf9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51cf93a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51cf9530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51cf96c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51cf9850"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51cf99e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb51cf8b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb51cf8b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51cf6020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51cf61b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cf6340"/>
        <function-ref name="get" scoped="" ref="0x7fdb51cf64d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51cf6660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cf67f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51cf6980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cf6b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51cf6ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51cf6e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51cf5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fdb51cf02f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fdb51cf02f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51cf0670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51cf0800"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51cf0990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cf0b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cf0cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51cf0e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fdb51cf2220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fdb51cf2220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51cf25a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51cf2730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cf28c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51cf2a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51cf2be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51cf2d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51cf1020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51cf11b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51cf1340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fdb51cee7a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fdb51cee7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51ceeb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fdb51cf1610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fdb51cf1610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51cf1990"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51cf1b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51cf1cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51cf1e40"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51cf0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb51cef160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb51cef160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51cef4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51cef670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cef800"/>
        <function-ref name="get" scoped="" ref="0x7fdb51cef990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51cefb20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cefcb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51cefe40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cee020"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51cee1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51cee340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51cee4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fdb51ce97a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fdb51ce97a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51ce9b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51ce9cb0"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51ce9e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51ce8020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51ce81b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51ce8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fdb51ceb6d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fdb51ceb6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51ceba50"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51cebbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cebd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51cea020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51cea1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51cea340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51cea4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51cea660"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51cea7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fdb51ce7c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fdb51ce7c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51ce5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fdb51ceaac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fdb51ceaac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51ceae40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51ce9020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51ce91b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51ce9340"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51ce94d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb51ce8610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb51ce8610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51ce8990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51ce8b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51ce8cb0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51ce8e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51ce7020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51ce71b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51ce7340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51ce74d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51ce7660"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51ce77f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51ce7980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fdb51ce1cb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fdb51ce1cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51ce00a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51ce0230"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51ce03c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51ce0550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51ce06e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51ce0870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fdb51ce3b30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fdb51ce3b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51ce2020"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51ce21b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51ce2340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51ce24d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51ce2660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51ce27f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51ce2980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51ce2b10"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51ce2ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fdb51cde2f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fdb51cde2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51cde670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fdb51ce1020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fdb51ce1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51ce13a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51ce1530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51ce16c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51ce1850"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51ce19e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb51ce0b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb51ce0b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51cdf020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51cdf1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cdf340"/>
        <function-ref name="get" scoped="" ref="0x7fdb51cdf4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51cdf660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cdf7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51cdf980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cdfb10"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51cdfca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51cdfe30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51cde020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fdb51cd92f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fdb51cd92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51cd9670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51cd9800"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51cd9990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cd9b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cd9cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51cd9e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fdb51cdb220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fdb51cdb220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51cdb5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51cdb730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cdb8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51cdba50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51cdbbe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51cdbd70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51cda020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51cda1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51cda340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fdb51cd77a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fdb51cd77a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51cd7b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fdb51cda610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fdb51cda610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51cda990"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51cdab20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51cdacb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51cdae40"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51cd9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb51cd8160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb51cd8160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51cd84e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51cd8670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cd8800"/>
        <function-ref name="get" scoped="" ref="0x7fdb51cd8990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51cd8b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cd8cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51cd8e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cd7020"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51cd71b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51cd7340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51cd74d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fdb51cd17a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fdb51cd17a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51cd1b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51cd1cb0"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51cd1e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cd0020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cd01b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51cd0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fdb51cd36d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fdb51cd36d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51cd3a50"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51cd3be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cd3d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51cd2020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51cd21b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51cd2340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51cd24d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51cd2660"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51cd27f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fdb51ccfc50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fdb51ccfc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51cce020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fdb51cd2ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fdb51cd2ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51cd2e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51cd1020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51cd11b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51cd1340"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51cd14d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb51cd0610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb51cd0610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51cd0990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51cd0b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cd0cb0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51cd0e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51ccf020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51ccf1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51ccf340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51ccf4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51ccf660"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51ccf7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51ccf980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fdb51ccacb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fdb51ccacb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51cc90a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51cc9230"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51cc93c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cc9550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cc96e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51cc9870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fdb51cccb30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fdb51cccb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51ccb020"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51ccb1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51ccb340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51ccb4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51ccb660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51ccb7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51ccb980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51ccbb10"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51ccbca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fdb51cc72f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fdb51cc72f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51cc7670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fdb51cca020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fdb51cca020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51cca3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51cca530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51cca6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51cca850"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51cca9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb51cc9b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb51cc9b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51cc8020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51cc81b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cc8340"/>
        <function-ref name="get" scoped="" ref="0x7fdb51cc84d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51cc8660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cc87f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51cc8980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cc8b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51cc8ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51cc8e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51cc7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fdb51cc12f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fdb51cc12f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51cc1670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51cc1800"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51cc1990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cc1b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cc1cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51cc1e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fdb51cc3220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fdb51cc3220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51cc35a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51cc3730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cc38c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51cc3a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51cc3be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51cc3d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51cc2020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51cc21b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51cc2340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fdb51cbf7a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fdb51cbf7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51cbfb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fdb51cc2610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fdb51cc2610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51cc2990"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51cc2b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51cc2cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51cc2e40"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51cc1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb51cc0160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb51cc0160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51cc04e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51cc0670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cc0800"/>
        <function-ref name="get" scoped="" ref="0x7fdb51cc0990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51cc0b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cc0cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51cc0e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cbf020"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51cbf1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51cbf340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51cbf4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fdb51cba7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fdb51cba7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51cbab20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fdb51cbacb0"/>
        <function-ref name="captured" scoped="" ref="0x7fdb51cbae40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cb9020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cb91b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fdb51cb9340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fdb51cbc6d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fdb51cbc6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51cbca50"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51cbcbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cbcd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51cbb020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51cbb1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51cbb340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51cbb4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51cbb660"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51cbb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fdb51cb8c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fdb51cb8c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51cb7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fdb51cbbac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fdb51cbbac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51cbbe40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51cba020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51cba1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51cba340"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51cba4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fdb51cb9610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb51cb9610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51cb9990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51cb9b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51cb9cb0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51cb9e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51cb8020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51cb81b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51cb8340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51cb84d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51cb8660"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51cb87f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51cb8980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7fdb51cb1bc0" loc="7:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7fdb51cb1bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51cb0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7fdb51cb33f0" loc="4:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7fdb51cb33f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51cb3770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7fdb51cb3b80" loc="5:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7fdb51cb3b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51cb1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7fdb51cb1430" loc="6:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7fdb51cb1430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51cb17b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7fdb51c6dc50" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fdb51c6dc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51c6b020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51c6b1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51c6b340"/>
        <function-ref name="get" scoped="" ref="0x7fdb51c6b4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51c6b660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51c6b7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51c6b980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51c6bb10"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51c6bca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51c6be30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51c6a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fdb51c80b80" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fdb51c80b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525aa020"/>
            <typename><typedef-ref name="T32khz" ref="0x7fdb525aa390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb51c7f9b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51c6d360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51c7fe70"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51c6d820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fdb51555020" loc="43:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb51555020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fdb515553a0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb51555530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fdb5154f440" loc="48:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb5154f440"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fdb5154f7c0"/>
        <function-ref name="configure" scoped="" ref="0x7fdb5154f950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7fdb51550c10" loc="46:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fdb51550c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fdb5154f020"/>
        <function-ref name="txDone" scoped="" ref="0x7fdb5154f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fdb51556340" loc="42:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fdb51556340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb515566c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb51556850"/>
        <function-ref name="request" scoped="" ref="0x7fdb515569e0"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51556b70"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb51556d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7fdb51554020" loc="45:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fdb51554020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fdb515543a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fdb51554530"/>
        <function-ref name="setUctl" scoped="" ref="0x7fdb515546c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7fdb51554850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fdb515549e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fdb51554b70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fdb51554d00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fdb51553020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fdb515531b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fdb51553340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fdb515534d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fdb51553660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fdb515537f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7fdb51553a80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fdb51553c10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fdb51553da0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fdb51552020"/>
        <function-ref name="isUart" scoped="" ref="0x7fdb515521b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fdb51552340"/>
        <function-ref name="isSpi" scoped="" ref="0x7fdb515524d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fdb51552660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fdb515527f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fdb51552980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fdb51552b10"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51552ca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fdb51551220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fdb515513b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7fdb51551540"/>
        <function-ref name="tx" scoped="" ref="0x7fdb515516d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7fdb51551860"/>
        <function-ref name="disableUart" scoped="" ref="0x7fdb515519f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fdb51551b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fdb51551d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fdb51550020"/>
        <function-ref name="rx" scoped="" ref="0x7fdb515501b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fdb51550340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fdb515504d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fdb51550660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fdb515507f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fdb51550980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fdb515557c0" loc="44:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb515557c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb51555b40"/>
        <function-ref name="userId" scoped="" ref="0x7fdb51555cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fdb51c51d50" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb51c51d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fdb51c4f100"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb51c4f290"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fdb51c4e370" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb51c4e370"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fdb51c4e6f0"/>
        <function-ref name="configure" scoped="" ref="0x7fdb51c4e880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fdb51c55cd0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fdb51c55cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fdb51c520a0"/>
        <function-ref name="txDone" scoped="" ref="0x7fdb51c52230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fdb51c52a60" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fdb51c52a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb51c52de0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb51c51020"/>
        <function-ref name="request" scoped="" ref="0x7fdb51c511b0"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51c51340"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb51c514d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fdb51c4f590" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51c4f590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb51c4f910"/>
        <function-ref name="userId" scoped="" ref="0x7fdb51c4faa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7fdb51c37020" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51c37020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb51c373a0"/>
        <function-ref name="userId" scoped="" ref="0x7fdb51c37530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fdb51c4a0d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fdb51c4a0d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fdb51c4a470"/>
        <function-ref name="txDone" scoped="" ref="0x7fdb51c4a600"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7fdb51c38880" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7fdb51c38880"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51c38c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7fdb51c4aa00" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7fdb51c4aa00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fdb51c4ada0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7fdb51c380a0" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7fdb51c380a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fdb51c38420"/>
        <function-ref name="txDone" scoped="" ref="0x7fdb51c385b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fdb51bb9a60" loc="59:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb51bb9a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fdb51bb9e00"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb51bb8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fdb51bb6790" loc="64:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb51bb6790"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fdb51bb6b30"/>
        <function-ref name="configure" scoped="" ref="0x7fdb51bb6cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7fdb51bb8270" loc="60:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb51bb8270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb51bb85f0"/>
        <function-ref name="requested" scoped="" ref="0x7fdb51bb8780"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51bb8910"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb51bb8aa0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb51bb8c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fdb51bbaca0" loc="58:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fdb51bbaca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb51bb90a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb51bb9230"/>
        <function-ref name="request" scoped="" ref="0x7fdb51bb93c0"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51bb9550"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb51bb96e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7fdb51bb5020" loc="65:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7fdb51bb5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb51bb53a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fdb51bb8e80" loc="61:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51bb8e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb51bb6220"/>
        <function-ref name="userId" scoped="" ref="0x7fdb51bb63b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb5136bcf0" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fdb5136bcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb5136a0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7fdb5136a330" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7fdb5136a330"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fdb5136a6b0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fdb5136a840"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fdb5136a9d0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fdb5136ab60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fdb513673a0" loc="99:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fdb513673a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fdb51367740"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb513678d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fdb513647e0" loc="105:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fdb513647e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fdb51364b80"/>
        <function-ref name="configure" scoped="" ref="0x7fdb51364d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fdb51363020" loc="106:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7fdb51363020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fdb513633a0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fdb51363530"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fdb513636c0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fdb51363850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7fdb51367b20" loc="100:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb51367b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb51365020"/>
        <function-ref name="requested" scoped="" ref="0x7fdb513651b0"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51365340"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb513654d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb51365660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fdb51363aa0" loc="107:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fdb51363aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fdb51363e20"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fdb51362020"/>
        <function-ref name="led1On" scoped="" ref="0x7fdb513621b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fdb51362340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fdb513624d0"/>
        <function-ref name="get" scoped="" ref="0x7fdb51362660"/>
        <function-ref name="led1Off" scoped="" ref="0x7fdb513627f0"/>
        <function-ref name="led0On" scoped="" ref="0x7fdb51362e30"/>
        <function-ref name="set" scoped="" ref="0x7fdb51362b10"/>
        <function-ref name="led2On" scoped="" ref="0x7fdb51362980"/>
        <function-ref name="led2Off" scoped="" ref="0x7fdb51362ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fdb51368540" loc="98:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fdb51368540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb513688e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb51368a70"/>
        <function-ref name="request" scoped="" ref="0x7fdb51368c00"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51368d90"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb51367020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7fdb513640e0" loc="104:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7fdb513640e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb51364460"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fdb513658b0" loc="101:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb513658b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb51365c30"/>
        <function-ref name="userId" scoped="" ref="0x7fdb51365dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7fdb51361160" loc="155:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7fdb51361160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb513614e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb51361670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7fdb51bb1780" loc="72:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7fdb51bb1780"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7fdb51bb1b00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7fdb51bb1d50" loc="73:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb51bb1d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb51b9b100"/>
        <function-ref name="requested" scoped="" ref="0x7fdb51b9b290"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51b9b420"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb51b9b5b0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb51b9b740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7fdb51bb1020" loc="70:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb51bb1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51bb13a0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51bb1530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7fdb51b9b990" loc="74:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb51b9b990"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb51b9bd10"/>
        <function-ref name="userId" scoped="" ref="0x7fdb51b9a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7fdb5132cbd0" loc="62:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7fdb5132cbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7fdb5132b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7fdb5132b270" loc="63:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fdb5132b270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb5132b5f0"/>
        <function-ref name="requested" scoped="" ref="0x7fdb5132b780"/>
        <function-ref name="granted" scoped="" ref="0x7fdb5132b910"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb5132baa0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fdb5132bc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7fdb5132c470" loc="60:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7fdb5132c470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb5132c7f0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb5132c980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7fdb5132be80" loc="64:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fdb5132be80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fdb5132a220"/>
        <function-ref name="userId" scoped="" ref="0x7fdb5132a3b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7fdb51b7b8e0" loc="3:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fdb51b7b8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fdb51b7bc60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7fdb51b7a020" loc="4:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fdb51b7a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fdb51b7a3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fdb51b7a530"/>
        <function-ref name="request" scoped="" ref="0x7fdb51b7a6c0"/>
        <function-ref name="granted" scoped="" ref="0x7fdb51b7a850"/>
        <function-ref name="isOwner" scoped="" ref="0x7fdb51b7a9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fdb51b7b080" loc="2:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7fdb51b7b080"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fdb51b7b400"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51b7b590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7fdb51b69a30" loc="47:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x7fdb51b69a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fdb51b69db0"/>
        <function-ref name="offset" scoped="" ref="0x7fdb51b66020"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fdb51b661b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fdb51b56980" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="TestSerialAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb51b56980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb51993e80"/>
        <function-ref name="fired" scoped="" ref="0x7fdb519944a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb51993260"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb51994da0"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb519927a0"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb51992320"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb51994920"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb519965a0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb51993870"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb51996a70"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51994020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fdb51b4db60" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7fdb51b4db60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb51b49110"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51b4b5f0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb51b4a4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb51b4a020"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb51b49a10"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb51b49590"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb51b4ba70"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb51b4c790"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb51b4aab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb51b4cc60"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51b4b170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fdb51b44700" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7fdb51b44700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb51b40c40"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51b411e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb51b40020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb51b41ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb51b3f590"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb51b3f110"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb51b41660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb51b43390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb51b40630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb51b43860"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51b43d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fdb51b3d1a0" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fdb51b3d1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb51b3ddd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb51b478c0" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fdb51b478c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb51b47c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fdb51a65870" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fdb51a65870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb51a62090"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51a63090"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb51a63a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb51a63550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb51a62550"/>
        <function-ref name="start" scoped="" ref="0x7fdb51a646a0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51a64bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb51a65020" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fdb51a65020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb51a653a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fdb5131bce0" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fdb5131bce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525aa020"/>
            <typename><typedef-ref name="T32khz" ref="0x7fdb525aa390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb51318670"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51319550"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb51318020"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb51319a10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb51318b30"/>
        <function-ref name="start" scoped="" ref="0x7fdb5131ab60"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51319090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb5131b490" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fdb5131b490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb5131b810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7fdb513025d0" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fdb513025d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51302950"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51302ae0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51302c70"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51302e00"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51301020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7fdb51306c50" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fdb51306c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51304020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb513041b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51304340"/>
        <function-ref name="get" scoped="" ref="0x7fdb513044d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51304660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb513047f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51304980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51304b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51304ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51304e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51303020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7fdb513032b0" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fdb513032b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51303630"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb513037c0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51303950"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51303ae0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51303c70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51303e00"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51302020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb513021b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51302340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7fdb51b17210" loc="52:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fdb51b17210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb51b17590"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb51b17720"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb51b178b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb51b17a40"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51b17bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7fdb51b1ebf0" loc="50:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fdb51b1ebf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb51b1b020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb51b1b1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51b1b340"/>
        <function-ref name="get" scoped="" ref="0x7fdb51b1b4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51b1b660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51b1b7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb51b1b980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51b1bb10"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51b1bca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb51b1be30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb51b1a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7fdb51b1a8b0" loc="51:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fdb51b1a8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb51b1ac30"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb51b1adc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb51b19020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb51b191b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb51b19340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb51b194d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb51b19660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb51b197f0"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb51b19980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7fdb512f8440" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fdb512f8440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fdb512f87c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fdb512f8950"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fdb512f8ae0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fdb512f8c70"/>
        <function-ref name="fired" scoped="" ref="0x7fdb512f8e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7fdb512fb910" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fdb512fb910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fdb512fbc90"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fdb512fbe20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb512fa020"/>
        <function-ref name="get" scoped="" ref="0x7fdb512fa1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb512fa340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb512fa4d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fdb512fa660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb512fa7f0"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb512fa980"/>
        <function-ref name="setMode" scoped="" ref="0x7fdb512fab10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fdb512faca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fdb512fe720" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fdb512fe720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525aa020"/>
            <typename><typedef-ref name="T32khz" ref="0x7fdb525aa390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb512fb020"/>
        <function-ref name="fired" scoped="" ref="0x7fdb512fc020"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb512fc9a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb512fc4e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb512fb4e0"/>
        <function-ref name="start" scoped="" ref="0x7fdb512fd5b0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb512fdac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fdb51300e60" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fdb51300e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fdb512fe210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7fdb512f9020" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fdb512f9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fdb512f93a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fdb512f9530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fdb512f96c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fdb512f9850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fdb512f99e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fdb512f9b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fdb512f9d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fdb512f8020"/>
        <function-ref name="setControl" scoped="" ref="0x7fdb512f81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fdb51ac9b70" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fdb51ac9b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb51ac69b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51ac5360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51ac6e70"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51ac5820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7fdb51aa40f0" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7fdb51aa40f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525aa020"/>
            <typename><typedef-ref name="T32khz" ref="0x7fdb525aa390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb51aa2020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51aa29a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51aa24e0"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51aa2e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fdb51aa7cf0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fdb51aa7cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb51aa6b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb51aa5550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51aa5090"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb51aa5a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fdb51314140" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fdb51314140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb51312b30"/>
        <function-ref name="fired" scoped="" ref="0x7fdb513139f0"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb513124e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb51312020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb51311020"/>
        <function-ref name="start" scoped="" ref="0x7fdb51313020"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51313530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7fdb5130eb90" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7fdb5130eb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525aa020"/>
            <typename><typedef-ref name="T32khz" ref="0x7fdb525aa390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb5130b4e0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb5130c4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb5130ce60"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb5130c9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb5130b9a0"/>
        <function-ref name="start" scoped="" ref="0x7fdb5130d9d0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb5130c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fdb51311690" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fdb51311690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb513105b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb5130e020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb51310a70"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb5130e4e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7fdb51a309c0" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7fdb51a309c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb51a30d40"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb51a2f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7fdb51a34850" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fdb51a34850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb51a30090"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51a31090"/>
        <function-ref name="startAt" scoped="" ref="0x7fdb51a31a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb51a31550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fdb51a30550"/>
        <function-ref name="start" scoped="" ref="0x7fdb51a336a0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51a33bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fdb51a392f0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb51a392f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb51a35870"/>
        <function-ref name="fired" scoped="" ref="0x7fdb51a38e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb51a36c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb51a36780"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb51a341e0"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb51a35cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb51a36300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb51a38020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb51a35260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb51a384f0"/>
        <function-ref name="stop" scoped="" ref="0x7fdb51a389c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7fdb519b0020" loc="58:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7fdb519b0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb519ac630"/>
        <function-ref name="fired" scoped="" ref="0x7fdb519afa60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb519ae920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb519ae4a0"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb519ab020"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb519acab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb519ae020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb519b0c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb519ac020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb519af110"/>
        <function-ref name="stop" scoped="" ref="0x7fdb519af5e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7fdb519ab450" loc="59:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7fdb519ab450"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7fdb519ab7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fdb519b78e0" loc="57:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb519b78e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb519b2020"/>
        <function-ref name="fired" scoped="" ref="0x7fdb519b54c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb519b3300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb519b5e00"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb519b2960"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb519b24c0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb519b5960"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb519b6560"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb519b3930"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb519b6a50"/>
        <function-ref name="stop" scoped="" ref="0x7fdb519b5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7fdb512968c0" loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7fdb512968c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fdb51296c40"/>
        <function-ref name="runTask" scoped="" ref="0x7fdb51296dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7fdb5129ea90" loc="65:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7fdb5129ea90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb51298020"/>
        <function-ref name="fired" scoped="" ref="0x7fdb5129b510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb5129a300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb5129be10"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb51298920"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb512984a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb5129b990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb5129c6b0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb5129a910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb5129cb80"/>
        <function-ref name="stop" scoped="" ref="0x7fdb5129b090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7fdb51296270" loc="67:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7fdb51296270"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7fdb512965f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Platform" ref="0x7fdb51298d10" loc="66:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7fdb51298d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7fdb51297d60"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7fdb51296020"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7fdb51297400"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7fdb51297590"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7fdb51297720"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7fdb512978b0"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7fdb51297a40"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7fdb51297bd0"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7fdb512970e0"/>
        <function-ref name="node_id" scoped="" ref="0x7fdb51297270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fdb512a3440" loc="63:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fdb512a3440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fdb5129faa0"/>
        <function-ref name="fired" scoped="" ref="0x7fdb512a1020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fdb512a1e00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fdb512a1960"/>
        <function-ref name="getdt" scoped="" ref="0x7fdb5129e4c0"/>
        <function-ref name="gett0" scoped="" ref="0x7fdb5129e020"/>
        <function-ref name="isRunning" scoped="" ref="0x7fdb512a14c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fdb512a2090"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fdb5129f470"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fdb512a2580"/>
        <function-ref name="stop" scoped="" ref="0x7fdb512a2a70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fdb519a8020" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fdb519a8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb519a8c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fdb5199e300" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fdb5199e300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fdb525ab770"/>
            <typename><typedef-ref name="TMilli" ref="0x7fdb525abae0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fdb5199d150"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fdb5199dad0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fdb5199d610"/>
        <function-ref name="overflow" scoped="" ref="0x7fdb5199b020"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7fdb525a1d30" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fdb52540130" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb525579d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fdb52596760" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb525579d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7fdb52596ae0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb52596e10" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fdb5253c750" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb5253c150" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb5253c480" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fdb5253b8a0" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fdb5253e490" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb5253e210" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fdb5253d9b0" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb5253d3d0" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fdb5253d720" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fdb525280b0" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb5252be00" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7fdb525272a0" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52527020" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fdb52522620" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52522020" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb52522350" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fdb525236d0" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7fdb52525730" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52525170" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb525254a0" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <function event="" provided="0" name="receive" ref="0x7fdb52543020" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
              <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52545570" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7fdb525458c0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb52545bf0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb52595ba0" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb52595ba0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fdb52530980" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fdb525341f0" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7fdb52531020" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fdb525339a0" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fdb52533ce0" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7fdb525331f0" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7fdb5252fa10" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7fdb5252f190" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fdb525349d0" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7fdb52537750" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fdb525374d0" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7fdb52530020" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fdb525319c0" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fdb52531d00" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7fdb525352a0" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fdb52535020" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fdb52535aa0" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7fdb5259eb20" loc="61:../../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7fdb5259c350" loc="67:../../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7fdb5259cb30" loc="72:../../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7fdb5259bb00" loc="83:../../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7fdb525992b0" loc="100:../../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fdb52599ac0" loc="117:../../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7fdb5259b350" loc="77:../../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fdb52597670" loc="134:../../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7fdb525973f0" loc="134:../../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7fdb5259e390" loc="56:../../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7fdb5259a350" loc="89:../../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7fdb5259aae0" loc="94:../../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7fdb525a4ab0" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fdb525a4830" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7fdb525a2020" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fdb525a3d30" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fdb525a8ba0" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fdb525a3350" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7fdb524f4e30" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7fdb524f35c0" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7fdb524f4020" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7fdb524f2480" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fdb524f4720" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7fdb524f3ce0" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fdb524f6120" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7fdb524f67f0" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fdb524f95f0" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7fdb524c7020" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7fdb524c7770" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7fdb524c22e0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fdb524c2060" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullUp" ref="0x7fdb524c1d30" loc="126:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7fdb524c9770" loc="59:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7fdb524c6780" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7fdb524bf520" loc="134:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="129:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDriveStrength" ref="0x7fdb524be020" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="136:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short> &#10; Set port drive strength.</short>
          <long> &#10; Set port drive strength.&#10; @param mode: MSP430_PORT_DRIVE_STRENGTH_*&#10; @return EINVAL if invalid mode or pin doesn't support drive&#10;     strength config.&#10; FAIL if pin is not an output&#10; SUCCESS if pin supports it, is an output, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fdb524bfd70" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7fdb524c6020" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fdb524c8820" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getDriveStrength" ref="0x7fdb524be910" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get drive strength.</short>
          <long>&#10; Get drive strength.&#10; @return MSP430_PORT_DRIVE_STRENGTH_*&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7fdb524c3020" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullDown" ref="0x7fdb524c15f0" loc="125:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7fdb524c8020" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorOff" ref="0x7fdb524c2b80" loc="124:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; set resistor mode directly.</short>
          <long>&#10; set resistor mode directly.&#10;&#10; You have to know what you are doing when you use these.  These routines&#10; assume that the port is set for input (PxDIR).  The routines explicitly&#10; change the value of the bits setting in PxOUT.&#10;&#10; The advantage of using these routines is efficiency because there is no&#10; mode checking.  In addition, no error check is done to make sure that the&#10; port is in input mode.  The thing is, first, this is something that you&#10; get right once and then it doesn't change so why check and, second no&#10; one actually checks the error return because there really isn't any&#10; point to doing the check because this isn't something you actually need&#10; to check the return code for.  So why have one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fdb524ce850" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="46:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7fdb524c4020" loc="91:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7fdb524c37c0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7fdb524c47e0" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7fdb524c9020" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Platform" loc="51:../../../tos/interfaces/Platform.nc">
      <function command="" provided="0" name="jiffiesRawSize" ref="0x7fdb522c5af0" loc="109:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="node_id" ref="0x7fdb522c19e0" loc="182:../../../tos/interfaces/Platform.nc">
        <documentation loc="164:../../../tos/interfaces/Platform.nc">
          <short>&#10; Platform dependent node id.</short>
          <long>&#10; Platform dependent node id.&#10;&#10; Get a Platform defined node id.  This will typically be a serial number&#10; or mac address.&#10;&#10; Platform define PLATFORM_SERIAL_NUM_SIZE determines the&#10; size.  If not defined defaults to 4 bytes (uint32_t).  But platforms&#10; really should define it to be clear.  (see platform.h)&#10;&#10; input:  *lenp      pointer where to place the length of the number.&#10;&#10; output: *lenp      length filled in if non-null.&#10; return: *uint8_t   pointer to the serial_num or NULL.&#10;&#10; a Node Id is assumed to be a sequence of bytes starting with the&#10; msb first.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lenp" ref="0x7fdb522c1720" loc="182:../../../tos/interfaces/Platform.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRawSize" ref="0x7fdb522c7db0" loc="79:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRaw" ref="0x7fdb522c7620" loc="78:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesExpired" ref="0x7fdb522c4940" loc="126:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7fdb522c4350" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7fdb522c46b0" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIntPriority" ref="0x7fdb522c2d40" loc="162:../../../tos/interfaces/Platform.nc">
        <documentation loc="153:../../../tos/interfaces/Platform.nc">
          <short>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.</short>
          <long>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.&#10;   modern computer hardware allows the assignment of different priorities&#10;   to interrupt sources.  This is inherently a platform thing.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="irq_number" ref="0x7fdb522c2ac0" loc="162:../../../tos/interfaces/Platform.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set_unaligned_traps" ref="0x7fdb522c2390" loc="150:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on_off" ref="0x7fdb522c2110" loc="150:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesRaw" ref="0x7fdb522c5350" loc="108:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="localTime" ref="0x7fdb522cbe40" loc="64:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsExpired" ref="0x7fdb522c6b70" loc="95:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7fdb522c6580" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7fdb522c68e0" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7fdb52283b40" loc="48:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7fdb52286de0" loc="43:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7fdb52283420" loc="47:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7fdb52286700" loc="42:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7fdb522855a0" loc="45:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7fdb522898f0" loc="40:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7fdb52286020" loc="41:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7fdb52285cc0" loc="46:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7fdb526c87e0" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7fdb52990700"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7fdb525eea80" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7fdb525ec1f0" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7fdb525ee2b0" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7fdb52766020" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fdb53106e80" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7fdb52a4ee20" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7fdb52a4e610" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7fdb52a42770" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event.&#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7fdb52a40020" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7fdb52165770" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb521654f0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7fdb52163940" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb521636c0" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7fdb52161ab0" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52161830" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7fdb5216a9f0" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fdb525575f0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb5216a770" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7fdb521756d0" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7fdb525579d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb52175450" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7fdb52179ac0" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7fdb525579d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7fdb52176600" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7fdb525579d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb52176380" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7fdb52170020" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb525579d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb52171a00" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fdb52171d50" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb525579d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7fdb52173ac0" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb525579d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb521734e0" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fdb52173830" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fdb525579d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7fdb5216e4a0" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fdb52557210"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb5216e220" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7fdb5216d850" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fdb52557210"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb5216d2a0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7fdb5216d5c0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fdb52557210"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7fdb5216f2a0" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb5216f020" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7fdb52168020" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fdb525575f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fdb521698c0" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7fdb52169c10" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fdb525575f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7fdb52168e40" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fdb525575f0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fdb52155ac0" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52155500" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb52155830" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fdb52150620" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52150020" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb52150350" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fdb5214f660" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fdb521532a0" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52153020" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fdb52152750" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb52152170" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fdb521524c0" loc="100:../../../tos/interfaces/Send.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7fdb520efb00" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb520ef4f0" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7fdb520ef870" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7fdb520f3c70" loc="15:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7fdb520f0b60" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fdb520f0560" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fdb52547700"/>
                <typename><typedef-ref name="message_t" ref="0x7fdb52546d10"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7fdb520f08d0" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7fdb520d2830" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fdb520d1070" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7fdb520d0e50" loc="54:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7fdb520d06e0" loc="49:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7fdb520da270" loc="56:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7fdb520d96c0" loc="72:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7fdb520d7390" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb520d7110" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7fdb520d8020" loc="79:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7fdb520dade0" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb520dab60" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7fdb520d7bf0" loc="100:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7fdb520d88d0" loc="85:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7fdb520e2d70" loc="71:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7fdb520e1750" loc="81:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7fdb520e2400" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7fdb520e2180" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7fdb520e0350" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fdb520e00d0" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7fdb520de020" loc="62:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7fdb520dec40" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb520de9c0" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7fdb520dc730" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7fdb520dc4b0" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fdb51fa9dd0" loc="48:../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fdb51fa9800" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb51fa9b40" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7fdb51fa4ac0" loc="79:../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fdb51fa4840" loc="79:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7fdb51fa1930" loc="90:../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fdb51fa1360" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb51fa16a0" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7fdb51fa2740" loc="65:../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7fdb51fa02c0" loc="99:../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fdb51f9f920" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb51f9fc60" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fdb51fa0020" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7fdb51fa4070" loc="72:../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fdb51fa5720" loc="57:../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fdb51fa6db0" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fdb51fa5130" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fdb51fa5480" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
              <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fdb51f7f5b0" loc="50:../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fdb51f7f330" loc="50:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7fdb51f7fdf0" loc="59:../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7fdb51f7ecf0" loc="69:../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fdb51f7e700" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7fdb51f7ea60" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7fdb51f7bb50" loc="79:../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7fdb51f22580" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7fdb51f21020" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <short>&#10; Interface used by Msp430Uart clients to reconfigure the UART before use&#10; </short>
        <long>&#10; Interface used by Msp430Uart clients to reconfigure the UART before use&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7fdb51f1e4c0" loc="39:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7fdb51f45020"/></typename>
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fdb51f47b30"/></type-tag>
            </type-qualified>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7fdb51f26bf0" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.&#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource&#10;&#10; @note This command should never be called between putting in a request&#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event,&#10;       we have opted to keep thing simple and warn you about the potential&#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7fdb51f27be0" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7fdb51f27270" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7fdb51f26420" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7fdb51f258a0" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7fdb51f179b0" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7fdb51f17190" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART. &#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information.&#10;&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7fdb51f0f740" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb51f0f4c0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7fdb51f12cd0" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART.&#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information. I.e. calling &#60;code>tx&#60;/done> will transmit a byte of&#10; data in the mode (SPI or UART) the USART has been set to before.&#10;&#10; @author Vlado Handziski (handzisk@tkn.tu-berlin.de)&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7fdb51ee7390" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7fdb51ef3020" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7fdb51f01a30" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fdb51f77420"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7fdb51f77c60"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fdb51f017b0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fdb51f77420"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7fdb51f77c60"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7fdb51ef5020" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7fdb51efd020" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fdb51f723d0"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7fdb51f72c10"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fdb51efec60" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fdb51f723d0"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7fdb51f72c10"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7fdb51eed750" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7fdb51eeacf0" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7fdb51efe4c0" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fdb51f74360"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7fdb51f74af0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7fdb51efd810" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fdb51f723d0"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7fdb51f72c10"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7fdb51ef95e0" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7fdb51ef9360" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7fdb51efbc10" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7fdb51eed020" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7fdb51f00c90" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fdb51f74360"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7fdb51f74af0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fdb51f00a10" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fdb51f74360"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7fdb51f74af0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7fdb51efca50" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7fdb51eede80" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7fdb51efb460" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7fdb51efb1e0" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7fdb51ef7020" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7fdb51ef77a0" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7fdb51eee0e0" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7fdb51ef0020" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7fdb51ef4020" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7fdb51eee820" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7fdb51ef3800" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7fdb51eeb5c0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7fdb51ef9dc0" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fdb51f802e0"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7fdb51f79a10"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7fdb51eebd60" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7fdb51ee9bd0" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7fdb51efc2a0" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7fdb51efc020" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7fdb51ee7d30" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fdb51ee7ab0" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7fdb51f00270" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fdb51f77420"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7fdb51f77c60"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7fdb51ef5790" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7fdb51ef2020" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7fdb51eef880" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7fdb51f45020"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fdb51f47b30"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fdb51eef600" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7fdb51f45020"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fdb51f47b30"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7fdb51ef0b30" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7fdb51f5a6a0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7fdb51f5a280"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fdb51ef08b0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7fdb51f5a6a0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7fdb51f5a280"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7fdb51ee6590" loc="227:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="222:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return byte received&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7fdb51eea570" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7fdb51ef85f0" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7fdb51ee9480" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7fdb51ef2790" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7fdb51ef4800" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb51ee2b50" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb51ee2b50"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fdb51ee2d90" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb51ee2d90"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fdb51edf720" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return counter value.</short>
          <long>&#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb51ee2d90"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fdb51edd880" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fdb51edd020" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fdb51edc020" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7fdb51e6c860" loc="95:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fdb51e6b0e0" loc="105:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7fdb51db63a0" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10;&#10; It has a predefined idea of what mode that capture should occur in.&#10; If that doesn't work for you, use setControl.&#10;&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; @param ccis configures which input channel to use.&#10;&#10; Msp430Timer.h has convenience definitions:&#10;&#10;     MSP430TIMER_CM_NONE,            MSP430TIMER_CCI_A&#10;     MSP430TIMER_CM_RISING,          MSP430TIMER_CCI_B&#10;     MSP430TIMER_CM_FALLING,         MSP430TIMER_CCI_GND&#10;     MSP430TIMER_CM_BOTH             MSP430TIMER_CCI_VCC&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7fdb51db7d70" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
          <variable name="ccis" ref="0x7fdb51db6110" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7fdb51dba350" loc="41:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb5227a550"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fdb52279020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7fdb51db6d40" loc="76:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7fdb51db5c40" loc="78:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7fdb51db74e0" loc="56:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short>&#10; Sets the time in compare mode.</short>
          <long>&#10; Sets the time in compare mode.&#10;&#10; setControlAsCompare has a predefined, hardcoded idea of&#10; how the control register should be set for doing a compare.&#10;&#10; Your mileage may vary and this may not work for you.   In&#10; which case you set use setControl.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7fdb51db54b0" loc="77:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7fdb51dbaaf0" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7fdb51db92b0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7fdb51db9d00" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb5227a550"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fdb52279020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fdb51db9a80" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fdb5227a550"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fdb52279020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7fdb51dad0e0" loc="45:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="42:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7fdb51daa730" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="76:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7fdb51daa4b0" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7fdb51da92e0" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="87:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fdb51da9060" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fdb51dabca0" loc="74:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="71:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fdb51dab3e0" loc="69:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="59:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7fdb51dada90" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7fdb51dad810" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7fdb51db1020" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7fdb51db19a0" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fdb51db1720" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7fdb51db03d0" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7fdb51db0150" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7fdb51db0da0" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7fdb51db0b20" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fdb51daf4e0" loc="46:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fdb51dc2a80" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7fdb51dbf350" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7fdb51dbf0d0" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7fdb51dc11f0" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fdb51dc8ca0" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7fdb51dc1930" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fdb51dc4c10" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7fdb51dc2390" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fdb51dc44d0" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fdb51dc3350" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7fdb51dc3c60" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fdb51dc39e0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7fdb51dbfd60" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7fdb51dbfae0" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fdb530f9520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7fdb51d7f1f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7fdb51c5b020" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7fdb51c5b880" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fdb530f9160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7fdb51c46420" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="38:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7fdb51c2c270" loc="54:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7fdb51c2b350" loc="71:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7fdb51c2f990" loc="44:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="39:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7fdb51c2cae0" loc="63:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7fdb51c2bc80" loc="79:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwnerInfo" loc="2:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
      <function command="" provided="0" name="inUse" ref="0x7fdb51c29e60" loc="9:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
        <documentation loc="3:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
          <short>&#10; Check whether a DefaultOwner has an active client.</short>
          <long>&#10; Check whether a DefaultOwner has an active client.&#10;&#10; @return TRUE If client is active.&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7fdb51c1e740" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7fdb52a4c020"/>
            <typename><typedef-ref name="error_t" ref="0x7fdb52a441b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fdb51c287d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fdb51c1e4c0" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fdb51c287d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7fdb51c21750" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7fdb51c202a0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fdb51c287d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fdb51c20020" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fdb51c287d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7fdb51c20bb0" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7fdb51c287d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:../../../tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:../../../tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x7fdb51bafce0" loc="62:../../../tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:../../../tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb51b3b350" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb51b3b350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fdb51b3bc70" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fdb530f9920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fdb51b38c70" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fdb51b38c70"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fdb51b35020" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb51b35020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fdb51b31c50" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb51b35020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fdb51b33ba0" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7fdb51b312b0" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb51b35020"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb51b35020"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fdb51b32bd0" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb51b35020"/></type-var>
          </variable>
          <variable name="dt" ref="0x7fdb51b31020" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb51b35020"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fdb51b323b0" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fdb52a52090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7fdb51b30480" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb51b35020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fdb51b35b80" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb51b35020"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fdb51b35900" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fdb51b35020"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fdb51b333e0" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSkew" loc="51:../../../tos/lib/timer/TimeSkew.nc">
      <documentation loc="35:../../../tos/lib/timer/TimeSkew.nc">
        <short>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.</short>
        <long>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.  Under various circumstances&#10; adjustments may be made by this underlying timing that can result&#10; in time skew.&#10;&#10; Typically this can occur when the RTC (Real Time Clock) subsystem&#10; has had its time adjusted for example via a GPS providing synchronized&#10; time.  If this skew is below a reasonable threshold (platform dependent)&#10; TimeSkew.skew(skew_val) will be signalled.  Beyond that threshold&#10; it might be better to reboot and reestablish reasonable time via&#10; those mechanisms.&#10;&#10; @author Eric B.Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function event="" provided="0" name="skew" ref="0x7fdb51a1ee80" loc="62:../../../tos/lib/timer/TimeSkew.nc">
        <documentation loc="52:../../../tos/lib/timer/TimeSkew.nc">
          <short>&#10; Signaled when the underlying timing system has detected timing&#10; skew.</short>
          <long>&#10; Signaled when the underlying timing system has detected timing&#10; skew.&#10;&#10; @param skew    estimated skew computed.  in millisecs (units platform&#10;                dependent, typically binary millisecs).&#10;                > 0, time has been moved into the future (we were slow).&#10;                &#60; 0, time has been shifted backwards, (we were fast).&#10;                = 0, skew is beyond platform limits.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSkew"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7fdb530fa930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skew" ref="0x7fdb51a1ec00" loc="62:../../../tos/lib/timer/TimeSkew.nc">
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7fdb530fa930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
