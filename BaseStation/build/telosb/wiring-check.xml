<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="84:BaseStationC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f540e0ae660"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f540e164640"/></to>
    </wire>
    <wire loc="72:../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f540e164640"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f540e0c7110"/></to>
    </wire>
    <wire loc="86:BaseStationC.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0x7f540e0adbe0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f540dcfd020"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f540dcfd020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f540dcce080"/></to>
    </wire>
    <wire loc="87:BaseStationC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f540e0ad020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f540cca85c0"/></to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f540cca85c0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f540cc3d8d0"/></to>
    </wire>
    <wire loc="89:BaseStationC.nc">
      <from><interface-ref name="UartSend" scoped="" ref="0x7f540e0a7020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f540cca5600"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f540cca5600"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f540cc47110"/></to>
    </wire>
    <wire loc="90:BaseStationC.nc">
      <from><interface-ref name="UartReceive" scoped="" ref="0x7f540e055da0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f540cca4800"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f540cca4800"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f540cc47e70"/></to>
    </wire>
    <wire loc="91:BaseStationC.nc">
      <from><interface-ref name="UartPacket" scoped="" ref="0x7f540e04c870"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f540cca4e10"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f540cca4e10"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f540cc44a40"/></to>
    </wire>
    <wire loc="92:BaseStationC.nc">
      <from><interface-ref name="UartAMPacket" scoped="" ref="0x7f540e03c9b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f540cca3ab0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f540cca3ab0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f540cc45490"/></to>
    </wire>
    <wire loc="94:BaseStationC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f540e04d6e0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f540dcfc050"/></to>
    </wire>
    <wire loc="80:../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f540dcfc050"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f540dccc1d0"/></to>
    </wire>
    <wire loc="95:BaseStationC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f540e03aa50"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f540dcfb210"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f540dcfb210"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f540dccb3f0"/></to>
    </wire>
    <wire loc="96:BaseStationC.nc">
      <from><interface-ref name="RadioSnoop" scoped="" ref="0x7f540e0396b0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f540dcfbdf0"/></to>
    </wire>
    <wire loc="82:../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f540dcfbdf0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f540dcca020"/></to>
    </wire>
    <wire loc="97:BaseStationC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f540e039d70"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f540dcfa450"/></to>
    </wire>
    <wire loc="83:../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f540dcfa450"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f540dcc9c20"/></to>
    </wire>
    <wire loc="98:BaseStationC.nc">
      <from><interface-ref name="RadioAMPacket" scoped="" ref="0x7f540e038b40"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f540dcf9120"/></to>
    </wire>
    <wire loc="84:../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f540dcf9120"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f540dcca650"/></to>
    </wire>
    <wire loc="100:BaseStationC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f540e0290d0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f540dfd7020"/></to>
    </wire>
    <wire loc="51:../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f540dfd7020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f540dfd3a10"/></to>
    </wire>
    <wire loc="73:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e163af0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540bef4020"/></to>
    </wire>
    <wire loc="59:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e163af0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540cc3d280"/></to>
    </wire>
    <wire loc="104:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e163af0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540cd7edd0"/></to>
    </wire>
    <wire loc="60:../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e163af0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540ce08b50"/></to>
    </wire>
    <wire loc="58:../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e163af0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540ce27750"/></to>
    </wire>
    <wire loc="52:../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e163af0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540ce48080"/></to>
    </wire>
    <wire loc="53:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e163af0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540cfb93a0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e163af0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540d0b9620"/></to>
    </wire>
    <wire loc="62:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e163af0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540d1a8c60"/></to>
    </wire>
    <wire loc="63:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e163af0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540db4ac60"/></to>
    </wire>
    <wire loc="73:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e163af0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540c216020"/></to>
    </wire>
    <wire loc="74:../../tos/system/StateImplC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e163af0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540d67b020"/></to>
    </wire>
    <wire loc="60:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e163af0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540dbfb510"/></to>
    </wire>
    <wire loc="67:../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f540e0c7780"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f540e6071e0"/></to>
    </wire>
    <wire loc="53:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f540e6071e0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f540e1ac140"/></to>
    </wire>
    <wire loc="68:../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f540e0c61d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540e166a40"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f540e166a40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540e15ecb0"/></to>
    </wire>
    <wire loc="71:../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e0c68d0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e163af0"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f540e157b60"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f540e153390"/></to>
    </wire>
    <wire loc="50:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f540e1529f0"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f540e154390"/></to>
    </wire>
    <wire loc="46:../../tos/platforms/telosb/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f540e154390"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540e120280"/></to>
    </wire>
    <wire loc="51:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f540e151120"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540e1391a0"/></to>
    </wire>
    <wire loc="56:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f540e151800"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540dfaa2e0"/></to>
    </wire>
    <wire loc="46:../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f540e120280"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540e1081c0"/></to>
    </wire>
    <wire loc="47:../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f540e119850"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f540e108830"/></to>
    </wire>
    <wire loc="48:../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f540e282c80"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f540e107af0"/></to>
    </wire>
    <wire loc="54:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e1ab040"/></to>
    </wire>
    <wire loc="56:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f540e1a6490"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f540e3df9a0"/></to>
    </wire>
    <wire loc="98:BaseStationP.nc">
      <from><interface-ref name="uartSendTask" scoped="" ref="0x7f540e024410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="99:BaseStationP.nc">
      <from><interface-ref name="radioSendTask" scoped="" ref="0x7f540e023360"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f540dfaa2e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540dfd3410"/></to>
    </wire>
    <wire loc="54:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f540dfd0060"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f540dfd4ae0"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f540dfd4ae0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f540dd2e480"/></to>
    </wire>
    <wire loc="55:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f540dfcf340"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f540dfadce0"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f540dfadce0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f540dd18b20"/></to>
    </wire>
    <wire loc="56:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f540dfca660"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f540dfab020"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f540dfab020"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f540dd111b0"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540dd1c610"/></from>
      <to><interface-ref name="Port54" scoped="" ref="0x7f540df3e8a0"/></to>
    </wire>
    <wire loc="737:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f540df3e8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540dde7b90"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540dd16de0"/></from>
      <to><interface-ref name="Port55" scoped="" ref="0x7f540df3b020"/></to>
    </wire>
    <wire loc="738:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f540df3b020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540dde1060"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540dd10480"/></from>
      <to><interface-ref name="Port56" scoped="" ref="0x7f540df398a0"/></to>
    </wire>
    <wire loc="739:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f540df398a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540dddc540"/></to>
    </wire>
    <wire loc="693:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f540df8f580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de96060"/></to>
    </wire>
    <wire loc="706:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f540df76710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de5f740"/></to>
    </wire>
    <wire loc="844:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f540deecd30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de4f540"/></to>
    </wire>
    <wire loc="864:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f540def1d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddb0060"/></to>
    </wire>
    <wire loc="845:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f540df1ad50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de4ab90"/></to>
    </wire>
    <wire loc="711:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f540df71710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de54060"/></to>
    </wire>
    <wire loc="724:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f540df578a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de1e740"/></to>
    </wire>
    <wire loc="748:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f540df298a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddbb540"/></to>
    </wire>
    <wire loc="848:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f540df15d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de3e540"/></to>
    </wire>
    <wire loc="858:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f540df01d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddd1060"/></to>
    </wire>
    <wire loc="870:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f540dee2d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddab540"/></to>
    </wire>
    <wire loc="696:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f540df88d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de85060"/></to>
    </wire>
    <wire loc="849:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f540df12580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de39b90"/></to>
    </wire>
    <wire loc="701:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f540df83d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de7bb90"/></to>
    </wire>
    <wire loc="714:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f540df69e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de44060"/></to>
    </wire>
    <wire loc="727:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f540df4f020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de0d540"/></to>
    </wire>
    <wire loc="740:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f540df36020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddd7b90"/></to>
    </wire>
    <wire loc="751:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f540df21020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddab540"/></to>
    </wire>
    <wire loc="691:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f540df94580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540dea1740"/></to>
    </wire>
    <wire loc="704:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f540df7b580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de6ad10"/></to>
    </wire>
    <wire loc="717:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f540df61710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de33060"/></to>
    </wire>
    <wire loc="843:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f540df1c580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de4f540"/></to>
    </wire>
    <wire loc="861:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f540def9570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddc0060"/></to>
    </wire>
    <wire loc="868:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f540dee4570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddab540"/></to>
    </wire>
    <wire loc="854:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f540df08580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddec540"/></to>
    </wire>
    <wire loc="722:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f540df5c710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de29dc0"/></to>
    </wire>
    <wire loc="735:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f540df438a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddf2060"/></to>
    </wire>
    <wire loc="746:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f540df2e8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddc7b90"/></to>
    </wire>
    <wire loc="862:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f540def6d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddbb540"/></to>
    </wire>
    <wire loc="851:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f540df10d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddfd540"/></to>
    </wire>
    <wire loc="694:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f540df8dd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de90540"/></to>
    </wire>
    <wire loc="707:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f540df74e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de5ab90"/></to>
    </wire>
    <wire loc="744:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f540df348a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddd1060"/></to>
    </wire>
    <wire loc="712:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f540df6fe50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de4f540"/></to>
    </wire>
    <wire loc="725:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f540df54020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de19b90"/></to>
    </wire>
    <wire loc="749:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f540df26020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddb6b90"/></to>
    </wire>
    <wire loc="853:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f540df0bd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddf2060"/></to>
    </wire>
    <wire loc="689:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f540df97530"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540dedad10"/></to>
    </wire>
    <wire loc="702:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f540df80580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de75060"/></to>
    </wire>
    <wire loc="715:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f540df66710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de3e540"/></to>
    </wire>
    <wire loc="728:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f540df4d8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de08b90"/></to>
    </wire>
    <wire loc="855:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f540df06d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de33060"/></to>
    </wire>
    <wire loc="859:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f540defe570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddcc540"/></to>
    </wire>
    <wire loc="865:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f540deee570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddab540"/></to>
    </wire>
    <wire loc="733:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f540df488a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddfd540"/></to>
    </wire>
    <wire loc="856:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f540df03580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de2e540"/></to>
    </wire>
    <wire loc="692:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f540df92d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de9cb90"/></to>
    </wire>
    <wire loc="705:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f540df79e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de64260"/></to>
    </wire>
    <wire loc="718:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f540df5fe50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de2e540"/></to>
    </wire>
    <wire loc="852:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f540df0d580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddf8b90"/></to>
    </wire>
    <wire loc="863:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f540def3570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddb6b90"/></to>
    </wire>
    <wire loc="723:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f540df59020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de23260"/></to>
    </wire>
    <wire loc="736:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f540df40020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddec540"/></to>
    </wire>
    <wire loc="747:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f540df2b020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddc0060"/></to>
    </wire>
    <wire loc="695:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f540df8a580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de8bb90"/></to>
    </wire>
    <wire loc="745:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f540df30020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddcc540"/></to>
    </wire>
    <wire loc="700:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f540df85580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de80540"/></to>
    </wire>
    <wire loc="713:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f540df6b710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de4ab90"/></to>
    </wire>
    <wire loc="726:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f540df528a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de12060"/></to>
    </wire>
    <wire loc="750:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f540df248a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddb0060"/></to>
    </wire>
    <wire loc="690:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f540dfa5d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540dea6260"/></to>
    </wire>
    <wire loc="703:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f540df7ed50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de70540"/></to>
    </wire>
    <wire loc="716:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f540df64e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de39b90"/></to>
    </wire>
    <wire loc="729:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f540df4a020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de02060"/></to>
    </wire>
    <wire loc="860:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f540defcd40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddc7b90"/></to>
    </wire>
    <wire loc="847:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f540dee9560"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de44060"/></to>
    </wire>
    <wire loc="846:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f540df17580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de44060"/></to>
    </wire>
    <wire loc="734:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f540df45020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddf8b90"/></to>
    </wire>
    <wire loc="867:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f540dee7d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddb0060"/></to>
    </wire>
    <wire loc="871:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f540dedf580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540ddd7b90"/></to>
    </wire>
    <wire loc="842:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f540df1f8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f540de54060"/></to>
    </wire>
    <wire loc="82:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f540dcce080"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f540dca7d80"/></to>
    </wire>
    <wire loc="85:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f540dccc1d0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f540cd44e80"/></to>
    </wire>
    <wire loc="88:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f540dcca020"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f540cd3fdb0"/></to>
    </wire>
    <wire loc="84:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f540dcc9c20"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f540cd3da80"/></to>
    </wire>
    <wire loc="89:../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f540dcf7430"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f540d035550"/></to>
    </wire>
    <wire loc="59:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f540d035550"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f540d026a80"/></to>
    </wire>
    <wire loc="86:../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f540dcdb430"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f540dcbde70"/></to>
    </wire>
    <wire loc="91:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f540dcbde70"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f540dc90080"/></to>
    </wire>
    <wire loc="87:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f540dccb3f0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f540cd3f1d0"/></to>
    </wire>
    <wire loc="85:../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f540dcf0350"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f540dcc7c80"/></to>
    </wire>
    <wire loc="93:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f540dcc7c80"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f540dc91020"/></to>
    </wire>
    <wire loc="89:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f540dcca650"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f540cd3e430"/></to>
    </wire>
    <wire loc="90:../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f540dce7660"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f540d031660"/></to>
    </wire>
    <wire loc="60:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f540d031660"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f540d023af0"/></to>
    </wire>
    <wire loc="97:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f540dca7d80"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f540cd72b80"/></to>
    </wire>
    <wire loc="83:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f540dcbd020"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f540cd3b8b0"/></to>
    </wire>
    <wire loc="86:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f540dcb3020"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f540cd3cce0"/></to>
    </wire>
    <wire loc="92:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f540dcc0dc0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f540dc92140"/></to>
    </wire>
    <wire loc="84:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f540dc92140"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f540d03a660"/></to>
    </wire>
    <wire loc="83:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f540dc90080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f540cd72080"/></to>
    </wire>
    <wire loc="85:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f540dc91020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f540d0376e0"/></to>
    </wire>
    <wire loc="90:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f540dcaa0d0"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f540dc90b70"/></to>
    </wire>
    <wire loc="82:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f540dc90b70"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f540cd5d020"/></to>
    </wire>
    <wire loc="94:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f540dcbce00"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f540dc919d0"/></to>
    </wire>
    <wire loc="86:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f540dc919d0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f540d036a70"/></to>
    </wire>
    <wire loc="97:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioResource" scoped="" ref="0x7f540cd320f0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540dc9e670"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="98:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f540cd3a860"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f540dc9cd10"/></to>
    </wire>
    <wire loc="93:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7f540dc9cd10"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f540cddbc90"/></to>
    </wire>
    <wire loc="99:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f540cd38690"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f540dc95a90"/></to>
    </wire>
    <wire loc="94:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7f540dc95a90"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f540cddaa50"/></to>
    </wire>
    <wire loc="101:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f540cd344d0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f540d260b20"/></to>
    </wire>
    <wire loc="102:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f540cd38ce0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f540d03a660"/></to>
    </wire>
    <wire loc="55:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f540d03a660"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f540d02cd10"/></to>
    </wire>
    <wire loc="103:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540cd37b70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540d0360c0"/></to>
    </wire>
    <wire loc="57:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540d0360c0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540d028640"/></to>
    </wire>
    <wire loc="104:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f540cd36610"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f540dc05dc0"/></to>
    </wire>
    <wire loc="55:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f540dc05dc0"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f540dbfa970"/></to>
    </wire>
    <wire loc="106:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7f540cd331f0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f540dc8a330"/></to>
    </wire>
    <wire loc="54:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f540dc8a330"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f540dc857e0"/></to>
    </wire>
    <wire loc="109:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f540cd32d30"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f540dfd7020"/></to>
    </wire>
    <wire loc="63:../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f540cd72b80"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f540cd6fd90"/></to>
    </wire>
    <wire loc="58:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f540d036a70"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f540d026020"/></to>
    </wire>
    <wire loc="53:../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f540cd5d020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f540cd5b400"/></to>
    </wire>
    <wire loc="97:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7f540cddbc90"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f540cdd0a20"/></to>
    </wire>
    <wire loc="64:../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f540cd72080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f540cd6b2d0"/></to>
    </wire>
    <wire loc="90:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f540dc9d820"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f540cddb5e0"/></to>
    </wire>
    <wire loc="92:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f540cddb5e0"/></from>
      <to><interface-ref name="BareReceive" scoped="" ref="0x7f540cdd0370"/></to>
    </wire>
    <wire loc="56:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f540d0376e0"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f540d029c50"/></to>
    </wire>
    <wire loc="88:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540dc9e670"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540cdddbe0"/></to>
    </wire>
    <wire loc="96:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540cdddbe0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540cdd27b0"/></to>
    </wire>
    <wire loc="89:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f540dc94a30"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f540cddc8e0"/></to>
    </wire>
    <wire loc="91:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f540cddc8e0"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x7f540cdd14d0"/></to>
    </wire>
    <wire loc="91:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7f540dc9c020"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7f540cdd9170"/></to>
    </wire>
    <wire loc="93:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7f540cdd9170"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7f540cdce020"/></to>
    </wire>
    <wire loc="98:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7f540cddaa50"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f540cdcf840"/></to>
    </wire>
    <wire loc="98:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f540cd6fd90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f540dc8c390"/></to>
    </wire>
    <wire loc="55:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f540dc8c390"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f540dc89e70"/></to>
    </wire>
    <wire loc="101:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f540cdd86b0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f540ce2c220"/></to>
    </wire>
    <wire loc="55:../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f540ce2c220"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f540ce2aa10"/></to>
    </wire>
    <wire loc="102:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f540ce2b020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f540cd60340"/></to>
    </wire>
    <wire loc="54:../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f540cd60340"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f540cd5dd70"/></to>
    </wire>
    <wire loc="103:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f540cd5dd70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f540cd76ce0"/></to>
    </wire>
    <wire loc="61:../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f540cd76ce0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f540cd70860"/></to>
    </wire>
    <wire loc="104:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f540cd70860"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f540dc8ce80"/></to>
    </wire>
    <wire loc="56:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f540dc8ce80"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f540dc86990"/></to>
    </wire>
    <wire loc="107:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f540cdd8020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f540cd73980"/></to>
    </wire>
    <wire loc="62:../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f540cd73980"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f540cd6f690"/></to>
    </wire>
    <wire loc="108:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f540cd6f690"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f540ce0fa90"/></to>
    </wire>
    <wire loc="56:../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f540ce0fa90"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f540ce0be20"/></to>
    </wire>
    <wire loc="109:../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f540ce0c950"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f540dc8bb40"/></to>
    </wire>
    <wire loc="68:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f540dc8bb40"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f540d0bd7c0"/></to>
    </wire>
    <wire loc="63:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f540d0bd7c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f540d0b7020"/></to>
    </wire>
    <wire loc="59:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540dc84640"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540dc15950"/></to>
    </wire>
    <wire loc="54:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540dc15950"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540dbfbb80"/></to>
    </wire>
    <wire loc="60:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7f540dc7cb50"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7f540dc10bf0"/></to>
    </wire>
    <wire loc="56:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7f540dc10bf0"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7f540dbf8740"/></to>
    </wire>
    <wire loc="63:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f540dc78760"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f540d1b66c0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f540dc78760"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f540d0c05c0"/></to>
    </wire>
    <wire loc="61:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f540d0c05c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f540d0b9ca0"/></to>
    </wire>
    <wire loc="55:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f540d1b66c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f540d1a6320"/></to>
    </wire>
    <wire loc="64:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7f540dc712a0"/></from>
      <to><interface-ref name="CC2420Transmit" scoped="" ref="0x7f540d1b3020"/></to>
    </wire>
    <wire loc="56:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7f540d1b3020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f540d1a6bc0"/></to>
    </wire>
    <wire loc="65:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7f540dc79060"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f540d1b3cb0"/></to>
    </wire>
    <wire loc="57:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f540d1b3cb0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f540d1a5970"/></to>
    </wire>
    <wire loc="72:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f540dc6f330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f540d03a660"/></to>
    </wire>
    <wire loc="73:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540dc66920"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540d0360c0"/></to>
    </wire>
    <wire loc="76:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f540dc6d420"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f540ce4da20"/></to>
    </wire>
    <wire loc="56:../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f540ce4da20"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f540ce46a20"/></to>
    </wire>
    <wire loc="79:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControlState" scoped="" ref="0x7f540dc6a110"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f540ce4faa0"/></to>
    </wire>
    <wire loc="74:../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f540ce4faa0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f540d67f1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f540dc6dbf0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f540dfd7020"/></to>
    </wire>
    <wire loc="76:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="sendDone_task" scoped="" ref="0x7f540dc5db70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="stopDone_task" scoped="" ref="0x7f540dc5eba0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="startDone_task" scoped="" ref="0x7f540dc5fc20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ReadRssi" scoped="" ref="0x7f540dc020c0"/></from>
      <to><interface-ref name="ReadRssi" scoped="" ref="0x7f540dbf7b40"/></to>
    </wire>
    <wire loc="63:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="StartupTimer" scoped="" ref="0x7f540dbebd90"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f540db47690"/></to>
    </wire>
    <wire loc="55:../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7f540db47690"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f540db415f0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f540dbe8060"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f540d8f7690"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f540d8f7690"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f540d8e8020"/></to>
    </wire>
    <wire loc="67:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f540dbe7380"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x7f540d8f2020"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f540d8f2020"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f540d8d7020"/></to>
    </wire>
    <wire loc="68:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7f540dbe66a0"/></from>
      <to><interface-ref name="VREN" scoped="" ref="0x7f540d8f06a0"/></to>
    </wire>
    <wire loc="77:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7f540d8f06a0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f540d8cdb00"/></to>
    </wire>
    <wire loc="71:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7f540dbe40e0"/></from>
      <to><interface-ref name="InterruptCCA" scoped="" ref="0x7f540d8b3400"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7f540d8b3400"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f540d751680"/></to>
    </wire>
    <wire loc="74:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f540dbce1d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540d2ece20"/></to>
    </wire>
    <wire loc="126:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540d2ece20"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540d6ff4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f540dbcd2b0"/></from>
      <to><interface-ref name="SRXON" scoped="" ref="0x7f540d2e97b0"/></to>
    </wire>
    <wire loc="132:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f540d2e97b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f540dbcd9c0"/></from>
      <to><interface-ref name="SRFOFF" scoped="" ref="0x7f540d2e7ae0"/></to>
    </wire>
    <wire loc="135:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f540d2e7ae0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="77:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f540dbcfa40"/></from>
      <to><interface-ref name="SXOSCON" scoped="" ref="0x7f540d2eaad0"/></to>
    </wire>
    <wire loc="130:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f540d2eaad0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f540dbcf120"/></from>
      <to><interface-ref name="SXOSCOFF" scoped="" ref="0x7f540d2e6160"/></to>
    </wire>
    <wire loc="136:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f540d2e6160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f540dbd3b00"/></from>
      <to><interface-ref name="FSCTRL" scoped="" ref="0x7f540d2de870"/></to>
    </wire>
    <wire loc="154:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f540d2de870"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f540dbdb3d0"/></from>
      <to><interface-ref name="IOCFG0" scoped="" ref="0x7f540d2dc880"/></to>
    </wire>
    <wire loc="158:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f540d2dc880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f540dbdbc80"/></from>
      <to><interface-ref name="IOCFG1" scoped="" ref="0x7f540d2da0a0"/></to>
    </wire>
    <wire loc="159:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f540d2da0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f540dbd65f0"/></from>
      <to><interface-ref name="MDMCTRL0" scoped="" ref="0x7f540d2e3e50"/></to>
    </wire>
    <wire loc="147:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f540d2e3e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540dbd2020"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540d2e1670"/></to>
    </wire>
    <wire loc="148:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540d2e1670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f540dbdf520"/></from>
      <to><interface-ref name="PANID" scoped="" ref="0x7f540d2ce500"/></to>
    </wire>
    <wire loc="184:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f540d2ce500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f540dbd7a90"/></from>
      <to><interface-ref name="IEEEADR" scoped="" ref="0x7f540d2cfce0"/></to>
    </wire>
    <wire loc="183:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f540d2cfce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f540dbd28e0"/></from>
      <to><interface-ref name="RXCTRL1" scoped="" ref="0x7f540d2dfe50"/></to>
    </wire>
    <wire loc="153:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f540d2dfe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f540dbd11c0"/></from>
      <to><interface-ref name="RSSI" scoped="" ref="0x7f540d2e1e50"/></to>
    </wire>
    <wire loc="149:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f540d2e1e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f540dbd1a70"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7f540d2e0e50"/></to>
    </wire>
    <wire loc="151:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f540d2e0e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SyncResource" scoped="" ref="0x7f540dbccd90"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540d2baa80"/></to>
    </wire>
    <wire loc="126:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540d2baa80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540d6ff4d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="94:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RssiResource" scoped="" ref="0x7f540dbcc020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540d28d9e0"/></to>
    </wire>
    <wire loc="126:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540d28d9e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540d6ff4d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="97:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f540dbdc810"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f540d260b20"/></to>
    </wire>
    <wire loc="100:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f540dbf3020"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f540d25fd20"/></to>
    </wire>
    <wire loc="23:../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f540d25fd20"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f540d245310"/></to>
    </wire>
    <wire loc="126:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="syncDone" scoped="" ref="0x7f540dbc0820"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="sync" scoped="" ref="0x7f540dbc1940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f540db4ac60"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540db42d40"/></to>
    </wire>
    <wire loc="51:../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f540db42d40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540c510720"/></to>
    </wire>
    <wire loc="52:../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7f540db415f0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f540c50f020"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f540c510720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540c508760"/></to>
    </wire>
    <wire loc="53:../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f540c50f020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f540c5021d0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f540c508760"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540c4ec340"/></to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f540c4fcb90"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f540c507020"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f540c507020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f540c4ecbd0"/></to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f540c4fe690"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f540d97c8c0"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f540d97c8c0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f540d945cf0"/></to>
    </wire>
    <wire loc="54:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f540c4e8dd0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f540c4f3e70"/></to>
    </wire>
    <wire loc="49:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f540c4f3e70"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f540db17cd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540c4e6440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540c4f05d0"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540c4f05d0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540db0fa40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f540c4e5760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f540c4ef8f0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f540c4ef8f0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f540db0c3f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f540db17cd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f540daf8cd0"/></to>
    </wire>
    <wire loc="133:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f540daf8cd0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f540daa2260"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540db0fa40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f540daf65a0"/></to>
    </wire>
    <wire loc="139:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f540daf65a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f540da406d0"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f540db0c3f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f540daf5a20"/></to>
    </wire>
    <wire loc="140:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f540daf5a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f540da3fac0"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f540db17cd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f540daf8cd0"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540db0fa40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f540daf0d40"/></to>
    </wire>
    <wire loc="153:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f540daf0d40"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f540da30220"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f540db0c3f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f540daee160"/></to>
    </wire>
    <wire loc="154:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f540daee160"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f540da2f610"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f540db17cd0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f540daf8cd0"/></to>
    </wire>
    <wire loc="71:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540db0fa40"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f540daec020"/></to>
    </wire>
    <wire loc="161:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f540daec020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f540da286d0"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f540db0c3f0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f540daeb570"/></to>
    </wire>
    <wire loc="162:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f540daeb570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f540da27ac0"/></to>
    </wire>
    <wire loc="74:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f540db17cd0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f540daf8cd0"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540db0fa40"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f540dae9410"/></to>
    </wire>
    <wire loc="168:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f540dae9410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f540da21b30"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f540db0c3f0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f540dae8890"/></to>
    </wire>
    <wire loc="169:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f540dae8890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f540da1f020"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f540db17cd0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f540daf8cd0"/></to>
    </wire>
    <wire loc="79:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540db0fa40"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f540dae68c0"/></to>
    </wire>
    <wire loc="175:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f540dae68c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f540da18220"/></to>
    </wire>
    <wire loc="80:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f540db0c3f0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f540dae5d40"/></to>
    </wire>
    <wire loc="176:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f540dae5d40"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f540da17610"/></to>
    </wire>
    <wire loc="82:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f540db17cd0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f540daf8cd0"/></to>
    </wire>
    <wire loc="83:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540db0fa40"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f540dae3a50"/></to>
    </wire>
    <wire loc="182:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f540dae3a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f540da116d0"/></to>
    </wire>
    <wire loc="84:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f540db0c3f0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f540dae1020"/></to>
    </wire>
    <wire loc="183:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f540dae1020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f540da10ac0"/></to>
    </wire>
    <wire loc="126:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f540dafca50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f540da47220"/></to>
    </wire>
    <wire loc="121:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f540dafda20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f540da4ecb0"/></to>
    </wire>
    <wire loc="163:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f540daea3e0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f540da267a0"/></to>
    </wire>
    <wire loc="120:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f540db03bb0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f540da4e020"/></to>
    </wire>
    <wire loc="184:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f540dae1da0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f540da0f7a0"/></to>
    </wire>
    <wire loc="112:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f540db07280"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f540da9c6d0"/></to>
    </wire>
    <wire loc="148:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f540daf1da0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f540da36cb0"/></to>
    </wire>
    <wire loc="147:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f540daf1020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f540da36020"/></to>
    </wire>
    <wire loc="146:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f540daf3a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f540da38b30"/></to>
    </wire>
    <wire loc="128:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f540dafada0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f540da452f0"/></to>
    </wire>
    <wire loc="170:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f540dae7890"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f540da1fcb0"/></to>
    </wire>
    <wire loc="127:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f540dafa020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f540da46610"/></to>
    </wire>
    <wire loc="106:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f540db0ba30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f540daaa3e0"/></to>
    </wire>
    <wire loc="119:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f540db04730"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f540da50b30"/></to>
    </wire>
    <wire loc="114:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f540dafe690"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f540da557a0"/></to>
    </wire>
    <wire loc="155:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f540daed020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f540da2e2f0"/></to>
    </wire>
    <wire loc="113:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f540db06700"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f540da56ac0"/></to>
    </wire>
    <wire loc="177:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f540dae4ae0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f540da162f0"/></to>
    </wire>
    <wire loc="141:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f540daf4a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f540da3e7a0"/></to>
    </wire>
    <wire loc="107:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f540daa72f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f540daa9bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="108:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f540daa7940"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f540da063f0"/></to>
    </wire>
    <wire loc="109:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f540daa6020"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f540da06b80"/></to>
    </wire>
    <wire loc="115:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f540da54610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f540daaa3e0"/></to>
    </wire>
    <wire loc="116:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f540da53c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f540daa9bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f540da4cb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f540daaa3e0"/></to>
    </wire>
    <wire loc="123:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f540da4a2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f540daa9bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f540da44160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f540daaa3e0"/></to>
    </wire>
    <wire loc="130:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f540da437a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f540daa9bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f540daa0100"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f540daa1a60"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f540daa0750"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f540da05430"/></to>
    </wire>
    <wire loc="136:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f540daa0da0"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f540da05bc0"/></to>
    </wire>
    <wire loc="142:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f540da3d610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f540daa2260"/></to>
    </wire>
    <wire loc="143:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f540da3bc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f540daa1a60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f540da35b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f540daa2260"/></to>
    </wire>
    <wire loc="150:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f540da332f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f540daa1a60"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f540da2d160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f540daa2260"/></to>
    </wire>
    <wire loc="157:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f540da2b7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f540daa1a60"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f540da25610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f540daa2260"/></to>
    </wire>
    <wire loc="165:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f540da24c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f540daa1a60"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f540da1eb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f540daa2260"/></to>
    </wire>
    <wire loc="172:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f540da1c2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f540daa1a60"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f540da15160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f540daa2260"/></to>
    </wire>
    <wire loc="179:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f540da147a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f540daa1a60"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f540da0e610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f540daa2260"/></to>
    </wire>
    <wire loc="186:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f540da0dc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f540daa1a60"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f540d9420f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f540d97a8e0"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f540d97a8e0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f540d974b80"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f540d965c50"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f540daf8cd0"/></to>
    </wire>
    <wire loc="73:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7f540d8f69c0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f540d8e3630"/></to>
    </wire>
    <wire loc="74:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7f540d8f5cf0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f540d8deb00"/></to>
    </wire>
    <wire loc="71:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7f540d8f83e0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f540d8eea20"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7f540d8f1370"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f540d8d2630"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d8edc50"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f540df8f580"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d8e72f0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7f540df578a0"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d8e27a0"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f540df92d50"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d8ddc60"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f540df97530"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d8d62f0"/></from>
      <to><interface-ref name="Port46" scoped="" ref="0x7f540df4d8a0"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d8d17a0"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7f540df59020"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d8ccc60"/></from>
      <to><interface-ref name="Port45" scoped="" ref="0x7f540df4f020"/></to>
    </wire>
    <wire loc="63:../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7f540d8af700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f540d8acc20"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f540d8b2060"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f540d740b70"/></to>
    </wire>
    <wire loc="53:../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540d895760"/></from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7f540daf3a50"/></to>
    </wire>
    <wire loc="54:../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430Capture" scoped="" ref="0x7f540d894a80"/></from>
      <to><interface-ref name="CaptureB1" scoped="" ref="0x7f540daf1da0"/></to>
    </wire>
    <wire loc="55:../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x7f540d892930"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7f540df59020"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7f540d7502f0"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f540d880d50"/></to>
    </wire>
    <wire loc="70:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f540d880d50"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f540d868020"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7f540d73f7a0"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f540d889020"/></to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f540d889020"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f540d86e470"/></to>
    </wire>
    <wire loc="82:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f540d873020"/></from>
      <to><interface-ref name="Port26" scoped="" ref="0x7f540d85c3f0"/></to>
    </wire>
    <wire loc="73:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f540d87c710"/></from>
      <to><interface-ref name="Port17" scoped="" ref="0x7f540d865a30"/></to>
    </wire>
    <wire loc="77:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f540d87ad50"/></from>
      <to><interface-ref name="Port21" scoped="" ref="0x7f540d862020"/></to>
    </wire>
    <wire loc="68:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f540d882710"/></from>
      <to><interface-ref name="Port12" scoped="" ref="0x7f540d86ba30"/></to>
    </wire>
    <wire loc="80:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f540d876710"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f540d85fa30"/></to>
    </wire>
    <wire loc="71:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f540d87e020"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x7f540d8673f0"/></to>
    </wire>
    <wire loc="83:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f540d8723f0"/></from>
      <to><interface-ref name="Port27" scoped="" ref="0x7f540d85b710"/></to>
    </wire>
    <wire loc="78:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f540d878020"/></from>
      <to><interface-ref name="Port22" scoped="" ref="0x7f540d8613f0"/></to>
    </wire>
    <wire loc="69:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f540d881a30"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f540d86ad50"/></to>
    </wire>
    <wire loc="81:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f540d875bc0"/></from>
      <to><interface-ref name="Port25" scoped="" ref="0x7f540d85d020"/></to>
    </wire>
    <wire loc="72:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f540d87d3f0"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x7f540d866710"/></to>
    </wire>
    <wire loc="76:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f540d87ba30"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x7f540d864d50"/></to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f540d8883f0"/></from>
      <to><interface-ref name="Port11" scoped="" ref="0x7f540d86c710"/></to>
    </wire>
    <wire loc="79:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f540d8773f0"/></from>
      <to><interface-ref name="Port23" scoped="" ref="0x7f540d860710"/></to>
    </wire>
    <wire loc="131:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f540d2e9160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f540d2dd880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f540d2d50a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f540d2dc0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f540d2c7500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f540d2cb500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f540d2e7490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f540d2d1880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f540d2cc500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f540d2d7880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f540d2d80a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d2eba90"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d6fd350"/></to>
    </wire>
    <wire loc="56:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d6fd350"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d6f5660"/></to>
    </wire>
    <wire loc="138:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f540d2e6e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f540d2e5490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f540d2d0c80"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f540d2e5be0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f540d2ccce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f540d2d10a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f540d2e0670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f540d2d20a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f540d2d5880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f540d2d2880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f540d2c8ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f540d2cbce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f540d2d8880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f540d2d30a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f540d2cece0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f540d2da880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f540d2c7ce0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f540d6fc2c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f540d2ea480"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f540d2e3670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f540d2df670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f540d2d60a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f540d2d6880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f540d2dd0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f540d2e42f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f540d2e3020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f540d2e67b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f540d2cf500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f540d2c8500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f540d2d70a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f540d2d3880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f540d2e9e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f540d2d90a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f540d2e4940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f540d2d9880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f540d2d00a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f540d2c69b0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f540d6fc2c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Fifo" scoped="" ref="0x7f540d6fc2c0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f540d6f3890"/></to>
    </wire>
    <wire loc="53:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6f2ba0"/></to>
    </wire>
    <wire loc="54:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6f1a30"/></to>
    </wire>
    <wire loc="51:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540d6ff4d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540d6f4510"/></to>
    </wire>
    <wire loc="55:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6ef8b0"/></to>
    </wire>
    <wire loc="59:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="WorkingState" scoped="" ref="0x7f540d6e3b40"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f540d684770"/></to>
    </wire>
    <wire loc="74:../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f540d684770"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f540d67f1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f540d6ee060"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540d662c40"/></to>
    </wire>
    <wire loc="52:../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540d662c40"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540c299a00"/></to>
    </wire>
    <wire loc="63:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f540d6ebc20"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f540d6618f0"/></to>
    </wire>
    <wire loc="53:../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f540d6618f0"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f540c297020"/></to>
    </wire>
    <wire loc="64:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f540d6e32e0"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f540d312020"/></to>
    </wire>
    <wire loc="54:../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f540d312020"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f540c296120"/></to>
    </wire>
    <wire loc="67:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f540d6eaa70"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f540dfd7020"/></to>
    </wire>
    <wire loc="88:../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <from><interface-ref name="grant" scoped="" ref="0x7f540d6dfbd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../tos/system/StateImplC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f540d67f1d0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f540d67bb70"/></to>
    </wire>
    <wire loc="110:../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f540c296120"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f540d5fa850"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f540c297020"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f540d5fb110"/></to>
    </wire>
    <wire loc="105:../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540c299a00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540d600d80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="114:../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f540c298760"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f540c28d2c0"/></to>
    </wire>
    <wire loc="64:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f540c28d2c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f540d47c2c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f540d5fb110"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f540d57fa10"/></to>
    </wire>
    <wire loc="108:../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f540c297630"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f540d5fb790"/></to>
    </wire>
    <wire loc="92:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f540d5fb790"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f540d57e060"/></to>
    </wire>
    <wire loc="111:../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f540d5f5a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f540c2968c0"/></to>
    </wire>
    <wire loc="115:../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540c280760"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540d5f88e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f540d5f6690"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540c28e640"/></to>
    </wire>
    <wire loc="63:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540c28e640"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540d47d020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="117:../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f540d5f1b40"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f540c288c10"/></to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f540c288c10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f540d47f4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540d5f88e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540d57f250"/></to>
    </wire>
    <wire loc="93:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f540d5fa850"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f540d57ec50"/></to>
    </wire>
    <wire loc="88:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540d600d80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540d580470"/></to>
    </wire>
    <wire loc="90:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f540d57c3e0"/></from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f540d5f5a40"/></to>
    </wire>
    <wire loc="94:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f540d57d5b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f540d5f6690"/></to>
    </wire>
    <wire loc="95:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f540d576480"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f540d5f1b40"/></to>
    </wire>
    <wire loc="98:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f540d57ca50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f540d56c020"/></to>
    </wire>
    <wire loc="85:../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f540d56c020"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f540d563700"/></to>
    </wire>
    <wire loc="101:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f540d576c20"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f540dfd7020"/></to>
    </wire>
    <wire loc="102:../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <from><interface-ref name="signalDone_task" scoped="" ref="0x7f540d5742f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f540d5642c0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f540d55ec20"/></to>
    </wire>
    <wire loc="86:../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f540d568d10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f540d55e2d0"/></to>
    </wire>
    <wire loc="90:../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f540d52fbb0"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f540df1c580"/></to>
    </wire>
    <wire loc="91:../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f540d52c3e0"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7f540df1ad50"/></to>
    </wire>
    <wire loc="92:../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f540d52abb0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f540df17580"/></to>
    </wire>
    <wire loc="93:../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f540d5273e0"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7f540df12580"/></to>
    </wire>
    <wire loc="94:../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f540d525bb0"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7f540df15d50"/></to>
    </wire>
    <wire loc="14:../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7f540d535d10"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f540d3d1d30"/></to>
    </wire>
    <wire loc="68:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f540c287440"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f540d47e3f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f540c287a50"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f540d3d9020"/></to>
    </wire>
    <wire loc="11:../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f540d3d9020"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f540d3d1d30"/></to>
    </wire>
    <wire loc="71:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f540c28c2b0"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f540d56c020"/></to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540c28da60"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540d47cad0"/></to>
    </wire>
    <wire loc="58:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540d47cad0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540d3e4e80"/></to>
    </wire>
    <wire loc="65:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540d47b8a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540c280760"/></to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f540d47c2c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f540d3e5a60"/></to>
    </wire>
    <wire loc="81:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f540d3e5a60"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f540c2126c0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f540d47f4d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f540d478d60"/></to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540d47d020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540d3e6ca0"/></to>
    </wire>
    <wire loc="80:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540d3e6ca0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540c213850"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7f540d47e3f0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f540d477710"/></to>
    </wire>
    <wire loc="83:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540d3e4e80"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540c211a70"/></to>
    </wire>
    <wire loc="57:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540d3e3790"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540d47b8a0"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540d466bf0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540d3e4e80"/></to>
    </wire>
    <wire loc="62:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f540d477d80"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f540d568d10"/></to>
    </wire>
    <wire loc="63:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f540d4665e0"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f540d5642c0"/></to>
    </wire>
    <wire loc="82:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f540d3e4270"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f540c212e40"/></to>
    </wire>
    <wire loc="84:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540c2109d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540d3e3790"/></to>
    </wire>
    <wire loc="85:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f540c2102d0"/></from>
      <to><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f540d3e2020"/></to>
    </wire>
    <wire loc="87:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f540c20f2b0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f540c216630"/></to>
    </wire>
    <wire loc="155:../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f540c20c480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7f540d3c8bb0"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f540d563700"/></to>
    </wire>
    <wire loc="18:../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f540d3c3700"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f540df1c580"/></to>
    </wire>
    <wire loc="19:../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f540d3c1e40"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f540df17580"/></to>
    </wire>
    <wire loc="153:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f540d2adc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f540d2b7da0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f540d2b0b50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f540d2aa670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f540d2a3e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f540d2aae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f540d2962f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f540d2992f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f540d2b5120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f540d29e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f540d29a2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f540d2afc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f540d2aec60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f540d2a4670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f540d2a7e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f540d2a9670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d2b8760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d6fd350"/></to>
    </wire>
    <wire loc="138:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f540d2b4aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f540d2b2120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f540d29da70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f540d2b2870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f540d29aad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f540d2b5dc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f540d2a0e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f540d2ae480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540d2af480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f540d2b7750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f540d2a1e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f540d2a2670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f540d2a0670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f540d297ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f540d299ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f540d2a5670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f540d2a2e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f540d29bad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f540d2a8670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f540d296ad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f540d6fc2c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f540d2b7100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f540d2b0370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f540d2ad480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f540d2a4e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f540d2a9e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f540d2a3670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f540d2ab670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f540d2b6450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f540d2abe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f540d2b1020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f540d2b1cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f540d29b2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f540d29cad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f540d2b4450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f540d29c2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f540d2972f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f540d2a5e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f540d2a1670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f540d2b6aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f540d2b5770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f540d2a8e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f540d2b1670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f540d2a7670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f540d29ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f540d2957a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f540d6fc2c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f540d280c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f540d28bda0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f540d284b50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f540d27e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f540d277e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f540d27ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f540d26a2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f540d26c2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f540d288120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f540d272670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f540d26d2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f540d282c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f540d281c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f540d278670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f540d27ae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f540d27c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d28c760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d6fd350"/></to>
    </wire>
    <wire loc="138:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f540d287aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f540d286120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f540d271a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f540d286870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f540d26dad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f540d288dc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f540d273e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f540d281480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540d282480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f540d28b750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f540d274e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f540d275670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f540d273670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f540d26bad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f540d26cad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f540d279670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f540d275e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f540d26ead0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f540d27b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f540d26aad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f540d6fc2c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f540d28b100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f540d284370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f540d280480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f540d278e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f540d27ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f540d277670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f540d27f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f540d28a450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f540d27fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f540d285020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f540d285cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f540d26e2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f540d270ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f540d287450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f540d2702f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f540d26b2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f540d279e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f540d274670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f540d28aaa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f540d288770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f540d27be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f540d285670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f540d27a670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f540d272e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f540d2697a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f540d6fc2c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="21:../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7f540d242880"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7f540d237020"/></to>
    </wire>
    <wire loc="20:../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7f540d237020"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7f540d232140"/></to>
    </wire>
    <wire loc="16:../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7f540d22dbd0"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7f540d236c50"/></to>
    </wire>
    <wire loc="21:../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7f540d236c50"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7f540d219150"/></to>
    </wire>
    <wire loc="17:../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="PowerControl" scoped="" ref="0x7f540d231530"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f540d1c41b0"/></to>
    </wire>
    <wire loc="18:../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7f540d21d540"/></from>
      <to><interface-ref name="Gpio" scoped="" ref="0x7f540d21e590"/></to>
    </wire>
    <wire loc="11:../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="Gpio" scoped="" ref="0x7f540d21e590"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f540d1cd9e0"/></to>
    </wire>
    <wire loc="18:../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f540d214910"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f540d21bc90"/></to>
    </wire>
    <wire loc="49:../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f540d21bc90"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f540d1f1a90"/></to>
    </wire>
    <wire loc="19:../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7f540d2199f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x7f540d21d540"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f540d1e1020"/></from>
      <to><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f540d1db530"/></to>
    </wire>
    <wire loc="54:../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f540d1db530"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f540d1d7e50"/></to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f540d1d4020"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x7f540db0ba30"/></to>
    </wire>
    <wire loc="9:../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d1ccc50"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f540df7b580"/></to>
    </wire>
    <wire loc="58:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="EnergyIndicator" scoped="" ref="0x7f540d1af990"/></from>
      <to><interface-ref name="EnergyIndicator" scoped="" ref="0x7f540d1a4900"/></to>
    </wire>
    <wire loc="59:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ByteIndicator" scoped="" ref="0x7f540d1b1150"/></from>
      <to><interface-ref name="ByteIndicator" scoped="" ref="0x7f540d1a30f0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="BackoffTimer" scoped="" ref="0x7f540d1a3ae0"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f540db47690"/></to>
    </wire>
    <wire loc="69:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7f540d197500"/></from>
      <to><interface-ref name="CCA" scoped="" ref="0x7f540d8f83e0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f540d191820"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f540d8f7690"/></to>
    </wire>
    <wire loc="71:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7f540d18fb40"/></from>
      <to><interface-ref name="SFD" scoped="" ref="0x7f540d8f1370"/></to>
    </wire>
    <wire loc="74:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7f540d198880"/></from>
      <to><interface-ref name="CaptureSFD" scoped="" ref="0x7f540d8af700"/></to>
    </wire>
    <wire loc="77:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f540d18d020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540d0f1c30"/></to>
    </wire>
    <wire loc="126:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540d0f1c30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540d6ff4d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d18dd10"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d0f08f0"/></to>
    </wire>
    <wire loc="125:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d0f08f0"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d6fd350"/></to>
    </wire>
    <wire loc="79:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f540d18a6d0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7f540d0ef2f0"/></to>
    </wire>
    <wire loc="129:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f540d0ef2f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f540d18ade0"/></from>
      <to><interface-ref name="STXON" scoped="" ref="0x7f540d0eecc0"/></to>
    </wire>
    <wire loc="133:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f540d0eecc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f540d189530"/></from>
      <to><interface-ref name="STXONCCA" scoped="" ref="0x7f540d0ec370"/></to>
    </wire>
    <wire loc="134:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f540d0ec370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f540d189c60"/></from>
      <to><interface-ref name="SFLUSHTX" scoped="" ref="0x7f540d0ebd00"/></to>
    </wire>
    <wire loc="138:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f540d0ebd00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f540d18be00"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7f540d0e5c60"/></to>
    </wire>
    <wire loc="151:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f540d0e5c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f540d18c780"/></from>
      <to><interface-ref name="TXFIFO" scoped="" ref="0x7f540d0cd7a0"/></to>
    </wire>
    <wire loc="196:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f540d0cd7a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f540d6fc2c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f540d18b550"/></from>
      <to><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f540d0d12f0"/></to>
    </wire>
    <wire loc="186:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f540d0d12f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540d1883e0"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540d0e6480"/></to>
    </wire>
    <wire loc="148:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540d0e6480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f540d1875e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7f540d0e3e50"/></to>
    </wire>
    <wire loc="155:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f540d0e3e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f540d186020"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7f540d0e2670"/></to>
    </wire>
    <wire loc="156:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f540d0e2670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f540d188e80"/></from>
      <to><interface-ref name="STXENC" scoped="" ref="0x7f540d0e97b0"/></to>
    </wire>
    <wire loc="142:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f540d0e97b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f540d1859c0"/></from>
      <to><interface-ref name="TXNONCE" scoped="" ref="0x7f540d0cfad0"/></to>
    </wire>
    <wire loc="191:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f540d0cfad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f540d186890"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7f540d0d02f0"/></to>
    </wire>
    <wire loc="188:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f540d0d02f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="92:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f540d185130"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7f540d0d0ad0"/></to>
    </wire>
    <wire loc="189:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f540d0d0ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7f540d17ed40"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7f540d0c0df0"/></to>
    </wire>
    <wire loc="62:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7f540d0c0df0"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7f540d0b8550"/></to>
    </wire>
    <wire loc="98:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f540d19fd00"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f540d03a660"/></to>
    </wire>
    <wire loc="99:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540d19ebb0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540d0360c0"/></to>
    </wire>
    <wire loc="100:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f540d19d950"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f540d035550"/></to>
    </wire>
    <wire loc="101:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f540d192be0"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f540d02d480"/></to>
    </wire>
    <wire loc="61:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f540d02d480"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f540d01f8b0"/></to>
    </wire>
    <wire loc="104:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f540d1836c0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f540dfd7020"/></to>
    </wire>
    <wire loc="153:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f540d0e4c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f540d0ee020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f540d0e8c70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f540d0dbe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f540d0e2e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f540d0ce2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f540d0d6670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f540d0e6c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f540d0dc670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f540d0dee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f540d0e0670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f540d0ea370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f540d0d5a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f540d0eaac0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f540d0d1ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f540d0eb060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f540d0d7e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f540d0e5480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f540d0ef940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f540d0d8e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f540d0d9670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f540d0d7670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f540d0dd670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f540d0d9e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f540d0d2ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f540d0df670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f540d0cead0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f540d6fc2c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f540d0e8490"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f540d0e4480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f540d0dce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f540d0e0e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f540d0db670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f540d0e3670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f540d0ee670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f540d0e9160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f540d0e9e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f540d0d22f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f540d0d4ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f540d0eb6b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f540d0d42f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f540d0cf2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f540d0dde50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f540d0d8670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f540d0ec9c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f540d0dfe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f540d0de670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f540d0d6e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketIndicator" scoped="" ref="0x7f540d0bc020"/></from>
      <to><interface-ref name="PacketIndicator" scoped="" ref="0x7f540d0b77c0"/></to>
    </wire>
    <wire loc="59:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f540d0a2150"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f540dfd7020"/></to>
    </wire>
    <wire loc="68:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f540d0b6020"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f540d8f7690"/></to>
    </wire>
    <wire loc="69:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7f540d0b5380"/></from>
      <to><interface-ref name="FIFO" scoped="" ref="0x7f540d8f69c0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7f540d0b46b0"/></from>
      <to><interface-ref name="FIFOP" scoped="" ref="0x7f540d8f5cf0"/></to>
    </wire>
    <wire loc="71:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f540d0b3a50"/></from>
      <to><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f540d8b2060"/></to>
    </wire>
    <wire loc="72:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f540d0b26e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540ce9b250"/></to>
    </wire>
    <wire loc="126:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540ce9b250"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540d6ff4d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f540d0b1530"/></from>
      <to><interface-ref name="RXFIFO" scoped="" ref="0x7f540ce78120"/></to>
    </wire>
    <wire loc="195:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f540ce78120"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f540d6fc2c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f540d0b0ad0"/></from>
      <to><interface-ref name="SFLUSHRX" scoped="" ref="0x7f540ce96d00"/></to>
    </wire>
    <wire loc="137:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f540ce96d00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f540d0b03a0"/></from>
      <to><interface-ref name="SACK" scoped="" ref="0x7f540ce959c0"/></to>
    </wire>
    <wire loc="139:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f540ce959c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f540d0af330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f540d03a660"/></to>
    </wire>
    <wire loc="77:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540d0ae1e0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540d0360c0"/></to>
    </wire>
    <wire loc="78:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f540d0acd70"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f540d035550"/></to>
    </wire>
    <wire loc="79:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f540d0aeb90"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f540dc05dc0"/></to>
    </wire>
    <wire loc="81:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f540d0a73e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7f540ce8d500"/></to>
    </wire>
    <wire loc="155:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f540ce8d500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f540d0a7cb0"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7f540ce8dce0"/></to>
    </wire>
    <wire loc="156:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f540ce8dce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f540d0a8b10"/></from>
      <to><interface-ref name="SRXDEC" scoped="" ref="0x7f540ce947b0"/></to>
    </wire>
    <wire loc="141:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f540ce947b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f540d0a46d0"/></from>
      <to><interface-ref name="RXNONCE" scoped="" ref="0x7f540ce79900"/></to>
    </wire>
    <wire loc="192:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f540ce79900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f540d0a5590"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7f540ce7b900"/></to>
    </wire>
    <wire loc="188:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f540ce7b900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f540d0a5e00"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7f540ce7a120"/></to>
    </wire>
    <wire loc="189:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f540ce7a120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f540d0a3020"/></from>
      <to><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f540ce7b120"/></to>
    </wire>
    <wire loc="187:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f540ce7b120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f540d0a38b0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7f540ce9a990"/></to>
    </wire>
    <wire loc="129:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f540ce9a990"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <from><interface-ref name="receiveDone_task" scoped="" ref="0x7f540d0969d0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f540cfbfa60"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f540d97c8c0"/></to>
    </wire>
    <wire loc="65:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTime32khz" scoped="" ref="0x7f540d019820"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f540cfc9790"/></to>
    </wire>
    <wire loc="69:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f540d01bb80"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f540cfa8160"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f540cfa8160"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f540cebfa20"/></to>
    </wire>
    <wire loc="58:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f540cfadd60"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f540cecd8e0"/></to>
    </wire>
    <wire loc="63:../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f540cecd8e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f540c06ebc0"/></to>
    </wire>
    <wire loc="57:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f540cfb93a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540cf7b760"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f540cf7b760"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540c0df9d0"/></to>
    </wire>
    <wire loc="61:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f540cec6020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f540cf4fcf0"/></to>
    </wire>
    <wire loc="62:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f540cf491d0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f540cf7a020"/></to>
    </wire>
    <wire loc="53:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f540cf7a020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f540c0d85f0"/></to>
    </wire>
    <wire loc="63:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f540cebdd20"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f540cf97650"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f540cf97650"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f540cf912e0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f540c0df9d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540c0c2360"/></to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f540c0d2d20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f540c0de260"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f540c0de260"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f540c0c2bf0"/></to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f540c0d59b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f540cf97650"/></to>
    </wire>
    <wire loc="54:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f540c0bddd0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f540c0c8020"/></to>
    </wire>
    <wire loc="49:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f540c0c8020"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f540db17cd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540c0bb440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540c0c7760"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540c0c7760"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540db0fa40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f540c0b9760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f540c0c5a80"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f540c0c5a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f540db0c3f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f540cf8e6d0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f540d97a8e0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f540cf45490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f540c067180"/></from>
      <to><interface-ref name="TimerFrom" scoped="" ref="0x7f540cec6020"/></to>
    </wire>
    <wire loc="65:../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimeSkew" scoped="" ref="0x7f540c0618b0"/></from>
      <to><interface-ref name="TimeSkew" scoped="" ref="0x7f540cec1450"/></to>
    </wire>
    <wire loc="68:../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f540c062410"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f540e157b60"/></to>
    </wire>
    <wire loc="153:../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f540c060020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f540ceb4ce0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f540ceab610"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f540ceab610"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f540cfadd60"/></to>
    </wire>
    <wire loc="153:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f540ce8e2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f540ce99670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f540ce922f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f540ce85500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f540ce8c500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f540ce989c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f540ce81ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f540ce7d900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f540ce902f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f540ce8f2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f540ce87ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f540ce88500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f540ce8cce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540ce9a020"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d6fd350"/></to>
    </wire>
    <wire loc="138:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f540ce95370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f540ce7f120"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f540ce94160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f540ce966b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f540ce81500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f540ce90ad0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540ce92ad0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f540ce99020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f540ce82500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f540ce85ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f540ce82ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f540ce79120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f540ce88ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f540ce83500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f540ce7d120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f540ce8bce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f540ce93ae0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f540ce8fad0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f540ce86500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f540ce8b500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f540ce86ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f540ce8ecd0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f540ce99cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f540ce93490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f540ce7e900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f540ce7e120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f540ce7f900"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f540ce7a900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f540ce87500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f540ce83ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f540ce98370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f540ce96060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f540ce89500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f540ce94e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f540ce89ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f540ce80500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f540ce78db0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f540d6fc2c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x7f540ce4b920"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x7f540ce48940"/></to>
    </wire>
    <wire loc="54:../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f540ce51990"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540ce48080"/></to>
    </wire>
    <wire loc="56:../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f540ce27e60"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f540ce2b020"/></to>
    </wire>
    <wire loc="60:../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f540ce26ae0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f540ce28690"/></to>
    </wire>
    <wire loc="74:../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f540ce28690"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f540d67f1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f540ce258f0"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f540ce4da20"/></to>
    </wire>
    <wire loc="62:../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540ce24170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540d0360c0"/></to>
    </wire>
    <wire loc="57:../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="DuplicateReceive" scoped="" ref="0x7f540ce0c200"/></from>
      <to><interface-ref name="DuplicateReceive" scoped="" ref="0x7f540ce08550"/></to>
    </wire>
    <wire loc="58:../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f540ce073f0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f540ce0c950"/></to>
    </wire>
    <wire loc="62:../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540ce07a70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540d0360c0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f540cdced70"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f540cdd86b0"/></to>
    </wire>
    <wire loc="95:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f540cdcdb10"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f540cdd8020"/></to>
    </wire>
    <wire loc="100:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f540cdcc2f0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f540d03a660"/></to>
    </wire>
    <wire loc="101:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540cdcb170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540d0360c0"/></to>
    </wire>
    <wire loc="102:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f540cdcbb70"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f540cd7d410"/></to>
    </wire>
    <wire loc="184:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <from><interface-ref name="grantTask" scoped="" ref="0x7f540cd9edb0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SendState" scoped="" ref="0x7f540cd71800"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f540cd6c580"/></to>
    </wire>
    <wire loc="74:../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f540cd6c580"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f540d67f1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f540cd581a0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f540dc91020"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f540cc3d8d0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f540cc302f0"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f540cca11a0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f540cc43720"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f540cc3d280"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f540cc34c60"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f540cc38dc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f540cca1b20"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f540cc42120"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f540cc3b480"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f540cc42d70"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f540cc3c940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f540cc384a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7f540c91ea30"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f540cc3b480"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f540caff830"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f540cc3c940"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f540caff110"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7f540cafe760"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f540cc384a0"/></to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f540cc2d8e0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f540cc38dc0"/></to>
    </wire>
    <wire loc="71:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f540cafc590"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f540cc38dc0"/></to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f540caf4cc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f540cc38dc0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f540cafd0e0"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f540cc265c0"/></to>
    </wire>
    <wire loc="75:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7f540cafd9d0"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7f540cc2a130"/></to>
    </wire>
    <wire loc="77:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7f540cc208e0"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7f540caf8b60"/></to>
    </wire>
    <wire loc="78:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f540cc1f060"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f540cacd080"/></to>
    </wire>
    <wire loc="17:../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f540cacd080"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f540c931080"/></to>
    </wire>
    <wire loc="80:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f540caead20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f540cacd890"/></to>
    </wire>
    <wire loc="13:../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f540cacd890"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f540c937440"/></to>
    </wire>
    <wire loc="332:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7f540cbcae40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7f540cc01d10"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7f540cbcc400"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f540cbc50c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7f540cafbc50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7f540cafa480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="14:../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f540cacb020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f540c936440"/></to>
    </wire>
    <wire loc="61:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f540c936440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f540cab7020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f540c937440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f540cab9860"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="18:../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f540c935020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f540c9318e0"/></to>
    </wire>
    <wire loc="19:../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540c930020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540c938020"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540c938020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540cabc7a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f540c938c70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f540bf69a90"/></to>
    </wire>
    <wire loc="60:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f540bf69a90"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f540c97a510"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f540cab4450"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f540c935020"/></to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540bf63be0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540cabba30"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f540cab61d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540bf6ae00"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540bf6ae00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540c97c280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f540cab31d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f540bf63440"/></to>
    </wire>
    <wire loc="63:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f540bf63440"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f540c97d510"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540cabba30"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540ca48dc0"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f540cab7020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f540ca46890"/></to>
    </wire>
    <wire loc="58:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f540cab9860"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f540ca476d0"/></to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540cabc7a0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540ca48020"/></to>
    </wire>
    <wire loc="57:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f540ca443e0"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f540cab4450"/></to>
    </wire>
    <wire loc="60:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f540ca455b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f540cab61d0"/></to>
    </wire>
    <wire loc="61:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f540ca3e5b0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f540cab31d0"/></to>
    </wire>
    <wire loc="64:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f540ca44a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f540ca2ed30"/></to>
    </wire>
    <wire loc="88:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f540ca2ed30"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f540ca263c0"/></to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f540ca3d020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f540c9987b0"/></to>
    </wire>
    <wire loc="49:../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f540c9987b0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f540d97a8e0"/></to>
    </wire>
    <wire loc="70:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f540ca3b120"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f540dfd7020"/></to>
    </wire>
    <wire loc="89:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f540ca2a860"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f540ca21020"/></to>
    </wire>
    <wire loc="87:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f540ca2e500"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f540ca299c0"/></to>
    </wire>
    <wire loc="91:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f540ca218f0"/></from>
      <to><interface-ref name="SIMO1" scoped="" ref="0x7f540df0d580"/></to>
    </wire>
    <wire loc="92:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f540ca1e020"/></from>
      <to><interface-ref name="SOMI1" scoped="" ref="0x7f540df0bd50"/></to>
    </wire>
    <wire loc="93:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f540ca1c890"/></from>
      <to><interface-ref name="UCLK1" scoped="" ref="0x7f540df08580"/></to>
    </wire>
    <wire loc="94:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f540ca19020"/></from>
      <to><interface-ref name="URXD1" scoped="" ref="0x7f540df03580"/></to>
    </wire>
    <wire loc="95:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f540ca17890"/></from>
      <to><interface-ref name="UTXD1" scoped="" ref="0x7f540df06d50"/></to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f540bf68a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f540ca2ed30"/></to>
    </wire>
    <wire loc="62:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540bf682b0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540c97ad20"/></to>
    </wire>
    <wire loc="58:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540c97ad20"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540c96f060"/></to>
    </wire>
    <wire loc="61:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540c979af0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540bf63be0"/></to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f540c97a510"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f540c971bd0"/></to>
    </wire>
    <wire loc="81:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f540c971bd0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f540bef06c0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f540c97d510"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f540c977230"/></to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540c97c280"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540c973e30"/></to>
    </wire>
    <wire loc="80:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f540c973e30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f540bef1850"/></to>
    </wire>
    <wire loc="83:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540c96f060"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540beefa70"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f540c9762f0"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f540ca2a860"/></to>
    </wire>
    <wire loc="57:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540c96f950"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540c979af0"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540c975120"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540c96f060"/></to>
    </wire>
    <wire loc="62:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f540c968d50"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f540c970400"/></to>
    </wire>
    <wire loc="82:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f540c970400"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f540bef0e40"/></to>
    </wire>
    <wire loc="65:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f540c968020"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f540ca2e500"/></to>
    </wire>
    <wire loc="84:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540beee9d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540c96f950"/></to>
    </wire>
    <wire loc="85:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f540beee2d0"/></from>
      <to><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f540c96e0f0"/></to>
    </wire>
    <wire loc="87:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f540beed2b0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f540bef4630"/></to>
    </wire>
    <wire loc="155:../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f540beeb480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f540beb66a0"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f540c968020"/></to>
    </wire>
    <wire loc="82:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f540beb6e00"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f540c968780"/></to>
    </wire>
    <wire loc="84:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f540beb5410"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f540c968d50"/></to>
    </wire>
    <wire loc="85:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540beb4060"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540c951990"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../tos/system/MainC.nc">
      <documentation loc="45:../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="41:../../tos/platforms/telosa/PlatformC.nc">
      <documentation loc="35:../../tos/platforms/telosa/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../tos/platforms/telosa/PlatformP.nc" safe="">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="1:../../tos/platforms/telosb/MotePlatformC.nc" safe="">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../tos/platforms/telosb/MoteClockC.nc">
      <documentation loc="33:../../tos/platforms/telosb/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <documentation loc="33:../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="200:../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../tos/chips/msp430/x1xxx/McuSleepC.nc" safe="">
      <documentation loc="36:../../tos/chips/msp430/x1xxx/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MoteClockP" loc="38:../../tos/platforms/telosb/MoteClockP.nc">
      <documentation loc="33:../../tos/platforms/telosb/MoteClockP.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="65:../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="45:../../tos/system/TinySchedulerC.nc">
      <documentation loc="33:../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="53:../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="BaseStationP" loc="60:BaseStationP.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../tos/system/LedsC.nc">
      <documentation loc="34:../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="40:../../tos/platforms/telosa/PlatformLedsC.nc">
      <documentation loc="34:../../tos/platforms/telosa/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="37:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; Digital pin i/o abstraction, TI MSP430 processors.</short>
        <long>&#10; Digital pin i/o abstraction, TI MSP430 processors.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @author Joao Goncalves &#60;joao.m.goncalves@ist.utl.pt>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="79(HplMsp430GeneralIOC.P10):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="79(HplMsp430GeneralIOC.P11):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="79(HplMsp430GeneralIOC.P12):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="79(HplMsp430GeneralIOC.P13):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="79(HplMsp430GeneralIOC.P14):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="79(HplMsp430GeneralIOC.P15):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="79(HplMsp430GeneralIOC.P16):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="79(HplMsp430GeneralIOC.P17):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="79(HplMsp430GeneralIOC.P20):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="79(HplMsp430GeneralIOC.P21):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="79(HplMsp430GeneralIOC.P22):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="79(HplMsp430GeneralIOC.P23):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="79(HplMsp430GeneralIOC.P24):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="79(HplMsp430GeneralIOC.P25):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="79(HplMsp430GeneralIOC.P26):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="79(HplMsp430GeneralIOC.P27):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="79(HplMsp430GeneralIOC.P30):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="79(HplMsp430GeneralIOC.P31):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="79(HplMsp430GeneralIOC.P32):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="79(HplMsp430GeneralIOC.P33):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="79(HplMsp430GeneralIOC.P34):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="79(HplMsp430GeneralIOC.P35):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="79(HplMsp430GeneralIOC.P36):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="79(HplMsp430GeneralIOC.P37):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="79(HplMsp430GeneralIOC.P40):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="79(HplMsp430GeneralIOC.P41):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="79(HplMsp430GeneralIOC.P42):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="79(HplMsp430GeneralIOC.P43):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="79(HplMsp430GeneralIOC.P44):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="79(HplMsp430GeneralIOC.P45):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="79(HplMsp430GeneralIOC.P46):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="79(HplMsp430GeneralIOC.P47):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="79(HplMsp430GeneralIOC.P50):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="79(HplMsp430GeneralIOC.P51):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="79(HplMsp430GeneralIOC.P52):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="79(HplMsp430GeneralIOC.P53):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="79(HplMsp430GeneralIOC.P54):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="79(HplMsp430GeneralIOC.P55):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="79(HplMsp430GeneralIOC.P56):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="79(HplMsp430GeneralIOC.P57):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="79(HplMsp430GeneralIOC.P60):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="79(HplMsp430GeneralIOC.P61):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="79(HplMsp430GeneralIOC.P62):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="79(HplMsp430GeneralIOC.P63):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="79(HplMsp430GeneralIOC.P64):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="79(HplMsp430GeneralIOC.P65):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="79(HplMsp430GeneralIOC.P66):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="79(HplMsp430GeneralIOC.P67):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="59:../../tos/platforms/telosa/ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="CC2420ActiveMessageC" loc="53:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="CC2420RadioC" loc="41:../../tos/chips/cc2420/CC2420RadioC.nc">
      <documentation loc="24:../../tos/chips/cc2420/CC2420RadioC.nc">
        <short>&#10; Radio wiring for the CC2420.</short>
        <long>&#10; Radio wiring for the CC2420.  This layer seperates the common&#10; wiring of the lower-layer components of the CC2420 stack and makes&#10; them available to clients like the AM stack and the IEEE802.15.4&#10; stack.&#10;&#10; This component provides the highest-level internal interface to&#10; other components of the CC2420 stack.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10; @author Stephen Dawson-Haggerty&#10; @version $Revision: 1.2 $ $Date: 2009/08/20 01:37:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaC" loc="42:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <documentation loc="32:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
        <short>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.</short>
        <long>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-05-14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaP" loc="37:../../tos/chips/cc2420/csma/CC2420CsmaP.nc" safe="">
      <documentation loc="32:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.12 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ControlC" loc="42:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <documentation loc="32:../../tos/chips/cc2420/control/CC2420ControlC.nc">
        <short>&#10; Implementation for configuring a ChipCon CC2420 radio.</short>
        <long>&#10; Implementation for configuring a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/05/14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ControlP" loc="42:../../tos/chips/cc2420/control/CC2420ControlP.nc" safe="">
      <documentation loc="32:../../tos/chips/cc2420/control/CC2420ControlP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Urs Hunkeler (ReadRssi implementation)&#10; @version $Revision: 1.7 $ $Date: 2008/06/24 04:07:28 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="AlarmMultiplexC" loc="43:../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <documentation loc="32:../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
        <short>&#10; A component that multiplexes the use of an alarm.</short>
        <long>&#10; A component that multiplexes the use of an alarm. The assumption is&#10; that its use is mutually exclusive and users check whether the&#10; events are for them.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm" loc="40(AlarmMultiplexC.Alarm):../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <documentation loc="32:../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420AlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C):../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC):../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer" loc="37(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer):../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC" loc="48:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <documentation loc="36:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="41(Msp430TimerC.Msp430TimerA):../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="41(Msp430TimerC.Msp430TimerB):../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="41(Msp430TimerC.Msp430TimerA0):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="41(Msp430TimerC.Msp430TimerA1):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="41(Msp430TimerC.Msp430TimerA2):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="41(Msp430TimerC.Msp430TimerB0):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="41(Msp430TimerC.Msp430TimerB1):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="41(Msp430TimerC.Msp430TimerB2):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="41(Msp430TimerC.Msp430TimerB3):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="41(Msp430TimerC.Msp430TimerB4):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="41(Msp430TimerC.Msp430TimerB5):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="41(Msp430TimerC.Msp430TimerB6):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm" loc="43(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm):../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C" loc="41:../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Counter32khz32C.nc">
        <short>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C.Transform" loc="54(Counter32khz32C.Transform):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform" loc="51(AlarmMultiplexC.Alarm.Alarm32khz32C.Transform):../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC" loc="40:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <documentation loc="32:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
        <short>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420PinsC.CCAM" loc="42(HplCC2420PinsC.CCAM):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.CSNM" loc="42(HplCC2420PinsC.CSNM):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOM" loc="42(HplCC2420PinsC.FIFOM):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOPM" loc="42(HplCC2420PinsC.FIFOPM):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.RSTNM" loc="42(HplCC2420PinsC.RSTNM):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.SFDM" loc="42(HplCC2420PinsC.SFDM):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.VRENM" loc="42(HplCC2420PinsC.VRENM):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC" loc="40:../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <documentation loc="32:../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
        <short>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420InterruptsC.CaptureSFDC" loc="47(HplCC2420InterruptsC.CaptureSFDC):../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; The default for GpioCapture is CCIxA.  Other channels are available&#10; (like B) but they need to be hardcoded in another module.  See&#10; tos/platforms/exp5438_2520/hardware/cc2520/P81SfdCaptureC.nc&#10;&#10; Lower levels have been modified to support being able to change&#10; CCIS in the control registers.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="GpioCaptureC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430InterruptC" loc="39:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for GPIO interrupts.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430InterruptP" loc="51:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc" safe="">
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptCCAC" loc="50(HplCC2420InterruptsC.InterruptCCAC):../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <documentation loc="34:../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptFIFOPC" loc="50(HplCC2420InterruptsC.InterruptFIFOPC):../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <documentation loc="34:../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="CC2420ControlC.Spi" loc="39(CC2420ControlC.Spi):../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC" loc="37:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <documentation loc="32:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:16 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420SpiP" loc="41:../../tos/chips/cc2420/spi/CC2420SpiP.nc" safe="">
      <documentation loc="32:../../tos/chips/cc2420/spi/CC2420SpiP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Roman Lim&#10; @author Razvan Musaloie-E.&#10; @author Jeonggil Ko&#10; @version $Revision: 1.4 $ $Date: 2008-06-23 20:25:15 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.WorkingStateC" loc="65(CC2420SpiWireC.WorkingStateC):../../tos/system/StateC.nc">
      <documentation loc="32:../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="StateImplC" loc="64:../../tos/system/StateImplC.nc">
      <documentation loc="32:../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="StateImplP" loc="64:../../tos/system/StateImplP.nc" safe="">
      <documentation loc="32:../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC" loc="40(CC2420SpiWireC.HplCC2420SpiC):../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <documentation loc="32:../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC" loc="79(CC2420SpiWireC.HplCC2420SpiC.SpiC):../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Spi0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P" loc="71:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <documentation loc="66:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P.SpiP" loc="73(Msp430SpiNoDma0P.SpiP):../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <documentation loc="66:../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430SpiNoDmaP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="64:../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
        <short>&#10; An HPL abstraction of USART0 on the MSP430.</short>
        <long>&#10; An HPL abstraction of USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="54:../../tos/chips/msp430/usart/HplMsp430Usart0P.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC" loc="39(CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC):../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="56(Msp430UsartShare0P.ArbiterC):../../tos/system/FcfsArbiterC.nc">
      <documentation loc="35:../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="96(Msp430UsartShare0P.ArbiterC.Arbiter):../../tos/system/ArbiterP.nc">
      <documentation loc="31:../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="46:../../tos/chips/msp430/usart/HplMsp430I2C0P.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420ControlC.SyncSpiC" loc="39(CC2420ControlC.SyncSpiC):../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ControlC.RssiResource" loc="39(CC2420ControlC.RssiResource):../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LocalIeeeEui64C" loc="11:../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <configuration/>
    </component>
    <component qname="LocalIeeeEui64P" loc="3:../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <module/>
    </component>
    <component qname="Ds2411C" loc="7:../../tos/chips/ds2411/Ds2411C.nc">
      <configuration/>
    </component>
    <component qname="Ds2411P" loc="9:../../tos/chips/ds2411/Ds2411P.nc">
      <module/>
    </component>
    <component qname="OneWireMasterC" loc="6:../../tos/lib/onewire/OneWireMasterC.nc">
      <documentation loc="1:../../tos/lib/onewire/OneWireMasterC.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10;</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="OneWireMasterP" loc="9:../../tos/lib/onewire/OneWireMasterP.nc">
      <documentation loc="2:../../tos/lib/onewire/OneWireMasterP.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10; Only supports one device on the 1-wire bus.</short>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="39:../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="BusyWaitMicroC.BusyWaitCounterC" loc="52(BusyWaitMicroC.BusyWaitCounterC):../../tos/lib/timer/BusyWaitCounterC.nc">
      <documentation loc="36:../../tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="BusyWaitCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff7d0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f540dcffb40"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430CounterMicroC" loc="44:../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <documentation loc="34:../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
        <short>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.</short>
        <long>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.   If your base clock is in units of binary hertz then 1 uis, decimal&#10; hertz it will be 1us.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430CounterMicroC.Counter" loc="42(Msp430CounterMicroC.Counter):../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff7d0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f540dcffb40"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplDs2411C" loc="1:../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <configuration/>
    </component>
    <component qname="HplDs2411C.MspGpio" loc="42(HplDs2411C.MspGpio):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="Ds2411PowerControlC" loc="12:../../tos/chips/ds2411/Ds2411PowerControlC.nc">
      <module/>
    </component>
    <component qname="CC2420TransmitC" loc="41:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <documentation loc="32:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
        <short>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TransmitP" loc="46:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420TransmitC.Spi" loc="39(CC2420TransmitC.Spi):../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC" loc="39:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <documentation loc="32:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
        <short>&#10; Implementation of the receive path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the receive path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveP" loc="45:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc" safe="">
      <documentation loc="32:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Jung Il Choi&#10; @author JeongGil Ko&#10; @author Razvan Musaloiu-E&#10; @version $Revision: 1.21 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC" loc="38:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <documentation loc="32:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420PacketP" loc="43:../../tos/chips/cc2420/packet/CC2420PacketP.nc" safe="">
      <documentation loc="32:../../tos/chips/cc2420/packet/CC2420PacketP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC.CounterToLocalTimeC" loc="46(CC2420PacketC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="55(HilTimerMilliC.VirtualizeTimerC):../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC.VT" loc="61(HilTimerMilliC.VirtualizeTimerC.VT):../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <documentation loc="33:../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerImplP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f540cf3f020"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CC2420PacketC.DummyTimer" loc="44(CC2420PacketC.DummyTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC.Spi" loc="39(CC2420ReceiveC.Spi):../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RandomC" loc="43:../../tos/system/RandomC.nc">
      <documentation loc="33:../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420CsmaC.StateC" loc="65(CC2420CsmaC.StateC):../../tos/system/StateC.nc">
      <documentation loc="32:../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueSendC" loc="38:../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <documentation loc="32:../../tos/chips/cc2420/unique/UniqueSendC.nc">
        <short>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; </short>
        <long>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueSendP" loc="38:../../tos/chips/cc2420/unique/UniqueSendP.nc" safe="">
      <documentation loc="32:../../tos/chips/cc2420/unique/UniqueSendP.nc">
        <short>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.</short>
        <long>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="UniqueSendC.StateC" loc="65(UniqueSendC.StateC):../../tos/system/StateC.nc">
      <documentation loc="32:../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueReceiveC" loc="40:../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <documentation loc="32:../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
        <short>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; This should sit at the bottom of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueReceiveP" loc="41:../../tos/chips/cc2420/unique/UniqueReceiveP.nc" safe="">
      <documentation loc="32:../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
        <short> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC" loc="62:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <documentation loc="32:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
        <short>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.</short>
        <long>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.  They do not include the network byte &#10; responsible for identifying the packing as being sourced from a TinyOS&#10; network.&#10;&#10; TinyOS I-Frames are interoperability packets that do include a network&#10; byte as defined by 6LowPAN specifications.  The I-Frame header type is&#10; the default packet header used in TinyOS networks.&#10;&#10; Since either packet header is acceptable, this layer must do some &#10; preprocessing (sorry) to figure out whether or not it needs to include &#10; the functionality to process I-frames.  If I-Frames are used, then&#10; the network byte is added on the way out and checked on the way in.&#10; If the packet came from a network different from a TinyOS network, the&#10; user may access it through the DispatchP's NonTinyosReceive[] Receive &#10; interface and process it in a different radio stack.&#10;&#10; If T-Frames are used instead, this layer is simply pass-through wiring to the&#10; layer beneath.  &#10;&#10; Define &#34;CC2420_IFRAME_TYPE&#34; to use the interoperability frame and &#10; this layer&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TinyosNetworkP" loc="44:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc" safe="">
      <documentation loc="32:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
        <short>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.</short>
        <long>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.  Filters incoming packets that are not&#10; TinyOS network compatible.  Provides the 6LowpanSnoop interface to&#10; sniff for packets that were not originated from TinyOS.&#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC.FcfsResourceQueueC" loc="42(CC2420TinyosNetworkC.FcfsResourceQueueC):../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DummyLplC" loc="41:../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <documentation loc="32:../../tos/chips/cc2420/lpl/DummyLplC.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Sleep interval is always 0, and duty cycle is always 100%&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="DummyLplP" loc="39:../../tos/chips/cc2420/lpl/DummyLplP.nc">
      <documentation loc="32:../../tos/chips/cc2420/lpl/DummyLplP.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Wakeup interval is always 0 (always on)&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="DummyLplC.StateC" loc="65(DummyLplC.StateC):../../tos/system/StateC.nc">
      <documentation loc="32:../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyC" loc="38:../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <documentation loc="32:../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
        <short>&#10; Dummy configuration for PacketLink Layer&#10; </short>
        <long>&#10; Dummy configuration for PacketLink Layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyP" loc="38:../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <documentation loc="32:../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
        <short>&#10; Dummy module for Packet Link layer&#10; </short>
        <long>&#10; Dummy module for Packet Link layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ActiveMessageP" loc="46:../../tos/chips/cc2420/CC2420ActiveMessageP.nc" safe="">
      <documentation loc="33:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
        <short>&#10; Active message implementation on top of the CC2420 radio.</short>
        <long>&#10; Active message implementation on top of the CC2420 radio. This&#10; implementation uses the 16-bit addressing mode of 802.15.4: the&#10; only additional byte it adds is the AM id byte, as the first byte&#10; of the data payload.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.22 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="2:../../tos/platforms/telosa/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
        <short>&#10; An implementation of the UART on USART1 for the MSP430.</short>
        <long>&#10; An implementation of the UART on USART1 for the MSP430.&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire81@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Uart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P" loc="39:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P.UartP" loc="44(Msp430Uart1P.UartP):../../tos/chips/msp430/usart/Msp430UartP.nc">
      <documentation loc="36:../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart1C" loc="74:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <documentation loc="64:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
        <short>&#10; An HPL abstraction of USART1 on the MSP430.</short>
        <long>&#10; An HPL abstraction of USART1 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart1P" loc="59:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="40(PlatformSerialC.UartC.UsartC):../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P" loc="38:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.UsartShareP" loc="37(Msp430UsartShare1P.UsartShareP):../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC" loc="56(Msp430UsartShare1P.ArbiterC):../../tos/system/FcfsArbiterC.nc">
      <documentation loc="35:../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart1.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Queue" loc="42(Msp430UsartShare1P.ArbiterC.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <instance number="2">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Arbiter" loc="96(Msp430UsartShare1P.ArbiterC.Arbiter):../../tos/system/ArbiterP.nc">
      <documentation loc="31:../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC" loc="67(Msp430UsartShare1P.PowerManagerC):../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC.PowerManager" loc="58(Msp430UsartShare1P.PowerManagerC.PowerManager):../../tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="TelosSerialP" loc="1:../../tos/platforms/telosa/TelosSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="79:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f540ded91d0" loc="80:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f540ded9580" loc="81:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f540ded9930" loc="82:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f540ded9ce0" loc="83:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f540ded80d0" loc="84:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HplCC2420AlarmC" loc="40:../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc" abstract="">
      <documentation loc="32:../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz32C" loc="41:../../tos/chips/msp430/timer/Alarm32khz32C.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430TimerP" loc="41:../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="1:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f540dadb930" loc="42:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f540dadbcd0" loc="43:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f540dada0d0" loc="44:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f540dada450" loc="45:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f540dada7d0" loc="46:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f540dadab40" loc="47:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f540dad9020" loc="48:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f540dad93b0" loc="49:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f540dad9780" loc="50:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="41:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f540da9ec80" loc="42:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f540da9b0d0" loc="43:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f540d9b5cb0" loc="43:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f540d9b5cb0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f540d975a30" loc="42:../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f540d975a30"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f540d95e570" loc="55:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f540d95e570"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f540d95ed40" loc="56:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f540d95ed40"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f540d95d160" loc="57:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f540d95d160"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f540d95d940" loc="58:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f540d95d940"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f540d95dd10" loc="59:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f540d95c540" loc="60:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f540d95c540"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f540d93c620" loc="52:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f540d93c620"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f540d93cdf0" loc="53:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f540d93cdf0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f540d93a220" loc="54:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f540d93a220"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f540d93aa00" loc="55:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f540d93aa00"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f540d93add0" loc="56:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="GpioCaptureC" loc="47:../../tos/chips/msp430/timer/GpioCaptureC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; The default for GpioCapture is CCIxA.  Other channels are available&#10; (like B) but they need to be hardcoded in another module.  See&#10; tos/platforms/exp5438_2520/hardware/cc2520/P81SfdCaptureC.nc&#10;&#10; Lower levels have been modified to support being able to change&#10; CCIS in the control registers.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430InterruptC" loc="50:../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="CC2420SpiC" loc="39:../../tos/chips/cc2420/spi/CC2420SpiC.nc" abstract="">
      <documentation loc="32:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="StateC" loc="65:../../tos/system/StateC.nc" abstract="">
      <documentation loc="32:../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplCC2420SpiC" loc="40:../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc" abstract="">
      <documentation loc="32:../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Spi0C" loc="79:../../tos/chips/msp430/usart/Msp430Spi0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDmaP" loc="73:../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc" abstract="">
      <documentation loc="66:../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="56:../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="35:../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f540d4605e0" loc="56:../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f540d4559b0" loc="42:../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="96:../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="31:../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f540d43acc0" loc="96:../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="BusyWaitCounterC" loc="52:../../tos/lib/timer/BusyWaitCounterC.nc" abstract="">
      <documentation loc="36:../../tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f540d1ef020" loc="52:../../tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f540d1ef020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f540d1ef7b0" loc="52:../../tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540d1ef7b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f540cfcad00" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f540cfcad00"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f540cf734f0" loc="46:../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f540cf734f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="55:../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f540cf3f020" loc="55:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f540cf3f020"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f540cf3f370" loc="56:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="VirtualizeTimerImplP" loc="61:../../tos/lib/timer/VirtualizeTimerImplP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f540cf2e660" loc="61:../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f540cf2e660"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f540cf2e9b0" loc="62:../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart1C" loc="42:../../tos/chips/msp430/usart/Msp430Uart1C.nc" abstract="">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
        <short>&#10; An implementation of the UART on USART1 for the MSP430.</short>
        <long>&#10; An implementation of the UART on USART1 for the MSP430.&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire81@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="44:../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <documentation loc="36:../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart1C" loc="40:../../tos/chips/msp430/usart/Msp430Usart1C.nc" abstract="">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:../../tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:../../tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7f540e163af0" loc="58:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e163af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540e163e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f540e164640" loc="57:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f540e164640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f540e1649c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540e166a40" loc="42:../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540e166a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540e166dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f540e157b60" loc="43:../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f540e157b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f540e160ca0"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f540e160e30"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f540e160340"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f540e1604d0"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f540e160660"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f540e1607f0"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f540e160980"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f540e160b10"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f540e160020"/>
        <function-ref name="node_id" scoped="" ref="0x7f540e1601b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f540e151120" loc="7:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f540e151120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540e1514a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540e15ecb0" loc="4:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540e15ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540e1530a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f540e1529f0" loc="6:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f540e1529f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540e152d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f540e151800" loc="8:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f540e151800"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540e151b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f540e153390" loc="5:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f540e153390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f540e1524d0"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f540e152660"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f540e153a30"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f540e153bc0"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f540e153d50"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f540e152020"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f540e1521b0"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f540e152340"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f540e153710"/>
        <function-ref name="node_id" scoped="" ref="0x7f540e1538a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540e1391a0" loc="2:../../tos/platforms/telosb/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540e1391a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540e139520"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f540e154390" loc="39:../../tos/platforms/telosb/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f540e154390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540e154710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f540e119850" loc="40:../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f540e119850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f540e11f7f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f540e119d60"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f540e11f020"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f540e11f1b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f540e119bd0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f540e11f340"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f540e11f4d0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f540e11f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540e120280" loc="39:../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540e120280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540e120600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f540e108830" loc="203:../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f540e108830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f540e1077f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f540e108d40"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f540e107020"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f540e1071b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f540e108bb0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f540e107340"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f540e1074d0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f540e107660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f540e107af0" loc="204:../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f540e107af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f540e107e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540e1081c0" loc="202:../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540e1081c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540e108540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f540e282c80" loc="55:../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f540e282c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f540e45d0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f540e3df9a0" loc="51:../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f540e3df9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f540e3dfd20"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f540e4fa020"/>
        <function-ref name="sleep" scoped="" ref="0x7f540e4fa1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f540e3203d0" loc="52:../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f540e3203d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f540e320750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430ClockInit" ref="0x7f540e1218b0" loc="39:../../tos/platforms/telosb/MoteClockP.nc">
      <component-ref qname="MoteClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f540e1218b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f540e0d37f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f540e121dc0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f540e0d3020"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f540e0d31b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f540e121c30"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f540e0d3340"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f540e0d34d0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f540e0d3660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f540e0c68d0" loc="69:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f540e0c68d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540e0c6c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f540e0c7110" loc="66:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f540e0c7110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f540e0c7490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f540e0c61d0" loc="68:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f540e0c61d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540e0c6550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f540e0c7780" loc="67:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f540e0c7780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540e0c7b00"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f540e0c7c90"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f540e0c7e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f540e5fa940" loc="47:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f540e5fa940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540e5facc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f540e5fae50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f540e6071e0" loc="46:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f540e6071e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540e607560"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f540e6076f0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f540e607880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f540e1ab040" loc="55:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f540e1ab040"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540e1ab3c0"/>
        <function-ref name="runTask" scoped="" ref="0x7f540e1ab550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f540e1a6490" loc="56:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f540e1a6490"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f540e1a6810"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f540e1a69a0"/>
        <function-ref name="sleep" scoped="" ref="0x7f540e1a6b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f540e1ac140" loc="54:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f540e1ac140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540e1ac4c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f540e1ac650"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f540e1ac7e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f540e0ae660" loc="62:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f540e0ae660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f540e0ae9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f540e0ad020" loc="63:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f540e0ad020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f540e0ad3a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f540e0ad530"/>
        <function-ref name="start" scoped="" ref="0x7f540e0ad6c0"/>
        <function-ref name="stop" scoped="" ref="0x7f540e0ad850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartReceive" ref="0x7f540e055da0" loc="67:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartReceive" scoped="" ref="0x7f540e055da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540e05c180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAMPacket" ref="0x7f540e038b40" loc="75:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioAMPacket" scoped="" ref="0x7f540e038b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f540e037020"/>
        <function-ref name="source" scoped="" ref="0x7f540e0371b0"/>
        <function-ref name="address" scoped="" ref="0x7f540e037340"/>
        <function-ref name="destination" scoped="" ref="0x7f540e0374d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f540e037660"/>
        <function-ref name="setDestination" scoped="" ref="0x7f540e0377f0"/>
        <function-ref name="type" scoped="" ref="0x7f540e037980"/>
        <function-ref name="setType" scoped="" ref="0x7f540e037b10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f540e037ca0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f540e037e30"/>
        <function-ref name="localGroup" scoped="" ref="0x7f540e036020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="uartSendTask" ref="0x7f540e024410" loc="98:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="uartSendTask" scoped="" ref="0x7f540e024410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540e024790"/>
        <function-ref name="runTask" scoped="" ref="0x7f540e024920"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0x7f540e0adbe0" loc="64:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioControl" scoped="" ref="0x7f540e0adbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f540e0ac020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f540e0ac1b0"/>
        <function-ref name="start" scoped="" ref="0x7f540e0ac340"/>
        <function-ref name="stop" scoped="" ref="0x7f540e0ac4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPacket" ref="0x7f540e039d70" loc="74:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioPacket" scoped="" ref="0x7f540e039d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540e038180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f540e038310"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540e0384a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540e038630"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f540e0387c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7f540e03aa50" loc="72:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioReceive" scoped="" ref="0x7f540e03aa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540e03add0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="radioSendTask" ref="0x7f540e023360" loc="99:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="radioSendTask" scoped="" ref="0x7f540e023360"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540e0236e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f540e023870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540e0290d0" loc="77:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540e0290d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540e029550"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540e0296e0"/>
        <function-ref name="led1On" scoped="" ref="0x7f540e029870"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540e029a00"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540e029b90"/>
        <function-ref name="get" scoped="" ref="0x7f540e029d20"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540e035020"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540e035660"/>
        <function-ref name="set" scoped="" ref="0x7f540e0351b0"/>
        <function-ref name="led0On" scoped="" ref="0x7f540e035340"/>
        <function-ref name="led2On" scoped="" ref="0x7f540e0354d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartPacket" ref="0x7f540e04c870" loc="68:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartPacket" scoped="" ref="0x7f540e04c870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540e04cbf0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f540e04cd80"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540e05a020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540e05a1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f540e05a340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7f540e04d6e0" loc="71:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioSend" scoped="" ref="0x7f540e04d6e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540e04da60"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540e04dbf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540e04dd80"/>
        <function-ref name="cancel" scoped="" ref="0x7f540e03a020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540e03a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartSend" ref="0x7f540e0a7020" loc="66:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartSend" scoped="" ref="0x7f540e0a7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540e0a73a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540e0a7530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540e0a76c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540e0a7850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540e0a79e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartAMPacket" ref="0x7f540e03c9b0" loc="69:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartAMPacket" scoped="" ref="0x7f540e03c9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f540e03cd30"/>
        <function-ref name="source" scoped="" ref="0x7f540e056020"/>
        <function-ref name="address" scoped="" ref="0x7f540e0561b0"/>
        <function-ref name="destination" scoped="" ref="0x7f540e056340"/>
        <function-ref name="setSource" scoped="" ref="0x7f540e0564d0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f540e056660"/>
        <function-ref name="type" scoped="" ref="0x7f540e0567f0"/>
        <function-ref name="setType" scoped="" ref="0x7f540e056980"/>
        <function-ref name="isForMe" scoped="" ref="0x7f540e056b10"/>
        <function-ref name="setGroup" scoped="" ref="0x7f540e056ca0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f540e056e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSnoop" ref="0x7f540e0396b0" loc="73:BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioSnoop" scoped="" ref="0x7f540e0396b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540e039a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f540dfd7020" loc="46:../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540dfd7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540dfd73a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540dfd7530"/>
        <function-ref name="led1On" scoped="" ref="0x7f540dfd76c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540dfd7850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540dfd79e0"/>
        <function-ref name="get" scoped="" ref="0x7f540dfd7b70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540dfd7d00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540dfd64d0"/>
        <function-ref name="set" scoped="" ref="0x7f540dfd6020"/>
        <function-ref name="led0On" scoped="" ref="0x7f540dfd61b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f540dfd6340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f540dfd0060" loc="50:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f540dfd0060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dfd03e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dfd0570"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dfd0700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dfd0890"/>
        <function-ref name="get" scoped="" ref="0x7f540dfd0a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dfd0bb0"/>
        <function-ref name="set" scoped="" ref="0x7f540dfd0d40"/>
        <function-ref name="clr" scoped="" ref="0x7f540dfcf020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540dfd3410" loc="46:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540dfd3410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540dfd3790"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f540dfcf340" loc="51:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f540dfcf340"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dfcf6c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dfcf850"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dfcf9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dfcfb70"/>
        <function-ref name="get" scoped="" ref="0x7f540dfcfd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dfca020"/>
        <function-ref name="set" scoped="" ref="0x7f540dfca1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540dfca340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f540dfd3a10" loc="47:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540dfd3a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540dfd3d90"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540dfd2020"/>
        <function-ref name="led1On" scoped="" ref="0x7f540dfd21b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540dfd2340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540dfd24d0"/>
        <function-ref name="get" scoped="" ref="0x7f540dfd2660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540dfd27f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540dfd2e30"/>
        <function-ref name="set" scoped="" ref="0x7f540dfd2980"/>
        <function-ref name="led0On" scoped="" ref="0x7f540dfd2b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f540dfd2ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f540dfca660" loc="52:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f540dfca660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dfca9e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dfcab70"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dfcad00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dfc9020"/>
        <function-ref name="get" scoped="" ref="0x7f540dfc91b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dfc9340"/>
        <function-ref name="set" scoped="" ref="0x7f540dfc94d0"/>
        <function-ref name="clr" scoped="" ref="0x7f540dfc9660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f540dfd4ae0" loc="41:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f540dfd4ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dfd4e60"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dfad020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dfad1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dfad340"/>
        <function-ref name="get" scoped="" ref="0x7f540dfad4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dfad660"/>
        <function-ref name="set" scoped="" ref="0x7f540dfad7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f540dfad980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f540dfadce0" loc="42:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f540dfadce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dfac0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dfac230"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dfac3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dfac550"/>
        <function-ref name="get" scoped="" ref="0x7f540dfac6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dfac870"/>
        <function-ref name="set" scoped="" ref="0x7f540dfaca00"/>
        <function-ref name="clr" scoped="" ref="0x7f540dfacb90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f540dfaa2e0" loc="44:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540dfaa2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540dfaa660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f540dfab020" loc="43:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f540dfab020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dfab3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dfab530"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dfab6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dfab850"/>
        <function-ref name="get" scoped="" ref="0x7f540dfab9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dfabb70"/>
        <function-ref name="set" scoped="" ref="0x7f540dfabd00"/>
        <function-ref name="clr" scoped="" ref="0x7f540dfaa020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f540df8f580" loc="54:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f540df8f580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df8f900"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df8fa90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df8fc20"/>
        <function-ref name="clr" scoped="" ref="0x7f540df8d980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df8e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df8e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df8e340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df8e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df8e660"/>
        <function-ref name="get" scoped="" ref="0x7f540df8e7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df8e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df8eb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df8eca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df8d020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df8d1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df8d340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df8d4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df8fdb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df8d660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df8d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f540df76710" loc="67:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f540df76710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df76a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df76c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df76db0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df74a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df751b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df75340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df754d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df75660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df757f0"/>
        <function-ref name="get" scoped="" ref="0x7f540df75980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df75b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df75ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df75e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df74120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df742b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df74440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df745d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df75020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df74760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df748f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f540deecd30" loc="205:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f540deecd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540deeb0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540deeb270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540deeb400"/>
        <function-ref name="clr" scoped="" ref="0x7f540dee91b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540deeb720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540deeb8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540deeba40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540deebbd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540deebd60"/>
        <function-ref name="get" scoped="" ref="0x7f540deea020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540deea1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540deea340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540deea4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540deea760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540deea8f0"/>
        <function-ref name="set" scoped="" ref="0x7f540deeaa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540deeac10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540deeb590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540deeada0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540dee9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f540def1d40" loc="201:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f540def1d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540def00e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540def0270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540def0400"/>
        <function-ref name="clr" scoped="" ref="0x7f540deee1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540def0720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540def08b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540def0a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540def0bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540def0d60"/>
        <function-ref name="get" scoped="" ref="0x7f540deef020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540deef1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540deef340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540deef4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540deef760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540deef8f0"/>
        <function-ref name="set" scoped="" ref="0x7f540deefa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540deefc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540def0590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540deefda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540deee020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f540df1ad50" loc="183:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f540df1ad50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df19100"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df19290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df19420"/>
        <function-ref name="clr" scoped="" ref="0x7f540df171b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df19740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df198d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df19a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df19bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df19d80"/>
        <function-ref name="get" scoped="" ref="0x7f540df18020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df181b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df18340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df184d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df18760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df188f0"/>
        <function-ref name="set" scoped="" ref="0x7f540df18a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df18c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df195b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df18da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df17020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f540df71710" loc="72:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f540df71710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df71a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df71c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df71db0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df6fa80"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df701b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df70340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df704d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df70660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df707f0"/>
        <function-ref name="get" scoped="" ref="0x7f540df70980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df70b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df70ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df70e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df6f120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df6f2b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df6f440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df6f5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df70020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df6f760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df6f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f540df578a0" loc="85:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f540df578a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df57c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df57db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df56020"/>
        <function-ref name="clr" scoped="" ref="0x7f540df55c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df56340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df564d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df56660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df567f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df56980"/>
        <function-ref name="get" scoped="" ref="0x7f540df56b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df56ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df56e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df55020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df552b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df55440"/>
        <function-ref name="set" scoped="" ref="0x7f540df555d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df55760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df561b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df558f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df55a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f540df3e8a0" loc="98:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f540df3e8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df3ec20"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df3edb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df3d020"/>
        <function-ref name="clr" scoped="" ref="0x7f540df3cc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df3d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df3d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df3d660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df3d7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df3d980"/>
        <function-ref name="get" scoped="" ref="0x7f540df3db10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df3dca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df3de30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df3c020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df3c2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df3c440"/>
        <function-ref name="set" scoped="" ref="0x7f540df3c5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df3c760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df3d1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df3c8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df3ca80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f540df298a0" loc="109:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f540df298a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df29c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df29db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df28020"/>
        <function-ref name="clr" scoped="" ref="0x7f540df27c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df28340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df284d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df28660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df287f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df28980"/>
        <function-ref name="get" scoped="" ref="0x7f540df28b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df28ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df28e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df27020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df272b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df27440"/>
        <function-ref name="set" scoped="" ref="0x7f540df275d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df27760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df281b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df278f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df27a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f540df15d50" loc="185:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f540df15d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df14100"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df14290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df14420"/>
        <function-ref name="clr" scoped="" ref="0x7f540df121b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df14740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df148d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df14a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df14bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df14d80"/>
        <function-ref name="get" scoped="" ref="0x7f540df13020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df131b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df13340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df134d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df13760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df138f0"/>
        <function-ref name="set" scoped="" ref="0x7f540df13a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df13c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df145b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df13da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df12020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f540df01d40" loc="195:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f540df01d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df000e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df00270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df00400"/>
        <function-ref name="clr" scoped="" ref="0x7f540defe1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df00720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df008b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df00a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df00bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df00d60"/>
        <function-ref name="get" scoped="" ref="0x7f540deff020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540deff1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540deff340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540deff4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540deff760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540deff8f0"/>
        <function-ref name="set" scoped="" ref="0x7f540deffa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540deffc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df00590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540deffda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540defe020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f540dee2d50" loc="211:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f540dee2d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dee1100"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dee1290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540dee1420"/>
        <function-ref name="clr" scoped="" ref="0x7f540dedf1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dee1740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dee18d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540dee1a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540dee1bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dee1d80"/>
        <function-ref name="get" scoped="" ref="0x7f540dee0020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540dee01b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540dee0340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540dee04d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540dee0760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540dee08f0"/>
        <function-ref name="set" scoped="" ref="0x7f540dee0a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540dee0c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540dee15b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540dee0da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540dedf020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f540df88d50" loc="57:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f540df88d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df87100"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df87290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df87420"/>
        <function-ref name="clr" scoped="" ref="0x7f540df851b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df87740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df878d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df87a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df87bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df87d80"/>
        <function-ref name="get" scoped="" ref="0x7f540df86020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df861b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df86340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df864d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df86760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df868f0"/>
        <function-ref name="set" scoped="" ref="0x7f540df86a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df86c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df875b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df86da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df85020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f540df12580" loc="186:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f540df12580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df12900"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df12a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df12c20"/>
        <function-ref name="clr" scoped="" ref="0x7f540df10980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df11020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df111b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df11340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df114d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df11660"/>
        <function-ref name="get" scoped="" ref="0x7f540df117f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df11980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df11b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df11ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df10020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df101b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df10340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df104d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df12db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df10660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df107f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f540df83d50" loc="62:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f540df83d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df82100"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df82290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df82420"/>
        <function-ref name="clr" scoped="" ref="0x7f540df801b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df82740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df828d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df82a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df82bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df82d80"/>
        <function-ref name="get" scoped="" ref="0x7f540df81020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df811b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df81340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df814d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df81760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df818f0"/>
        <function-ref name="set" scoped="" ref="0x7f540df81a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df81c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df825b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df81da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df80020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f540df69e50" loc="75:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f540df69e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df68210"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df683a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df68530"/>
        <function-ref name="clr" scoped="" ref="0x7f540df66340"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df68850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df689e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df68b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df68d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df67020"/>
        <function-ref name="get" scoped="" ref="0x7f540df671b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df67340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df674d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df67660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df678f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df67a80"/>
        <function-ref name="set" scoped="" ref="0x7f540df67c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df67da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df686c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df66020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df661b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f540df4f020" loc="88:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f540df4f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df4f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df4f530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df4f6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df4d4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df4f9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df4fb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df4fd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df4e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df4e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f540df4e340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df4e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df4e660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df4e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df4ea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df4ec10"/>
        <function-ref name="set" scoped="" ref="0x7f540df4eda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df4d020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df4f850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df4d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df4d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f540df36020" loc="101:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f540df36020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df363a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df36530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df366c0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df344d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df369e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df36b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df36d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df35020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df351b0"/>
        <function-ref name="get" scoped="" ref="0x7f540df35340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df354d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df35660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df357f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df35a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df35c10"/>
        <function-ref name="set" scoped="" ref="0x7f540df35da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df34020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df36850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df341b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df34340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f540df21020" loc="112:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f540df21020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df213a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df21530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df216c0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df1f4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df219e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df21b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df21d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df20020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df201b0"/>
        <function-ref name="get" scoped="" ref="0x7f540df20340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df204d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df20660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df207f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df20a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df20c10"/>
        <function-ref name="set" scoped="" ref="0x7f540df20da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df1f020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df21850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df1f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df1f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f540df94580" loc="52:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f540df94580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df94900"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df94a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df94c20"/>
        <function-ref name="clr" scoped="" ref="0x7f540df92980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df93020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df931b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df93340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df934d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df93660"/>
        <function-ref name="get" scoped="" ref="0x7f540df937f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df93980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df93b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df93ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df92020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df921b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df92340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df924d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df94db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df92660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df927f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f540df7b580" loc="65:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f540df7b580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df7ba00"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df7bb90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df7bd20"/>
        <function-ref name="clr" scoped="" ref="0x7f540df79a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df7a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df7a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df7a4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df7a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df7a7f0"/>
        <function-ref name="get" scoped="" ref="0x7f540df7a980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df7ab10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df7aca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df7ae30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df79120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df792b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df79440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df795d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df7a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df79760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df798f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f540df61710" loc="78:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f540df61710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df61a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df61c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df61db0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df5fa80"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df601b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df60340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df604d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df60660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df607f0"/>
        <function-ref name="get" scoped="" ref="0x7f540df60980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df60b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df60ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df60e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df5f120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df5f2b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df5f440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df5f5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df60020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df5f760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df5f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f540df1c580" loc="182:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f540df1c580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df1c900"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df1ca90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df1cc20"/>
        <function-ref name="clr" scoped="" ref="0x7f540df1a980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df1b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df1b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df1b340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df1b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df1b660"/>
        <function-ref name="get" scoped="" ref="0x7f540df1b7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df1b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df1bb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df1bca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df1a020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df1a1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df1a340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df1a4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df1cdb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df1a660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df1a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f540def9570" loc="198:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f540def9570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540def98f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540def9a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540def9c10"/>
        <function-ref name="clr" scoped="" ref="0x7f540def6980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540def7020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540def71b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540def7340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540def74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540def7660"/>
        <function-ref name="get" scoped="" ref="0x7f540def77f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540def7980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540def7b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540def7ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540def6020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540def61b0"/>
        <function-ref name="set" scoped="" ref="0x7f540def6340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540def64d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540def9da0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540def6660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540def67f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f540dee4570" loc="209:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f540dee4570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dee48f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dee4a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540dee4c10"/>
        <function-ref name="clr" scoped="" ref="0x7f540dee2980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dee3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dee31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540dee3340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540dee34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dee3660"/>
        <function-ref name="get" scoped="" ref="0x7f540dee37f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540dee3980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540dee3b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540dee3ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540dee2020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540dee21b0"/>
        <function-ref name="set" scoped="" ref="0x7f540dee2340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540dee24d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540dee4da0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540dee2660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540dee27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f540df08580" loc="191:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f540df08580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df08900"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df08a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df08c20"/>
        <function-ref name="clr" scoped="" ref="0x7f540df06980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df07020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df071b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df07340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df074d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df07660"/>
        <function-ref name="get" scoped="" ref="0x7f540df077f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df07980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df07b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df07ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df06020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df061b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df06340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df064d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df08db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df06660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df067f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f540df5c710" loc="83:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f540df5c710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df5cc90"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df5ce20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df5b020"/>
        <function-ref name="clr" scoped="" ref="0x7f540df5ac10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df5b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df5b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df5b660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df5b7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df5b980"/>
        <function-ref name="get" scoped="" ref="0x7f540df5bb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df5bca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df5be30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df5a020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df5a2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df5a440"/>
        <function-ref name="set" scoped="" ref="0x7f540df5a5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df5a760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df5b1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df5a8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df5aa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f540df438a0" loc="96:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f540df438a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df43c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df43db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df42020"/>
        <function-ref name="clr" scoped="" ref="0x7f540df41c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df42340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df424d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df42660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df427f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df42980"/>
        <function-ref name="get" scoped="" ref="0x7f540df42b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df42ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df42e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df41020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df412b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df41440"/>
        <function-ref name="set" scoped="" ref="0x7f540df415d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df41760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df421b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df418f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df41a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f540df2e8a0" loc="107:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f540df2e8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df2ec20"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df2edb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df2d020"/>
        <function-ref name="clr" scoped="" ref="0x7f540df2cc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df2d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df2d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df2d660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df2d7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df2d980"/>
        <function-ref name="get" scoped="" ref="0x7f540df2db10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df2dca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df2de30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df2c020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df2c2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df2c440"/>
        <function-ref name="set" scoped="" ref="0x7f540df2c5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df2c760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df2d1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df2c8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df2ca80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f540def6d40" loc="199:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f540def6d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540def50e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540def5270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540def5400"/>
        <function-ref name="clr" scoped="" ref="0x7f540def31b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540def5720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540def58b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540def5a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540def5bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540def5d60"/>
        <function-ref name="get" scoped="" ref="0x7f540def4020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540def41b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540def4340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540def44d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540def4760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540def48f0"/>
        <function-ref name="set" scoped="" ref="0x7f540def4a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540def4c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540def5590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540def4da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540def3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f540df10d40" loc="188:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f540df10d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df0f0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df0f270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df0f400"/>
        <function-ref name="clr" scoped="" ref="0x7f540df0d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df0f720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df0f8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df0fa40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df0fbd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df0fd60"/>
        <function-ref name="get" scoped="" ref="0x7f540df0e020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df0e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df0e340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df0e4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df0e760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df0e8f0"/>
        <function-ref name="set" scoped="" ref="0x7f540df0ea80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df0ec10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df0f590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df0eda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df0d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f540df8dd50" loc="55:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f540df8dd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df8c100"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df8c290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df8c420"/>
        <function-ref name="clr" scoped="" ref="0x7f540df8a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df8c740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df8c8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df8ca60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df8cbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df8cd80"/>
        <function-ref name="get" scoped="" ref="0x7f540df8b020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df8b1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df8b340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df8b4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df8b760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df8b8f0"/>
        <function-ref name="set" scoped="" ref="0x7f540df8ba80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df8bc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df8c5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df8bda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df8a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f540df74e50" loc="68:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f540df74e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df73210"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df733a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df73530"/>
        <function-ref name="clr" scoped="" ref="0x7f540df71340"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df73850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df739e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df73b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df73d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df72020"/>
        <function-ref name="get" scoped="" ref="0x7f540df721b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df72340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df724d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df72660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df728f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df72a80"/>
        <function-ref name="set" scoped="" ref="0x7f540df72c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df72da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df736c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df71020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df711b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f540df348a0" loc="105:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f540df348a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df34c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df34db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df32020"/>
        <function-ref name="clr" scoped="" ref="0x7f540df31c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df32340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df324d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df32660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df327f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df32980"/>
        <function-ref name="get" scoped="" ref="0x7f540df32b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df32ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df32e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df31020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df312b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df31440"/>
        <function-ref name="set" scoped="" ref="0x7f540df315d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df31760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df321b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df318f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df31a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f540df6fe50" loc="73:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f540df6fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df6d210"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df6d3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df6d530"/>
        <function-ref name="clr" scoped="" ref="0x7f540df6b340"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df6d850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df6d9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df6db70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df6dd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df6c020"/>
        <function-ref name="get" scoped="" ref="0x7f540df6c1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df6c340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df6c4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df6c660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df6c8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df6ca80"/>
        <function-ref name="set" scoped="" ref="0x7f540df6cc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df6cda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df6d6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df6b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df6b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f540df54020" loc="86:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f540df54020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df543a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df54530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df546c0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df524d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df549e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df54b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df54d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df53020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df531b0"/>
        <function-ref name="get" scoped="" ref="0x7f540df53340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df534d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df53660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df537f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df53a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df53c10"/>
        <function-ref name="set" scoped="" ref="0x7f540df53da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df52020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df54850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df521b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df52340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f540df3b020" loc="99:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f540df3b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df3b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df3b530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df3b6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df394d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df3b9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df3bb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df3bd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df3a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df3a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f540df3a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df3a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df3a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df3a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df3aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df3ac10"/>
        <function-ref name="set" scoped="" ref="0x7f540df3ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df39020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df3b850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df391b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df39340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f540df26020" loc="110:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f540df26020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df263a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df26530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df266c0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df244d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df269e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df26b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df26d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df25020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df251b0"/>
        <function-ref name="get" scoped="" ref="0x7f540df25340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df254d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df25660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df257f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df25a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df25c10"/>
        <function-ref name="set" scoped="" ref="0x7f540df25da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df24020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df26850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df241b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df24340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f540df0bd50" loc="190:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f540df0bd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df0a100"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df0a290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df0a420"/>
        <function-ref name="clr" scoped="" ref="0x7f540df081b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df0a740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df0a8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df0aa60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df0abf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df0ad80"/>
        <function-ref name="get" scoped="" ref="0x7f540df09020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df091b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df09340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df094d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df09760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df098f0"/>
        <function-ref name="set" scoped="" ref="0x7f540df09a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df09c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df0a5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df09da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df08020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f540df97530" loc="50:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f540df97530"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df978b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df97a40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df97bd0"/>
        <function-ref name="clr" scoped="" ref="0x7f540dfa5980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dfa6020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dfa61b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540dfa6340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540dfa64d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dfa6660"/>
        <function-ref name="get" scoped="" ref="0x7f540dfa67f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540dfa6980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540dfa6b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540dfa6ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540dfa5020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540dfa51b0"/>
        <function-ref name="set" scoped="" ref="0x7f540dfa5340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540dfa54d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df97d60"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540dfa5660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540dfa57f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f540df80580" loc="63:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f540df80580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df80900"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df80a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df80c20"/>
        <function-ref name="clr" scoped="" ref="0x7f540df7e980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df7f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df7f1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df7f340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df7f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df7f660"/>
        <function-ref name="get" scoped="" ref="0x7f540df7f7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df7f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df7fb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df7fca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df7e020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df7e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df7e340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df7e4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df80db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df7e660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df7e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f540df66710" loc="76:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f540df66710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df66a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df66c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df66db0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df64a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df651b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df65340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df654d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df65660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df657f0"/>
        <function-ref name="get" scoped="" ref="0x7f540df65980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df65b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df65ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df65e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df64120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df642b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df64440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df645d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df65020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df64760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df648f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f540df4d8a0" loc="89:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f540df4d8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df4dc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df4ddb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df4c020"/>
        <function-ref name="clr" scoped="" ref="0x7f540df4bc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df4c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df4c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df4c660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df4c7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df4c980"/>
        <function-ref name="get" scoped="" ref="0x7f540df4cb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df4cca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df4ce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df4b020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df4b2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df4b440"/>
        <function-ref name="set" scoped="" ref="0x7f540df4b5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df4b760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df4c1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df4b8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df4ba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f540df06d50" loc="192:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f540df06d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df05100"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df05290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df05420"/>
        <function-ref name="clr" scoped="" ref="0x7f540df031b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df05740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df058d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df05a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df05bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df05d80"/>
        <function-ref name="get" scoped="" ref="0x7f540df04020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df041b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df04340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df044d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df04760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df048f0"/>
        <function-ref name="set" scoped="" ref="0x7f540df04a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df04c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df055b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df04da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df03020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f540defe570" loc="196:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f540defe570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540defe8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540defea80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540defec10"/>
        <function-ref name="clr" scoped="" ref="0x7f540defc980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540defd020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540defd1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540defd340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540defd4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540defd660"/>
        <function-ref name="get" scoped="" ref="0x7f540defd7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540defd980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540defdb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540defdca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540defc020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540defc1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540defc340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540defc4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540defeda0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540defc660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540defc7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f540deee570" loc="202:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f540deee570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540deee8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540deeea80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540deeec10"/>
        <function-ref name="clr" scoped="" ref="0x7f540deec980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540deed020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540deed1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540deed340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540deed4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540deed660"/>
        <function-ref name="get" scoped="" ref="0x7f540deed7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540deed980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540deedb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540deedca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540deec020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540deec1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540deec340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540deec4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540deeeda0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540deec660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540deec7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f540df488a0" loc="94:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f540df488a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df48c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df48db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df47020"/>
        <function-ref name="clr" scoped="" ref="0x7f540df46c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df47340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df474d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df47660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df477f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df47980"/>
        <function-ref name="get" scoped="" ref="0x7f540df47b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df47ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df47e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df46020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df462b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df46440"/>
        <function-ref name="set" scoped="" ref="0x7f540df465d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df46760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df471b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df468f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df46a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f540df03580" loc="193:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f540df03580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df03900"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df03a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df03c20"/>
        <function-ref name="clr" scoped="" ref="0x7f540df01980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df02020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df021b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df02340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df024d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df02660"/>
        <function-ref name="get" scoped="" ref="0x7f540df027f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df02980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df02b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df02ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df01020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df011b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df01340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df014d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df03db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df01660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df017f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f540df92d50" loc="53:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f540df92d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df91100"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df91290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df91420"/>
        <function-ref name="clr" scoped="" ref="0x7f540df8f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df91740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df918d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df91a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df91bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df91d80"/>
        <function-ref name="get" scoped="" ref="0x7f540df90020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df901b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df90340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df904d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df90760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df908f0"/>
        <function-ref name="set" scoped="" ref="0x7f540df90a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df90c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df915b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df90da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df8f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f540df79e50" loc="66:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f540df79e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df78210"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df783a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df78530"/>
        <function-ref name="clr" scoped="" ref="0x7f540df76340"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df78850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df789e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df78b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df78d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df77020"/>
        <function-ref name="get" scoped="" ref="0x7f540df771b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df77340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df774d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df77660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df778f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df77a80"/>
        <function-ref name="set" scoped="" ref="0x7f540df77c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df77da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df786c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df76020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df761b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f540df5fe50" loc="79:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f540df5fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df5e210"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df5e3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df5e530"/>
        <function-ref name="clr" scoped="" ref="0x7f540df5c340"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df5e850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df5e9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df5eb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df5ed00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df5d020"/>
        <function-ref name="get" scoped="" ref="0x7f540df5d1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df5d340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df5d4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df5d660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df5d8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df5da80"/>
        <function-ref name="set" scoped="" ref="0x7f540df5dc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df5dda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df5e6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df5c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df5c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f540df0d580" loc="189:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f540df0d580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df0d900"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df0da90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df0dc20"/>
        <function-ref name="clr" scoped="" ref="0x7f540df0b980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df0c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df0c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df0c340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df0c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df0c660"/>
        <function-ref name="get" scoped="" ref="0x7f540df0c7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df0c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df0cb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df0cca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df0b020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df0b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df0b340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df0b4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df0ddb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df0b660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df0b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f540def3570" loc="200:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f540def3570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540def38f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540def3a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540def3c10"/>
        <function-ref name="clr" scoped="" ref="0x7f540def1980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540def2020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540def21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540def2340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540def24d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540def2660"/>
        <function-ref name="get" scoped="" ref="0x7f540def27f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540def2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540def2b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540def2ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540def1020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540def11b0"/>
        <function-ref name="set" scoped="" ref="0x7f540def1340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540def14d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540def3da0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540def1660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540def17f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f540df59020" loc="84:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f540df59020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df593a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df59530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df596c0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df574d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df599e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df59b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df59d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df58020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df581b0"/>
        <function-ref name="get" scoped="" ref="0x7f540df58340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df584d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df58660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df587f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df58a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df58c10"/>
        <function-ref name="set" scoped="" ref="0x7f540df58da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df57020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df59850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df571b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df57340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f540df40020" loc="97:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f540df40020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df403a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df40530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df406c0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df3e4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df409e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df40b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df40d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df3f020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df3f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f540df3f340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df3f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df3f660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df3f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df3fa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df3fc10"/>
        <function-ref name="set" scoped="" ref="0x7f540df3fda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df3e020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df40850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df3e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df3e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f540df2b020" loc="108:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f540df2b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df2b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df2b530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df2b6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df294d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df2b9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df2bb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df2bd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df2a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df2a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f540df2a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df2a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df2a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df2a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df2aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df2ac10"/>
        <function-ref name="set" scoped="" ref="0x7f540df2ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df29020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df2b850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df291b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df29340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f540df8a580" loc="56:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f540df8a580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df8a900"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df8aa90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df8ac20"/>
        <function-ref name="clr" scoped="" ref="0x7f540df88980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df89020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df891b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df89340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df894d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df89660"/>
        <function-ref name="get" scoped="" ref="0x7f540df897f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df89980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df89b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df89ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df88020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df881b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df88340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df884d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df8adb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df88660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df887f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f540df30020" loc="106:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f540df30020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df303a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df30530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df306c0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df2e4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df309e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df30b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df30d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df2f020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df2f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f540df2f340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df2f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df2f660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df2f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df2fa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df2fc10"/>
        <function-ref name="set" scoped="" ref="0x7f540df2fda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df2e020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df30850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df2e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df2e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f540df85580" loc="61:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f540df85580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df85900"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df85a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df85c20"/>
        <function-ref name="clr" scoped="" ref="0x7f540df83980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df84020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df841b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df84340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df844d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df84660"/>
        <function-ref name="get" scoped="" ref="0x7f540df847f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df84980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df84b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df84ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df83020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df831b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df83340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df834d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df85db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df83660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df837f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f540df6b710" loc="74:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f540df6b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df6ba90"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df6bc20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df6bdb0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df69a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df6a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df6a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df6a4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df6a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df6a7f0"/>
        <function-ref name="get" scoped="" ref="0x7f540df6a980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df6ab10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df6aca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df6ae30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df69120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df692b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df69440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df695d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df6a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df69760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df698f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f540df528a0" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f540df528a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df52c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df52db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df51020"/>
        <function-ref name="clr" scoped="" ref="0x7f540df50c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df51340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df514d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df51660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df517f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df51980"/>
        <function-ref name="get" scoped="" ref="0x7f540df51b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df51ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df51e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df50020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df502b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df50440"/>
        <function-ref name="set" scoped="" ref="0x7f540df505d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df50760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df511b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df508f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df50a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f540df398a0" loc="100:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f540df398a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df39c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df39db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df38020"/>
        <function-ref name="clr" scoped="" ref="0x7f540df37c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df38340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df384d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df38660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df387f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df38980"/>
        <function-ref name="get" scoped="" ref="0x7f540df38b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df38ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df38e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df37020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df372b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df37440"/>
        <function-ref name="set" scoped="" ref="0x7f540df375d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df37760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df381b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df378f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df37a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f540df248a0" loc="111:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f540df248a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df24c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df24db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df23020"/>
        <function-ref name="clr" scoped="" ref="0x7f540df22c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df23340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df234d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df23660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df237f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df23980"/>
        <function-ref name="get" scoped="" ref="0x7f540df23b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df23ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df23e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df22020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df222b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df22440"/>
        <function-ref name="set" scoped="" ref="0x7f540df225d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df22760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df231b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df228f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df22a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f540dfa5d50" loc="51:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f540dfa5d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df96100"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df96290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df96420"/>
        <function-ref name="clr" scoped="" ref="0x7f540df941b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df96740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df968d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df96a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df96bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df96d80"/>
        <function-ref name="get" scoped="" ref="0x7f540df95020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df951b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df95340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df954d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df95760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df958f0"/>
        <function-ref name="set" scoped="" ref="0x7f540df95a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df95c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df965b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df95da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df94020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f540df7ed50" loc="64:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f540df7ed50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df7d100"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df7d290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df7d420"/>
        <function-ref name="clr" scoped="" ref="0x7f540df7b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df7d740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df7d8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df7da60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df7dbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df7dd80"/>
        <function-ref name="get" scoped="" ref="0x7f540df7c020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df7c1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df7c340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df7c4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df7c760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df7c8f0"/>
        <function-ref name="set" scoped="" ref="0x7f540df7ca80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df7cc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df7d5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df7cda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df7b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f540df64e50" loc="77:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f540df64e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df63210"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df633a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df63530"/>
        <function-ref name="clr" scoped="" ref="0x7f540df61340"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df63850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df639e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df63b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df63d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df62020"/>
        <function-ref name="get" scoped="" ref="0x7f540df621b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df62340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df624d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df62660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df628f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df62a80"/>
        <function-ref name="set" scoped="" ref="0x7f540df62c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df62da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df636c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df61020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df611b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f540df4a020" loc="90:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f540df4a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df4a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df4a530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df4a6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df484d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df4a9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df4ab70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df4ad00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df49020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df491b0"/>
        <function-ref name="get" scoped="" ref="0x7f540df49340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df494d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df49660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df497f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df49a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df49c10"/>
        <function-ref name="set" scoped="" ref="0x7f540df49da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df48020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df4a850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df481b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df48340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f540defcd40" loc="197:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f540defcd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540defb0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540defb270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540defb400"/>
        <function-ref name="clr" scoped="" ref="0x7f540def91b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540defb720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540defb8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540defba40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540defbbd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540defbd60"/>
        <function-ref name="get" scoped="" ref="0x7f540defa020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540defa1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540defa340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540defa4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540defa760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540defa8f0"/>
        <function-ref name="set" scoped="" ref="0x7f540defaa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540defac10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540defb590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540defada0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540def9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f540dee9560" loc="206:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f540dee9560"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dee98e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dee9a70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540dee9c00"/>
        <function-ref name="clr" scoped="" ref="0x7f540dee7980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dee8020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dee81b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540dee8340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540dee84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dee8660"/>
        <function-ref name="get" scoped="" ref="0x7f540dee87f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540dee8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540dee8b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540dee8ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540dee7020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540dee71b0"/>
        <function-ref name="set" scoped="" ref="0x7f540dee7340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540dee74d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540dee9d90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540dee7660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540dee77f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f540df17580" loc="184:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f540df17580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df17900"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df17a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df17c20"/>
        <function-ref name="clr" scoped="" ref="0x7f540df15980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df16020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df161b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df16340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df164d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df16660"/>
        <function-ref name="get" scoped="" ref="0x7f540df167f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df16980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df16b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df16ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df15020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df151b0"/>
        <function-ref name="set" scoped="" ref="0x7f540df15340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df154d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df17db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df15660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df157f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f540df45020" loc="95:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f540df45020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df453a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df45530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df456c0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df434d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df459e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df45b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df45d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df44020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df441b0"/>
        <function-ref name="get" scoped="" ref="0x7f540df44340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df444d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df44660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df447f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df44a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df44c10"/>
        <function-ref name="set" scoped="" ref="0x7f540df44da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df43020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df45850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df431b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df43340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f540dee7d40" loc="208:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f540dee7d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dee60e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dee6270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540dee6400"/>
        <function-ref name="clr" scoped="" ref="0x7f540dee41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dee6720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dee68b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540dee6a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540dee6bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dee6d60"/>
        <function-ref name="get" scoped="" ref="0x7f540dee5020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540dee51b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540dee5340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540dee54d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540dee5760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540dee58f0"/>
        <function-ref name="set" scoped="" ref="0x7f540dee5a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540dee5c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540dee6590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540dee5da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540dee4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f540dedf580" loc="212:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f540dedf580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dedf900"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dedfa90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540dedfc20"/>
        <function-ref name="clr" scoped="" ref="0x7f540dedd980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dede020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dede1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540dede340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540dede4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dede660"/>
        <function-ref name="get" scoped="" ref="0x7f540dede7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540dede980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540dedeb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540dedeca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540dedd020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540dedd1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540dedd340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540dedd4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540dedfdb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540dedd660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540dedd7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f540df1f8f0" loc="181:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f540df1f8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540df1e0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540df1e230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540df1e3c0"/>
        <function-ref name="clr" scoped="" ref="0x7f540df1c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540df1e6e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540df1e870"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540df1ea00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540df1eb90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540df1ed20"/>
        <function-ref name="get" scoped="" ref="0x7f540df1d020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540df1d1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540df1d340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540df1d4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540df1d760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540df1d8f0"/>
        <function-ref name="set" scoped="" ref="0x7f540df1da80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540df1dc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540df1e550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540df1dda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540df1c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540dedad10" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540dedad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540deab0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540deab270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540deab400"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540dea91b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540deab720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540deab8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540deaba40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540deabbd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540deabd60"/>
        <function-ref name="get" scoped="" ref="0x7f540deaa020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540deaa1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540deaa340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540deaa4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540deaa760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540deaa8f0"/>
        <function-ref name="set" scoped="" ref="0x7f540deaaa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540deaac10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540deaada0"/>
        <function-ref name="clr" scoped="" ref="0x7f540deab590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540dea9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540dea6260" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540dea6260"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dea65e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dea6770"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540dea6900"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540dea4660"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dea6c20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dea6db0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540dea5020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540dea51b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dea5340"/>
        <function-ref name="get" scoped="" ref="0x7f540dea54d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540dea5660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540dea57f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540dea5980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540dea5c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540dea5da0"/>
        <function-ref name="set" scoped="" ref="0x7f540dea4020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540dea41b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540dea4340"/>
        <function-ref name="clr" scoped="" ref="0x7f540dea6a90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540dea44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540dea1740" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540dea1740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dea1ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dea1c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540dea1de0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de9fa80"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dea01b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dea0340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540dea04d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540dea0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dea07f0"/>
        <function-ref name="get" scoped="" ref="0x7f540dea0980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540dea0b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540dea0ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540dea0e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de9f120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de9f2b0"/>
        <function-ref name="set" scoped="" ref="0x7f540de9f440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de9f5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de9f760"/>
        <function-ref name="clr" scoped="" ref="0x7f540dea0020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de9f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de9cb90" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de9cb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de9b020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de9b1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de9b340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de99020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de9b660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de9b7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de9b980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de9bb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de9bca0"/>
        <function-ref name="get" scoped="" ref="0x7f540de9be30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de9a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de9a1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de9a340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de9a5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de9a760"/>
        <function-ref name="set" scoped="" ref="0x7f540de9a8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de9aa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de9ac10"/>
        <function-ref name="clr" scoped="" ref="0x7f540de9b4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de9ada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de96060" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de96060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de963e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de96570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de96700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de934d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de96a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de96bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de96d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de94020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de941b0"/>
        <function-ref name="get" scoped="" ref="0x7f540de94340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de944d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de94660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de947f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de94a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de94c10"/>
        <function-ref name="set" scoped="" ref="0x7f540de94da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de93020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de931b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540de96890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de93340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de90540" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de90540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de908c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de90a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de90be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de8e980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de8f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de8f1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de8f340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de8f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de8f660"/>
        <function-ref name="get" scoped="" ref="0x7f540de8f7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de8f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de8fb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de8fca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de8e020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de8e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540de8e340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de8e4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de8e660"/>
        <function-ref name="clr" scoped="" ref="0x7f540de90d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de8e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de8bb90" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de8bb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de8a020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de8a1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de8a340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de88020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de8a660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de8a7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de8a980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de8ab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de8aca0"/>
        <function-ref name="get" scoped="" ref="0x7f540de8ae30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de89020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de891b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de89340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de895d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de89760"/>
        <function-ref name="set" scoped="" ref="0x7f540de898f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de89a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de89c10"/>
        <function-ref name="clr" scoped="" ref="0x7f540de8a4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de89da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de85060" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de85060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de853e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de85570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de85700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de834d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de85a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de85bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de85d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de84020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de841b0"/>
        <function-ref name="get" scoped="" ref="0x7f540de84340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de844d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de84660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de847f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de84a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de84c10"/>
        <function-ref name="set" scoped="" ref="0x7f540de84da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de83020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de831b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540de85890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de83340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de80540" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de80540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de808c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de80a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de80be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de7e980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de7f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de7f1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de7f340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de7f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de7f660"/>
        <function-ref name="get" scoped="" ref="0x7f540de7f7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de7f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de7fb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de7fca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de7e020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de7e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540de7e340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de7e4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de7e660"/>
        <function-ref name="clr" scoped="" ref="0x7f540de80d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de7e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de7bb90" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de7bb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de7a020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de7a1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de7a340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de78020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de7a660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de7a7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de7a980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de7ab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de7aca0"/>
        <function-ref name="get" scoped="" ref="0x7f540de7ae30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de79020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de791b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de79340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de795d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de79760"/>
        <function-ref name="set" scoped="" ref="0x7f540de798f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de79a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de79c10"/>
        <function-ref name="clr" scoped="" ref="0x7f540de7a4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de79da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de75060" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de75060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de753e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de75570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de75700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de734d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de75a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de75bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de75d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de74020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de741b0"/>
        <function-ref name="get" scoped="" ref="0x7f540de74340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de744d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de74660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de747f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de74a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de74c10"/>
        <function-ref name="set" scoped="" ref="0x7f540de74da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de73020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de731b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540de75890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de73340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de70540" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de70540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de708c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de70a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de70be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de6e980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de6f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de6f1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de6f340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de6f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de6f660"/>
        <function-ref name="get" scoped="" ref="0x7f540de6f7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de6f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de6fb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de6fca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de6e020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de6e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540de6e340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de6e4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de6e660"/>
        <function-ref name="clr" scoped="" ref="0x7f540de70d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de6e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de6ad10" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de6ad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de690e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de69270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de69400"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de671b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de69720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de698b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de69a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de69bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de69d60"/>
        <function-ref name="get" scoped="" ref="0x7f540de68020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de681b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de68340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de684d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de68760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de688f0"/>
        <function-ref name="set" scoped="" ref="0x7f540de68a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de68c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de68da0"/>
        <function-ref name="clr" scoped="" ref="0x7f540de69590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de67020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de64260" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de64260"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de645e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de64770"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de64900"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de62660"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de64c20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de64db0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de63020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de631b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de63340"/>
        <function-ref name="get" scoped="" ref="0x7f540de634d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de63660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de637f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de63980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de63c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de63da0"/>
        <function-ref name="set" scoped="" ref="0x7f540de62020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de621b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de62340"/>
        <function-ref name="clr" scoped="" ref="0x7f540de64a90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de624d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de5f740" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de5f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de5fac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de5fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de5fde0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de5da80"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de5e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de5e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de5e4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de5e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de5e7f0"/>
        <function-ref name="get" scoped="" ref="0x7f540de5e980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de5eb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de5eca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de5ee30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de5d120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de5d2b0"/>
        <function-ref name="set" scoped="" ref="0x7f540de5d440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de5d5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de5d760"/>
        <function-ref name="clr" scoped="" ref="0x7f540de5e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de5d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de5ab90" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de5ab90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de59020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de591b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de59340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de57020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de59660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de597f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de59980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de59b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de59ca0"/>
        <function-ref name="get" scoped="" ref="0x7f540de59e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de58020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de581b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de58340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de585d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de58760"/>
        <function-ref name="set" scoped="" ref="0x7f540de588f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de58a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de58c10"/>
        <function-ref name="clr" scoped="" ref="0x7f540de594d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de58da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de54060" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de54060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de543e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de54570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de54700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de524d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de54a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de54bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de54d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de53020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de531b0"/>
        <function-ref name="get" scoped="" ref="0x7f540de53340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de534d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de53660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de537f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de53a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de53c10"/>
        <function-ref name="set" scoped="" ref="0x7f540de53da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de52020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de521b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540de54890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de52340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de4f540" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de4f540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de4f8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de4fa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de4fbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de4d980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de4e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de4e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de4e340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de4e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de4e660"/>
        <function-ref name="get" scoped="" ref="0x7f540de4e7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de4e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de4eb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de4eca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de4d020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de4d1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540de4d340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de4d4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de4d660"/>
        <function-ref name="clr" scoped="" ref="0x7f540de4fd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de4d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de4ab90" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de4ab90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de49020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de491b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de49340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de47020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de49660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de497f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de49980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de49b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de49ca0"/>
        <function-ref name="get" scoped="" ref="0x7f540de49e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de48020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de481b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de48340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de485d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de48760"/>
        <function-ref name="set" scoped="" ref="0x7f540de488f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de48a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de48c10"/>
        <function-ref name="clr" scoped="" ref="0x7f540de494d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de48da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de44060" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de44060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de443e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de44570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de44700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de414d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de44a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de44bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de44d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de42020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de421b0"/>
        <function-ref name="get" scoped="" ref="0x7f540de42340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de424d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de42660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de427f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de42a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de42c10"/>
        <function-ref name="set" scoped="" ref="0x7f540de42da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de41020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de411b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540de44890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de41340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de3e540" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de3e540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de3e8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de3ea50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de3ebe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de3c980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de3d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de3d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de3d340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de3d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de3d660"/>
        <function-ref name="get" scoped="" ref="0x7f540de3d7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de3d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de3db10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de3dca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de3c020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de3c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540de3c340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de3c4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de3c660"/>
        <function-ref name="clr" scoped="" ref="0x7f540de3ed70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de3c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de39b90" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de39b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de38020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de381b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de38340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de36020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de38660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de387f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de38980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de38b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de38ca0"/>
        <function-ref name="get" scoped="" ref="0x7f540de38e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de37020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de371b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de37340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de375d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de37760"/>
        <function-ref name="set" scoped="" ref="0x7f540de378f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de37a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de37c10"/>
        <function-ref name="clr" scoped="" ref="0x7f540de384d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de37da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de33060" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de33060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de333e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de33570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de33700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de314d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de33a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de33bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de33d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de32020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de321b0"/>
        <function-ref name="get" scoped="" ref="0x7f540de32340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de324d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de32660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de327f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de32a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de32c10"/>
        <function-ref name="set" scoped="" ref="0x7f540de32da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de31020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de311b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540de33890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de31340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de2e540" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de2e540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de2e8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de2ea50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de2ebe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de2c980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de2d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de2d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de2d340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de2d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de2d660"/>
        <function-ref name="get" scoped="" ref="0x7f540de2d7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de2d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de2db10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de2dca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de2c020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de2c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540de2c340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de2c4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de2c660"/>
        <function-ref name="clr" scoped="" ref="0x7f540de2ed70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de2c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de29dc0" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de29dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de28180"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de28310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de284a0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de261b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de287c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de28950"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de28ae0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de28c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de28e00"/>
        <function-ref name="get" scoped="" ref="0x7f540de27020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de271b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de27340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de274d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de27760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de278f0"/>
        <function-ref name="set" scoped="" ref="0x7f540de27a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de27c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de27da0"/>
        <function-ref name="clr" scoped="" ref="0x7f540de28630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de26020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de23260" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de23260"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de235e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de23770"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de23900"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de21660"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de23c20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de23db0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de22020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de221b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de22340"/>
        <function-ref name="get" scoped="" ref="0x7f540de224d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de22660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de227f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de22980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de22c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de22da0"/>
        <function-ref name="set" scoped="" ref="0x7f540de21020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de211b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de21340"/>
        <function-ref name="clr" scoped="" ref="0x7f540de23a90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de214d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de1e740" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de1e740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de1eac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de1ec50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de1ede0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de1ca80"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de1d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de1d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de1d4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de1d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de1d7f0"/>
        <function-ref name="get" scoped="" ref="0x7f540de1d980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de1db10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de1dca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de1de30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de1c120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de1c2b0"/>
        <function-ref name="set" scoped="" ref="0x7f540de1c440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de1c5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de1c760"/>
        <function-ref name="clr" scoped="" ref="0x7f540de1d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de1c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de19b90" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de19b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de17020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de171b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de17340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de15020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de17660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de177f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de17980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de17b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de17ca0"/>
        <function-ref name="get" scoped="" ref="0x7f540de17e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de16020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de161b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de16340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de165d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de16760"/>
        <function-ref name="set" scoped="" ref="0x7f540de168f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de16a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de16c10"/>
        <function-ref name="clr" scoped="" ref="0x7f540de174d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de16da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de12060" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de12060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de123e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de12570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de12700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de104d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de12a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de12bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de12d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de11020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de111b0"/>
        <function-ref name="get" scoped="" ref="0x7f540de11340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de114d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de11660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de117f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de11a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de11c10"/>
        <function-ref name="set" scoped="" ref="0x7f540de11da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de10020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de101b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540de12890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de10340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de0d540" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de0d540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de0d8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de0da50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de0dbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de0b980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de0c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de0c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de0c340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de0c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de0c660"/>
        <function-ref name="get" scoped="" ref="0x7f540de0c7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de0c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de0cb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de0cca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de0b020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de0b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540de0b340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de0b4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de0b660"/>
        <function-ref name="clr" scoped="" ref="0x7f540de0dd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de0b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de08b90" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de08b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de07020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de071b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de07340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de05020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de07660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de077f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de07980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de07b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de07ca0"/>
        <function-ref name="get" scoped="" ref="0x7f540de07e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de06020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de061b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de06340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de065d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de06760"/>
        <function-ref name="set" scoped="" ref="0x7f540de068f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de06a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de06c10"/>
        <function-ref name="clr" scoped="" ref="0x7f540de074d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de06da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540de02060" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540de02060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540de023e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540de02570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540de02700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540de004d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540de02a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540de02bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540de02d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540de01020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540de011b0"/>
        <function-ref name="get" scoped="" ref="0x7f540de01340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540de014d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540de01660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540de017f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540de01a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540de01c10"/>
        <function-ref name="set" scoped="" ref="0x7f540de01da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540de00020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540de001b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540de02890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540de00340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540ddfd540" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540ddfd540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ddfd8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ddfda50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ddfdbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ddfb980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ddfc020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ddfc1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ddfc340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ddfc4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ddfc660"/>
        <function-ref name="get" scoped="" ref="0x7f540ddfc7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ddfc980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ddfcb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ddfcca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ddfb020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ddfb1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540ddfb340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ddfb4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ddfb660"/>
        <function-ref name="clr" scoped="" ref="0x7f540ddfdd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ddfb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540ddf8b90" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540ddf8b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ddf7020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ddf71b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ddf7340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ddf5020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ddf7660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ddf77f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ddf7980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ddf7b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ddf7ca0"/>
        <function-ref name="get" scoped="" ref="0x7f540ddf7e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ddf6020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ddf61b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ddf6340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ddf65d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ddf6760"/>
        <function-ref name="set" scoped="" ref="0x7f540ddf68f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ddf6a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ddf6c10"/>
        <function-ref name="clr" scoped="" ref="0x7f540ddf74d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ddf6da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540ddf2060" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540ddf2060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ddf23e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ddf2570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ddf2700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ddf04d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ddf2a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ddf2bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ddf2d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ddf1020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ddf11b0"/>
        <function-ref name="get" scoped="" ref="0x7f540ddf1340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ddf14d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ddf1660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ddf17f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ddf1a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ddf1c10"/>
        <function-ref name="set" scoped="" ref="0x7f540ddf1da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ddf0020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ddf01b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540ddf2890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ddf0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540ddec540" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540ddec540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ddec8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ddeca50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ddecbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ddea980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ddeb020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ddeb1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ddeb340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ddeb4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ddeb660"/>
        <function-ref name="get" scoped="" ref="0x7f540ddeb7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ddeb980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ddebb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ddebca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ddea020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ddea1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540ddea340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ddea4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ddea660"/>
        <function-ref name="clr" scoped="" ref="0x7f540ddecd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ddea7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540dde7b90" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540dde7b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dde6020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dde61b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540dde6340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540dde4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dde6660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dde67f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540dde6980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540dde6b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dde6ca0"/>
        <function-ref name="get" scoped="" ref="0x7f540dde6e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540dde5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540dde51b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540dde5340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540dde55d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540dde5760"/>
        <function-ref name="set" scoped="" ref="0x7f540dde58f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540dde5a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540dde5c10"/>
        <function-ref name="clr" scoped="" ref="0x7f540dde64d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540dde5da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540dde1060" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540dde1060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dde13e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dde1570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540dde1700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540dddf4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dde1a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dde1bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540dde1d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540dde0020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dde01b0"/>
        <function-ref name="get" scoped="" ref="0x7f540dde0340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540dde04d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540dde0660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540dde07f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540dde0a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540dde0c10"/>
        <function-ref name="set" scoped="" ref="0x7f540dde0da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540dddf020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540dddf1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540dde1890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540dddf340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540dddc540" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540dddc540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dddc8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dddca50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540dddcbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ddda980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dddb020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dddb1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540dddb340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540dddb4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dddb660"/>
        <function-ref name="get" scoped="" ref="0x7f540dddb7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540dddb980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540dddbb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540dddbca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ddda020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ddda1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540ddda340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ddda4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ddda660"/>
        <function-ref name="clr" scoped="" ref="0x7f540dddcd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ddda7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540ddd7b90" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540ddd7b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ddd6020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ddd61b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ddd6340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ddd4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ddd6660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ddd67f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ddd6980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ddd6b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ddd6ca0"/>
        <function-ref name="get" scoped="" ref="0x7f540ddd6e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ddd5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ddd51b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ddd5340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ddd55d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ddd5760"/>
        <function-ref name="set" scoped="" ref="0x7f540ddd58f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ddd5a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ddd5c10"/>
        <function-ref name="clr" scoped="" ref="0x7f540ddd64d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ddd5da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540ddd1060" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540ddd1060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ddd13e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ddd1570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ddd1700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ddcf4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ddd1a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ddd1bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ddd1d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ddd0020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ddd01b0"/>
        <function-ref name="get" scoped="" ref="0x7f540ddd0340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ddd04d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ddd0660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ddd07f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ddd0a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ddd0c10"/>
        <function-ref name="set" scoped="" ref="0x7f540ddd0da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ddcf020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ddcf1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540ddd1890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ddcf340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540ddcc540" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540ddcc540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ddcc8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ddcca50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ddccbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ddca980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ddcb020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ddcb1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ddcb340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ddcb4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ddcb660"/>
        <function-ref name="get" scoped="" ref="0x7f540ddcb7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ddcb980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ddcbb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ddcbca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ddca020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ddca1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540ddca340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ddca4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ddca660"/>
        <function-ref name="clr" scoped="" ref="0x7f540ddccd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ddca7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540ddc7b90" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540ddc7b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ddc5020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ddc51b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ddc5340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ddc3020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ddc5660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ddc57f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ddc5980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ddc5b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ddc5ca0"/>
        <function-ref name="get" scoped="" ref="0x7f540ddc5e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ddc4020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ddc41b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ddc4340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ddc45d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ddc4760"/>
        <function-ref name="set" scoped="" ref="0x7f540ddc48f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ddc4a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ddc4c10"/>
        <function-ref name="clr" scoped="" ref="0x7f540ddc54d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ddc4da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540ddc0060" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540ddc0060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ddc03e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ddc0570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ddc0700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ddbe4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ddc0a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ddc0bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ddc0d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ddbf020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ddbf1b0"/>
        <function-ref name="get" scoped="" ref="0x7f540ddbf340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ddbf4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ddbf660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ddbf7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ddbfa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ddbfc10"/>
        <function-ref name="set" scoped="" ref="0x7f540ddbfda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ddbe020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ddbe1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540ddc0890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ddbe340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540ddbb540" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540ddbb540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ddbb8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ddbba50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ddbbbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ddb9980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ddba020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ddba1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ddba340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ddba4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ddba660"/>
        <function-ref name="get" scoped="" ref="0x7f540ddba7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ddba980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ddbab10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ddbaca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ddb9020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ddb91b0"/>
        <function-ref name="set" scoped="" ref="0x7f540ddb9340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ddb94d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ddb9660"/>
        <function-ref name="clr" scoped="" ref="0x7f540ddbbd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ddb97f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540ddb6b90" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540ddb6b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ddb5020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ddb51b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ddb5340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ddb3020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ddb5660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ddb57f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ddb5980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ddb5b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ddb5ca0"/>
        <function-ref name="get" scoped="" ref="0x7f540ddb5e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ddb4020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ddb41b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ddb4340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ddb45d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ddb4760"/>
        <function-ref name="set" scoped="" ref="0x7f540ddb48f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ddb4a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ddb4c10"/>
        <function-ref name="clr" scoped="" ref="0x7f540ddb54d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ddb4da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540ddb0060" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540ddb0060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ddb03e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ddb0570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ddb0700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ddae4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ddb0a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ddb0bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ddb0d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ddaf020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ddaf1b0"/>
        <function-ref name="get" scoped="" ref="0x7f540ddaf340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ddaf4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ddaf660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ddaf7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ddafa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ddafc10"/>
        <function-ref name="set" scoped="" ref="0x7f540ddafda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ddae020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ddae1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540ddb0890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ddae340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f540ddab540" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f540ddab540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ddab8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ddaba50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ddabbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540dda9980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ddaa020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ddaa1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ddaa340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ddaa4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ddaa660"/>
        <function-ref name="get" scoped="" ref="0x7f540ddaa7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ddaa980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ddaab10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ddaaca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540dda9020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540dda91b0"/>
        <function-ref name="set" scoped="" ref="0x7f540dda9340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540dda94d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540dda9660"/>
        <function-ref name="clr" scoped="" ref="0x7f540ddabd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540dda97f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f540dd1c610" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540dd1c610"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dd1c990"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dd1cb20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540dd1ccb0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540dd1a980"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dd1b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dd1b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540dd1b340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540dd1b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dd1b660"/>
        <function-ref name="get" scoped="" ref="0x7f540dd1b7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540dd1b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540dd1bb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540dd1bca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540dd1a020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540dd1a1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540dd1a340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540dd1a4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540dd1a660"/>
        <function-ref name="clr" scoped="" ref="0x7f540dd1ce40"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540dd1a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f540dd2e480" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f540dd2e480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dd2e800"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dd2e990"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dd2eb20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dd2ecb0"/>
        <function-ref name="get" scoped="" ref="0x7f540dd2ee40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dd1c020"/>
        <function-ref name="set" scoped="" ref="0x7f540dd1c1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540dd1c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f540dd16de0" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540dd16de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dd15180"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dd15310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540dd154a0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540dd131b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dd157c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dd15950"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540dd15ae0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540dd15c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dd15e00"/>
        <function-ref name="get" scoped="" ref="0x7f540dd14020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540dd141b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540dd14340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540dd144d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540dd14760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540dd148f0"/>
        <function-ref name="set" scoped="" ref="0x7f540dd14a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540dd14c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540dd14da0"/>
        <function-ref name="clr" scoped="" ref="0x7f540dd15630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540dd13020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f540dd18b20" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f540dd18b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dd16020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dd161b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dd16340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dd164d0"/>
        <function-ref name="get" scoped="" ref="0x7f540dd16660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dd167f0"/>
        <function-ref name="set" scoped="" ref="0x7f540dd16980"/>
        <function-ref name="clr" scoped="" ref="0x7f540dd16b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f540dd10480" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540dd10480"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dd10800"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dd10990"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540dd10b20"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540dd0e7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dd10e40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dd0f020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540dd0f1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540dd0f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dd0f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f540dd0f660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540dd0f7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540dd0f980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540dd0fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540dd0fda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540dd0e020"/>
        <function-ref name="set" scoped="" ref="0x7f540dd0e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540dd0e340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540dd0e4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f540dd10cb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540dd0e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f540dd111b0" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f540dd111b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dd11530"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dd116c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dd11850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dd119e0"/>
        <function-ref name="get" scoped="" ref="0x7f540dd11b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dd11d00"/>
        <function-ref name="set" scoped="" ref="0x7f540dd10020"/>
        <function-ref name="clr" scoped="" ref="0x7f540dd101b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f540dcfd020" loc="61:../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f540dcfd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f540dcfd3a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f540dcfd530"/>
        <function-ref name="start" scoped="" ref="0x7f540dcfd6c0"/>
        <function-ref name="stop" scoped="" ref="0x7f540dcfd850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f540dcfc050" loc="63:../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f540dcfc050"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540dcfc3d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540dcfc560"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540dcfc6f0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540dcfc880"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540dcfca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f540dcfbdf0" loc="65:../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f540dcfbdf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540dcfa1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f540dcfa450" loc="67:../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f540dcfa450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540dcfa7d0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f540dcfa960"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540dcfaaf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540dcfac80"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f540dcfae10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f540dcf7430" loc="70:../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f540dcf7430"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f540dcf6b00"/>
        <function-ref name="clear" scoped="" ref="0x7f540dce82a0"/>
        <function-ref name="isValid" scoped="" ref="0x7f540dcf63d0"/>
        <function-ref name="set" scoped="" ref="0x7f540dce89d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f540dcdb430" loc="72:../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f540dcdb430"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f540dcdb7b0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f540dcdb940"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f540dcdbad0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f540dcdbc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f540dcfb210" loc="64:../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f540dcfb210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540dcfb590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f540dcf0350" loc="69:../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f540dcf0350"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f540dcf06d0"/>
        <function-ref name="noAck" scoped="" ref="0x7f540dcf0860"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f540dcf09f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f540dcf9120" loc="68:../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f540dcf9120"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f540dcf94a0"/>
        <function-ref name="source" scoped="" ref="0x7f540dcf9630"/>
        <function-ref name="address" scoped="" ref="0x7f540dcf97c0"/>
        <function-ref name="destination" scoped="" ref="0x7f540dcf9950"/>
        <function-ref name="setSource" scoped="" ref="0x7f540dcf9ae0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f540dcf9c70"/>
        <function-ref name="type" scoped="" ref="0x7f540dcf9e00"/>
        <function-ref name="setType" scoped="" ref="0x7f540dcf8020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f540dcf81b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f540dcf8340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f540dcf84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f540dce7660" loc="71:../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f540dce7660"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f540dce6ce0"/>
        <function-ref name="clear" scoped="" ref="0x7f540dce4460"/>
        <function-ref name="isValid" scoped="" ref="0x7f540dce65b0"/>
        <function-ref name="set" scoped="" ref="0x7f540dce4b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f540dcce080" loc="55:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f540dcce080"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f540dcce400"/>
        <function-ref name="stopDone" scoped="" ref="0x7f540dcce590"/>
        <function-ref name="start" scoped="" ref="0x7f540dcce720"/>
        <function-ref name="stop" scoped="" ref="0x7f540dcce8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f540dcbd020" loc="64:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f540dcbd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f540dcbd3a0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f540dcbd530"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f540dcbd6c0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f540dcbd850"/>
        <function-ref name="setCca" scoped="" ref="0x7f540dcbd9e0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f540dcbdb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f540dcb3020" loc="67:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7f540dcb3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f540dcb34a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f540dcc9c20" loc="60:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f540dcc9c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540dcc8020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f540dcc81b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540dcc8340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540dcc84d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f540dcc8660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f540dccc1d0" loc="56:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f540dccc1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540dccc550"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540dccc6e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540dccc870"/>
        <function-ref name="cancel" scoped="" ref="0x7f540dccca00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540dcccb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f540dcca020" loc="58:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f540dcca020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540dcca3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f540dcc0dc0" loc="61:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f540dcc0dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f540dcc7180"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f540dcc7310"/>
        <function-ref name="getRssi" scoped="" ref="0x7f540dcc74a0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f540dcc7630"/>
        <function-ref name="getPower" scoped="" ref="0x7f540dcc77c0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f540dcc7950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f540dcbde70" loc="65:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f540dcbde70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f540dcbb220"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f540dcbb3b0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f540dcbb540"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f540dcbb6d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f540dccb3f0" loc="57:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f540dccb3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540dccb770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f540dcc7c80" loc="62:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f540dcc7c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f540dcc60a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f540dcc6230"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f540dcc63c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f540dcaa0d0" loc="66:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f540dcaa0d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f540dcaa450"/>
        <function-ref name="setRetries" scoped="" ref="0x7f540dcaa5e0"/>
        <function-ref name="getRetries" scoped="" ref="0x7f540dcaa770"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f540dcaa900"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f540dcaaa90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f540dcca650" loc="59:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f540dcca650"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f540dcca9d0"/>
        <function-ref name="source" scoped="" ref="0x7f540dccab60"/>
        <function-ref name="address" scoped="" ref="0x7f540dccacf0"/>
        <function-ref name="destination" scoped="" ref="0x7f540dccae80"/>
        <function-ref name="setSource" scoped="" ref="0x7f540dcc9030"/>
        <function-ref name="setDestination" scoped="" ref="0x7f540dcc91c0"/>
        <function-ref name="type" scoped="" ref="0x7f540dcc9350"/>
        <function-ref name="setType" scoped="" ref="0x7f540dcc94e0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f540dcc9670"/>
        <function-ref name="setGroup" scoped="" ref="0x7f540dcc9800"/>
        <function-ref name="localGroup" scoped="" ref="0x7f540dcc9990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f540dcbce00" loc="63:../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f540dcbce00"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f540dcbe1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f540dca7d80" loc="43:../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f540dca7d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f540dca4180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f540dca4310"/>
        <function-ref name="start" scoped="" ref="0x7f540dca44a0"/>
        <function-ref name="stop" scoped="" ref="0x7f540dca4630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f540dc919d0" loc="55:../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f540dc919d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f540dc91d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f540dc90b70" loc="57:../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f540dc90b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f540dc8f020"/>
        <function-ref name="setRetries" scoped="" ref="0x7f540dc8f1b0"/>
        <function-ref name="getRetries" scoped="" ref="0x7f540dc8f340"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f540dc8f4d0"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f540dc8f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f540dc92140" loc="53:../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f540dc92140"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f540dc924c0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f540dc92650"/>
        <function-ref name="getRssi" scoped="" ref="0x7f540dc927e0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f540dc92970"/>
        <function-ref name="getPower" scoped="" ref="0x7f540dc92b00"/>
        <function-ref name="getLqi" scoped="" ref="0x7f540dc92c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f540dc9cd10" loc="50:../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f540dc9cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540dc950e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540dc95270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540dc95400"/>
        <function-ref name="cancel" scoped="" ref="0x7f540dc95590"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540dc95720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f540dc90080" loc="56:../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f540dc90080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f540dc90400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f540dc90590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f540dc90720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f540dc908b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f540dc9d820" loc="47:../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7f540dc9d820"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540dc9dba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f540dc91020" loc="54:../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f540dc91020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f540dc913a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f540dc91530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f540dc916c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540dc9e670" loc="45:../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540dc9e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540dc9e9f0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540dc9eb80"/>
        <function-ref name="request" scoped="" ref="0x7f540dc9ed10"/>
        <function-ref name="granted" scoped="" ref="0x7f540dca3020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540dca31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f540dc94a30" loc="46:../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7f540dc94a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540dc94db0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540dc9d020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540dc9d1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540dc9d340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540dc9d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f540dc9c020" loc="48:../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f540dc9c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540dc9c3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f540dc9c530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540dc9c6c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540dc9c850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f540dc9c9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f540dc95a90" loc="51:../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f540dc95a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540dc95e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f540dc8c390" loc="44:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f540dc8c390"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f540dc8c710"/>
        <function-ref name="stopDone" scoped="" ref="0x7f540dc8c8a0"/>
        <function-ref name="start" scoped="" ref="0x7f540dc8ca30"/>
        <function-ref name="stop" scoped="" ref="0x7f540dc8cbc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f540dc8a330" loc="47:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f540dc8a330"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f540dc8a6b0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f540dc8a840"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f540dc8a9d0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f540dc8ab60"/>
        <function-ref name="setCca" scoped="" ref="0x7f540dc8acf0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f540dc8ae80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f540dc8ce80" loc="45:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f540dc8ce80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540dc8b220"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540dc8b3b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540dc8b540"/>
        <function-ref name="cancel" scoped="" ref="0x7f540dc8b6d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540dc8b860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f540dc8bb40" loc="46:../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f540dc8bb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540dc8a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f540dc89e70" loc="39:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f540dc89e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f540dc86220"/>
        <function-ref name="stopDone" scoped="" ref="0x7f540dc863b0"/>
        <function-ref name="start" scoped="" ref="0x7f540dc86540"/>
        <function-ref name="stop" scoped="" ref="0x7f540dc866d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f540dc857e0" loc="41:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f540dc857e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f540dc85b60"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f540dc85cf0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f540dc85e80"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f540dc84030"/>
        <function-ref name="setCca" scoped="" ref="0x7f540dc841c0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f540dc84350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7f540dc79060" loc="47:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7f540dc79060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f540dc793e0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f540dc79570"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f540dc79700"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f540dc79890"/>
        <function-ref name="setCca" scoped="" ref="0x7f540dc79a20"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f540dc79bb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f540dc6f330" loc="50:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f540dc6f330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f540dc6f6b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f540dc6f840"/>
        <function-ref name="getRssi" scoped="" ref="0x7f540dc6f9d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f540dc6fb60"/>
        <function-ref name="getPower" scoped="" ref="0x7f540dc6fcf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f540dc6fe80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Transmit" ref="0x7f540dc712a0" loc="46:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7f540dc712a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540dc71620"/>
        <function-ref name="cancel" scoped="" ref="0x7f540dc717b0"/>
        <function-ref name="modify" scoped="" ref="0x7f540dc71940"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540dc71ad0"/>
        <function-ref name="resend" scoped="" ref="0x7f540dc71c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f540dc86990" loc="40:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f540dc86990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540dc86d10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540dc85020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540dc851b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540dc85340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540dc854d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f540dc6d420" loc="48:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f540dc6d420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f540dc6d7a0"/>
        <function-ref name="rand32" scoped="" ref="0x7f540dc6d930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f540dc78760" loc="45:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7f540dc78760"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f540dc78ae0"/>
        <function-ref name="stop" scoped="" ref="0x7f540dc78c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f540dc66920" loc="51:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540dc66920"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f540dc66ca0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f540dc66e30"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f540dc6b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Power" ref="0x7f540dc7cb50" loc="44:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f540dc7cb50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f540dc81020"/>
        <function-ref name="rfOff" scoped="" ref="0x7f540dc811b0"/>
        <function-ref name="rxOn" scoped="" ref="0x7f540dc81340"/>
        <function-ref name="startVReg" scoped="" ref="0x7f540dc814d0"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f540dc81660"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f540dc817f0"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f540dc81980"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f540dc81b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540dc6dbf0" loc="49:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540dc6dbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540dc70020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540dc701b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f540dc70340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540dc704d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540dc70660"/>
        <function-ref name="get" scoped="" ref="0x7f540dc707f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540dc70980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540dc6f020"/>
        <function-ref name="set" scoped="" ref="0x7f540dc70b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f540dc70ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f540dc70e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f540dc84640" loc="43:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540dc84640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540dc849c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540dc84b50"/>
        <function-ref name="request" scoped="" ref="0x7f540dc84ce0"/>
        <function-ref name="granted" scoped="" ref="0x7f540dc84e70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540dc83030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControlState" ref="0x7f540dc6a110" loc="52:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControlState" scoped="" ref="0x7f540dc6a110"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f540dc6a590"/>
        <function-ref name="toIdle" scoped="" ref="0x7f540dc6a720"/>
        <function-ref name="isState" scoped="" ref="0x7f540dc6a8b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f540dc6aa40"/>
        <function-ref name="requestState" scoped="" ref="0x7f540dc6abd0"/>
        <function-ref name="forceState" scoped="" ref="0x7f540dc6ad60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendDone_task" ref="0x7f540dc5db70" loc="76:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sendDone_task" scoped="" ref="0x7f540dc5db70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540dc5b020"/>
        <function-ref name="runTask" scoped="" ref="0x7f540dc5b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDone_task" ref="0x7f540dc5eba0" loc="75:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDone_task" scoped="" ref="0x7f540dc5eba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540dc5d020"/>
        <function-ref name="runTask" scoped="" ref="0x7f540dc5d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDone_task" ref="0x7f540dc5fc20" loc="74:../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDone_task" scoped="" ref="0x7f540dc5fc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540dc5e020"/>
        <function-ref name="runTask" scoped="" ref="0x7f540dc5e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7f540dc05dc0" loc="45:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f540dc05dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f540dc11180"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f540dc11310"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f540dc114a0"/>
        <function-ref name="syncDone" scoped="" ref="0x7f540dc11630"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f540dc117c0"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f540dc11950"/>
        <function-ref name="setChannel" scoped="" ref="0x7f540dc11ae0"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f540dc11c70"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f540dc11e00"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f540dc10020"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f540dc101b0"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f540dc10340"/>
        <function-ref name="sync" scoped="" ref="0x7f540dc104d0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f540dc10760"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f540dc108f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7f540dc020c0" loc="47:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7f540dc020c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540dc02cb0"/>
        <function-ref name="readDone" scoped="" ref="0x7f540dc01170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7f540dc10bf0" loc="46:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f540dc10bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f540dc04020"/>
        <function-ref name="rfOff" scoped="" ref="0x7f540dc041b0"/>
        <function-ref name="rxOn" scoped="" ref="0x7f540dc04340"/>
        <function-ref name="startVReg" scoped="" ref="0x7f540dc044d0"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f540dc04660"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f540dc047f0"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f540dc04980"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f540dc04b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540dc15950" loc="44:../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540dc15950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540dc15cd0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540dc15e60"/>
        <function-ref name="request" scoped="" ref="0x7f540dc12020"/>
        <function-ref name="granted" scoped="" ref="0x7f540dc121b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540dc12340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7f540dbfa970" loc="46:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f540dbfa970"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f540dbfacf0"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f540dbfae80"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f540dbf9030"/>
        <function-ref name="syncDone" scoped="" ref="0x7f540dbf91c0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f540dbf9350"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f540dbf94e0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f540dbf9670"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f540dbf9800"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f540dbf9990"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f540dbf9b20"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f540dbf9cb0"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f540dbf9e40"/>
        <function-ref name="sync" scoped="" ref="0x7f540dbf8020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f540dbf82b0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f540dbf8440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXCTRL1" ref="0x7f540dbd28e0" loc="66:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f540dbd28e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540dbd2c60"/>
        <function-ref name="write" scoped="" ref="0x7f540dbd2df0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalIeeeEui64" ref="0x7f540dbf3020" loc="50:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f540dbf3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f540dbf33a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StartupTimer" ref="0x7f540dbebd90" loc="52:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StartupTimer" scoped="" ref="0x7f540dbebd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540dbe9670"/>
        <function-ref name="fired" scoped="" ref="0x7f540dbf15d0"/>
        <function-ref name="startAt" scoped="" ref="0x7f540dbe9020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540dbf1a90"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f540dbe9b30"/>
        <function-ref name="start" scoped="" ref="0x7f540dbf2bc0"/>
        <function-ref name="stop" scoped="" ref="0x7f540dbf1110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL0" ref="0x7f540dbd65f0" loc="64:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f540dbd65f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540dbd6970"/>
        <function-ref name="write" scoped="" ref="0x7f540dbd6b00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x7f540dbe7380" loc="54:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7f540dbe7380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dbe7700"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dbe7890"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dbe7a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dbe7bb0"/>
        <function-ref name="get" scoped="" ref="0x7f540dbe7d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dbe6020"/>
        <function-ref name="set" scoped="" ref="0x7f540dbe61b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540dbe6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7f540dbf7b40" loc="48:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7f540dbf7b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540dbf6750"/>
        <function-ref name="readDone" scoped="" ref="0x7f540dbf6bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="syncDone" ref="0x7f540dbc0820" loc="126:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="syncDone" scoped="" ref="0x7f540dbc0820"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540dbc0ba0"/>
        <function-ref name="runTask" scoped="" ref="0x7f540dbc0d30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSI" ref="0x7f540dbd11c0" loc="67:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f540dbd11c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540dbd1540"/>
        <function-ref name="write" scoped="" ref="0x7f540dbd16d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7f540dbd1a70" loc="68:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f540dbd1a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540dbd1df0"/>
        <function-ref name="write" scoped="" ref="0x7f540dbd0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG0" ref="0x7f540dbdb3d0" loc="62:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f540dbdb3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540dbdb750"/>
        <function-ref name="write" scoped="" ref="0x7f540dbdb8e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f540dbdc810" loc="57:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f540dbdc810"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f540dbdcb90"/>
        <function-ref name="changed" scoped="" ref="0x7f540dbdcd20"/>
        <function-ref name="amGroup" scoped="" ref="0x7f540dbe3020"/>
        <function-ref name="setAddress" scoped="" ref="0x7f540dbe31b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f540dbe8060" loc="53:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f540dbe8060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dbe83e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dbe8570"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dbe8700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dbe8890"/>
        <function-ref name="get" scoped="" ref="0x7f540dbe8a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dbe8bb0"/>
        <function-ref name="set" scoped="" ref="0x7f540dbe8d40"/>
        <function-ref name="clr" scoped="" ref="0x7f540dbe7020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCOFF" ref="0x7f540dbcf120" loc="71:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f540dbcf120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540dbcf6a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VREN" ref="0x7f540dbe66a0" loc="55:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7f540dbe66a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540dbe6a20"/>
        <function-ref name="isInput" scoped="" ref="0x7f540dbe6bb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540dbe6d40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540dbe5020"/>
        <function-ref name="get" scoped="" ref="0x7f540dbe51b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540dbe5340"/>
        <function-ref name="set" scoped="" ref="0x7f540dbe54d0"/>
        <function-ref name="clr" scoped="" ref="0x7f540dbe5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540dbfb510" loc="44:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540dbfb510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540dbfb890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7f540dbd2020" loc="65:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540dbd2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540dbd23a0"/>
        <function-ref name="write" scoped="" ref="0x7f540dbd2530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCON" ref="0x7f540dbcfa40" loc="72:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f540dbcfa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540dbcfdc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f540dbce1d0" loc="74:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f540dbce1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540dbce550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540dbce6e0"/>
        <function-ref name="request" scoped="" ref="0x7f540dbce870"/>
        <function-ref name="granted" scoped="" ref="0x7f540dbcea00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540dbceb90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SyncResource" ref="0x7f540dbccd90" loc="76:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SyncResource" scoped="" ref="0x7f540dbccd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540dbcb180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540dbcb310"/>
        <function-ref name="request" scoped="" ref="0x7f540dbcb4a0"/>
        <function-ref name="granted" scoped="" ref="0x7f540dbcb630"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540dbcb7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7f540dbf8740" loc="47:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f540dbf8740"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f540dbf8ac0"/>
        <function-ref name="rfOff" scoped="" ref="0x7f540dbf8c50"/>
        <function-ref name="rxOn" scoped="" ref="0x7f540dbf8de0"/>
        <function-ref name="startVReg" scoped="" ref="0x7f540dbf7020"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f540dbf71b0"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f540dbf7340"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f540dbf74d0"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f540dbf7660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG1" ref="0x7f540dbdbc80" loc="63:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f540dbdbc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540dbd60a0"/>
        <function-ref name="write" scoped="" ref="0x7f540dbd6230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FSCTRL" ref="0x7f540dbd3b00" loc="61:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f540dbd3b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540dbd3e80"/>
        <function-ref name="write" scoped="" ref="0x7f540dbdb030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXON" ref="0x7f540dbcd2b0" loc="69:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f540dbcd2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540dbcd630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540dbcba80" loc="78:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540dbcba80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540dbcbe00"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540dbca020"/>
        <function-ref name="led1On" scoped="" ref="0x7f540dbca1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540dbca340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540dbca4d0"/>
        <function-ref name="get" scoped="" ref="0x7f540dbca660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540dbca7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540dbcae30"/>
        <function-ref name="set" scoped="" ref="0x7f540dbca980"/>
        <function-ref name="led0On" scoped="" ref="0x7f540dbcab10"/>
        <function-ref name="led2On" scoped="" ref="0x7f540dbcaca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sync" ref="0x7f540dbc1940" loc="125:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sync" scoped="" ref="0x7f540dbc1940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540dbc1cc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f540dbc1e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540dbfbb80" loc="45:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540dbfbb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540dbfa020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540dbfa1b0"/>
        <function-ref name="request" scoped="" ref="0x7f540dbfa340"/>
        <function-ref name="granted" scoped="" ref="0x7f540dbfa4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540dbfa660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PANID" ref="0x7f540dbdf520" loc="60:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f540dbdf520"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540dbdf8a0"/>
        <function-ref name="write" scoped="" ref="0x7f540dbdfa30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IEEEADR" ref="0x7f540dbd7a90" loc="59:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f540dbd7a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540dbdf020"/>
        <function-ref name="write" scoped="" ref="0x7f540dbdf1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptCCA" ref="0x7f540dbe40e0" loc="56:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7f540dbe40e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540dbe4460"/>
        <function-ref name="disable" scoped="" ref="0x7f540dbe45f0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f540dbe4780"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f540dbe4910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiResource" ref="0x7f540dbcc020" loc="75:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RssiResource" scoped="" ref="0x7f540dbcc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540dbcc3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540dbcc530"/>
        <function-ref name="request" scoped="" ref="0x7f540dbcc6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f540dbcc850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540dbcc9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRFOFF" ref="0x7f540dbcd9c0" loc="70:../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f540dbcd9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540dbcdd40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540db4ac60" loc="45:../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540db4ac60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540db47020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7f540db47690" loc="46:../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7f540db47690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540db43020"/>
        <function-ref name="fired" scoped="" ref="0x7f540db45020"/>
        <function-ref name="startAt" scoped="" ref="0x7f540db459a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540db454e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f540db434e0"/>
        <function-ref name="start" scoped="" ref="0x7f540db465b0"/>
        <function-ref name="stop" scoped="" ref="0x7f540db46ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540db42d40" loc="42:../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540db42d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540db410e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7f540db415f0" loc="43:../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7f540db415f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540d8fce50"/>
        <function-ref name="fired" scoped="" ref="0x7f540d8fde00"/>
        <function-ref name="startAt" scoped="" ref="0x7f540d8fc800"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540d8fc340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f540d8fb340"/>
        <function-ref name="start" scoped="" ref="0x7f540d8fd430"/>
        <function-ref name="stop" scoped="" ref="0x7f540d8fd940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f540c50f020" loc="44:../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f540c50f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540c50c870"/>
        <function-ref name="fired" scoped="" ref="0x7f540c50e840"/>
        <function-ref name="startAt" scoped="" ref="0x7f540c50c220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540c50ed00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f540c50cd30"/>
        <function-ref name="start" scoped="" ref="0x7f540c50fe30"/>
        <function-ref name="stop" scoped="" ref="0x7f540c50e380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540c510720" loc="43:../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540c510720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540c510aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f540c507020" loc="44:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f540c507020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540c505870"/>
        <function-ref name="fired" scoped="" ref="0x7f540c506840"/>
        <function-ref name="startAt" scoped="" ref="0x7f540c505220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540c506d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f540c505d30"/>
        <function-ref name="start" scoped="" ref="0x7f540c507e30"/>
        <function-ref name="stop" scoped="" ref="0x7f540c506380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540c508760" loc="43:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540c508760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540c508ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f540c4ef8f0" loc="41:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f540c4ef8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540c4efc70"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540c4efe00"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540c4ee020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540c4ee1b0"/>
        <function-ref name="fired" scoped="" ref="0x7f540c4ee340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f540c4f3e70" loc="39:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f540c4f3e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540c4f1220"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540c4f13b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540c4f1540"/>
        <function-ref name="get" scoped="" ref="0x7f540c4f16d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540c4f1860"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540c4f19f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540c4f1b80"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540c4f1d10"/>
        <function-ref name="overflow" scoped="" ref="0x7f540c4f0020"/>
        <function-ref name="setMode" scoped="" ref="0x7f540c4f01b0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540c4f0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f540c4f05d0" loc="40:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540c4f05d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540c4f0950"/>
        <function-ref name="getControl" scoped="" ref="0x7f540c4f0ae0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540c4f0c70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540c4f0e00"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540c4ef020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540c4ef1b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540c4ef340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540c4ef4d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f540c4ef660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f540db0c3f0" loc="52:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f540db0c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540db0c770"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540db0c900"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540db0ca90"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540db0cc20"/>
        <function-ref name="fired" scoped="" ref="0x7f540db0cdb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f540db17cd0" loc="50:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f540db17cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540db100a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540db10230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540db103c0"/>
        <function-ref name="get" scoped="" ref="0x7f540db10550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540db106e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540db10870"/>
        <function-ref name="getMode" scoped="" ref="0x7f540db10a00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540db10b90"/>
        <function-ref name="overflow" scoped="" ref="0x7f540db10d20"/>
        <function-ref name="setMode" scoped="" ref="0x7f540db0f020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540db0f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f540db0fa40" loc="51:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540db0fa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540db0fdc0"/>
        <function-ref name="getControl" scoped="" ref="0x7f540db0e020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540db0e1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540db0e340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540db0e4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540db0e660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540db0e7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540db0e980"/>
        <function-ref name="setControl" scoped="" ref="0x7f540db0eb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f540dafca50" loc="56:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f540dafca50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540dafcdd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f540dafb020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540dafb1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540dafb340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540dafb4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540dafb660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540dafb7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540dafb980"/>
        <function-ref name="setControl" scoped="" ref="0x7f540dafbb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f540daf65a0" loc="61:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f540daf65a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540daf6920"/>
        <function-ref name="getControl" scoped="" ref="0x7f540daf6ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540daf6c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540daf6dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540daf5020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540daf51b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540daf5340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540daf54d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f540daf5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f540dafda20" loc="55:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f540dafda20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540dafdda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540dafc020"/>
        <function-ref name="captured" scoped="" ref="0x7f540dafc1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540dafc340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540dafc4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540dafc660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f540daea3e0" loc="73:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f540daea3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540daea760"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540daea8f0"/>
        <function-ref name="captured" scoped="" ref="0x7f540daeaa80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540daeac10"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540daeada0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540dae9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f540db03bb0" loc="54:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f540db03bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540dafd020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540dafd1b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540dafd340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540dafd4d0"/>
        <function-ref name="fired" scoped="" ref="0x7f540dafd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f540daeb570" loc="72:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f540daeb570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540daeb8f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540daeba80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540daebc10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540daebda0"/>
        <function-ref name="fired" scoped="" ref="0x7f540daea020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f540dae1da0" loc="82:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f540dae1da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540dae0180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540dae0310"/>
        <function-ref name="captured" scoped="" ref="0x7f540dae04a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540dae0630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540dae07c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540dae0950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f540dae9410" loc="74:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f540dae9410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540dae9790"/>
        <function-ref name="getControl" scoped="" ref="0x7f540dae9920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540dae9ab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540dae9c40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540dae9dd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540dae8020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540dae81b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540dae8340"/>
        <function-ref name="setControl" scoped="" ref="0x7f540dae84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f540db07280" loc="50:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f540db07280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540db07600"/>
        <function-ref name="getControl" scoped="" ref="0x7f540db07790"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540db07920"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540db07ab0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540db07c40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540db07dd0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540db06020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540db061b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f540db06340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f540daf1da0" loc="66:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f540daf1da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540daf0180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540daf0310"/>
        <function-ref name="captured" scoped="" ref="0x7f540daf04a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540daf0630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540daf07c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540daf0950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f540daf1020" loc="65:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f540daf1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540daf13a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540daf1530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540daf16c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540daf1850"/>
        <function-ref name="fired" scoped="" ref="0x7f540daf19e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f540daf3a50" loc="64:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f540daf3a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540daf3dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f540daf2020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540daf21b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540daf2340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540daf24d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540daf2660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540daf27f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540daf2980"/>
        <function-ref name="setControl" scoped="" ref="0x7f540daf2b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f540dafada0" loc="58:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f540dafada0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540daf8180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540daf8310"/>
        <function-ref name="captured" scoped="" ref="0x7f540daf84a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540daf8630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540daf87c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540daf8950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f540dae7890" loc="76:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f540dae7890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540dae7c10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540dae7da0"/>
        <function-ref name="captured" scoped="" ref="0x7f540dae6020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540dae61b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540dae6340"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540dae64d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f540daf0d40" loc="67:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f540daf0d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540daef0e0"/>
        <function-ref name="getControl" scoped="" ref="0x7f540daef270"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540daef400"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540daef590"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540daef720"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540daef8b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540daefa40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540daefbd0"/>
        <function-ref name="setControl" scoped="" ref="0x7f540daefd60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f540dafa020" loc="57:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f540dafa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540dafa3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540dafa530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540dafa6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540dafa850"/>
        <function-ref name="fired" scoped="" ref="0x7f540dafa9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f540db0ba30" loc="49:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f540db0ba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540db0bdb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540db08020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540db081b0"/>
        <function-ref name="get" scoped="" ref="0x7f540db08340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540db084d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540db08660"/>
        <function-ref name="getMode" scoped="" ref="0x7f540db087f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540db08980"/>
        <function-ref name="overflow" scoped="" ref="0x7f540db08b10"/>
        <function-ref name="setMode" scoped="" ref="0x7f540db08ca0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540db08e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f540dae8890" loc="75:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f540dae8890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540dae8e10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540dae7020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540dae71b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540dae7340"/>
        <function-ref name="fired" scoped="" ref="0x7f540dae74d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f540db04730" loc="53:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f540db04730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540db04ab0"/>
        <function-ref name="getControl" scoped="" ref="0x7f540db04c40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540db04dd0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540db03020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540db031b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540db03340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540db034d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540db03660"/>
        <function-ref name="setControl" scoped="" ref="0x7f540db037f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f540dae68c0" loc="77:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f540dae68c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540dae6c40"/>
        <function-ref name="getControl" scoped="" ref="0x7f540dae6dd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540dae5020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540dae51b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540dae5340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540dae54d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540dae5660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540dae57f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f540dae5980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f540dafe690" loc="52:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f540dafe690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540dafea10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540dafeba0"/>
        <function-ref name="captured" scoped="" ref="0x7f540dafed30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540db04020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540db041b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540db04340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f540daed020" loc="69:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f540daed020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540daed3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540daed530"/>
        <function-ref name="captured" scoped="" ref="0x7f540daed6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540daed850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540daed9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540daedb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f540db06700" loc="51:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f540db06700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540db06a80"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540db06c10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540db06da0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540db05020"/>
        <function-ref name="fired" scoped="" ref="0x7f540db051b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f540daee160" loc="68:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f540daee160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540daee4e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540daee670"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540daee800"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540daee990"/>
        <function-ref name="fired" scoped="" ref="0x7f540daeeb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f540dae4ae0" loc="79:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f540dae4ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540dae4e60"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540dae3020"/>
        <function-ref name="captured" scoped="" ref="0x7f540dae31b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540dae3340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540dae34d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540dae3660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f540daec020" loc="71:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f540daec020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540daec3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f540daec530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540daec6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540daec850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540daec9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540daecb70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540daecd00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540daeb020"/>
        <function-ref name="setControl" scoped="" ref="0x7f540daeb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f540daf8cd0" loc="60:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f540daf8cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540daf70a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540daf7230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540daf73c0"/>
        <function-ref name="get" scoped="" ref="0x7f540daf7550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540daf76e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540daf7870"/>
        <function-ref name="getMode" scoped="" ref="0x7f540daf7a00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540daf7b90"/>
        <function-ref name="overflow" scoped="" ref="0x7f540daf7d20"/>
        <function-ref name="setMode" scoped="" ref="0x7f540daf6020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540daf61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f540daf4a20" loc="63:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f540daf4a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540daf4da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540daf3020"/>
        <function-ref name="captured" scoped="" ref="0x7f540daf31b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540daf3340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540daf34d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540daf3660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f540dae5d40" loc="78:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f540dae5d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540dae40e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540dae4270"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540dae4400"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540dae4590"/>
        <function-ref name="fired" scoped="" ref="0x7f540dae4720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f540dae1020" loc="81:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f540dae1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540dae13a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540dae1530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540dae16c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540dae1850"/>
        <function-ref name="fired" scoped="" ref="0x7f540dae19e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f540daf5a20" loc="62:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f540daf5a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540daf4020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540daf41b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540daf4340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540daf44d0"/>
        <function-ref name="fired" scoped="" ref="0x7f540daf4660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f540dae3a50" loc="80:../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f540dae3a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540dae3dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f540dae2020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540dae21b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540dae2340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540dae24d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540dae2660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540dae27f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540dae2980"/>
        <function-ref name="setControl" scoped="" ref="0x7f540dae2b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f540daa7940" loc="55:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f540daa7940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540daa7cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f540daa72f0" loc="54:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f540daa72f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540daa7670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f540daa6020" loc="56:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f540daa6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540daa63a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f540daa9bf0" loc="53:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f540daa9bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540daa7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f540daaa3e0" loc="52:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540daaa3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540daaa760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540daaa8f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540daaaa80"/>
        <function-ref name="get" scoped="" ref="0x7f540daaac10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540daaada0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540daa9020"/>
        <function-ref name="getMode" scoped="" ref="0x7f540daa91b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540daa9340"/>
        <function-ref name="overflow" scoped="" ref="0x7f540daa94d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f540daa9660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540daa97f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f540daa0750" loc="55:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f540daa0750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540daa0ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f540daa0100" loc="54:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f540daa0100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540daa0480"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f540daa0da0" loc="56:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f540daa0da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540da9f180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f540daa1a60" loc="53:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f540daa1a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540daa1e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f540daa2260" loc="52:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540daa2260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540daa25e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540daa2770"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540daa2900"/>
        <function-ref name="get" scoped="" ref="0x7f540daa2a90"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540daa2c20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540daa2db0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540daa1020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540daa11b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f540daa1340"/>
        <function-ref name="setMode" scoped="" ref="0x7f540daa14d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540daa1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f540da557a0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f540da557a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da55b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540da55cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f540da55e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da54020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da541b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540da54340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f540da9c6d0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f540da9c6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540da9ca50"/>
        <function-ref name="getControl" scoped="" ref="0x7f540da9cbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da9cd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540da56020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540da561b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da56340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540da564d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540da56660"/>
        <function-ref name="setControl" scoped="" ref="0x7f540da567f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f540da53c50" loc="50:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f540da53c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540da52020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f540da56ac0" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f540da56ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da56e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540da55020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540da551b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540da55340"/>
        <function-ref name="fired" scoped="" ref="0x7f540da554d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f540da54610" loc="49:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540da54610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540da54990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540da54b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da54cb0"/>
        <function-ref name="get" scoped="" ref="0x7f540da54e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da53020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da531b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540da53340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da534d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f540da53660"/>
        <function-ref name="setMode" scoped="" ref="0x7f540da537f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540da53980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f540da4ecb0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f540da4ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da4c0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540da4c230"/>
        <function-ref name="captured" scoped="" ref="0x7f540da4c3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da4c550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da4c6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540da4c870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f540da50b30" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f540da50b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540da4f020"/>
        <function-ref name="getControl" scoped="" ref="0x7f540da4f1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da4f340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540da4f4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540da4f660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da4f7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540da4f980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540da4fb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f540da4fca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f540da4a2f0" loc="50:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f540da4a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540da4a670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f540da4e020" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f540da4e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da4e3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540da4e530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540da4e6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540da4e850"/>
        <function-ref name="fired" scoped="" ref="0x7f540da4e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f540da4cb40" loc="49:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540da4cb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540da4b020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540da4b1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da4b340"/>
        <function-ref name="get" scoped="" ref="0x7f540da4b4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da4b660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da4b7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540da4b980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da4bb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f540da4bca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f540da4be30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540da4a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f540da452f0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f540da452f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da45670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540da45800"/>
        <function-ref name="captured" scoped="" ref="0x7f540da45990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da45b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da45cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540da45e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f540da47220" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f540da47220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540da475a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f540da47730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da478c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540da47a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540da47be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da47d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540da46020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540da461b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f540da46340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f540da437a0" loc="50:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f540da437a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540da43b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f540da46610" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f540da46610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da46990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540da46b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540da46cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540da46e40"/>
        <function-ref name="fired" scoped="" ref="0x7f540da45020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f540da44160" loc="49:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540da44160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540da444e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540da44670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da44800"/>
        <function-ref name="get" scoped="" ref="0x7f540da44990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da44b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da44cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540da44e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da43020"/>
        <function-ref name="overflow" scoped="" ref="0x7f540da431b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f540da43340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540da434d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f540da3e7a0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f540da3e7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da3eb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540da3ecb0"/>
        <function-ref name="captured" scoped="" ref="0x7f540da3ee40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da3d020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da3d1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540da3d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f540da406d0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f540da406d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540da40a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f540da40be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da40d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540da3f020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540da3f1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da3f340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540da3f4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540da3f660"/>
        <function-ref name="setControl" scoped="" ref="0x7f540da3f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f540da3bc50" loc="50:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f540da3bc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540da3a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f540da3fac0" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f540da3fac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da3fe40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540da3e020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540da3e1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540da3e340"/>
        <function-ref name="fired" scoped="" ref="0x7f540da3e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f540da3d610" loc="49:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540da3d610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540da3d990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540da3db20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da3dcb0"/>
        <function-ref name="get" scoped="" ref="0x7f540da3de40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da3b020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da3b1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540da3b340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da3b4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f540da3b660"/>
        <function-ref name="setMode" scoped="" ref="0x7f540da3b7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540da3b980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f540da36cb0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f540da36cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da350a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540da35230"/>
        <function-ref name="captured" scoped="" ref="0x7f540da353c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da35550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da356e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540da35870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f540da38b30" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f540da38b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540da37020"/>
        <function-ref name="getControl" scoped="" ref="0x7f540da371b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da37340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540da374d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540da37660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da377f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540da37980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540da37b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f540da37ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f540da332f0" loc="50:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f540da332f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540da33670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f540da36020" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f540da36020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da363a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540da36530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540da366c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540da36850"/>
        <function-ref name="fired" scoped="" ref="0x7f540da369e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f540da35b40" loc="49:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540da35b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540da34020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540da341b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da34340"/>
        <function-ref name="get" scoped="" ref="0x7f540da344d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da34660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da347f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540da34980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da34b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f540da34ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f540da34e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540da33020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f540da2e2f0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f540da2e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da2e670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540da2e800"/>
        <function-ref name="captured" scoped="" ref="0x7f540da2e990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da2eb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da2ecb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540da2ee40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f540da30220" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f540da30220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540da305a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f540da30730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da308c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540da30a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540da30be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da30d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540da2f020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540da2f1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f540da2f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f540da2b7a0" loc="50:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f540da2b7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540da2bb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f540da2f610" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f540da2f610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da2f990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540da2fb20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540da2fcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540da2fe40"/>
        <function-ref name="fired" scoped="" ref="0x7f540da2e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f540da2d160" loc="49:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540da2d160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540da2d4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540da2d670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da2d800"/>
        <function-ref name="get" scoped="" ref="0x7f540da2d990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da2db20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da2dcb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540da2de40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da2b020"/>
        <function-ref name="overflow" scoped="" ref="0x7f540da2b1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f540da2b340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540da2b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f540da267a0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f540da267a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da26b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540da26cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f540da26e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da25020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da251b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540da25340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f540da286d0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f540da286d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540da28a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f540da28be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da28d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540da27020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540da271b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da27340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540da274d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540da27660"/>
        <function-ref name="setControl" scoped="" ref="0x7f540da277f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f540da24c50" loc="50:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f540da24c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540da23020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f540da27ac0" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f540da27ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da27e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540da26020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540da261b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540da26340"/>
        <function-ref name="fired" scoped="" ref="0x7f540da264d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f540da25610" loc="49:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540da25610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540da25990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540da25b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da25cb0"/>
        <function-ref name="get" scoped="" ref="0x7f540da25e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da24020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da241b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540da24340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da244d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f540da24660"/>
        <function-ref name="setMode" scoped="" ref="0x7f540da247f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540da24980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f540da1fcb0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f540da1fcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da1e0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540da1e230"/>
        <function-ref name="captured" scoped="" ref="0x7f540da1e3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da1e550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da1e6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540da1e870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f540da21b30" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f540da21b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540da20020"/>
        <function-ref name="getControl" scoped="" ref="0x7f540da201b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da20340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540da204d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540da20660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da207f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540da20980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540da20b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f540da20ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f540da1c2f0" loc="50:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f540da1c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540da1c670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f540da1f020" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f540da1f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da1f3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540da1f530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540da1f6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540da1f850"/>
        <function-ref name="fired" scoped="" ref="0x7f540da1f9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f540da1eb40" loc="49:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540da1eb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540da1d020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540da1d1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da1d340"/>
        <function-ref name="get" scoped="" ref="0x7f540da1d4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da1d660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da1d7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540da1d980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da1db10"/>
        <function-ref name="overflow" scoped="" ref="0x7f540da1dca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f540da1de30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540da1c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f540da162f0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f540da162f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da16670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540da16800"/>
        <function-ref name="captured" scoped="" ref="0x7f540da16990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da16b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da16cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540da16e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f540da18220" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f540da18220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540da185a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f540da18730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da188c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540da18a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540da18be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da18d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540da17020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540da171b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f540da17340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f540da147a0" loc="50:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f540da147a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540da14b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f540da17610" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f540da17610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da17990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540da17b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540da17cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540da17e40"/>
        <function-ref name="fired" scoped="" ref="0x7f540da16020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f540da15160" loc="49:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540da15160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540da154e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540da15670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da15800"/>
        <function-ref name="get" scoped="" ref="0x7f540da15990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da15b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da15cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540da15e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da14020"/>
        <function-ref name="overflow" scoped="" ref="0x7f540da141b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f540da14340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540da144d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f540da0f7a0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f540da0f7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da0fb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540da0fcb0"/>
        <function-ref name="captured" scoped="" ref="0x7f540da0fe40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da0e020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da0e1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540da0e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f540da116d0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f540da116d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540da11a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f540da11be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da11d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540da10020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540da101b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da10340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540da104d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540da10660"/>
        <function-ref name="setControl" scoped="" ref="0x7f540da107f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f540da0dc50" loc="50:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f540da0dc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540da0b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f540da10ac0" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f540da10ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540da10e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540da0f020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540da0f1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540da0f340"/>
        <function-ref name="fired" scoped="" ref="0x7f540da0f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f540da0e610" loc="49:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540da0e610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540da0e990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540da0eb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540da0ecb0"/>
        <function-ref name="get" scoped="" ref="0x7f540da0ee40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540da0d020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540da0d1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540da0d340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540da0d4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f540da0d660"/>
        <function-ref name="setMode" scoped="" ref="0x7f540da0d7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540da0d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f540da05bc0" loc="7:../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f540da05bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540da04020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f540da063f0" loc="4:../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f540da063f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540da06770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f540da06b80" loc="5:../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f540da06b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540da05020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f540da05430" loc="6:../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f540da05430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540da057b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f540c4e5760" loc="49:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f540c4e5760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540c4e5ae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540c4e5c70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540c4e5e00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540c4e4020"/>
        <function-ref name="fired" scoped="" ref="0x7f540c4e41b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f540c4e8dd0" loc="47:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f540c4e8dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540c4e7180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540c4e7310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540c4e74a0"/>
        <function-ref name="get" scoped="" ref="0x7f540c4e7630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540c4e77c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540c4e7950"/>
        <function-ref name="getMode" scoped="" ref="0x7f540c4e7ae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540c4e7c70"/>
        <function-ref name="overflow" scoped="" ref="0x7f540c4e7e00"/>
        <function-ref name="setMode" scoped="" ref="0x7f540c4e6020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540c4e61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f540c4ecbd0" loc="46:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f540c4ecbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540c4e84e0"/>
        <function-ref name="fired" scoped="" ref="0x7f540c4ea4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f540c4eae60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540c4ea9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f540c4e89a0"/>
        <function-ref name="start" scoped="" ref="0x7f540c4eba80"/>
        <function-ref name="stop" scoped="" ref="0x7f540c4ea020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540c4ec340" loc="45:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540c4ec340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540c4ec6c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f540c4e6440" loc="48:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540c4e6440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540c4e67c0"/>
        <function-ref name="getControl" scoped="" ref="0x7f540c4e6950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540c4e6ae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540c4e6c70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540c4e6e00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540c4e5020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540c4e51b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540c4e5340"/>
        <function-ref name="setControl" scoped="" ref="0x7f540c4e54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f540d97c8c0" loc="43:../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <component-ref qname="Counter32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f540d97c8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540d980700"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540d97b0d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540d980bc0"/>
        <function-ref name="overflow" scoped="" ref="0x7f540d97b590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f540d97a8e0" loc="43:../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f540d97a8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540d977780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540d976150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540d977c40"/>
        <function-ref name="overflow" scoped="" ref="0x7f540d976610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f540d965c50" loc="45:../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f540d965c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d964020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540d9641b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540d964340"/>
        <function-ref name="get" scoped="" ref="0x7f540d9644d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540d964660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540d9647f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540d964980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540d964b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f540d964ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f540d964e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540d963020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f540d974b80" loc="44:../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f540d974b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540d9739b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540d965360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540d973e70"/>
        <function-ref name="overflow" scoped="" ref="0x7f540d965820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f540d9420f0" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f540d9420f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540d940020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540d9409a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540d9404e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f540d940e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f540d945cf0" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f540d945cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540d944b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540d943550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540d943090"/>
        <function-ref name="overflow" scoped="" ref="0x7f540d943a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f540c5021d0" loc="61:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f540c5021d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540c4ffb30"/>
        <function-ref name="fired" scoped="" ref="0x7f540c5009f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f540c4ff4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540c4ff020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f540c4fe020"/>
        <function-ref name="start" scoped="" ref="0x7f540c500020"/>
        <function-ref name="stop" scoped="" ref="0x7f540c500530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f540c4fcb90" loc="73:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f540c4fcb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540c4f84e0"/>
        <function-ref name="fired" scoped="" ref="0x7f540c4f94e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f540c4f9e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540c4f99a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f540c4f89a0"/>
        <function-ref name="start" scoped="" ref="0x7f540c4fa9d0"/>
        <function-ref name="stop" scoped="" ref="0x7f540c4f9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f540c4fe690" loc="68:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f540c4fe690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540c4fd5b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540c4fc020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540c4fda70"/>
        <function-ref name="overflow" scoped="" ref="0x7f540c4fc4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFO" ref="0x7f540d8f69c0" loc="44:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7f540d8f69c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8f6d40"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8f5020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8f51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8f5340"/>
        <function-ref name="get" scoped="" ref="0x7f540d8f54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8f5660"/>
        <function-ref name="set" scoped="" ref="0x7f540d8f57f0"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8f5980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFOP" ref="0x7f540d8f5cf0" loc="45:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7f540d8f5cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8f30a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8f3230"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8f33c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8f3550"/>
        <function-ref name="get" scoped="" ref="0x7f540d8f36e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8f3870"/>
        <function-ref name="set" scoped="" ref="0x7f540d8f3a00"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8f3b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x7f540d8f2020" loc="46:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7f540d8f2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8f23a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8f2530"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8f26c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8f2850"/>
        <function-ref name="get" scoped="" ref="0x7f540d8f29e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8f2b70"/>
        <function-ref name="set" scoped="" ref="0x7f540d8f2d00"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8f1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CSN" ref="0x7f540d8f7690" loc="43:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f540d8f7690"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8f7a10"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8f7ba0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8f7d30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8f6020"/>
        <function-ref name="get" scoped="" ref="0x7f540d8f61b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8f6340"/>
        <function-ref name="set" scoped="" ref="0x7f540d8f64d0"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8f6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VREN" ref="0x7f540d8f06a0" loc="48:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7f540d8f06a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8f0a20"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8f0bb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8f0d40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8ef020"/>
        <function-ref name="get" scoped="" ref="0x7f540d8ef1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8ef340"/>
        <function-ref name="set" scoped="" ref="0x7f540d8ef4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8ef660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CCA" ref="0x7f540d8f83e0" loc="42:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7f540d8f83e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8f8760"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8f88f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8f8a80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8f8c10"/>
        <function-ref name="get" scoped="" ref="0x7f540d8f8da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8f7020"/>
        <function-ref name="set" scoped="" ref="0x7f540d8f71b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8f7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFD" ref="0x7f540d8f1370" loc="47:../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7f540d8f1370"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8f16f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8f1880"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8f1a10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8f1ba0"/>
        <function-ref name="get" scoped="" ref="0x7f540d8f1d30"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8f0020"/>
        <function-ref name="set" scoped="" ref="0x7f540d8f01b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8f0340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f540d8edc50" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d8edc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8ec020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8ec1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d8ec340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d8ea020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8ec660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8ec7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d8ec980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d8ecb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8ecca0"/>
        <function-ref name="get" scoped="" ref="0x7f540d8ece30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d8eb020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d8eb1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d8eb340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d8eb5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d8eb760"/>
        <function-ref name="set" scoped="" ref="0x7f540d8eb8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d8eba80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d8ebc10"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8ec4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d8ebda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f540d8eea20" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f540d8eea20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8eeda0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8ed020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8ed1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8ed340"/>
        <function-ref name="get" scoped="" ref="0x7f540d8ed4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8ed660"/>
        <function-ref name="set" scoped="" ref="0x7f540d8ed7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8ed980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f540d8e72f0" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d8e72f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8e7670"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8e7800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d8e7990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d8e5660"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8e7cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8e7e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d8e6020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d8e61b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8e6340"/>
        <function-ref name="get" scoped="" ref="0x7f540d8e64d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d8e6660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d8e67f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d8e6980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d8e6c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d8e6da0"/>
        <function-ref name="set" scoped="" ref="0x7f540d8e5020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d8e51b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d8e5340"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8e7b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d8e54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f540d8e8020" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f540d8e8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8e83a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8e8530"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8e86c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8e8850"/>
        <function-ref name="get" scoped="" ref="0x7f540d8e89e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8e8b70"/>
        <function-ref name="set" scoped="" ref="0x7f540d8e8d00"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8e7020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f540d8e27a0" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d8e27a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8e2b20"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8e2cb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d8e2e40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d8e0a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8e11b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8e1340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d8e14d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d8e1660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8e17f0"/>
        <function-ref name="get" scoped="" ref="0x7f540d8e1980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d8e1b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d8e1ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d8e1e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d8e0120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d8e02b0"/>
        <function-ref name="set" scoped="" ref="0x7f540d8e0440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d8e05d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d8e0760"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8e1020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d8e08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f540d8e3630" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f540d8e3630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8e39b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8e3b40"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8e3cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8e3e60"/>
        <function-ref name="get" scoped="" ref="0x7f540d8e2020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8e21b0"/>
        <function-ref name="set" scoped="" ref="0x7f540d8e2340"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8e24d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f540d8ddc60" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d8ddc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8db020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8db1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d8db340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d8d9020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8db660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8db7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d8db980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d8dbb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8dbca0"/>
        <function-ref name="get" scoped="" ref="0x7f540d8dbe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d8da020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d8da1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d8da340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d8da5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d8da760"/>
        <function-ref name="set" scoped="" ref="0x7f540d8da8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d8daa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d8dac10"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8db4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d8dada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f540d8deb00" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f540d8deb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8dee80"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8dd030"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8dd1c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8dd350"/>
        <function-ref name="get" scoped="" ref="0x7f540d8dd4e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8dd670"/>
        <function-ref name="set" scoped="" ref="0x7f540d8dd800"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8dd990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f540d8d62f0" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d8d62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8d6670"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8d6800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d8d6990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d8d4660"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8d6cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8d6e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d8d5020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d8d51b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8d5340"/>
        <function-ref name="get" scoped="" ref="0x7f540d8d54d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d8d5660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d8d57f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d8d5980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d8d5c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d8d5da0"/>
        <function-ref name="set" scoped="" ref="0x7f540d8d4020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d8d41b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d8d4340"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8d6b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d8d44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f540d8d7020" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f540d8d7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8d73a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8d7530"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8d76c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8d7850"/>
        <function-ref name="get" scoped="" ref="0x7f540d8d79e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8d7b70"/>
        <function-ref name="set" scoped="" ref="0x7f540d8d7d00"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8d6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f540d8d17a0" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d8d17a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8d1b20"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8d1cb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d8d1e40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d8cfa80"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8d01b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8d0340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d8d04d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d8d0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8d07f0"/>
        <function-ref name="get" scoped="" ref="0x7f540d8d0980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d8d0b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d8d0ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d8d0e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d8cf120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d8cf2b0"/>
        <function-ref name="set" scoped="" ref="0x7f540d8cf440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d8cf5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d8cf760"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8d0020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d8cf8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f540d8d2630" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f540d8d2630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8d29b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8d2b40"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8d2cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8d2e60"/>
        <function-ref name="get" scoped="" ref="0x7f540d8d1020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8d11b0"/>
        <function-ref name="set" scoped="" ref="0x7f540d8d1340"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8d14d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f540d8ccc60" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d8ccc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8cb020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8cb1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d8cb340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d8c9020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8cb660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8cb7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d8cb980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d8cbb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8cbca0"/>
        <function-ref name="get" scoped="" ref="0x7f540d8cbe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d8ca020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d8ca1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d8ca340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d8ca5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d8ca760"/>
        <function-ref name="set" scoped="" ref="0x7f540d8ca8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d8caa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d8cac10"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8cb4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d8cada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f540d8cdb00" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f540d8cdb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d8cde80"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d8cc030"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d8cc1c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8cc350"/>
        <function-ref name="get" scoped="" ref="0x7f540d8cc4e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d8cc670"/>
        <function-ref name="set" scoped="" ref="0x7f540d8cc800"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8cc990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureSFD" ref="0x7f540d8af700" loc="42:../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7f540d8af700"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f540d8afa80"/>
        <function-ref name="disable" scoped="" ref="0x7f540d8afc10"/>
        <function-ref name="captured" scoped="" ref="0x7f540d8afda0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f540d8b3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptCCA" ref="0x7f540d8b3400" loc="43:../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7f540d8b3400"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540d8b3780"/>
        <function-ref name="disable" scoped="" ref="0x7f540d8b3910"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f540d8b3aa0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f540d8b3c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptFIFOP" ref="0x7f540d8b2060" loc="44:../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f540d8b2060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540d8b23e0"/>
        <function-ref name="disable" scoped="" ref="0x7f540d8b2570"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f540d8b2700"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f540d8b2890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Capture" ref="0x7f540d894a80" loc="50:../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Capture" scoped="" ref="0x7f540d894a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540d894e00"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f540d892020"/>
        <function-ref name="captured" scoped="" ref="0x7f540d8921b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540d892340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540d8924d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f540d892660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f540d8acc20" loc="48:../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f540d8acc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f540d895020"/>
        <function-ref name="disable" scoped="" ref="0x7f540d8951b0"/>
        <function-ref name="captured" scoped="" ref="0x7f540d895340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f540d8954d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f540d895760" loc="49:../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540d895760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540d895ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f540d895c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540d895e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540d894020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540d8941b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540d894340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540d8944d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540d894660"/>
        <function-ref name="setControl" scoped="" ref="0x7f540d8947f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GeneralIO" ref="0x7f540d892930" loc="51:../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f540d892930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d892cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d892e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d891020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d890c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d891340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d8914d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d891660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d8917f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d891980"/>
        <function-ref name="get" scoped="" ref="0x7f540d891b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d891ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d891e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d890020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d8902b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d890440"/>
        <function-ref name="set" scoped="" ref="0x7f540d8905d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d890760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d8908f0"/>
        <function-ref name="clr" scoped="" ref="0x7f540d8911b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d890a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f540d880d50" loc="46:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f540d880d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d87f100"/>
        <function-ref name="fired" scoped="" ref="0x7f540d87f290"/>
        <function-ref name="disable" scoped="" ref="0x7f540d87f420"/>
        <function-ref name="edge" scoped="" ref="0x7f540d87f5b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d87f740"/>
        <function-ref name="enable" scoped="" ref="0x7f540d87f8d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d87fa60"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d87fbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f540d873020" loc="58:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f540d873020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d8733a0"/>
        <function-ref name="fired" scoped="" ref="0x7f540d873530"/>
        <function-ref name="disable" scoped="" ref="0x7f540d8736c0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d873850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d8739e0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d873b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d873d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d872020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f540d87c710" loc="49:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f540d87c710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d87ca90"/>
        <function-ref name="fired" scoped="" ref="0x7f540d87cc20"/>
        <function-ref name="disable" scoped="" ref="0x7f540d87cdb0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d87b020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d87b1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d87b340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d87b4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d87b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f540d87ad50" loc="53:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f540d87ad50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d879100"/>
        <function-ref name="fired" scoped="" ref="0x7f540d879290"/>
        <function-ref name="disable" scoped="" ref="0x7f540d879420"/>
        <function-ref name="edge" scoped="" ref="0x7f540d8795b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d879740"/>
        <function-ref name="enable" scoped="" ref="0x7f540d8798d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d879a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d879bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f540d882710" loc="44:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f540d882710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d882a90"/>
        <function-ref name="fired" scoped="" ref="0x7f540d882c20"/>
        <function-ref name="disable" scoped="" ref="0x7f540d882db0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d881020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d8811b0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d881340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d8814d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d881660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f540d876710" loc="56:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f540d876710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d876b90"/>
        <function-ref name="fired" scoped="" ref="0x7f540d876d20"/>
        <function-ref name="disable" scoped="" ref="0x7f540d875020"/>
        <function-ref name="edge" scoped="" ref="0x7f540d8751b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d875340"/>
        <function-ref name="enable" scoped="" ref="0x7f540d8754d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d875660"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d8757f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f540d87e020" loc="47:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f540d87e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d87e3a0"/>
        <function-ref name="fired" scoped="" ref="0x7f540d87e530"/>
        <function-ref name="disable" scoped="" ref="0x7f540d87e6c0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d87e850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d87e9e0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d87eb70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d87ed00"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d87d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f540d8723f0" loc="59:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f540d8723f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d872770"/>
        <function-ref name="fired" scoped="" ref="0x7f540d872900"/>
        <function-ref name="disable" scoped="" ref="0x7f540d872a90"/>
        <function-ref name="edge" scoped="" ref="0x7f540d872c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d872db0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d871020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d8711b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d871340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f540d889020" loc="42:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f540d889020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d8893a0"/>
        <function-ref name="fired" scoped="" ref="0x7f540d889530"/>
        <function-ref name="disable" scoped="" ref="0x7f540d8896c0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d889850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d8899e0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d889b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d889d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d888020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f540d878020" loc="54:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f540d878020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d8783a0"/>
        <function-ref name="fired" scoped="" ref="0x7f540d878530"/>
        <function-ref name="disable" scoped="" ref="0x7f540d8786c0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d878850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d8789e0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d878b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d878d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d877020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f540d881a30" loc="45:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f540d881a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d881db0"/>
        <function-ref name="fired" scoped="" ref="0x7f540d880020"/>
        <function-ref name="disable" scoped="" ref="0x7f540d8801b0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d880340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d8804d0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d880660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d8807f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d880980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f540d875bc0" loc="57:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f540d875bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d874020"/>
        <function-ref name="fired" scoped="" ref="0x7f540d8741b0"/>
        <function-ref name="disable" scoped="" ref="0x7f540d874340"/>
        <function-ref name="edge" scoped="" ref="0x7f540d8744d0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d874660"/>
        <function-ref name="enable" scoped="" ref="0x7f540d8747f0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d874980"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d874b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f540d87d3f0" loc="48:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f540d87d3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d87d770"/>
        <function-ref name="fired" scoped="" ref="0x7f540d87d900"/>
        <function-ref name="disable" scoped="" ref="0x7f540d87da90"/>
        <function-ref name="edge" scoped="" ref="0x7f540d87dc20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d87ddb0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d87c020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d87c1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d87c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f540d87ba30" loc="52:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f540d87ba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d87bdb0"/>
        <function-ref name="fired" scoped="" ref="0x7f540d87a020"/>
        <function-ref name="disable" scoped="" ref="0x7f540d87a1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d87a340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d87a4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d87a660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d87a7f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d87a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f540d8883f0" loc="43:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f540d8883f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d888770"/>
        <function-ref name="fired" scoped="" ref="0x7f540d888900"/>
        <function-ref name="disable" scoped="" ref="0x7f540d888a90"/>
        <function-ref name="edge" scoped="" ref="0x7f540d888c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d888db0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d882020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d8821b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d882340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f540d8773f0" loc="55:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f540d8773f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d877770"/>
        <function-ref name="fired" scoped="" ref="0x7f540d877900"/>
        <function-ref name="disable" scoped="" ref="0x7f540d877a90"/>
        <function-ref name="edge" scoped="" ref="0x7f540d877c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d877db0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d876020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d8761b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d876340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f540d868020" loc="58:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f540d868020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d8683a0"/>
        <function-ref name="fired" scoped="" ref="0x7f540d868530"/>
        <function-ref name="disable" scoped="" ref="0x7f540d8686c0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d868850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d8689e0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d868b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d868d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d867020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f540d85c3f0" loc="70:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f540d85c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d85c770"/>
        <function-ref name="fired" scoped="" ref="0x7f540d85c900"/>
        <function-ref name="disable" scoped="" ref="0x7f540d85ca90"/>
        <function-ref name="edge" scoped="" ref="0x7f540d85cc20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d85cdb0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d85b020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d85b1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d85b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f540d865a30" loc="61:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f540d865a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d865db0"/>
        <function-ref name="fired" scoped="" ref="0x7f540d864020"/>
        <function-ref name="disable" scoped="" ref="0x7f540d8641b0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d864340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d8644d0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d864660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d8647f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d864980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f540d862020" loc="65:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f540d862020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d8623a0"/>
        <function-ref name="fired" scoped="" ref="0x7f540d862530"/>
        <function-ref name="disable" scoped="" ref="0x7f540d8626c0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d862850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d8629e0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d862b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d862d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d861020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f540d86ba30" loc="56:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f540d86ba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d86bdb0"/>
        <function-ref name="fired" scoped="" ref="0x7f540d86a020"/>
        <function-ref name="disable" scoped="" ref="0x7f540d86a1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d86a340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d86a4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d86a660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d86a7f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d86a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f540d85fa30" loc="68:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f540d85fa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d85e020"/>
        <function-ref name="fired" scoped="" ref="0x7f540d85e1b0"/>
        <function-ref name="disable" scoped="" ref="0x7f540d85e340"/>
        <function-ref name="edge" scoped="" ref="0x7f540d85e4d0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d85e660"/>
        <function-ref name="enable" scoped="" ref="0x7f540d85e7f0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d85e980"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d85eb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f540d8673f0" loc="59:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f540d8673f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d867770"/>
        <function-ref name="fired" scoped="" ref="0x7f540d867900"/>
        <function-ref name="disable" scoped="" ref="0x7f540d867a90"/>
        <function-ref name="edge" scoped="" ref="0x7f540d867c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d867db0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d866020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d8661b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d866340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f540d85b710" loc="71:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f540d85b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d85ba90"/>
        <function-ref name="fired" scoped="" ref="0x7f540d85bc20"/>
        <function-ref name="disable" scoped="" ref="0x7f540d85bdb0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d85a020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d85a1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d85a340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d85a4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d85a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f540d86e470" loc="54:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f540d86e470"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d86e7f0"/>
        <function-ref name="fired" scoped="" ref="0x7f540d86e980"/>
        <function-ref name="disable" scoped="" ref="0x7f540d86eb10"/>
        <function-ref name="edge" scoped="" ref="0x7f540d86eca0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d86ee30"/>
        <function-ref name="enable" scoped="" ref="0x7f540d86c020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d86c1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d86c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f540d8613f0" loc="66:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f540d8613f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d861770"/>
        <function-ref name="fired" scoped="" ref="0x7f540d861900"/>
        <function-ref name="disable" scoped="" ref="0x7f540d861a90"/>
        <function-ref name="edge" scoped="" ref="0x7f540d861c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d861db0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d860020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d8601b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d860340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f540d86ad50" loc="57:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f540d86ad50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d869100"/>
        <function-ref name="fired" scoped="" ref="0x7f540d869290"/>
        <function-ref name="disable" scoped="" ref="0x7f540d869420"/>
        <function-ref name="edge" scoped="" ref="0x7f540d8695b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d869740"/>
        <function-ref name="enable" scoped="" ref="0x7f540d8698d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d869a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d869bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f540d85d020" loc="69:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f540d85d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d85d3a0"/>
        <function-ref name="fired" scoped="" ref="0x7f540d85d530"/>
        <function-ref name="disable" scoped="" ref="0x7f540d85d6c0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d85d850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d85d9e0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d85db70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d85dd00"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d85c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f540d866710" loc="60:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f540d866710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d866a90"/>
        <function-ref name="fired" scoped="" ref="0x7f540d866c20"/>
        <function-ref name="disable" scoped="" ref="0x7f540d866db0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d865020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d8651b0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d865340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d8654d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d865660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f540d864d50" loc="64:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f540d864d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d863100"/>
        <function-ref name="fired" scoped="" ref="0x7f540d863290"/>
        <function-ref name="disable" scoped="" ref="0x7f540d863420"/>
        <function-ref name="edge" scoped="" ref="0x7f540d8635b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d863740"/>
        <function-ref name="enable" scoped="" ref="0x7f540d8638d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d863a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d863bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f540d86c710" loc="55:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f540d86c710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d86ca90"/>
        <function-ref name="fired" scoped="" ref="0x7f540d86cc20"/>
        <function-ref name="disable" scoped="" ref="0x7f540d86cdb0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d86b020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d86b1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d86b340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d86b4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d86b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f540d860710" loc="67:../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f540d860710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d860a90"/>
        <function-ref name="fired" scoped="" ref="0x7f540d860c20"/>
        <function-ref name="disable" scoped="" ref="0x7f540d860db0"/>
        <function-ref name="edge" scoped="" ref="0x7f540d85f020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d85f1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d85f340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d85f4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d85f660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7f540d7502f0" loc="52:../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7f540d7502f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d750670"/>
        <function-ref name="fired" scoped="" ref="0x7f540d750800"/>
        <function-ref name="disable" scoped="" ref="0x7f540d750990"/>
        <function-ref name="edge" scoped="" ref="0x7f540d750b20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d750cb0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d750e40"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d741020"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d7411b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f540d751680" loc="51:../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f540d751680"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540d751a00"/>
        <function-ref name="disable" scoped="" ref="0x7f540d751b90"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f540d751d20"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f540d750020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7f540d73f7a0" loc="52:../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7f540d73f7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d73fb20"/>
        <function-ref name="fired" scoped="" ref="0x7f540d73fcb0"/>
        <function-ref name="disable" scoped="" ref="0x7f540d73fe40"/>
        <function-ref name="edge" scoped="" ref="0x7f540d73e020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f540d73e1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f540d73e340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f540d73e4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f540d73e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f540d740b70" loc="51:../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f540d740b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540d73f020"/>
        <function-ref name="disable" scoped="" ref="0x7f540d73f1b0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f540d73f340"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f540d73f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f540d2dfe50" loc="69:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f540d2dfe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2de410"/>
        <function-ref name="write" scoped="" ref="0x7f540d2de5a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f540d2e9160" loc="47:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f540d2e9160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2e94e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f540d2e3e50" loc="63:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f540d2e3e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2e1210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2e13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f540d2dd880" loc="72:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f540d2dd880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2ddc00"/>
        <function-ref name="write" scoped="" ref="0x7f540d2ddd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f540d2d50a0" loc="86:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f540d2d50a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d5420"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d55b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f540d2dc0a0" loc="73:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f540d2dc0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2dc420"/>
        <function-ref name="write" scoped="" ref="0x7f540d2dc5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f540d2c7500" loc="108:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f540d2c7500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2c7880"/>
        <function-ref name="write" scoped="" ref="0x7f540d2c7a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f540d2cb500" loc="104:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f540d2cb500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2cb880"/>
        <function-ref name="write" scoped="" ref="0x7f540d2cba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f540d2e7490" loc="50:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f540d2e7490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2e7810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f540d2d1880" loc="93:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f540d2d1880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d1c00"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d1d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f540d2cc500" loc="102:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f540d2cc500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2cc880"/>
        <function-ref name="write" scoped="" ref="0x7f540d2cca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f540d2e1e50" loc="65:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f540d2e1e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2e0210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2e03a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f540d2e0e50" loc="67:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f540d2e0e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2df210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2df3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f540d2d7880" loc="83:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f540d2d7880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d7c00"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d7d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f540d2d80a0" loc="79:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f540d2d80a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d8420"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d85b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f540d2dc880" loc="74:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f540d2dc880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2dcc00"/>
        <function-ref name="write" scoped="" ref="0x7f540d2dcd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f540d2eba90" loc="42:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d2eba90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f540d2ebe10"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f540d2ea020"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f540d2ea1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f540d2e6e00" loc="54:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f540d2e6e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2e51c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f540d2e5490" loc="55:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f540d2e5490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2e5910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f540d2d0c80" loc="95:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f540d2d0c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2cf0a0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2cf230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f540d2e5be0" loc="56:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f540d2e5be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2e4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f540d2ccce0" loc="103:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f540d2ccce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2cb0a0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2cb230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f540d2e6160" loc="52:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f540d2e6160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2e64e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f540d2d10a0" loc="92:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f540d2d10a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d1420"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d15b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f540d2e0670" loc="66:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f540d2e0670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2e09f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2e0b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f540d2e1670" loc="64:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540d2e1670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2e19f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2e1b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f540d2eaad0" loc="46:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f540d2eaad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2eae50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f540d2d20a0" loc="90:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f540d2d20a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d2420"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d25b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f540d2d5880" loc="87:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f540d2d5880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d5c00"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d5d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f540d2d2880" loc="91:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f540d2d2880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d2c00"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d2d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f540d2c8ce0" loc="107:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f540d2c8ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2c70a0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2c7230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f540d2cbce0" loc="105:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f540d2cbce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2c80a0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2c8230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f540d2d8880" loc="80:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f540d2d8880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d8c00"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d8d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f540d2d30a0" loc="88:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f540d2d30a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d3420"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d35b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f540d2cece0" loc="101:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f540d2cece0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2cc0a0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2cc230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f540d2da880" loc="76:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f540d2da880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2dac00"/>
        <function-ref name="write" scoped="" ref="0x7f540d2dad90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f540d2c7ce0" loc="111:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f540d2c7ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f540d2c60a0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f540d2c6230"/>
        <function-ref name="write" scoped="" ref="0x7f540d2c63c0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f540d2c6550"/>
        <function-ref name="readDone" scoped="" ref="0x7f540d2c66e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f540d2ea480" loc="45:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f540d2ea480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2ea800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f540d2e3670" loc="62:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f540d2e3670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2e39f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2e3b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f540d2df670" loc="68:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f540d2df670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2df9f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2dfb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f540d2d60a0" loc="84:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f540d2d60a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d6420"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d65b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f540d2da0a0" loc="75:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f540d2da0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2da420"/>
        <function-ref name="write" scoped="" ref="0x7f540d2da5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f540d2d6880" loc="85:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f540d2d6880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d6c00"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d6d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f540d2de870" loc="70:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f540d2de870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2debf0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2ded80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f540d2e97b0" loc="48:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f540d2e97b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2e9b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f540d2dd0a0" loc="71:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f540d2dd0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2dd420"/>
        <function-ref name="write" scoped="" ref="0x7f540d2dd5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540d2ece20" loc="41:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540d2ece20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d2eb1c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d2eb350"/>
        <function-ref name="request" scoped="" ref="0x7f540d2eb4e0"/>
        <function-ref name="granted" scoped="" ref="0x7f540d2eb670"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d2eb800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f540d2e42f0" loc="57:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f540d2e42f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2e4670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f540d2e3020" loc="59:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f540d2e3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2e33a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f540d2ce500" loc="100:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f540d2ce500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2ce880"/>
        <function-ref name="write" scoped="" ref="0x7f540d2cea10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f540d2cfce0" loc="99:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f540d2cfce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2ce0a0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2ce230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f540d2e67b0" loc="53:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f540d2e67b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2e6b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f540d2cf500" loc="96:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f540d2cf500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2cf880"/>
        <function-ref name="write" scoped="" ref="0x7f540d2cfa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f540d2c8500" loc="106:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f540d2c8500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2c8880"/>
        <function-ref name="write" scoped="" ref="0x7f540d2c8a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f540d2d70a0" loc="81:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f540d2d70a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d7420"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d75b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f540d2d3880" loc="89:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f540d2d3880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d3c00"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d3d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f540d2e9e00" loc="49:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f540d2e9e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2e71c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f540d2e7ae0" loc="51:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f540d2e7ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2e7e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f540d2d90a0" loc="77:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f540d2d90a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d9420"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d95b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f540d2e4940" loc="58:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f540d2e4940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2e4cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f540d2d9880" loc="78:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f540d2d9880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d9c00"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d9d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f540d2d00a0" loc="94:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f540d2d00a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2d0820"/>
        <function-ref name="write" scoped="" ref="0x7f540d2d09b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f540d2c69b0" loc="112:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f540d2c69b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f540d2c6d30"/>
        <function-ref name="writeDone" scoped="" ref="0x7f540d2c5020"/>
        <function-ref name="write" scoped="" ref="0x7f540d2c51b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f540d2c5340"/>
        <function-ref name="readDone" scoped="" ref="0x7f540d2c54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7f540d6fc2c0" loc="41:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7f540d6fc2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f540d6fc640"/>
        <function-ref name="writeDone" scoped="" ref="0x7f540d6fc7d0"/>
        <function-ref name="write" scoped="" ref="0x7f540d6fc960"/>
        <function-ref name="beginRead" scoped="" ref="0x7f540d6fcaf0"/>
        <function-ref name="readDone" scoped="" ref="0x7f540d6fcc80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f540d6fd350" loc="40:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d6fd350"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f540d6fd6d0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f540d6fd860"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f540d6fd9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7f540d6fb540" loc="42:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7f540d6fb540"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d6fb8c0"/>
        <function-ref name="write" scoped="" ref="0x7f540d6fba50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7f540d6fa370" loc="43:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7f540d6fa370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d6fa6f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d6fa880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540d6ff4d0" loc="39:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540d6ff4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d6ff850"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d6ff9e0"/>
        <function-ref name="request" scoped="" ref="0x7f540d6ffb70"/>
        <function-ref name="granted" scoped="" ref="0x7f540d6ffd00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d6fd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7f540d6f81d0" loc="44:../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7f540d6f81d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d6f8550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiPacket" ref="0x7f540d6e32e0" loc="55:../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f540d6e32e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540d6e3660"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540d6e37f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7f540d6f3890" loc="46:../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7f540d6f3890"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f540d6f3c10"/>
        <function-ref name="writeDone" scoped="" ref="0x7f540d6f3da0"/>
        <function-ref name="write" scoped="" ref="0x7f540d6f2020"/>
        <function-ref name="beginRead" scoped="" ref="0x7f540d6f21b0"/>
        <function-ref name="readDone" scoped="" ref="0x7f540d6f2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f540d6f5660" loc="44:../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d6f5660"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f540d6f59e0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f540d6f5b70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f540d6f5d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiByte" ref="0x7f540d6ebc20" loc="54:../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f540d6ebc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f540d6ed020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="WorkingState" ref="0x7f540d6e3b40" loc="56:../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="WorkingState" scoped="" ref="0x7f540d6e3b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f540d6ea020"/>
        <function-ref name="toIdle" scoped="" ref="0x7f540d6ea1b0"/>
        <function-ref name="isState" scoped="" ref="0x7f540d6ea340"/>
        <function-ref name="isIdle" scoped="" ref="0x7f540d6ea4d0"/>
        <function-ref name="requestState" scoped="" ref="0x7f540d6ea660"/>
        <function-ref name="forceState" scoped="" ref="0x7f540d6ea7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f540d6ee060" loc="53:../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f540d6ee060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d6ee3e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d6ee570"/>
        <function-ref name="request" scoped="" ref="0x7f540d6ee700"/>
        <function-ref name="granted" scoped="" ref="0x7f540d6ee890"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d6eea20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7f540d6f2ba0" loc="47:../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7f540d6f2ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d6f1020"/>
        <function-ref name="write" scoped="" ref="0x7f540d6f11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7f540d6f1a30" loc="48:../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7f540d6f1a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d6f1db0"/>
        <function-ref name="write" scoped="" ref="0x7f540d6ef020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540d6eaa70" loc="57:../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540d6eaa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540d6eadf0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540d6e4020"/>
        <function-ref name="led1On" scoped="" ref="0x7f540d6e41b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540d6e4340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540d6e44d0"/>
        <function-ref name="get" scoped="" ref="0x7f540d6e4660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540d6e47f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540d6e4e30"/>
        <function-ref name="set" scoped="" ref="0x7f540d6e4980"/>
        <function-ref name="led0On" scoped="" ref="0x7f540d6e4b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f540d6e4ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540d6f4510" loc="45:../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540d6f4510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d6f4890"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d6f4a20"/>
        <function-ref name="request" scoped="" ref="0x7f540d6f4bb0"/>
        <function-ref name="granted" scoped="" ref="0x7f540d6f4d40"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d6f3020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grant" ref="0x7f540d6dfbd0" loc="88:../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grant" scoped="" ref="0x7f540d6dfbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540d6de020"/>
        <function-ref name="runTask" scoped="" ref="0x7f540d6de1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7f540d6ef8b0" loc="49:../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7f540d6ef8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d6efc30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f540d684770" loc="67:../../tos/system/StateC.nc">
      <component-ref qname="CC2420SpiWireC.WorkingStateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f540d684770"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f540d684af0"/>
        <function-ref name="toIdle" scoped="" ref="0x7f540d684c80"/>
        <function-ref name="isState" scoped="" ref="0x7f540d684e10"/>
        <function-ref name="isIdle" scoped="" ref="0x7f540d680020"/>
        <function-ref name="requestState" scoped="" ref="0x7f540d6801b0"/>
        <function-ref name="forceState" scoped="" ref="0x7f540d680340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f540d67f1d0" loc="66:../../tos/system/StateImplC.nc">
      <component-ref qname="StateImplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f540d67f1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f540d67f550"/>
        <function-ref name="toIdle" scoped="" ref="0x7f540d67f6e0"/>
        <function-ref name="isState" scoped="" ref="0x7f540d67f870"/>
        <function-ref name="isIdle" scoped="" ref="0x7f540d67fa00"/>
        <function-ref name="requestState" scoped="" ref="0x7f540d67fb90"/>
        <function-ref name="forceState" scoped="" ref="0x7f540d67fd20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540d67b020" loc="66:../../tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540d67b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540d67b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f540d67bb70" loc="67:../../tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f540d67bb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f540d67a020"/>
        <function-ref name="toIdle" scoped="" ref="0x7f540d67a1b0"/>
        <function-ref name="isState" scoped="" ref="0x7f540d67a340"/>
        <function-ref name="isIdle" scoped="" ref="0x7f540d67a4d0"/>
        <function-ref name="requestState" scoped="" ref="0x7f540d67a660"/>
        <function-ref name="forceState" scoped="" ref="0x7f540d67a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f540d312020" loc="44:../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f540d312020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540d3123a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540d312530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f540d6618f0" loc="43:../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f540d6618f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f540d661c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540d662c40" loc="42:../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540d662c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d661020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d6611b0"/>
        <function-ref name="request" scoped="" ref="0x7f540d661340"/>
        <function-ref name="granted" scoped="" ref="0x7f540d6614d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d661660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f540c298760" loc="82:../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f540c298760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f540c298ae0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540c298c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f540c296120" loc="87:../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f540c296120"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540c2964a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540c296630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f540c2968c0" loc="89:../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f540c2968c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f540c296c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f540c297020" loc="83:../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f540c297020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f540c2973a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540c299a00" loc="81:../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540c299a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540c299d80"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540c298020"/>
        <function-ref name="request" scoped="" ref="0x7f540c2981b0"/>
        <function-ref name="granted" scoped="" ref="0x7f540c298340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540c2984d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f540c297630" loc="85:../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f540c297630"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f540c2979b0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f540c297b40"/>
        <function-ref name="splitRead" scoped="" ref="0x7f540c297cd0"/>
        <function-ref name="write" scoped="" ref="0x7f540c297e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f540d5f88e0" loc="74:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540d5f88e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f540d5f8c60"/>
        <function-ref name="configure" scoped="" ref="0x7f540d5f8df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f540d5fa850" loc="77:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f540d5fa850"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540d5fabd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540d5fad60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f540d5f5a40" loc="80:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f540d5f5a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f540d5f5dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f540d5fb110" loc="75:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f540d5fb110"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f540d5fb490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f540d5f6690" loc="79:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f540d5f6690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d5f6a10"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d5f6ba0"/>
        <function-ref name="request" scoped="" ref="0x7f540d5f6d30"/>
        <function-ref name="granted" scoped="" ref="0x7f540d5f5020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d5f51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540d600d80" loc="73:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540d600d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d5fc180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d5fc310"/>
        <function-ref name="request" scoped="" ref="0x7f540d5fc4a0"/>
        <function-ref name="granted" scoped="" ref="0x7f540d5fc630"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d5fc7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f540d5fb790" loc="76:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f540d5fb790"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f540d5fbb10"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f540d5fbca0"/>
        <function-ref name="splitRead" scoped="" ref="0x7f540d5fbe30"/>
        <function-ref name="write" scoped="" ref="0x7f540d5fa020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f540d5f1b40" loc="81:../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f540d5f1b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540d5f3020"/>
        <function-ref name="txDone" scoped="" ref="0x7f540d5f31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f540d57f250" loc="76:../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540d57f250"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f540d57f5f0"/>
        <function-ref name="configure" scoped="" ref="0x7f540d57f780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f540d57ec50" loc="79:../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f540d57ec50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540d57d020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540d57d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f540d57c3e0" loc="82:../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f540d57c3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f540d57c780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f540d57fa10" loc="77:../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f540d57fa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f540d57fd90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f540d57ca50" loc="83:../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f540d57ca50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f540d57cdd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f540d57a020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f540d57a1b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f540d57a340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f540d57a4d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f540d57a660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f540d57a7f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f540d57a980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f540d57ab10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f540d57aca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f540d57ae30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f540d579020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f540d5791b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f540d579440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f540d5795d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f540d579760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f540d5798f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f540d579a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f540d579c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f540d579da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f540d578020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f540d5781b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f540d578340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f540d5784d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540d578660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f540d5789f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f540d578b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f540d578d10"/>
        <function-ref name="tx" scoped="" ref="0x7f540d577020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f540d5771b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f540d577340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f540d5774d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f540d577660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f540d5777f0"/>
        <function-ref name="rx" scoped="" ref="0x7f540d577980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f540d577b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f540d577ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f540d577e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f540d576020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f540d5761b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540d576c20" loc="85:../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540d576c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540d575020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540d5751b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f540d575340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540d5754d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540d575660"/>
        <function-ref name="get" scoped="" ref="0x7f540d5757f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540d575980"/>
        <function-ref name="led2On" scoped="" ref="0x7f540d574020"/>
        <function-ref name="set" scoped="" ref="0x7f540d575ca0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540d575b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f540d575e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f540d57d5b0" loc="81:../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f540d57d5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d57d950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d57dae0"/>
        <function-ref name="request" scoped="" ref="0x7f540d57dc70"/>
        <function-ref name="granted" scoped="" ref="0x7f540d57de00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d57c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540d580470" loc="75:../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540d580470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d580810"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d5809a0"/>
        <function-ref name="request" scoped="" ref="0x7f540d580b30"/>
        <function-ref name="granted" scoped="" ref="0x7f540d580cc0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d580e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f540d57e060" loc="78:../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f540d57e060"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f540d57e3e0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f540d57e570"/>
        <function-ref name="splitRead" scoped="" ref="0x7f540d57e700"/>
        <function-ref name="write" scoped="" ref="0x7f540d57e890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f540d576480" loc="84:../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f540d576480"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540d576800"/>
        <function-ref name="txDone" scoped="" ref="0x7f540d576990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalDone_task" ref="0x7f540d5742f0" loc="102:../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalDone_task" scoped="" ref="0x7f540d5742f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540d574670"/>
        <function-ref name="runTask" scoped="" ref="0x7f540d574800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f540d5642c0" loc="78:../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f540d5642c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540d564640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f540d568d10" loc="77:../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f540d568d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540d5670e0"/>
        <function-ref name="txDone" scoped="" ref="0x7f540d567270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f540d56c020" loc="76:../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f540d56c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f540d56c3a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f540d56c530"/>
        <function-ref name="setUctl" scoped="" ref="0x7f540d56c6c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f540d56c850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f540d56c9e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f540d56cb70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f540d56cd00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f540d56b020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f540d56b1b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f540d56b340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f540d56b4d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f540d56b660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f540d56b7f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f540d56ba80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f540d56bc10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f540d56bda0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f540d56a020"/>
        <function-ref name="isUart" scoped="" ref="0x7f540d56a1b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f540d56a340"/>
        <function-ref name="isSpi" scoped="" ref="0x7f540d56a4d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f540d56a660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f540d56a7f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f540d56a980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f540d56ab10"/>
        <function-ref name="getMode" scoped="" ref="0x7f540d56aca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f540d569220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f540d5693b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f540d569540"/>
        <function-ref name="tx" scoped="" ref="0x7f540d5696d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f540d569860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f540d5699f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f540d569b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f540d569d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f540d568020"/>
        <function-ref name="rx" scoped="" ref="0x7f540d5681b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f540d568340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f540d5684d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f540d568660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f540d5687f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f540d568980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f540d52abb0" loc="62:../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f540d52abb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d529020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d5291b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d529340"/>
        <function-ref name="clr" scoped="" ref="0x7f540d527020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d529660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d5297f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d529980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d529b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d529ca0"/>
        <function-ref name="get" scoped="" ref="0x7f540d529e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d528020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d5281b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d528340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d5285d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d528760"/>
        <function-ref name="set" scoped="" ref="0x7f540d5288f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d528a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d5294d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d528c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d528da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f540d55e2d0" loc="56:../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f540d55e2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540d55e650"/>
        <function-ref name="txDone" scoped="" ref="0x7f540d55e7e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f540d5273e0" loc="63:../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f540d5273e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d527760"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d5278f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d527a80"/>
        <function-ref name="clr" scoped="" ref="0x7f540d5257f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d527da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d526020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d5261b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d526340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d5264d0"/>
        <function-ref name="get" scoped="" ref="0x7f540d526660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d5267f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d526980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d526b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d526da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d525020"/>
        <function-ref name="set" scoped="" ref="0x7f540d5251b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d525340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d527c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d5254d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d525660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f540d525bb0" loc="64:../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f540d525bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d524020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d5241b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d524340"/>
        <function-ref name="clr" scoped="" ref="0x7f540d522020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d524660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d5247f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d524980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d524b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d524ca0"/>
        <function-ref name="get" scoped="" ref="0x7f540d524e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d523020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d5231b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d523340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d5235d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d523760"/>
        <function-ref name="set" scoped="" ref="0x7f540d5238f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d523a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d5244d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d523c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d523da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f540d563700" loc="55:../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f540d563700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f540d563a80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f540d563c10"/>
        <function-ref name="setUctl" scoped="" ref="0x7f540d563da0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f540d562020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f540d5621b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f540d562340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f540d5624d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f540d562660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f540d5627f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f540d562980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f540d562b10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f540d562ca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f540d562e30"/>
        <function-ref name="getUbr" scoped="" ref="0x7f540d561120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f540d5612b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f540d561440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f540d5615d0"/>
        <function-ref name="isUart" scoped="" ref="0x7f540d561760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f540d5618f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f540d561a80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f540d561c10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f540d561da0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f540d560020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f540d5601b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540d560340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f540d5606d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f540d560860"/>
        <function-ref name="setUbr" scoped="" ref="0x7f540d5609f0"/>
        <function-ref name="tx" scoped="" ref="0x7f540d560b80"/>
        <function-ref name="getUctl" scoped="" ref="0x7f540d560d10"/>
        <function-ref name="disableUart" scoped="" ref="0x7f540d55f020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f540d55f1b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f540d55f340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f540d55f4d0"/>
        <function-ref name="rx" scoped="" ref="0x7f540d55f660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f540d55f7f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f540d55f980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f540d55fb10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f540d55fca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f540d55fe30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7f540d535d10" loc="59:../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f540d535d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f540d55c0e0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f540d55c270"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f540d55c400"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f540d55c590"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f540d55c720"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f540d55c8b0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f540d55ca40"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f540d55cbd0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540d55cd60"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f540d55b020"/>
        <function-ref name="getData" scoped="" ref="0x7f540d55b1b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f540d55b340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f540d55b4d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f540d55b760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f540d55b8f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f540d55ba80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f540d55bc10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f540d55bda0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f540d533020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f540d5331b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f540d533340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f540d5334d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f540d533660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f540d5337f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f540d533980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f540d533d10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f540d532020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f540d5321b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f540d532340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f540d5324d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f540d532660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f540d5327f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f540d532980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f540d532b10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f540d532ca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f540d532e30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f540d531020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f540d5311b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f540d531340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f540d5314d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f540d531660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f540d5317f0"/>
        <function-ref name="setData" scoped="" ref="0x7f540d531980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f540d531b10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f540d531ca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f540d531e30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f540d530020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f540d5301b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f540d530340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f540d5308d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f540d530a60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f540d530bf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f540d530d80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f540d52f020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f540d52f1b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f540d52f340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f540d52f4d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f540d52f660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f540d52f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f540d52c3e0" loc="61:../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f540d52c3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d52c760"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d52c8f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d52ca80"/>
        <function-ref name="clr" scoped="" ref="0x7f540d52a7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d52cda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d52b020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d52b1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d52b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d52b4d0"/>
        <function-ref name="get" scoped="" ref="0x7f540d52b660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d52b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d52b980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d52bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d52bda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d52a020"/>
        <function-ref name="set" scoped="" ref="0x7f540d52a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d52a340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d52cc10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d52a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d52a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f540d55ec20" loc="57:../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f540d55ec20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540d55d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f540d52fbb0" loc="60:../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f540d52fbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d52e020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d52e1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d52e340"/>
        <function-ref name="clr" scoped="" ref="0x7f540d52c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d52e660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d52e7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d52e980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d52eb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d52eca0"/>
        <function-ref name="get" scoped="" ref="0x7f540d52ee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d52d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d52d1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d52d340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d52d5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d52d760"/>
        <function-ref name="set" scoped="" ref="0x7f540d52d8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d52da80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d52e4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d52dc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d52dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f540c28d2c0" loc="42:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f540c28d2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f540c28d640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540c28d7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f540c287440" loc="46:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f540c287440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540c2877c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f540c280760" loc="51:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540c280760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f540c280ae0"/>
        <function-ref name="configure" scoped="" ref="0x7f540c280c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f540c287a50" loc="48:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f540c287a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f540c287dd0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f540c286020"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f540c2861b0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f540c286340"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f540c2864d0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f540c286660"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f540c2867f0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f540c286980"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540c286b10"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f540c286ca0"/>
        <function-ref name="getData" scoped="" ref="0x7f540c286e30"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f540c285020"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f540c2851b0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f540c285440"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f540c2855d0"/>
        <function-ref name="getIV" scoped="" ref="0x7f540c285760"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f540c2858f0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f540c285a80"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f540c285c10"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f540c285da0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f540c284020"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f540c2841b0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f540c284340"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f540c2844d0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f540c284660"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f540c2849f0"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f540c284b80"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f540c284d10"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f540c283020"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f540c2831b0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f540c283340"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f540c2834d0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f540c283660"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f540c2837f0"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f540c283980"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f540c283b10"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f540c283ca0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f540c283e30"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f540c282020"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f540c2821b0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f540c282340"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f540c2824d0"/>
        <function-ref name="setData" scoped="" ref="0x7f540c282660"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f540c2827f0"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f540c282980"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f540c282b10"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f540c282ca0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f540c282e30"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f540c281020"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f540c2815b0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f540c281740"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f540c2818d0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f540c281a60"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f540c281bf0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f540c281d80"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f540c280020"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f540c2801b0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f540c280340"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f540c2804d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f540c288c10" loc="45:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f540c288c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540c287020"/>
        <function-ref name="txDone" scoped="" ref="0x7f540c2871b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540c28e640" loc="41:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540c28e640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540c28e9c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540c28eb50"/>
        <function-ref name="request" scoped="" ref="0x7f540c28ece0"/>
        <function-ref name="granted" scoped="" ref="0x7f540c28ee70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540c28d030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f540c28c2b0" loc="44:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f540c28c2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f540c28c630"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f540c28c7c0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f540c28c950"/>
        <function-ref name="enableUart" scoped="" ref="0x7f540c28cae0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f540c28cc70"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f540c28ce00"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f540c28b020"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f540c28b1b0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f540c28b340"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f540c28b4d0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f540c28b660"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f540c28b7f0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f540c28b980"/>
        <function-ref name="getUbr" scoped="" ref="0x7f540c28bc10"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f540c28bda0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f540c28a020"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f540c28a1b0"/>
        <function-ref name="isUart" scoped="" ref="0x7f540c28a340"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f540c28a4d0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f540c28a660"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f540c28a7f0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f540c28a980"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f540c28ab10"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f540c28aca0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540c28ae30"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f540c289220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f540c2893b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f540c289540"/>
        <function-ref name="tx" scoped="" ref="0x7f540c2896d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f540c289860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f540c2899f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f540c289b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f540c289d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f540c288020"/>
        <function-ref name="rx" scoped="" ref="0x7f540c2881b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f540c288340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f540c2884d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f540c288660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f540c2887f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f540c288980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f540c28da60" loc="43:../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540c28da60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540c28dde0"/>
        <function-ref name="userId" scoped="" ref="0x7f540c28c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f540d47c2c0" loc="42:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f540d47c2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f540d47c640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540d47c7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f540d47b8a0" loc="45:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540d47b8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f540d47bc20"/>
        <function-ref name="configure" scoped="" ref="0x7f540d47bdb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f540d47f4d0" loc="39:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f540d47f4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540d47f850"/>
        <function-ref name="txDone" scoped="" ref="0x7f540d47f9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540d47d020" loc="41:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540d47d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d47d3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d47d530"/>
        <function-ref name="request" scoped="" ref="0x7f540d47d6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f540d47d850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d47d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f540d47e3f0" loc="40:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f540d47e3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540d47e770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f540d47cad0" loc="43:../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540d47cad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540d47ce50"/>
        <function-ref name="userId" scoped="" ref="0x7f540d47b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f540d466bf0" loc="43:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540d466bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540d465020"/>
        <function-ref name="userId" scoped="" ref="0x7f540d4651b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f540d478d60" loc="39:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f540d478d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540d477180"/>
        <function-ref name="txDone" scoped="" ref="0x7f540d477310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f540d4665e0" loc="42:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f540d4665e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540d466960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f540d477710" loc="40:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f540d477710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540d477ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f540d477d80" loc="41:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f540d477d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540d466180"/>
        <function-ref name="txDone" scoped="" ref="0x7f540d466310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f540d3e5a60" loc="59:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f540d3e5a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f540d3e5e00"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540d3e4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f540d3e3790" loc="64:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540d3e3790"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f540d3e3b30"/>
        <function-ref name="configure" scoped="" ref="0x7f540d3e3cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f540d3e4270" loc="60:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f540d3e4270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d3e45f0"/>
        <function-ref name="requested" scoped="" ref="0x7f540d3e4780"/>
        <function-ref name="granted" scoped="" ref="0x7f540d3e4910"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d3e4aa0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540d3e4c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540d3e6ca0" loc="58:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540d3e6ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d3e50a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d3e5230"/>
        <function-ref name="request" scoped="" ref="0x7f540d3e53c0"/>
        <function-ref name="granted" scoped="" ref="0x7f540d3e5550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d3e56e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f540d3e2020" loc="65:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f540d3e2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540d3e23a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f540d3e4e80" loc="61:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540d3e4e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540d3e3220"/>
        <function-ref name="userId" scoped="" ref="0x7f540d3e33b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540c216020" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540c216020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540c2163a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f540c216630" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f540c216630"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f540c2169b0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f540c216b40"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f540c216cd0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f540c216e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f540c2126c0" loc="99:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f540c2126c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f540c212a60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540c212bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f540c2109d0" loc="105:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540c2109d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f540c210d70"/>
        <function-ref name="configure" scoped="" ref="0x7f540c20f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f540c20f2b0" loc="106:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f540c20f2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f540c20f630"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f540c20f7c0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f540c20f950"/>
        <function-ref name="dequeue" scoped="" ref="0x7f540c20fae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f540c212e40" loc="100:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f540c212e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540c2111e0"/>
        <function-ref name="requested" scoped="" ref="0x7f540c211370"/>
        <function-ref name="granted" scoped="" ref="0x7f540c211500"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540c211690"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540c211820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540c20fd30" loc="107:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540c20fd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540c20d0e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540c20d270"/>
        <function-ref name="led1On" scoped="" ref="0x7f540c20d400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540c20d590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540c20d720"/>
        <function-ref name="get" scoped="" ref="0x7f540c20d8b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540c20da40"/>
        <function-ref name="led0On" scoped="" ref="0x7f540c20c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540c20dd60"/>
        <function-ref name="led2On" scoped="" ref="0x7f540c20dbd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540c20c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540c213850" loc="98:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540c213850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540c213bf0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540c213d80"/>
        <function-ref name="request" scoped="" ref="0x7f540c212020"/>
        <function-ref name="granted" scoped="" ref="0x7f540c2121b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540c212340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f540c2102d0" loc="104:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f540c2102d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540c210650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f540c211a70" loc="101:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540c211a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540c211df0"/>
        <function-ref name="userId" scoped="" ref="0x7f540c210020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f540c20c480" loc="155:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f540c20c480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540c20c800"/>
        <function-ref name="runTask" scoped="" ref="0x7f540c20c990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f540d3d9020" loc="4:../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f540d3d9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f540d3d93a0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f540d3d9530"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f540d3d96c0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f540d3d9850"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f540d3d99e0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f540d3d9b70"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f540d3d9d00"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f540d3d8020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540d3d81b0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f540d3d8340"/>
        <function-ref name="getData" scoped="" ref="0x7f540d3d84d0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f540d3d8660"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f540d3d87f0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f540d3d8a80"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f540d3d8c10"/>
        <function-ref name="getIV" scoped="" ref="0x7f540d3d8da0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f540d3d7020"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f540d3d71b0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f540d3d7340"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f540d3d74d0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f540d3d7660"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f540d3d77f0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f540d3d7980"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f540d3d7b10"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f540d3d7ca0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f540d3d6220"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f540d3d63b0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f540d3d6540"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f540d3d66d0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f540d3d6860"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f540d3d69f0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f540d3d6b80"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f540d3d6d10"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f540d3d5020"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f540d3d51b0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f540d3d5340"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f540d3d54d0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f540d3d5660"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f540d3d57f0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f540d3d5980"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f540d3d5b10"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f540d3d5ca0"/>
        <function-ref name="setData" scoped="" ref="0x7f540d3d5e30"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f540d3d4020"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f540d3d41b0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f540d3d4340"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f540d3d44d0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f540d3d4660"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f540d3d47f0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f540d3d4d80"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f540d3d3020"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f540d3d31b0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f540d3d3340"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f540d3d34d0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f540d3d3660"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f540d3d37f0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f540d3d3980"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f540d3d3b10"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f540d3d3ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7f540d3c8bb0" loc="50:../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7f540d3c8bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f540d3c7020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f540d3c71b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f540d3c7340"/>
        <function-ref name="enableUart" scoped="" ref="0x7f540d3c74d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f540d3c7660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f540d3c77f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f540d3c7980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f540d3c7b10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f540d3c7ca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f540d3c7e30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f540d3c6020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f540d3c61b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f540d3c6340"/>
        <function-ref name="getUbr" scoped="" ref="0x7f540d3c65d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f540d3c6760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f540d3c68f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f540d3c6a80"/>
        <function-ref name="isUart" scoped="" ref="0x7f540d3c6c10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f540d3c6da0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f540d3c5020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f540d3c51b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f540d3c5340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f540d3c54d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f540d3c5660"/>
        <function-ref name="getMode" scoped="" ref="0x7f540d3c57f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f540d3c5b80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f540d3c5d10"/>
        <function-ref name="setUbr" scoped="" ref="0x7f540d3c4020"/>
        <function-ref name="tx" scoped="" ref="0x7f540d3c41b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f540d3c4340"/>
        <function-ref name="disableUart" scoped="" ref="0x7f540d3c44d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f540d3c4660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f540d3c47f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f540d3c4980"/>
        <function-ref name="rx" scoped="" ref="0x7f540d3c4b10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f540d3c4ca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f540d3c4e30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f540d3c3020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f540d3c31b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f540d3c3340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f540d3c1e40" loc="52:../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f540d3c1e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d3c01e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d3c0370"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d3c0500"/>
        <function-ref name="clr" scoped="" ref="0x7f540d3be1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d3c0820"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d3c09b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d3c0b40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d3c0cd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d3c0e60"/>
        <function-ref name="get" scoped="" ref="0x7f540d3bf020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d3bf1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d3bf340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d3bf4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d3bf760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d3bf8f0"/>
        <function-ref name="set" scoped="" ref="0x7f540d3bfa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d3bfc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d3c0690"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d3bfda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d3be020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7f540d3d1d30" loc="48:../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f540d3d1d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f540d3ce0e0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f540d3ce270"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f540d3ce400"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f540d3ce590"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f540d3ce720"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f540d3ce8b0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f540d3cea40"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f540d3cebd0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540d3ced60"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f540d3cd020"/>
        <function-ref name="getData" scoped="" ref="0x7f540d3cd1b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f540d3cd340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f540d3cd4d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f540d3cd760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f540d3cd8f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f540d3cda80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f540d3cdc10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f540d3cdda0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f540d3cc020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f540d3cc1b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f540d3cc340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f540d3cc4d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f540d3cc660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f540d3cc7f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f540d3cc980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f540d3ccd10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f540d3cb020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f540d3cb1b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f540d3cb340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f540d3cb4d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f540d3cb660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f540d3cb7f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f540d3cb980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f540d3cbb10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f540d3cbca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f540d3cbe30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f540d3ca020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f540d3ca1b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f540d3ca340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f540d3ca4d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f540d3ca660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f540d3ca7f0"/>
        <function-ref name="setData" scoped="" ref="0x7f540d3ca980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f540d3cab10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f540d3caca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f540d3cae30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f540d3c9020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f540d3c91b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f540d3c9340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f540d3c98d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f540d3c9a60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f540d3c9bf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f540d3c9d80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f540d3c8020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f540d3c81b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f540d3c8340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f540d3c84d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f540d3c8660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f540d3c87f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f540d3c3700" loc="51:../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f540d3c3700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d3c3a80"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d3c3c10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d3c3da0"/>
        <function-ref name="clr" scoped="" ref="0x7f540d3c1a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d3c21b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d3c2340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d3c24d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d3c2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d3c27f0"/>
        <function-ref name="get" scoped="" ref="0x7f540d3c2980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d3c2b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d3c2ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d3c2e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d3c1120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d3c12b0"/>
        <function-ref name="set" scoped="" ref="0x7f540d3c1440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d3c15d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d3c2020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d3c1760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d3c18f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f540d2adc60" loc="69:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f540d2adc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2ab210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2ab3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f540d2b7da0" loc="47:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f540d2b7da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2b6180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f540d2b0b50" loc="63:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f540d2b0b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2af020"/>
        <function-ref name="write" scoped="" ref="0x7f540d2af1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f540d2aa670" loc="72:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f540d2aa670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2aa9f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2aab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f540d2a3e50" loc="86:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f540d2a3e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a2210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a23a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f540d2aae50" loc="73:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f540d2aae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a9210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a93a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f540d2962f0" loc="108:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f540d2962f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d296670"/>
        <function-ref name="write" scoped="" ref="0x7f540d296800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f540d2992f0" loc="104:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f540d2992f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d299670"/>
        <function-ref name="write" scoped="" ref="0x7f540d299800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f540d2b5120" loc="50:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f540d2b5120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2b54a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f540d29e670" loc="93:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f540d29e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d29e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d29eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f540d29a2f0" loc="102:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f540d29a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d29a670"/>
        <function-ref name="write" scoped="" ref="0x7f540d29a800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f540d2afc60" loc="65:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f540d2afc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2ae020"/>
        <function-ref name="write" scoped="" ref="0x7f540d2ae1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f540d2aec60" loc="67:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f540d2aec60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2ad020"/>
        <function-ref name="write" scoped="" ref="0x7f540d2ad1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f540d2a4670" loc="83:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f540d2a4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a49f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a4b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f540d2a7e50" loc="79:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f540d2a7e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a5210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a53a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f540d2a9670" loc="74:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f540d2a9670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a99f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a9b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f540d2b8760" loc="42:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d2b8760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f540d2b8ae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f540d2b8c70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f540d2b8e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f540d2b4aa0" loc="54:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f540d2b4aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2b4e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f540d2b2120" loc="55:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f540d2b2120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2b25a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f540d29da70" loc="95:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f540d29da70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d29ddf0"/>
        <function-ref name="write" scoped="" ref="0x7f540d29c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f540d2b2870" loc="56:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f540d2b2870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2b2bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f540d29aad0" loc="103:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f540d29aad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d29ae50"/>
        <function-ref name="write" scoped="" ref="0x7f540d299020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f540d2b5dc0" loc="52:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f540d2b5dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2b4180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f540d2a0e50" loc="92:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f540d2a0e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d29e210"/>
        <function-ref name="write" scoped="" ref="0x7f540d29e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f540d2ae480" loc="66:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f540d2ae480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2ae800"/>
        <function-ref name="write" scoped="" ref="0x7f540d2ae990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f540d2af480" loc="64:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540d2af480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2af800"/>
        <function-ref name="write" scoped="" ref="0x7f540d2af990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f540d2b7750" loc="46:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f540d2b7750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2b7ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f540d2a1e50" loc="90:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f540d2a1e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a0210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a03a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f540d2a2670" loc="87:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f540d2a2670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a29f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a2b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f540d2a0670" loc="91:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f540d2a0670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a09f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a0b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f540d297ad0" loc="107:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f540d297ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d297e50"/>
        <function-ref name="write" scoped="" ref="0x7f540d296020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f540d299ad0" loc="105:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f540d299ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d299e50"/>
        <function-ref name="write" scoped="" ref="0x7f540d297020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f540d2a5670" loc="80:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f540d2a5670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a59f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a5b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f540d2a2e50" loc="88:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f540d2a2e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a1210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f540d29bad0" loc="101:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f540d29bad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d29be50"/>
        <function-ref name="write" scoped="" ref="0x7f540d29a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f540d2a8670" loc="76:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f540d2a8670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a89f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a8b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f540d296ad0" loc="111:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f540d296ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f540d296e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f540d295020"/>
        <function-ref name="write" scoped="" ref="0x7f540d2951b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f540d295340"/>
        <function-ref name="readDone" scoped="" ref="0x7f540d2954d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f540d2b7100" loc="45:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f540d2b7100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2b7480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f540d2b0370" loc="62:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f540d2b0370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2b06f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2b0880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f540d2ad480" loc="68:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f540d2ad480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2ad800"/>
        <function-ref name="write" scoped="" ref="0x7f540d2ad990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f540d2a4e50" loc="84:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f540d2a4e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a3210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a33a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f540d2a9e50" loc="75:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f540d2a9e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a8210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a83a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f540d2a3670" loc="85:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f540d2a3670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a39f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a3b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f540d2ab670" loc="70:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f540d2ab670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2ab9f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2abb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f540d2b6450" loc="48:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f540d2b6450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2b67d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f540d2abe50" loc="71:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f540d2abe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2aa210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2aa3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540d2baa80" loc="41:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540d2baa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d2bae00"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d2b8020"/>
        <function-ref name="request" scoped="" ref="0x7f540d2b81b0"/>
        <function-ref name="granted" scoped="" ref="0x7f540d2b8340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d2b84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f540d2b1020" loc="57:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f540d2b1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2b13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f540d2b1cc0" loc="59:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f540d2b1cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2b00a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f540d29b2f0" loc="100:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f540d29b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d29b670"/>
        <function-ref name="write" scoped="" ref="0x7f540d29b800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f540d29cad0" loc="99:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f540d29cad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d29ce50"/>
        <function-ref name="write" scoped="" ref="0x7f540d29b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f540d2b4450" loc="53:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f540d2b4450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2b47d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f540d29c2f0" loc="96:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f540d29c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d29c670"/>
        <function-ref name="write" scoped="" ref="0x7f540d29c800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f540d2972f0" loc="106:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f540d2972f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d297670"/>
        <function-ref name="write" scoped="" ref="0x7f540d297800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f540d2a5e50" loc="81:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f540d2a5e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a4210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a43a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f540d2a1670" loc="89:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f540d2a1670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a19f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a1b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f540d2b6aa0" loc="49:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f540d2b6aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2b6e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f540d2b5770" loc="51:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f540d2b5770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2b5af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f540d2a8e50" loc="77:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f540d2a8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a7210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a73a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f540d2b1670" loc="58:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f540d2b1670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2b19f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f540d2a7670" loc="78:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f540d2a7670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2a79f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d2a7b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f540d29ee50" loc="94:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f540d29ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d29d610"/>
        <function-ref name="write" scoped="" ref="0x7f540d29d7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f540d2957a0" loc="112:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f540d2957a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f540d295b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f540d295cb0"/>
        <function-ref name="write" scoped="" ref="0x7f540d295e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f540d294020"/>
        <function-ref name="readDone" scoped="" ref="0x7f540d2941b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f540d280c60" loc="69:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f540d280c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d27f210"/>
        <function-ref name="write" scoped="" ref="0x7f540d27f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f540d28bda0" loc="47:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f540d28bda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d28a180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f540d284b50" loc="63:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f540d284b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d282020"/>
        <function-ref name="write" scoped="" ref="0x7f540d2821b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f540d27e670" loc="72:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f540d27e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d27e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d27eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f540d277e50" loc="86:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f540d277e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d275210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2753a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f540d27ee50" loc="73:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f540d27ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d27c210"/>
        <function-ref name="write" scoped="" ref="0x7f540d27c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f540d26a2f0" loc="108:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f540d26a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d26a670"/>
        <function-ref name="write" scoped="" ref="0x7f540d26a800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f540d26c2f0" loc="104:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f540d26c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d26c670"/>
        <function-ref name="write" scoped="" ref="0x7f540d26c800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f540d288120" loc="50:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f540d288120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2884a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f540d272670" loc="93:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f540d272670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2729f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d272b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f540d26d2f0" loc="102:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f540d26d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d26d670"/>
        <function-ref name="write" scoped="" ref="0x7f540d26d800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f540d282c60" loc="65:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f540d282c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d281020"/>
        <function-ref name="write" scoped="" ref="0x7f540d2811b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f540d281c60" loc="67:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f540d281c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d280020"/>
        <function-ref name="write" scoped="" ref="0x7f540d2801b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f540d278670" loc="83:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f540d278670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2789f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d278b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f540d27ae50" loc="79:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f540d27ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d279210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2793a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f540d27c670" loc="74:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f540d27c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d27c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d27cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f540d28c760" loc="42:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d28c760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f540d28cae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f540d28cc70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f540d28ce00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f540d287aa0" loc="54:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f540d287aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d287e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f540d286120" loc="55:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f540d286120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2865a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f540d271a70" loc="95:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f540d271a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d271df0"/>
        <function-ref name="write" scoped="" ref="0x7f540d270020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f540d286870" loc="56:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f540d286870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d286bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f540d26dad0" loc="103:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f540d26dad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d26de50"/>
        <function-ref name="write" scoped="" ref="0x7f540d26c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f540d288dc0" loc="52:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f540d288dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d287180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f540d273e50" loc="92:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f540d273e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d272210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2723a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f540d281480" loc="66:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f540d281480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d281800"/>
        <function-ref name="write" scoped="" ref="0x7f540d281990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f540d282480" loc="64:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540d282480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d282800"/>
        <function-ref name="write" scoped="" ref="0x7f540d282990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f540d28b750" loc="46:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f540d28b750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d28bad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f540d274e50" loc="90:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f540d274e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d273210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2733a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f540d275670" loc="87:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f540d275670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2759f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d275b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f540d273670" loc="91:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f540d273670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2739f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d273b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f540d26bad0" loc="107:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f540d26bad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d26be50"/>
        <function-ref name="write" scoped="" ref="0x7f540d26a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f540d26cad0" loc="105:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f540d26cad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d26ce50"/>
        <function-ref name="write" scoped="" ref="0x7f540d26b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f540d279670" loc="80:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f540d279670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2799f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d279b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f540d275e50" loc="88:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f540d275e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d274210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2743a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f540d26ead0" loc="101:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f540d26ead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d26ee50"/>
        <function-ref name="write" scoped="" ref="0x7f540d26d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f540d27b670" loc="76:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f540d27b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d27b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d27bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f540d26aad0" loc="111:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f540d26aad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f540d26ae50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f540d269020"/>
        <function-ref name="write" scoped="" ref="0x7f540d2691b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f540d269340"/>
        <function-ref name="readDone" scoped="" ref="0x7f540d2694d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f540d28b100" loc="45:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f540d28b100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d28b480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f540d284370" loc="62:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f540d284370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2846f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d284880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f540d280480" loc="68:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f540d280480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d280800"/>
        <function-ref name="write" scoped="" ref="0x7f540d280990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f540d278e50" loc="84:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f540d278e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d277210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2773a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f540d27ce50" loc="75:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f540d27ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d27b210"/>
        <function-ref name="write" scoped="" ref="0x7f540d27b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f540d277670" loc="85:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f540d277670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2779f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d277b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f540d27f670" loc="70:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f540d27f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d27f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d27fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f540d28a450" loc="48:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f540d28a450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d28a7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f540d27fe50" loc="71:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f540d27fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d27e210"/>
        <function-ref name="write" scoped="" ref="0x7f540d27e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540d28d9e0" loc="41:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540d28d9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d28dd60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d28c020"/>
        <function-ref name="request" scoped="" ref="0x7f540d28c1b0"/>
        <function-ref name="granted" scoped="" ref="0x7f540d28c340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d28c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f540d285020" loc="57:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f540d285020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2853a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f540d285cc0" loc="59:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f540d285cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2840a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f540d26e2f0" loc="100:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f540d26e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d26e670"/>
        <function-ref name="write" scoped="" ref="0x7f540d26e800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f540d270ad0" loc="99:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f540d270ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d270e50"/>
        <function-ref name="write" scoped="" ref="0x7f540d26e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f540d287450" loc="53:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f540d287450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2877d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f540d2702f0" loc="96:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f540d2702f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d270670"/>
        <function-ref name="write" scoped="" ref="0x7f540d270800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f540d26b2f0" loc="106:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f540d26b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d26b670"/>
        <function-ref name="write" scoped="" ref="0x7f540d26b800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f540d279e50" loc="81:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f540d279e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d278210"/>
        <function-ref name="write" scoped="" ref="0x7f540d2783a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f540d274670" loc="89:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f540d274670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2749f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d274b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f540d28aaa0" loc="49:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f540d28aaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d28ae20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f540d288770" loc="51:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f540d288770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d288af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f540d27be50" loc="77:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f540d27be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d27a210"/>
        <function-ref name="write" scoped="" ref="0x7f540d27a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f540d285670" loc="58:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f540d285670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d2859f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f540d27a670" loc="78:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f540d27a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d27a9f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d27ab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f540d272e50" loc="94:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f540d272e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d271610"/>
        <function-ref name="write" scoped="" ref="0x7f540d2717a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f540d2697a0" loc="112:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f540d2697a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f540d269b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f540d269cb0"/>
        <function-ref name="write" scoped="" ref="0x7f540d269e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f540d268020"/>
        <function-ref name="readDone" scoped="" ref="0x7f540d2681b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x7f540d260b20" loc="54:../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f540d260b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f540d25d020"/>
        <function-ref name="changed" scoped="" ref="0x7f540d25d1b0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f540d25d340"/>
        <function-ref name="setAddress" scoped="" ref="0x7f540d25d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7f540d25fd20" loc="13:../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <component-ref qname="LocalIeeeEui64C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f540d25fd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f540d2490e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7f540d245310" loc="5:../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f540d245310"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f540d245690"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReadId48" ref="0x7f540d242880" loc="8:../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f540d242880"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d242c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7f540d237020" loc="8:../../tos/chips/ds2411/Ds2411C.nc">
      <component-ref qname="Ds2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f540d237020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2373a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="OneWire" ref="0x7f540d22dbd0" loc="14:../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f540d22dbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d231020"/>
        <function-ref name="write" scoped="" ref="0x7f540d2311b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerControl" ref="0x7f540d231530" loc="15:../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerControl" scoped="" ref="0x7f540d231530"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f540d2318b0"/>
        <function-ref name="stop" scoped="" ref="0x7f540d231a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7f540d232140" loc="11:../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f540d232140"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2324c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7f540d236c50" loc="8:../../tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f540d236c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d21d020"/>
        <function-ref name="write" scoped="" ref="0x7f540d21d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7f540d21d540" loc="11:../../tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7f540d21d540"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d21d8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d21da50"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d21dbe0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d21dd70"/>
        <function-ref name="get" scoped="" ref="0x7f540d21c020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d21c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540d21c340"/>
        <function-ref name="clr" scoped="" ref="0x7f540d21c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7f540d214910" loc="15:../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f540d214910"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff7d0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f540dcffb40"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f540d216780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7f540d219150" loc="11:../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f540d219150"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d2194d0"/>
        <function-ref name="write" scoped="" ref="0x7f540d219660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7f540d2199f0" loc="14:../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7f540d2199f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d219d70"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d218020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d2181b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d218340"/>
        <function-ref name="get" scoped="" ref="0x7f540d2184d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d218660"/>
        <function-ref name="set" scoped="" ref="0x7f540d2187f0"/>
        <function-ref name="clr" scoped="" ref="0x7f540d218980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f540d21bc90" loc="41:../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f540d21bc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff7d0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f540dcffb40"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f540d1f3ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f540d1f1a90" loc="54:../../tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f540d1f1a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff7d0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f540dcffb40"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f540d1f08d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f540d1e1020" loc="55:../../tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f540d1e1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff7d0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f540dcffb40"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540d1e1e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540d1df800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540d1df340"/>
        <function-ref name="overflow" scoped="" ref="0x7f540d1dfcc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430CounterMicro" ref="0x7f540d1db530" loc="46:../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <component-ref qname="Msp430CounterMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f540d1db530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff7d0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f540dcffb40"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540d1da3d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540d1dad50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540d1da890"/>
        <function-ref name="overflow" scoped="" ref="0x7f540d1d9260"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f540d1d4020" loc="45:../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f540d1d4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d1d43a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540d1d4530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540d1d46c0"/>
        <function-ref name="get" scoped="" ref="0x7f540d1d4850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540d1d49e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540d1d4b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f540d1d4d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540d1d3020"/>
        <function-ref name="overflow" scoped="" ref="0x7f540d1d31b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f540d1d3340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540d1d34d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f540d1d7e50" loc="44:../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f540d1d7e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff7d0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f540dcffb40"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540d1d6ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540d1d5670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540d1d51b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f540d1d5b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Gpio" ref="0x7f540d21e590" loc="3:../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <component-ref qname="HplDs2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Gpio" scoped="" ref="0x7f540d21e590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d21e910"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d21eaa0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d21ec30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d21edc0"/>
        <function-ref name="get" scoped="" ref="0x7f540d1cf020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d1cf1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540d1cf340"/>
        <function-ref name="clr" scoped="" ref="0x7f540d1cf4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f540d1ccc50" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f540d1ccc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d1cb020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d1cb1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540d1cb340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540d1c9020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d1cb660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d1cb7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540d1cb980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540d1cbb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d1cbca0"/>
        <function-ref name="get" scoped="" ref="0x7f540d1cbe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540d1ca020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540d1ca1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540d1ca340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540d1ca5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540d1ca760"/>
        <function-ref name="set" scoped="" ref="0x7f540d1ca8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540d1caa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540d1cac10"/>
        <function-ref name="clr" scoped="" ref="0x7f540d1cb4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540d1cada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f540d1cd9e0" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f540d1cd9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d1cdd60"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d1cc020"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d1cc1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d1cc340"/>
        <function-ref name="get" scoped="" ref="0x7f540d1cc4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d1cc660"/>
        <function-ref name="set" scoped="" ref="0x7f540d1cc7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f540d1cc980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f540d1c41b0" loc="14:../../tos/chips/ds2411/Ds2411PowerControlC.nc">
      <component-ref qname="Ds2411PowerControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f540d1c41b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f540d1c4530"/>
        <function-ref name="stop" scoped="" ref="0x7f540d1c46c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f540d1b3cb0" loc="46:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f540d1b3cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f540d1b20a0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f540d1b2230"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f540d1b23c0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f540d1b2550"/>
        <function-ref name="setCca" scoped="" ref="0x7f540d1b26e0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f540d1b2870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7f540d1af990" loc="47:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7f540d1af990"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f540d1afd10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Transmit" ref="0x7f540d1b3020" loc="45:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7f540d1b3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540d1b33a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540d1b3530"/>
        <function-ref name="modify" scoped="" ref="0x7f540d1b36c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540d1b3850"/>
        <function-ref name="resend" scoped="" ref="0x7f540d1b39e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f540d1b66c0" loc="44:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f540d1b66c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f540d1b6a40"/>
        <function-ref name="stop" scoped="" ref="0x7f540d1b6bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7f540d1b1150" loc="48:../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7f540d1b1150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f540d1b14d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f540d1a5970" loc="51:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f540d1a5970"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f540d1a5cf0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f540d1a5e80"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f540d1a4030"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f540d1a41c0"/>
        <function-ref name="setCca" scoped="" ref="0x7f540d1a4350"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f540d1a44e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f540d19d950" loc="58:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f540d19d950"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f540d19b020"/>
        <function-ref name="clear" scoped="" ref="0x7f540d19b750"/>
        <function-ref name="isValid" scoped="" ref="0x7f540d19c780"/>
        <function-ref name="set" scoped="" ref="0x7f540d19be80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7f540d186020" loc="78:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f540d186020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d1863a0"/>
        <function-ref name="write" scoped="" ref="0x7f540d186530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7f540d186890" loc="79:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f540d186890"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d186c10"/>
        <function-ref name="write" scoped="" ref="0x7f540d186da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7f540d1a4900" loc="52:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7f540d1a4900"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f540d1a4c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXONCCA" ref="0x7f540d189530" loc="72:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f540d189530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d1898b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CaptureSFD" ref="0x7f540d198880" loc="60:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7f540d198880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f540d198c00"/>
        <function-ref name="disable" scoped="" ref="0x7f540d198d90"/>
        <function-ref name="captured" scoped="" ref="0x7f540d197020"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f540d1971b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BackoffTimer" ref="0x7f540d1a3ae0" loc="55:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BackoffTimer" scoped="" ref="0x7f540d1a3ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540d19f390"/>
        <function-ref name="fired" scoped="" ref="0x7f540d1a1360"/>
        <function-ref name="startAt" scoped="" ref="0x7f540d1a1ce0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540d1a1820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f540d19f850"/>
        <function-ref name="start" scoped="" ref="0x7f540d1a2970"/>
        <function-ref name="stop" scoped="" ref="0x7f540d1a2e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f540d19fd00" loc="56:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f540d19fd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f540d19e0a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f540d19e230"/>
        <function-ref name="getRssi" scoped="" ref="0x7f540d19e3c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f540d19e550"/>
        <function-ref name="getPower" scoped="" ref="0x7f540d19e6e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f540d19e870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO_RAM" ref="0x7f540d18b550" loc="68:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f540d18b550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d18b8d0"/>
        <function-ref name="write" scoped="" ref="0x7f540d18ba60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7f540d18be00" loc="69:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f540d18be00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d18a1c0"/>
        <function-ref name="write" scoped="" ref="0x7f540d18a350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Receive" ref="0x7f540d17ed40" loc="83:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f540d17ed40"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540d1830e0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f540d183270"/>
        <function-ref name="sfd" scoped="" ref="0x7f540d183400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f540d1a6bc0" loc="50:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f540d1a6bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540d1a5020"/>
        <function-ref name="cancel" scoped="" ref="0x7f540d1a51b0"/>
        <function-ref name="modify" scoped="" ref="0x7f540d1a5340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540d1a54d0"/>
        <function-ref name="resend" scoped="" ref="0x7f540d1a5660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ChipSpiResource" ref="0x7f540d18dd10" loc="66:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d18dd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f540d18c0e0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f540d18c270"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f540d18c400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHTX" ref="0x7f540d189c60" loc="73:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f540d189c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d188020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f540d191820" loc="62:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f540d191820"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d191ba0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d191d30"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d18f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d18f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f540d18f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d18f4d0"/>
        <function-ref name="set" scoped="" ref="0x7f540d18f660"/>
        <function-ref name="clr" scoped="" ref="0x7f540d18f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540d1a8c60" loc="48:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540d1a8c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540d1a6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f540d19ebb0" loc="57:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540d19ebb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f540d19d020"/>
        <function-ref name="getHeader" scoped="" ref="0x7f540d19d1b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f540d19d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7f540d192be0" loc="59:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f540d192be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540d198020"/>
        <function-ref name="isSet" scoped="" ref="0x7f540d1981b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540d198340"/>
        <function-ref name="set" scoped="" ref="0x7f540d1984d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7f540d1883e0" loc="74:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540d1883e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d188960"/>
        <function-ref name="write" scoped="" ref="0x7f540d188af0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f540d18d020" loc="65:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f540d18d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d18d3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d18d530"/>
        <function-ref name="request" scoped="" ref="0x7f540d18d6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f540d18d850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d18d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CCA" ref="0x7f540d197500" loc="61:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7f540d197500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d197980"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d197b10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d197ca0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d197e30"/>
        <function-ref name="get" scoped="" ref="0x7f540d191020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d1911b0"/>
        <function-ref name="set" scoped="" ref="0x7f540d191340"/>
        <function-ref name="clr" scoped="" ref="0x7f540d1914d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7f540d185130" loc="80:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f540d185130"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d1854b0"/>
        <function-ref name="write" scoped="" ref="0x7f540d185640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXNONCE" ref="0x7f540d1859c0" loc="81:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f540d1859c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d185d40"/>
        <function-ref name="write" scoped="" ref="0x7f540d184020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7f540d18a6d0" loc="70:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f540d18a6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d18aa50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFD" ref="0x7f540d18fb40" loc="63:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7f540d18fb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d18e020"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d18e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d18e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d18e4d0"/>
        <function-ref name="get" scoped="" ref="0x7f540d18e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d18e7f0"/>
        <function-ref name="set" scoped="" ref="0x7f540d18e980"/>
        <function-ref name="clr" scoped="" ref="0x7f540d18eb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540d1836c0" loc="84:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540d1836c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540d183a40"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540d183bd0"/>
        <function-ref name="led1On" scoped="" ref="0x7f540d183d60"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540d181020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540d1811b0"/>
        <function-ref name="get" scoped="" ref="0x7f540d181340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540d1814d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540d181b10"/>
        <function-ref name="set" scoped="" ref="0x7f540d181660"/>
        <function-ref name="led0On" scoped="" ref="0x7f540d1817f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f540d181980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7f540d1875e0" loc="77:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f540d1875e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d187960"/>
        <function-ref name="write" scoped="" ref="0x7f540d187af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f540d1a6320" loc="49:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f540d1a6320"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f540d1a66a0"/>
        <function-ref name="stop" scoped="" ref="0x7f540d1a6830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO" ref="0x7f540d18c780" loc="67:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f540d18c780"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f540d18cb00"/>
        <function-ref name="writeDone" scoped="" ref="0x7f540d18cc90"/>
        <function-ref name="write" scoped="" ref="0x7f540d18ce20"/>
        <function-ref name="beginRead" scoped="" ref="0x7f540d18b020"/>
        <function-ref name="readDone" scoped="" ref="0x7f540d18b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXON" ref="0x7f540d18ade0" loc="71:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f540d18ade0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d189180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXENC" ref="0x7f540d188e80" loc="76:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f540d188e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d187220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7f540d1a30f0" loc="53:../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7f540d1a30f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f540d1a3470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f540d0e4c60" loc="69:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f540d0e4c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0e3210"/>
        <function-ref name="write" scoped="" ref="0x7f540d0e33a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f540d0ee020" loc="47:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f540d0ee020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0ee3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f540d0e8c70" loc="63:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f540d0e8c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0e6020"/>
        <function-ref name="write" scoped="" ref="0x7f540d0e61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f540d0e2670" loc="72:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f540d0e2670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0e29f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0e2b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f540d0dbe50" loc="86:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f540d0dbe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d9210"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d93a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f540d0e2e50" loc="73:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f540d0e2e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0e0210"/>
        <function-ref name="write" scoped="" ref="0x7f540d0e03a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f540d0ce2f0" loc="108:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f540d0ce2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0ce670"/>
        <function-ref name="write" scoped="" ref="0x7f540d0ce800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f540d0d02f0" loc="104:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f540d0d02f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d0670"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d0800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f540d0ec370" loc="50:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f540d0ec370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0ec6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f540d0d6670" loc="93:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f540d0d6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d69f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d6b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f540d0d12f0" loc="102:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f540d0d12f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d1670"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d1800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f540d0e6c60" loc="65:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f540d0e6c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0e5020"/>
        <function-ref name="write" scoped="" ref="0x7f540d0e51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f540d0e5c60" loc="67:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f540d0e5c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0e4020"/>
        <function-ref name="write" scoped="" ref="0x7f540d0e41b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f540d0dc670" loc="83:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f540d0dc670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0dc9f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0dcb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f540d0dee50" loc="79:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f540d0dee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0dd210"/>
        <function-ref name="write" scoped="" ref="0x7f540d0dd3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f540d0e0670" loc="74:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f540d0e0670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0e09f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0e0b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f540d0f08f0" loc="42:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540d0f08f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f540d0f0c70"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f540d0f0e00"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f540d0ef020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f540d0ebd00" loc="54:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f540d0ebd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0ea0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f540d0ea370" loc="55:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f540d0ea370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0ea7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f540d0d5a70" loc="95:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f540d0d5a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d5df0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f540d0eaac0" loc="56:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f540d0eaac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0eae40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f540d0d1ad0" loc="103:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f540d0d1ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d1e50"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f540d0eb060" loc="52:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f540d0eb060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0eb3e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f540d0d7e50" loc="92:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f540d0d7e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d6210"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d63a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f540d0e5480" loc="66:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f540d0e5480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0e5800"/>
        <function-ref name="write" scoped="" ref="0x7f540d0e5990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f540d0e6480" loc="64:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540d0e6480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0e6800"/>
        <function-ref name="write" scoped="" ref="0x7f540d0e6990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f540d0ef940" loc="46:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f540d0ef940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0efcc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f540d0d8e50" loc="90:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f540d0d8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d7210"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d73a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f540d0d9670" loc="87:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f540d0d9670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d99f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d9b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f540d0d7670" loc="91:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f540d0d7670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d79f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d7b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f540d0cfad0" loc="107:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f540d0cfad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0cfe50"/>
        <function-ref name="write" scoped="" ref="0x7f540d0ce020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f540d0d0ad0" loc="105:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f540d0d0ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d0e50"/>
        <function-ref name="write" scoped="" ref="0x7f540d0cf020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f540d0dd670" loc="80:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f540d0dd670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0dd9f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0ddb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f540d0d9e50" loc="88:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f540d0d9e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d8210"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d83a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f540d0d2ad0" loc="101:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f540d0d2ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d2e50"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f540d0df670" loc="76:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f540d0df670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0df9f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0dfb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f540d0cead0" loc="111:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f540d0cead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f540d0cee50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f540d0cd020"/>
        <function-ref name="write" scoped="" ref="0x7f540d0cd1b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f540d0cd340"/>
        <function-ref name="readDone" scoped="" ref="0x7f540d0cd4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f540d0ef2f0" loc="45:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f540d0ef2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0ef670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f540d0e8490" loc="62:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f540d0e8490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0e8810"/>
        <function-ref name="write" scoped="" ref="0x7f540d0e89a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f540d0e4480" loc="68:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f540d0e4480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0e4800"/>
        <function-ref name="write" scoped="" ref="0x7f540d0e4990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f540d0dce50" loc="84:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f540d0dce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0db210"/>
        <function-ref name="write" scoped="" ref="0x7f540d0db3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f540d0e0e50" loc="75:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f540d0e0e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0df210"/>
        <function-ref name="write" scoped="" ref="0x7f540d0df3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f540d0db670" loc="85:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f540d0db670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0db9f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0dbb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f540d0e3670" loc="70:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f540d0e3670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0e39f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0e3b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f540d0ee670" loc="48:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f540d0ee670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0ee9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f540d0e3e50" loc="71:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f540d0e3e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0e2210"/>
        <function-ref name="write" scoped="" ref="0x7f540d0e23a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540d0f1c30" loc="41:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540d0f1c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d0f0020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d0f01b0"/>
        <function-ref name="request" scoped="" ref="0x7f540d0f0340"/>
        <function-ref name="granted" scoped="" ref="0x7f540d0f04d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d0f0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f540d0e9160" loc="57:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f540d0e9160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0e94e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f540d0e9e00" loc="59:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f540d0e9e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0e81c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f540d0d22f0" loc="100:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f540d0d22f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d2670"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d2800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f540d0d4ad0" loc="99:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f540d0d4ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d4e50"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f540d0eb6b0" loc="53:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f540d0eb6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0eba30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f540d0d42f0" loc="96:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f540d0d42f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d4670"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d4800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f540d0cf2f0" loc="106:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f540d0cf2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0cf670"/>
        <function-ref name="write" scoped="" ref="0x7f540d0cf800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f540d0dde50" loc="81:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f540d0dde50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0dc210"/>
        <function-ref name="write" scoped="" ref="0x7f540d0dc3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f540d0d8670" loc="89:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f540d0d8670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d89f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d8b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f540d0eecc0" loc="49:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f540d0eecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0ec0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f540d0ec9c0" loc="51:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f540d0ec9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0ecd40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f540d0dfe50" loc="77:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f540d0dfe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0de210"/>
        <function-ref name="write" scoped="" ref="0x7f540d0de3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f540d0e97b0" loc="58:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f540d0e97b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0e9b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f540d0de670" loc="78:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f540d0de670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0de9f0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0deb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f540d0d6e50" loc="94:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f540d0d6e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0d5610"/>
        <function-ref name="write" scoped="" ref="0x7f540d0d57a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f540d0cd7a0" loc="112:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f540d0cd7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f540d0cdb20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f540d0cdcb0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0cde40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f540d0cc020"/>
        <function-ref name="readDone" scoped="" ref="0x7f540d0cc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7f540d0c0df0" loc="42:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f540d0c0df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540d0bd1c0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f540d0bd350"/>
        <function-ref name="sfd" scoped="" ref="0x7f540d0bd4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f540d0bd7c0" loc="43:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f540d0bd7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540d0bdb40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7f540d0bc020" loc="44:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7f540d0bc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f540d0bc3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f540d0c05c0" loc="41:../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f540d0c05c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f540d0c0940"/>
        <function-ref name="stop" scoped="" ref="0x7f540d0c0ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFO" ref="0x7f540d0b5380" loc="54:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7f540d0b5380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d0b5700"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d0b5890"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d0b5a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d0b5bb0"/>
        <function-ref name="get" scoped="" ref="0x7f540d0b5d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d0b4020"/>
        <function-ref name="set" scoped="" ref="0x7f540d0b41b0"/>
        <function-ref name="clr" scoped="" ref="0x7f540d0b4340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7f540d0aeb90" loc="64:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f540d0aeb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f540d0ad020"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f540d0ad1b0"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f540d0ad340"/>
        <function-ref name="syncDone" scoped="" ref="0x7f540d0ad4d0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f540d0ad660"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f540d0ad7f0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f540d0ad980"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f540d0adb10"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f540d0adca0"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f540d0ade30"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f540d0ac020"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f540d0ac1b0"/>
        <function-ref name="sync" scoped="" ref="0x7f540d0ac340"/>
        <function-ref name="getChannel" scoped="" ref="0x7f540d0ac5d0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f540d0ac760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveDone_task" ref="0x7f540d0969d0" loc="148:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveDone_task" scoped="" ref="0x7f540d0969d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540d096d50"/>
        <function-ref name="runTask" scoped="" ref="0x7f540d095020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f540d0acd70" loc="65:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f540d0acd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f540d0a9330"/>
        <function-ref name="clear" scoped="" ref="0x7f540d0a9a60"/>
        <function-ref name="isValid" scoped="" ref="0x7f540d0aaba0"/>
        <function-ref name="set" scoped="" ref="0x7f540d0a8210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFOP" ref="0x7f540d0b46b0" loc="55:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7f540d0b46b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d0b4a30"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d0b4bc0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d0b4d50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d0b3020"/>
        <function-ref name="get" scoped="" ref="0x7f540d0b31b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d0b3340"/>
        <function-ref name="set" scoped="" ref="0x7f540d0b34d0"/>
        <function-ref name="clr" scoped="" ref="0x7f540d0b3660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7f540d0a7cb0" loc="69:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f540d0a7cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0a50a0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0a5230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7f540d0a5590" loc="70:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f540d0a5590"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0a5910"/>
        <function-ref name="write" scoped="" ref="0x7f540d0a5aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXNONCE" ref="0x7f540d0a46d0" loc="72:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f540d0a46d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0a4a50"/>
        <function-ref name="write" scoped="" ref="0x7f540d0a4be0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f540d0af330" loc="62:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f540d0af330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f540d0af6b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f540d0af840"/>
        <function-ref name="getRssi" scoped="" ref="0x7f540d0af9d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f540d0afb60"/>
        <function-ref name="getPower" scoped="" ref="0x7f540d0afcf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f540d0afe80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7f540d0b8550" loc="49:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f540d0b8550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540d0b88d0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f540d0b8a60"/>
        <function-ref name="sfd" scoped="" ref="0x7f540d0b8bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SACK" ref="0x7f540d0b03a0" loc="60:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f540d0b03a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0b0720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f540d0b6020" loc="53:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f540d0b6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540d0b63a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540d0b6530"/>
        <function-ref name="toggle" scoped="" ref="0x7f540d0b66c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540d0b6850"/>
        <function-ref name="get" scoped="" ref="0x7f540d0b69e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540d0b6b70"/>
        <function-ref name="set" scoped="" ref="0x7f540d0b6d00"/>
        <function-ref name="clr" scoped="" ref="0x7f540d0b5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO_RAM" ref="0x7f540d0a3020" loc="73:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f540d0a3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0a33a0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0a3530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540d0b9620" loc="47:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540d0b9620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540d0b99a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f540d0ae1e0" loc="63:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540d0ae1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f540d0ae560"/>
        <function-ref name="getHeader" scoped="" ref="0x7f540d0ae6f0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f540d0ae880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f540d0b7020" loc="50:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f540d0b7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540d0b73a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f540d0b26e0" loc="58:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f540d0b26e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540d0b2a60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540d0b2bf0"/>
        <function-ref name="request" scoped="" ref="0x7f540d0b2d80"/>
        <function-ref name="granted" scoped="" ref="0x7f540d0b1020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540d0b11b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7f540d0a5e00" loc="71:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f540d0a5e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0a41c0"/>
        <function-ref name="write" scoped="" ref="0x7f540d0a4350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO" ref="0x7f540d0b1530" loc="59:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f540d0b1530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f540d0b18b0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f540d0b1a40"/>
        <function-ref name="write" scoped="" ref="0x7f540d0b1bd0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f540d0b1d60"/>
        <function-ref name="readDone" scoped="" ref="0x7f540d0b0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7f540d0a38b0" loc="74:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f540d0a38b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0a3e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7f540d0b77c0" loc="51:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7f540d0b77c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f540d0b7b40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540d0a2150" loc="76:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540d0a2150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540d0a24d0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540d0a2660"/>
        <function-ref name="led1On" scoped="" ref="0x7f540d0a27f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540d0a2980"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540d0a2b10"/>
        <function-ref name="get" scoped="" ref="0x7f540d0a2ca0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540d0a2e30"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540d0a14d0"/>
        <function-ref name="set" scoped="" ref="0x7f540d0a1020"/>
        <function-ref name="led0On" scoped="" ref="0x7f540d0a11b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f540d0a1340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7f540d0a73e0" loc="68:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f540d0a73e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540d0a7760"/>
        <function-ref name="write" scoped="" ref="0x7f540d0a78f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXDEC" ref="0x7f540d0a8b10" loc="67:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f540d0a8b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0a7020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptFIFOP" ref="0x7f540d0b3a50" loc="56:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f540d0b3a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540d0b3dd0"/>
        <function-ref name="disable" scoped="" ref="0x7f540d0b2020"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f540d0b21b0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f540d0b2340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHRX" ref="0x7f540d0b0ad0" loc="61:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f540d0b0ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540d0af020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f540d0b9ca0" loc="48:../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f540d0b9ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f540d0b80a0"/>
        <function-ref name="stop" scoped="" ref="0x7f540d0b8230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f540d036a70" loc="44:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f540d036a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f540d036df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f540d03a660" loc="41:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f540d03a660"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f540d03a9e0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f540d03ab70"/>
        <function-ref name="getRssi" scoped="" ref="0x7f540d03ad00"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f540d037020"/>
        <function-ref name="getPower" scoped="" ref="0x7f540d0371b0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f540d037340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f540d035550" loc="46:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f540d035550"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f540d034b00"/>
        <function-ref name="clear" scoped="" ref="0x7f540d0322a0"/>
        <function-ref name="isValid" scoped="" ref="0x7f540d0343d0"/>
        <function-ref name="set" scoped="" ref="0x7f540d0329d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7f540d0360c0" loc="43:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540d0360c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f540d036440"/>
        <function-ref name="getHeader" scoped="" ref="0x7f540d0365d0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f540d036760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f540d02d480" loc="48:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f540d02d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540d02d800"/>
        <function-ref name="isSet" scoped="" ref="0x7f540d02d990"/>
        <function-ref name="cancel" scoped="" ref="0x7f540d02db20"/>
        <function-ref name="set" scoped="" ref="0x7f540d02dcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f540d031660" loc="47:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f540d031660"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f540d030ce0"/>
        <function-ref name="clear" scoped="" ref="0x7f540d02e460"/>
        <function-ref name="isValid" scoped="" ref="0x7f540d0305b0"/>
        <function-ref name="set" scoped="" ref="0x7f540d02eb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f540d0376e0" loc="42:../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f540d0376e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f540d037a60"/>
        <function-ref name="noAck" scoped="" ref="0x7f540d037bf0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f540d037d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f540d026020" loc="49:../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f540d026020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f540d0263a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f540d02cd10" loc="46:../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f540d02cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f540d0290e0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f540d029270"/>
        <function-ref name="getRssi" scoped="" ref="0x7f540d029400"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f540d029590"/>
        <function-ref name="getPower" scoped="" ref="0x7f540d029720"/>
        <function-ref name="getLqi" scoped="" ref="0x7f540d0298b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f540d01d4a0" loc="56:../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f540d01d4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540d01d820"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f540d01d9b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540d01db40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540d01dcd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f540d01de60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f540d026a80" loc="51:../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f540d026a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f540d024020"/>
        <function-ref name="clear" scoped="" ref="0x7f540d024750"/>
        <function-ref name="isValid" scoped="" ref="0x7f540d0258d0"/>
        <function-ref name="set" scoped="" ref="0x7f540d024e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7f540d028640" loc="48:../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540d028640"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f540d0289c0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f540d028b50"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f540d028ce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f540d01f8b0" loc="53:../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f540d01f8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540d01fc30"/>
        <function-ref name="isSet" scoped="" ref="0x7f540d01fdc0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540d01d020"/>
        <function-ref name="set" scoped="" ref="0x7f540d01d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime32khz" ref="0x7f540d019820" loc="57:../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime32khz" scoped="" ref="0x7f540d019820"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540d01b4c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7f540d01bb80" loc="58:../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f540d01bb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540d01a7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f540d023af0" loc="52:../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f540d023af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f540d0200d0"/>
        <function-ref name="clear" scoped="" ref="0x7f540d020800"/>
        <function-ref name="isValid" scoped="" ref="0x7f540d021970"/>
        <function-ref name="set" scoped="" ref="0x7f540d01f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f540d029c50" loc="47:../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f540d029c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f540d028020"/>
        <function-ref name="noAck" scoped="" ref="0x7f540d0281b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f540d028340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f540cfc9790" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f540cfc9790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540cfbf3f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f540cfbfa60" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f540cfbfa60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540cfbe890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540cfbd260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540cfbed50"/>
        <function-ref name="overflow" scoped="" ref="0x7f540cfbd720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f540cfadd60" loc="46:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f540cfadd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540cfaa220"/>
        <function-ref name="fired" scoped="" ref="0x7f540cfb77d0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f540cfab590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f540cfab110"/>
        <function-ref name="getdt" scoped="" ref="0x7f540cfaab20"/>
        <function-ref name="gett0" scoped="" ref="0x7f540cfaa6a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540cfb7c50"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f540cfb8980"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f540cfabba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f540cfb8e50"/>
        <function-ref name="stop" scoped="" ref="0x7f540cfb7350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f540cfa8160" loc="47:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f540cfa8160"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540cfa8d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540cfb93a0" loc="45:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540cfb93a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540cfb9720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f540cf7a020" loc="44:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f540cf7a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540cf77870"/>
        <function-ref name="fired" scoped="" ref="0x7f540cf79840"/>
        <function-ref name="startAt" scoped="" ref="0x7f540cf77220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540cf79d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f540cf77d30"/>
        <function-ref name="start" scoped="" ref="0x7f540cf7ae30"/>
        <function-ref name="stop" scoped="" ref="0x7f540cf79380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540cf7b760" loc="43:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540cf7b760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540cf7bae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f540c0de260" loc="44:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f540c0de260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540c0dcb30"/>
        <function-ref name="fired" scoped="" ref="0x7f540c0dda60"/>
        <function-ref name="startAt" scoped="" ref="0x7f540c0dc4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540c0dc020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f540c0da020"/>
        <function-ref name="start" scoped="" ref="0x7f540c0dd090"/>
        <function-ref name="stop" scoped="" ref="0x7f540c0dd5a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540c0df9d0" loc="43:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540c0df9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540c0dfd50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f540c0c5a80" loc="41:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f540c0c5a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540c0c5e00"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540c0c4020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540c0c41b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540c0c4340"/>
        <function-ref name="fired" scoped="" ref="0x7f540c0c44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f540c0c8020" loc="39:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f540c0c8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540c0c83a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540c0c8530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540c0c86c0"/>
        <function-ref name="get" scoped="" ref="0x7f540c0c8850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540c0c89e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540c0c8b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f540c0c8d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540c0c7020"/>
        <function-ref name="overflow" scoped="" ref="0x7f540c0c71b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f540c0c7340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540c0c74d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f540c0c7760" loc="40:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540c0c7760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540c0c7ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f540c0c7c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540c0c7e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540c0c5020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540c0c51b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540c0c5340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540c0c54d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540c0c5660"/>
        <function-ref name="setControl" scoped="" ref="0x7f540c0c57f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f540c0b9760" loc="49:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f540c0b9760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f540c0b9ae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f540c0b9c70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f540c0b9e00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f540c0b8020"/>
        <function-ref name="fired" scoped="" ref="0x7f540c0b81b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f540c0bddd0" loc="47:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f540c0bddd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540c0bc180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f540c0bc310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540c0bc4a0"/>
        <function-ref name="get" scoped="" ref="0x7f540c0bc630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540c0bc7c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540c0bc950"/>
        <function-ref name="getMode" scoped="" ref="0x7f540c0bcae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540c0bcc70"/>
        <function-ref name="overflow" scoped="" ref="0x7f540c0bce00"/>
        <function-ref name="setMode" scoped="" ref="0x7f540c0bb020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f540c0bb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f540c0c2bf0" loc="46:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f540c0c2bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540c0bd4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f540c0be4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f540c0bee60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540c0be9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f540c0bd9a0"/>
        <function-ref name="start" scoped="" ref="0x7f540c0c1a80"/>
        <function-ref name="stop" scoped="" ref="0x7f540c0be020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540c0c2360" loc="45:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540c0c2360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540c0c26e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f540c0bb440" loc="48:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f540c0bb440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f540c0bb7c0"/>
        <function-ref name="getControl" scoped="" ref="0x7f540c0bb950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f540c0bbae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f540c0bbc70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f540c0bbe00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f540c0b9020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f540c0b91b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f540c0b9340"/>
        <function-ref name="setControl" scoped="" ref="0x7f540c0b94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f540cf97650" loc="43:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f540cf97650"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540cf965b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540cf95020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540cf96a70"/>
        <function-ref name="overflow" scoped="" ref="0x7f540cf954e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f540cf8e6d0" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f540cf8e6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540cf8d5b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540cf8c020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540cf8da70"/>
        <function-ref name="overflow" scoped="" ref="0x7f540cf8c4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f540cf912e0" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f540cf912e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540cf90110"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540cf90a90"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540cf905d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f540cf8e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f540c0d85f0" loc="61:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f540c0d85f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540c0d6e50"/>
        <function-ref name="fired" scoped="" ref="0x7f540c0d7e00"/>
        <function-ref name="startAt" scoped="" ref="0x7f540c0d6800"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540c0d6340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f540c0d5340"/>
        <function-ref name="start" scoped="" ref="0x7f540c0d7430"/>
        <function-ref name="stop" scoped="" ref="0x7f540c0d7940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f540c0d2d20" loc="73:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f540c0d2d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540c0cf670"/>
        <function-ref name="fired" scoped="" ref="0x7f540c0d0550"/>
        <function-ref name="startAt" scoped="" ref="0x7f540c0cf020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540c0d0a10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f540c0cfb30"/>
        <function-ref name="start" scoped="" ref="0x7f540c0d1b60"/>
        <function-ref name="stop" scoped="" ref="0x7f540c0d0090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f540c0d59b0" loc="68:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f540c0d59b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540c0d37e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540c0d21b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540c0d3ca0"/>
        <function-ref name="overflow" scoped="" ref="0x7f540c0d2670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f540cf45490" loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f540cf45490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540cf45810"/>
        <function-ref name="runTask" scoped="" ref="0x7f540cf459a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f540cf491d0" loc="49:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f540cf491d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540cf46b30"/>
        <function-ref name="fired" scoped="" ref="0x7f540cf479f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f540cf464e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540cf46020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f540cf45020"/>
        <function-ref name="start" scoped="" ref="0x7f540cf47020"/>
        <function-ref name="stop" scoped="" ref="0x7f540cf47530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f540cf4fcf0" loc="48:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540cf4fcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540cf4a220"/>
        <function-ref name="fired" scoped="" ref="0x7f540cf4c7c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f540cf4b590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f540cf4b110"/>
        <function-ref name="getdt" scoped="" ref="0x7f540cf4ab20"/>
        <function-ref name="gett0" scoped="" ref="0x7f540cf4a6a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540cf4cc40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f540cf4e940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f540cf4bba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f540cf4ee10"/>
        <function-ref name="stop" scoped="" ref="0x7f540cf4c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f540cec6020" loc="58:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f540cec6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540cec2630"/>
        <function-ref name="fired" scoped="" ref="0x7f540cec5a60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f540cec3920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f540cec34a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f540cec1020"/>
        <function-ref name="gett0" scoped="" ref="0x7f540cec2ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540cec3020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f540cec6c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f540cec2020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f540cec5110"/>
        <function-ref name="stop" scoped="" ref="0x7f540cec55e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f540cec1450" loc="59:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f540cec1450"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f540cec17d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f540cecd8e0" loc="57:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540cecd8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540cec7020"/>
        <function-ref name="fired" scoped="" ref="0x7f540cecb4c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f540cec9300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f540cecbe00"/>
        <function-ref name="getdt" scoped="" ref="0x7f540cec7960"/>
        <function-ref name="gett0" scoped="" ref="0x7f540cec74c0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540cecb960"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f540cecc560"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f540cec9930"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f540cecca50"/>
        <function-ref name="stop" scoped="" ref="0x7f540cecb020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f540c060020" loc="153:../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f540c060020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540c0603a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f540c060530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f540c067180" loc="65:../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f540c067180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540c063630"/>
        <function-ref name="fired" scoped="" ref="0x7f540c066bf0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f540c065990"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f540c065510"/>
        <function-ref name="getdt" scoped="" ref="0x7f540c062020"/>
        <function-ref name="gett0" scoped="" ref="0x7f540c063ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540c065090"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f540c067d70"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f540c063020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f540c0662a0"/>
        <function-ref name="stop" scoped="" ref="0x7f540c066770"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f540c0618b0" loc="67:../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f540c0618b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f540c061c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Platform" ref="0x7f540c062410" loc="66:../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f540c062410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f540c0614d0"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f540c061660"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f540c062ab0"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f540c062c40"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f540c062dd0"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f540c061020"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f540c0611b0"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f540c061340"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f540c062790"/>
        <function-ref name="node_id" scoped="" ref="0x7f540c062920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f540c06ebc0" loc="63:../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540c06ebc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540c069220"/>
        <function-ref name="fired" scoped="" ref="0x7f540c06c740"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f540c06a570"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f540c06a0d0"/>
        <function-ref name="getdt" scoped="" ref="0x7f540c069b60"/>
        <function-ref name="gett0" scoped="" ref="0x7f540c0696c0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540c06cbe0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f540c06d860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f540c06aba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f540c06dd50"/>
        <function-ref name="stop" scoped="" ref="0x7f540c06c2a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f540cebfa20" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f540cebfa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540cebd6b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f540cebdd20" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f540cebdd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540cebcb60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540cebb550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540cebb090"/>
        <function-ref name="overflow" scoped="" ref="0x7f540cebba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f540ceb4ce0" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="CC2420PacketC.DummyTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f540ceb4ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540cea0220"/>
        <function-ref name="fired" scoped="" ref="0x7f540cea27c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f540cea1590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f540cea1110"/>
        <function-ref name="getdt" scoped="" ref="0x7f540cea0b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f540cea06a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540cea2c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f540cea3940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f540cea1ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f540cea3e10"/>
        <function-ref name="stop" scoped="" ref="0x7f540cea2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f540ceab610" loc="49:../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f540ceab610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dd00790"/>
            <typename><typedef-ref name="TMilli" ref="0x7f540dd00b00"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f540cea8c40"/>
        <function-ref name="fired" scoped="" ref="0x7f540cea91e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f540cea8020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f540cea9ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f540cea6590"/>
        <function-ref name="gett0" scoped="" ref="0x7f540cea6110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f540cea9660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f540ceaa390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f540cea8630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f540ceaa860"/>
        <function-ref name="stop" scoped="" ref="0x7f540ceaad30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f540ce8e2f0" loc="69:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f540ce8e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce8e870"/>
        <function-ref name="write" scoped="" ref="0x7f540ce8ea00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f540ce99670" loc="47:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f540ce99670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540ce999f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f540ce922f0" loc="63:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f540ce922f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce92670"/>
        <function-ref name="write" scoped="" ref="0x7f540ce92800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f540ce8dce0" loc="72:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f540ce8dce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce8c0a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce8c230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f540ce85500" loc="86:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f540ce85500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce85880"/>
        <function-ref name="write" scoped="" ref="0x7f540ce85a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f540ce8c500" loc="73:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f540ce8c500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce8c880"/>
        <function-ref name="write" scoped="" ref="0x7f540ce8ca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f540ce79900" loc="108:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f540ce79900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce79c80"/>
        <function-ref name="write" scoped="" ref="0x7f540ce79e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f540ce7b900" loc="104:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f540ce7b900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce7bc80"/>
        <function-ref name="write" scoped="" ref="0x7f540ce7be10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f540ce989c0" loc="50:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f540ce989c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540ce98d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f540ce81ce0" loc="93:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f540ce81ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce800a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce80230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f540ce7d900" loc="102:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f540ce7d900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce7dc80"/>
        <function-ref name="write" scoped="" ref="0x7f540ce7de10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f540ce902f0" loc="65:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f540ce902f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce90670"/>
        <function-ref name="write" scoped="" ref="0x7f540ce90800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f540ce8f2f0" loc="67:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f540ce8f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce8f670"/>
        <function-ref name="write" scoped="" ref="0x7f540ce8f800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f540ce87ce0" loc="83:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f540ce87ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce860a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce86230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f540ce88500" loc="79:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f540ce88500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce88880"/>
        <function-ref name="write" scoped="" ref="0x7f540ce88a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f540ce8cce0" loc="74:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f540ce8cce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce8b0a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce8b230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f540ce9a020" loc="42:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f540ce9a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f540ce9a3a0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f540ce9a530"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f540ce9a6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f540ce95370" loc="54:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f540ce95370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540ce956f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f540ce959c0" loc="55:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f540ce959c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540ce95e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f540ce7f120" loc="95:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f540ce7f120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce7f4a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce7f630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f540ce94160" loc="56:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f540ce94160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540ce944e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f540ce7b120" loc="103:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f540ce7b120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce7b4a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce7b630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f540ce966b0" loc="52:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f540ce966b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540ce96a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f540ce81500" loc="92:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f540ce81500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce81880"/>
        <function-ref name="write" scoped="" ref="0x7f540ce81a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f540ce90ad0" loc="66:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f540ce90ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce90e50"/>
        <function-ref name="write" scoped="" ref="0x7f540ce8f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f540ce92ad0" loc="64:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f540ce92ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce92e50"/>
        <function-ref name="write" scoped="" ref="0x7f540ce90020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f540ce99020" loc="46:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f540ce99020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540ce993a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f540ce82500" loc="90:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f540ce82500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce82880"/>
        <function-ref name="write" scoped="" ref="0x7f540ce82a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f540ce85ce0" loc="87:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f540ce85ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce830a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce83230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f540ce82ce0" loc="91:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f540ce82ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce810a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce81230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f540ce79120" loc="107:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f540ce79120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce794a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce79630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f540ce7a120" loc="105:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f540ce7a120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce7a4a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce7a630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f540ce88ce0" loc="80:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f540ce88ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce870a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce87230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f540ce83500" loc="88:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f540ce83500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce83880"/>
        <function-ref name="write" scoped="" ref="0x7f540ce83a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f540ce7d120" loc="101:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f540ce7d120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce7d4a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce7d630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f540ce8bce0" loc="76:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f540ce8bce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce890a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce89230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f540ce78120" loc="111:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f540ce78120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f540ce784a0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f540ce78630"/>
        <function-ref name="write" scoped="" ref="0x7f540ce787c0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f540ce78950"/>
        <function-ref name="readDone" scoped="" ref="0x7f540ce78ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f540ce9a990" loc="45:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f540ce9a990"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540ce9ad10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f540ce93ae0" loc="62:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f540ce93ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce93e60"/>
        <function-ref name="write" scoped="" ref="0x7f540ce92020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f540ce8fad0" loc="68:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f540ce8fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce8fe50"/>
        <function-ref name="write" scoped="" ref="0x7f540ce8e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f540ce86500" loc="84:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f540ce86500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce86880"/>
        <function-ref name="write" scoped="" ref="0x7f540ce86a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f540ce8b500" loc="75:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f540ce8b500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce8b880"/>
        <function-ref name="write" scoped="" ref="0x7f540ce8ba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f540ce86ce0" loc="85:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f540ce86ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce850a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce85230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f540ce8ecd0" loc="70:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f540ce8ecd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce8d0a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce8d230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f540ce99cc0" loc="48:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f540ce99cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540ce980a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f540ce8d500" loc="71:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f540ce8d500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce8d880"/>
        <function-ref name="write" scoped="" ref="0x7f540ce8da10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540ce9b250" loc="41:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540ce9b250"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540ce9b5d0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540ce9b760"/>
        <function-ref name="request" scoped="" ref="0x7f540ce9b8f0"/>
        <function-ref name="granted" scoped="" ref="0x7f540ce9ba80"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540ce9bc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f540ce947b0" loc="57:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f540ce947b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540ce94b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f540ce93490" loc="59:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f540ce93490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540ce93810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f540ce7e900" loc="100:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f540ce7e900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce7ec80"/>
        <function-ref name="write" scoped="" ref="0x7f540ce7ee10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f540ce7e120" loc="99:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f540ce7e120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce7e4a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce7e630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f540ce96d00" loc="53:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f540ce96d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540ce950a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f540ce7f900" loc="96:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f540ce7f900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce7fc80"/>
        <function-ref name="write" scoped="" ref="0x7f540ce7fe10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f540ce7a900" loc="106:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f540ce7a900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce7ac80"/>
        <function-ref name="write" scoped="" ref="0x7f540ce7ae10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f540ce87500" loc="81:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f540ce87500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce87880"/>
        <function-ref name="write" scoped="" ref="0x7f540ce87a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f540ce83ce0" loc="89:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f540ce83ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce820a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce82230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f540ce98370" loc="49:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f540ce98370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540ce986f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f540ce96060" loc="51:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f540ce96060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540ce963e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f540ce89500" loc="77:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f540ce89500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce89880"/>
        <function-ref name="write" scoped="" ref="0x7f540ce89a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f540ce94e00" loc="58:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f540ce94e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f540ce931c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f540ce89ce0" loc="78:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f540ce89ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce880a0"/>
        <function-ref name="write" scoped="" ref="0x7f540ce88230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f540ce80500" loc="94:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f540ce80500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f540ce80c80"/>
        <function-ref name="write" scoped="" ref="0x7f540ce80e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f540ce78db0" loc="112:../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f540ce78db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f540ce77180"/>
        <function-ref name="writeDone" scoped="" ref="0x7f540ce77310"/>
        <function-ref name="write" scoped="" ref="0x7f540ce774a0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f540ce77630"/>
        <function-ref name="readDone" scoped="" ref="0x7f540ce777c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f540ce4da20" loc="46:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f540ce4da20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f540ce4dda0"/>
        <function-ref name="rand32" scoped="" ref="0x7f540ce4c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f540ce4b920" loc="45:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7f540ce4b920"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540ce4d560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540ce51990" loc="44:../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540ce51990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540ce51d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f540ce46a20" loc="48:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f540ce46a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f540ce46da0"/>
        <function-ref name="rand32" scoped="" ref="0x7f540ce45020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f540ce48940" loc="47:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7f540ce48940"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540ce46560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540ce48080" loc="46:../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540ce48080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540ce48400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f540ce4faa0" loc="67:../../tos/system/StateC.nc">
      <component-ref qname="CC2420CsmaC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f540ce4faa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f540ce4fe20"/>
        <function-ref name="toIdle" scoped="" ref="0x7f540ce49020"/>
        <function-ref name="isState" scoped="" ref="0x7f540ce491b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f540ce49340"/>
        <function-ref name="requestState" scoped="" ref="0x7f540ce494d0"/>
        <function-ref name="forceState" scoped="" ref="0x7f540ce49660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f540ce2b020" loc="44:../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f540ce2b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540ce2b3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540ce2b530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540ce2b6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540ce2b850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540ce2b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f540ce2c220" loc="40:../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f540ce2c220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540ce2c5a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540ce2c730"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540ce2c8c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540ce2ca50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540ce2cbe0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f540ce27e60" loc="45:../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f540ce27e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540ce26210"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540ce263a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540ce26530"/>
        <function-ref name="cancel" scoped="" ref="0x7f540ce266c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540ce26850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f540ce2aa10" loc="40:../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f540ce2aa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540ce2ad90"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540ce27020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540ce271b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540ce27340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540ce274d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f540ce258f0" loc="47:../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f540ce258f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f540ce25c70"/>
        <function-ref name="rand32" scoped="" ref="0x7f540ce25e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540ce27750" loc="41:../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540ce27750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540ce27ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f540ce24170" loc="48:../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540ce24170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f540ce244f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f540ce24680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f540ce24810"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="State" ref="0x7f540ce26ae0" loc="46:../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f540ce26ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f540ce26e60"/>
        <function-ref name="toIdle" scoped="" ref="0x7f540ce25020"/>
        <function-ref name="isState" scoped="" ref="0x7f540ce251b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f540ce25340"/>
        <function-ref name="requestState" scoped="" ref="0x7f540ce254d0"/>
        <function-ref name="forceState" scoped="" ref="0x7f540ce25660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f540ce28690" loc="67:../../tos/system/StateC.nc">
      <component-ref qname="UniqueSendC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f540ce28690"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f540ce28a10"/>
        <function-ref name="toIdle" scoped="" ref="0x7f540ce28ba0"/>
        <function-ref name="isState" scoped="" ref="0x7f540ce28d30"/>
        <function-ref name="isIdle" scoped="" ref="0x7f540ce13020"/>
        <function-ref name="requestState" scoped="" ref="0x7f540ce131b0"/>
        <function-ref name="forceState" scoped="" ref="0x7f540ce13340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f540ce0c950" loc="47:../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f540ce0c950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540ce0ccd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f540ce0fa90" loc="42:../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f540ce0fa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540ce0fe10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7f540ce0c200" loc="43:../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7f540ce0c200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540ce0c580"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f540ce073f0" loc="49:../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f540ce073f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540ce07770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540ce08b50" loc="45:../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540ce08b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540ce07020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f540ce0be20" loc="43:../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f540ce0be20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540ce081c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f540ce07a70" loc="50:../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540ce07a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f540ce07df0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f540ce06020"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f540ce061b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7f540ce08550" loc="44:../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7f540ce08550"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540ce088d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f540cdd8020" loc="75:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f540cdd8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540cdd83a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f540cdd86b0" loc="76:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f540cdd86b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cdd8a30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cdd8bc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cdd8d50"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cdd6020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cdd61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f540cddc8e0" loc="65:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f540cddc8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cddcc60"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cddcdf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cddb020"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cddb1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cddb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f540cddbc90" loc="68:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f540cddbc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cdda0a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cdda230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cdda3c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cdda550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cdda6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f540cddb5e0" loc="66:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f540cddb5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540cddb960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540cdddbe0" loc="64:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540cdddbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540cddc020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540cddc1b0"/>
        <function-ref name="request" scoped="" ref="0x7f540cddc340"/>
        <function-ref name="granted" scoped="" ref="0x7f540cddc4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540cddc660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f540cddaa50" loc="69:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f540cddaa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540cddadd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f540cdd9170" loc="71:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f540cdd9170"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540cdd94f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f540cdd9680"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cdd9810"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cdd99a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f540cdd9b30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f540cdced70" loc="58:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f540cdced70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cdcd180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cdcd310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cdcd4a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cdcd630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cdcd7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f540cdcdb10" loc="59:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f540cdcdb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540cdcc020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantTask" ref="0x7f540cd9edb0" loc="184:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantTask" scoped="" ref="0x7f540cd9edb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540cd9d180"/>
        <function-ref name="runTask" scoped="" ref="0x7f540cd9d310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f540cdcc2f0" loc="60:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f540cdcc2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f540cdcc670"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f540cdcc800"/>
        <function-ref name="getRssi" scoped="" ref="0x7f540cdcc990"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f540cdccb20"/>
        <function-ref name="getPower" scoped="" ref="0x7f540cdcccb0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f540cdcce40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f540cdd0a20" loc="51:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f540cdd0a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cdd0da0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cdcf020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cdcf1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cdcf340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cdcf4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f540cdcbb70" loc="62:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f540cdcbb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f540cdca020"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f540cdca1b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f540cdca340"/>
        <function-ref name="dequeue" scoped="" ref="0x7f540cdca4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f540cdcb170" loc="61:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540cdcb170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f540cdcb4f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f540cdcb680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f540cdcb810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f540cdd0370" loc="49:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7f540cdd0370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540cdd06f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540cdd27b0" loc="46:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540cdd27b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540cdd2b30"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540cdd2cc0"/>
        <function-ref name="request" scoped="" ref="0x7f540cdd2e50"/>
        <function-ref name="granted" scoped="" ref="0x7f540cdd1020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540cdd11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f540cdd14d0" loc="48:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7f540cdd14d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cdd1850"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cdd19e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cdd1b70"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cdd1d00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cdd0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f540cdcf840" loc="52:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f540cdcf840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540cdcfbc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f540cdce020" loc="54:../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f540cdce020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540cdce3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f540cdce530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cdce6c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cdce850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f540cdce9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540cd7edd0" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540cd7edd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540cd7d180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f540cd7d410" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f540cd7d410"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f540cd7d790"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f540cd7d920"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f540cd7dab0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f540cd7dc40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f540cd72b80" loc="46:../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f540cd72b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f540cd71020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f540cd711b0"/>
        <function-ref name="start" scoped="" ref="0x7f540cd71340"/>
        <function-ref name="stop" scoped="" ref="0x7f540cd714d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f540cd70860" loc="51:../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f540cd70860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cd70be0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cd70d70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cd6f020"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cd6f1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cd6f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f540cd6f690" loc="52:../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f540cd6f690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540cd6fa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f540cd76ce0" loc="43:../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f540cd76ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cd730a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cd73230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cd733c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cd73550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cd736e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f540cd72080" loc="45:../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f540cd72080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f540cd72400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f540cd72590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f540cd72720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f540cd728b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendState" ref="0x7f540cd71800" loc="47:../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendState" scoped="" ref="0x7f540cd71800"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f540cd71b80"/>
        <function-ref name="toIdle" scoped="" ref="0x7f540cd71d10"/>
        <function-ref name="isState" scoped="" ref="0x7f540cd70020"/>
        <function-ref name="isIdle" scoped="" ref="0x7f540cd701b0"/>
        <function-ref name="requestState" scoped="" ref="0x7f540cd70340"/>
        <function-ref name="forceState" scoped="" ref="0x7f540cd704d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f540cd6fd90" loc="53:../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7f540cd6fd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f540cd6e180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f540cd6e310"/>
        <function-ref name="start" scoped="" ref="0x7f540cd6e4a0"/>
        <function-ref name="stop" scoped="" ref="0x7f540cd6e630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f540cd73980" loc="44:../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f540cd73980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540cd73d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f540cd6b2d0" loc="41:../../tos/chips/cc2420/lpl/DummyLplP.nc">
      <component-ref qname="DummyLplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f540cd6b2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f540cd6b650"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f540cd6b7e0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f540cd6b970"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f540cd6bb00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f540cd6c580" loc="67:../../tos/system/StateC.nc">
      <component-ref qname="DummyLplC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f540cd6c580"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f540cd6c900"/>
        <function-ref name="toIdle" scoped="" ref="0x7f540cd6ca90"/>
        <function-ref name="isState" scoped="" ref="0x7f540cd6cc20"/>
        <function-ref name="isIdle" scoped="" ref="0x7f540cd6cdb0"/>
        <function-ref name="requestState" scoped="" ref="0x7f540cd62020"/>
        <function-ref name="forceState" scoped="" ref="0x7f540cd621b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f540cd5dd70" loc="45:../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f540cd5dd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cd5c180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cd5c310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cd5c4a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cd5c630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cd5c7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f540cd60340" loc="40:../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f540cd60340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cd606c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cd60850"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cd609e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cd60b70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cd60d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f540cd5d020" loc="41:../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f540cd5d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f540cd5d3a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f540cd5d530"/>
        <function-ref name="getRetries" scoped="" ref="0x7f540cd5d6c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f540cd5d850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f540cd5d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7f540cd581a0" loc="44:../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f540cd581a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f540cd58520"/>
        <function-ref name="noAck" scoped="" ref="0x7f540cd586b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f540cd58840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f540cd5b400" loc="40:../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f540cd5b400"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f540cd5b780"/>
        <function-ref name="setRetries" scoped="" ref="0x7f540cd5b910"/>
        <function-ref name="getRetries" scoped="" ref="0x7f540cd5baa0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f540cd5bc30"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f540cd5bdc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f540cd38690" loc="59:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f540cd38690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540cd38a10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f540cd3a860" loc="58:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f540cd3a860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cd3abe0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cd3ad70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cd38020"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cd381b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cd38340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7f540cd36610" loc="62:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f540cd36610"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f540cd36990"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f540cd36b20"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f540cd36cb0"/>
        <function-ref name="syncDone" scoped="" ref="0x7f540cd36e40"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f540cd35020"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f540cd351b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f540cd35340"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f540cd354d0"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f540cd35660"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f540cd357f0"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f540cd35980"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f540cd35b10"/>
        <function-ref name="sync" scoped="" ref="0x7f540cd35ca0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f540cd34020"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f540cd341b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f540cd3b8b0" loc="54:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f540cd3b8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f540cd3bc30"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f540cd3bdc0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f540cd3a020"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f540cd3a1b0"/>
        <function-ref name="setCca" scoped="" ref="0x7f540cd3a340"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f540cd3a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f540cd3cce0" loc="53:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7f540cd3cce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f540cd3b0a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7f540cd331f0" loc="64:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7f540cd331f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f540cd33570"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f540cd33700"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f540cd33890"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f540cd33a20"/>
        <function-ref name="setCca" scoped="" ref="0x7f540cd33bb0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f540cd33d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f540cd3da80" loc="52:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f540cd3da80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540cd3de00"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f540cd3c020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cd3c1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cd3c340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f540cd3c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f540cd44e80" loc="48:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f540cd44e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cd40220"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cd403b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cd40540"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cd406d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cd40860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f540cd3fdb0" loc="50:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f540cd3fdb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540cd3e180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f540cd38ce0" loc="60:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f540cd38ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f540cd370a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f540cd37230"/>
        <function-ref name="getRssi" scoped="" ref="0x7f540cd373c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f540cd37550"/>
        <function-ref name="getPower" scoped="" ref="0x7f540cd376e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f540cd37870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f540cd344d0" loc="63:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f540cd344d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f540cd34950"/>
        <function-ref name="changed" scoped="" ref="0x7f540cd34ae0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f540cd34c70"/>
        <function-ref name="setAddress" scoped="" ref="0x7f540cd34e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f540cd37b70" loc="61:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f540cd37b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f540cd36020"/>
        <function-ref name="getHeader" scoped="" ref="0x7f540cd361b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f540cd36340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f540cd3f1d0" loc="49:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f540cd3f1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540cd3f550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540cd32d30" loc="67:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540cd32d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540cd310e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540cd31270"/>
        <function-ref name="led1On" scoped="" ref="0x7f540cd31400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540cd31590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540cd31720"/>
        <function-ref name="get" scoped="" ref="0x7f540cd318b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540cd31a40"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540cd301b0"/>
        <function-ref name="set" scoped="" ref="0x7f540cd31bd0"/>
        <function-ref name="led0On" scoped="" ref="0x7f540cd31d60"/>
        <function-ref name="led2On" scoped="" ref="0x7f540cd30020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f540cd3e430" loc="51:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f540cd3e430"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f540cd3e7b0"/>
        <function-ref name="source" scoped="" ref="0x7f540cd3e940"/>
        <function-ref name="address" scoped="" ref="0x7f540cd3ead0"/>
        <function-ref name="destination" scoped="" ref="0x7f540cd3ec60"/>
        <function-ref name="setSource" scoped="" ref="0x7f540cd3edf0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f540cd3d020"/>
        <function-ref name="type" scoped="" ref="0x7f540cd3d1b0"/>
        <function-ref name="setType" scoped="" ref="0x7f540cd3d340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f540cd3d4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f540cd3d660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f540cd3d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioResource" ref="0x7f540cd320f0" loc="66:../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioResource" scoped="" ref="0x7f540cd320f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540cd32470"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540cd32600"/>
        <function-ref name="request" scoped="" ref="0x7f540cd32790"/>
        <function-ref name="granted" scoped="" ref="0x7f540cd32920"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540cd32ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f540cca85c0" loc="46:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f540cca85c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f540cca8940"/>
        <function-ref name="stopDone" scoped="" ref="0x7f540cca8ad0"/>
        <function-ref name="start" scoped="" ref="0x7f540cca8c60"/>
        <function-ref name="stop" scoped="" ref="0x7f540cca8df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f540cca5600" loc="47:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f540cca5600"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cca5980"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cca5b10"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cca5ca0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cca5e30"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cca4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f540cca4e10" loc="49:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f540cca4e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540cca31c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f540cca3350"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cca34e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cca3670"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f540cca3800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f540cca4800" loc="48:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f540cca4800"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540cca4b80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540cca1b20" loc="53:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540cca1b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540cca0020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540cca01b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f540cca0340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540cca04d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540cca0660"/>
        <function-ref name="get" scoped="" ref="0x7f540cca07f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540cca0980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540cc9f020"/>
        <function-ref name="set" scoped="" ref="0x7f540cca0b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f540cca0ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f540cca0e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f540cca11a0" loc="51:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f540cca11a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f540cca1520"/>
        <function-ref name="noAck" scoped="" ref="0x7f540cca16b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f540cca1840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f540cca3ab0" loc="50:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f540cca3ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f540cca3e30"/>
        <function-ref name="source" scoped="" ref="0x7f540cca2020"/>
        <function-ref name="address" scoped="" ref="0x7f540cca21b0"/>
        <function-ref name="destination" scoped="" ref="0x7f540cca2340"/>
        <function-ref name="setSource" scoped="" ref="0x7f540cca24d0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f540cca2660"/>
        <function-ref name="type" scoped="" ref="0x7f540cca27f0"/>
        <function-ref name="setType" scoped="" ref="0x7f540cca2980"/>
        <function-ref name="isForMe" scoped="" ref="0x7f540cca2b10"/>
        <function-ref name="setGroup" scoped="" ref="0x7f540cca2ca0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f540cca2e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f540cc42120" loc="54:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f540cc42120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cc424a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cc42630"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cc427c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cc42950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cc42ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f540cc42d70" loc="55:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f540cc42d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540cc41180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f540cc47110" loc="47:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f540cc47110"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cc474b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cc47640"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cc477d0"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cc47960"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cc47af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f540cc44a40" loc="50:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f540cc44a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f540cc44dc0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f540cc43020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cc431b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cc43340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f540cc434d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f540cc47e70" loc="48:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f540cc47e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540cc45240"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f540cc43720" loc="51:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f540cc43720"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f540cc43aa0"/>
        <function-ref name="noAck" scoped="" ref="0x7f540cc43c30"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f540cc43dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f540cc45490" loc="49:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f540cc45490"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f540cc45810"/>
        <function-ref name="source" scoped="" ref="0x7f540cc459a0"/>
        <function-ref name="address" scoped="" ref="0x7f540cc45b30"/>
        <function-ref name="destination" scoped="" ref="0x7f540cc45cc0"/>
        <function-ref name="setSource" scoped="" ref="0x7f540cc45e50"/>
        <function-ref name="setDestination" scoped="" ref="0x7f540cc44020"/>
        <function-ref name="type" scoped="" ref="0x7f540cc441b0"/>
        <function-ref name="setType" scoped="" ref="0x7f540cc44340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f540cc444d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f540cc44660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f540cc447f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f540cc3d8d0" loc="50:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f540cc3d8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f540cc3dc50"/>
        <function-ref name="stopDone" scoped="" ref="0x7f540cc3dde0"/>
        <function-ref name="start" scoped="" ref="0x7f540cc3c020"/>
        <function-ref name="stop" scoped="" ref="0x7f540cc3c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f540cc3b480" loc="52:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f540cc3b480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f540e0b8960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cc3b800"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540cc3b990"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cc3bb20"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cc3bcb0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cc3be40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540cc3d280" loc="49:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540cc3d280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540cc3d600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f540cc3c940" loc="51:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f540cc3c940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f540e0b8960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540cc3ccc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540cc38dc0" loc="56:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540cc38dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540cc37180"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540cc37310"/>
        <function-ref name="led1On" scoped="" ref="0x7f540cc374a0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540cc37630"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540cc377c0"/>
        <function-ref name="get" scoped="" ref="0x7f540cc37950"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540cc37ae0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540cc341b0"/>
        <function-ref name="set" scoped="" ref="0x7f540cc37c70"/>
        <function-ref name="led0On" scoped="" ref="0x7f540cc37e00"/>
        <function-ref name="led2On" scoped="" ref="0x7f540cc34020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7f540cc384a0" loc="55:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f540cc384a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f540e0b8960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f540cc38820"/>
        <function-ref name="offset" scoped="" ref="0x7f540cc389b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f540cc38b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f540cc302f0" loc="66:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f540cc302f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f540cc30670"/>
        <function-ref name="stopDone" scoped="" ref="0x7f540cc30800"/>
        <function-ref name="start" scoped="" ref="0x7f540cc30990"/>
        <function-ref name="stop" scoped="" ref="0x7f540cc30b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7f540cbcae40" loc="332:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x7f540cbcae40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540cbc81e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f540cbc8370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f540cc1f060" loc="74:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f540cc1f060"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f540cc1f3e0"/>
        <function-ref name="stop" scoped="" ref="0x7f540cc1f570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7f540cc01d10" loc="191:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x7f540cc01d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540cc000e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f540cc00270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540cc34c60" loc="65:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540cc34c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540cc30020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7f540cc1cc50" loc="75:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x7f540cc1cc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7f540cc1e020"/>
        <function-ref name="flush" scoped="" ref="0x7f540cc1e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7f540cbcc400" loc="322:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x7f540cbcc400"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540cbcc780"/>
        <function-ref name="runTask" scoped="" ref="0x7f540cbcc910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7f540cc208e0" loc="72:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f540cc208e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f540cc20c60"/>
        <function-ref name="resetSend" scoped="" ref="0x7f540cc20df0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f540cc2d020"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f540cc2d1b0"/>
        <function-ref name="putData" scoped="" ref="0x7f540cc2d340"/>
        <function-ref name="putDone" scoped="" ref="0x7f540cc2d4d0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f540cc2d660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540cc2d8e0" loc="73:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540cc2d8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540cc2dc60"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540cc2ddf0"/>
        <function-ref name="led1On" scoped="" ref="0x7f540cc25020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540cc251b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540cc25340"/>
        <function-ref name="get" scoped="" ref="0x7f540cc254d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540cc25660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540cc25ca0"/>
        <function-ref name="set" scoped="" ref="0x7f540cc257f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f540cc25980"/>
        <function-ref name="led2On" scoped="" ref="0x7f540cc25b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7f540cbc50c0" loc="341:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f540cbc50c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540cbc5440"/>
        <function-ref name="runTask" scoped="" ref="0x7f540cbc55d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7f540cc2a130" loc="67:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f540cc2a130"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f540cc2a4b0"/>
        <function-ref name="nextByte" scoped="" ref="0x7f540cc2a640"/>
        <function-ref name="startSend" scoped="" ref="0x7f540cc2a7d0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f540cc2a960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7f540cc265c0" loc="68:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f540cc265c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f540cc26940"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f540cc26ad0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f540cc26c60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7f540cafbc50" loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x7f540cafbc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540cafa020"/>
        <function-ref name="runTask" scoped="" ref="0x7f540cafa1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f540caff830" loc="51:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f540caff830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f540e0b8960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540caffbd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f540caffd60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f540cafe020"/>
        <function-ref name="cancel" scoped="" ref="0x7f540cafe1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cafe340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7f540cafa480" loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x7f540cafa480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540cafa800"/>
        <function-ref name="runTask" scoped="" ref="0x7f540cafa990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f540caff110" loc="50:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f540caff110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f540e0b8960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f540caff4b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7f540cafe760" loc="54:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x7f540cafe760"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f540e0b8960"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f540cafeb00"/>
        <function-ref name="offset" scoped="" ref="0x7f540cafec90"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f540cafee20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540cafc590" loc="57:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540cafc590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540cafc910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540cafcaa0"/>
        <function-ref name="led1On" scoped="" ref="0x7f540cafcc30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540cafcdc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540cafb020"/>
        <function-ref name="get" scoped="" ref="0x7f540cafb1b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540cafb340"/>
        <function-ref name="led2On" scoped="" ref="0x7f540cafb980"/>
        <function-ref name="set" scoped="" ref="0x7f540cafb660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540cafb4d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f540cafb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7f540cafd9d0" loc="56:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f540cafd9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f540cafdd50"/>
        <function-ref name="nextByte" scoped="" ref="0x7f540cafc020"/>
        <function-ref name="startSend" scoped="" ref="0x7f540cafc1b0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f540cafc340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7f540cafd0e0" loc="55:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f540cafd0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f540cafd460"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f540cafd5f0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f540cafd780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7f540caead20" loc="50:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f540caead20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540caf40e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f540caf4270"/>
        <function-ref name="receive" scoped="" ref="0x7f540caf4400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f540caf4590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f540caf4720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f540caf48b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540caf4a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7f540caf8b60" loc="48:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f540caf8b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f540caf5020"/>
        <function-ref name="resetSend" scoped="" ref="0x7f540caf51b0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f540caf5340"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f540caf54d0"/>
        <function-ref name="putData" scoped="" ref="0x7f540caf5660"/>
        <function-ref name="putDone" scoped="" ref="0x7f540caf57f0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f540caf5980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540caf4cc0" loc="51:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540caf4cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540caf30a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540caf3230"/>
        <function-ref name="led1On" scoped="" ref="0x7f540caf33c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540caf3550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540caf36e0"/>
        <function-ref name="get" scoped="" ref="0x7f540caf3870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540caf3a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540cae71b0"/>
        <function-ref name="set" scoped="" ref="0x7f540caf3b90"/>
        <function-ref name="led0On" scoped="" ref="0x7f540caf3d20"/>
        <function-ref name="led2On" scoped="" ref="0x7f540cae7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f540cacb020" loc="6:../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f540cacb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cacb3a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f540cacb530"/>
        <function-ref name="receive" scoped="" ref="0x7f540cacb6c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f540cacb850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f540cacd890" loc="5:../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f540cacd890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cacdc10"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f540cacdda0"/>
        <function-ref name="receive" scoped="" ref="0x7f540cacc020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f540cacc1b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f540cacc340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f540cacc4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cacc660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f540cacd080" loc="4:../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f540cacd080"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f540cacd400"/>
        <function-ref name="stop" scoped="" ref="0x7f540cacd590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f540c938c70" loc="45:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f540c938c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f540c937020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540c9371b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f540c936440" loc="47:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f540c936440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540c9367c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f540c936950"/>
        <function-ref name="receive" scoped="" ref="0x7f540c936ae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f540c936c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f540c935020" loc="49:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f540c935020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f540c9353a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f540c937440" loc="46:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f540c937440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540c9377c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f540c937950"/>
        <function-ref name="receive" scoped="" ref="0x7f540c937ae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f540c937c70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f540c937e00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f540c936020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540c9361b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540c938020" loc="44:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540c938020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540c9383a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540c938530"/>
        <function-ref name="request" scoped="" ref="0x7f540c9386c0"/>
        <function-ref name="granted" scoped="" ref="0x7f540c938850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540c9389e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f540cabba30" loc="42:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540cabba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f540cabbdb0"/>
        <function-ref name="configure" scoped="" ref="0x7f540cab9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f540cab7020" loc="44:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f540cab7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cab73a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f540cab7530"/>
        <function-ref name="receive" scoped="" ref="0x7f540cab76c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f540cab7850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f540cab4450" loc="47:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f540cab4450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f540cab47d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f540cab9860" loc="43:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f540cab9860"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540cab9be0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f540cab9d70"/>
        <function-ref name="receive" scoped="" ref="0x7f540cab8020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f540cab81b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f540cab8340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f540cab84d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540cab8660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f540cab61d0" loc="46:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f540cab61d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540cab6550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540cab66e0"/>
        <function-ref name="request" scoped="" ref="0x7f540cab6870"/>
        <function-ref name="granted" scoped="" ref="0x7f540cab6a00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540cab6b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540cabc7a0" loc="41:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540cabc7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540cabcb20"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540cabccb0"/>
        <function-ref name="request" scoped="" ref="0x7f540cabce40"/>
        <function-ref name="granted" scoped="" ref="0x7f540cabb020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540cabb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f540cab31d0" loc="48:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f540cab31d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540cab3550"/>
        <function-ref name="txDone" scoped="" ref="0x7f540cab36e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f540ca48dc0" loc="47:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540ca48dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f540ca47180"/>
        <function-ref name="configure" scoped="" ref="0x7f540ca47310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f540ca46890" loc="49:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f540ca46890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540ca46c30"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f540ca46dc0"/>
        <function-ref name="receive" scoped="" ref="0x7f540ca45020"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f540ca451b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f540ca443e0" loc="52:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f540ca443e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f540ca44780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f540ca44a50" loc="53:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f540ca44a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f540ca44dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f540ca42020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f540ca421b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f540ca42340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f540ca424d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f540ca42660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f540ca427f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f540ca42980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f540ca42b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f540ca42ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f540ca42e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f540ca41020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f540ca411b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f540ca41440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f540ca415d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f540ca41760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f540ca418f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f540ca41a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f540ca41c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f540ca41da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f540ca40020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f540ca401b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f540ca40340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f540ca404d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540ca40660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f540ca409f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f540ca40b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f540ca40d10"/>
        <function-ref name="tx" scoped="" ref="0x7f540ca3f020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f540ca3f1b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f540ca3f340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f540ca3f4d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f540ca3f660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f540ca3f7f0"/>
        <function-ref name="rx" scoped="" ref="0x7f540ca3f980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f540ca3fb10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f540ca3fca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f540ca3fe30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f540ca3e020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f540ca3e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f540ca476d0" loc="48:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f540ca476d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f540ca47a70"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f540ca47c00"/>
        <function-ref name="receive" scoped="" ref="0x7f540ca47d90"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f540ca46020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f540ca461b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f540ca46340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f540ca464d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f540ca3d020" loc="55:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f540ca3d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540ca3de30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540ca3c800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540ca3c340"/>
        <function-ref name="overflow" scoped="" ref="0x7f540ca3ccc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f540ca455b0" loc="51:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f540ca455b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540ca45950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540ca45ae0"/>
        <function-ref name="request" scoped="" ref="0x7f540ca45c70"/>
        <function-ref name="granted" scoped="" ref="0x7f540ca45e00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540ca44020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540ca48020" loc="46:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540ca48020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540ca483c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540ca48550"/>
        <function-ref name="request" scoped="" ref="0x7f540ca486e0"/>
        <function-ref name="granted" scoped="" ref="0x7f540ca48870"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540ca48a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f540ca3e5b0" loc="54:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f540ca3e5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540ca3e950"/>
        <function-ref name="txDone" scoped="" ref="0x7f540ca3eae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540ca3b120" loc="56:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540ca3b120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540ca3b4a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540ca3b630"/>
        <function-ref name="led1On" scoped="" ref="0x7f540ca3b7c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540ca3b950"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540ca3bae0"/>
        <function-ref name="get" scoped="" ref="0x7f540ca3bc70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540ca3be00"/>
        <function-ref name="led2On" scoped="" ref="0x7f540ca3a4d0"/>
        <function-ref name="set" scoped="" ref="0x7f540ca3a1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540ca3a020"/>
        <function-ref name="led0On" scoped="" ref="0x7f540ca3a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f540ca2a860" loc="78:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f540ca2a860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540ca2abe0"/>
        <function-ref name="txDone" scoped="" ref="0x7f540ca2ad70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f540ca2e500" loc="76:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f540ca2e500"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f540ca2e880"/>
        <function-ref name="stop" scoped="" ref="0x7f540ca2ea10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f540ca2ed30" loc="77:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f540ca2ed30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f540ca310e0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f540ca31270"/>
        <function-ref name="setUctl" scoped="" ref="0x7f540ca31400"/>
        <function-ref name="enableUart" scoped="" ref="0x7f540ca31590"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f540ca31720"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f540ca318b0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f540ca31a40"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f540ca31bd0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f540ca31d60"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f540ca30020"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f540ca301b0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f540ca30340"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f540ca304d0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f540ca30760"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f540ca308f0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f540ca30a80"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f540ca30c10"/>
        <function-ref name="isUart" scoped="" ref="0x7f540ca30da0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f540ca2c020"/>
        <function-ref name="isSpi" scoped="" ref="0x7f540ca2c1b0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f540ca2c340"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f540ca2c4d0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f540ca2c660"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f540ca2c7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540ca2c980"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f540ca2cd10"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f540ca2b020"/>
        <function-ref name="setUbr" scoped="" ref="0x7f540ca2b1b0"/>
        <function-ref name="tx" scoped="" ref="0x7f540ca2b340"/>
        <function-ref name="getUctl" scoped="" ref="0x7f540ca2b4d0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f540ca2b660"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f540ca2b7f0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f540ca2b980"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f540ca2bb10"/>
        <function-ref name="rx" scoped="" ref="0x7f540ca2bca0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f540ca2be30"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f540ca2a020"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f540ca2a1b0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f540ca2a340"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f540ca2a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f540ca1c890" loc="66:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f540ca1c890"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ca1cc10"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ca1cda0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ca1b020"/>
        <function-ref name="clr" scoped="" ref="0x7f540ca1ac10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ca1b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ca1b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ca1b660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ca1b7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ca1b980"/>
        <function-ref name="get" scoped="" ref="0x7f540ca1bb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ca1bca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ca1be30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ca1a020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ca1a2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ca1a440"/>
        <function-ref name="set" scoped="" ref="0x7f540ca1a5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ca1a760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ca1b1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ca1a8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ca1aa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f540ca21020" loc="62:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f540ca21020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540ca213a0"/>
        <function-ref name="txDone" scoped="" ref="0x7f540ca21530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f540ca19020" loc="67:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f540ca19020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ca193a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ca19530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ca196c0"/>
        <function-ref name="clr" scoped="" ref="0x7f540ca174d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ca199e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ca19b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ca19d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ca18020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ca181b0"/>
        <function-ref name="get" scoped="" ref="0x7f540ca18340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ca184d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ca18660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ca187f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ca18a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ca18c10"/>
        <function-ref name="set" scoped="" ref="0x7f540ca18da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ca17020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ca19850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ca171b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ca17340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f540ca17890" loc="68:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f540ca17890"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ca17c10"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ca17da0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ca16020"/>
        <function-ref name="clr" scoped="" ref="0x7f540ca15c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ca16340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ca164d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ca16660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ca167f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ca16980"/>
        <function-ref name="get" scoped="" ref="0x7f540ca16b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ca16ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ca16e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ca15020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ca152b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ca15440"/>
        <function-ref name="set" scoped="" ref="0x7f540ca155d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ca15760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ca161b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ca158f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ca15a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f540ca263c0" loc="61:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f540ca263c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f540ca26740"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f540ca268d0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f540ca26a60"/>
        <function-ref name="enableUart" scoped="" ref="0x7f540ca26bf0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f540ca26d80"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f540ca25020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f540ca251b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f540ca25340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f540ca254d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f540ca25660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f540ca257f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f540ca25980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f540ca25b10"/>
        <function-ref name="getUbr" scoped="" ref="0x7f540ca25da0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f540ca24020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f540ca241b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f540ca24340"/>
        <function-ref name="isUart" scoped="" ref="0x7f540ca244d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f540ca24660"/>
        <function-ref name="isSpi" scoped="" ref="0x7f540ca247f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f540ca24980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f540ca24b10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f540ca24ca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f540ca24e30"/>
        <function-ref name="getMode" scoped="" ref="0x7f540ca23020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f540ca233b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f540ca23540"/>
        <function-ref name="setUbr" scoped="" ref="0x7f540ca236d0"/>
        <function-ref name="tx" scoped="" ref="0x7f540ca23860"/>
        <function-ref name="getUctl" scoped="" ref="0x7f540ca239f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f540ca23b80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f540ca23d10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f540ca22020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f540ca221b0"/>
        <function-ref name="rx" scoped="" ref="0x7f540ca22340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f540ca224d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f540ca22660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f540ca227f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f540ca22980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f540ca22b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f540ca299c0" loc="60:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f540ca299c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f540ca29d40"/>
        <function-ref name="stop" scoped="" ref="0x7f540ca26020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f540ca1e020" loc="65:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f540ca1e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ca1e3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ca1e530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ca1e6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f540ca1c4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ca1e9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ca1eb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ca1ed00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ca1d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ca1d1b0"/>
        <function-ref name="get" scoped="" ref="0x7f540ca1d340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ca1d4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ca1d660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ca1d7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ca1da80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ca1dc10"/>
        <function-ref name="set" scoped="" ref="0x7f540ca1dda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ca1c020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ca1e850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ca1c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ca1c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f540ca218f0" loc="64:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f540ca218f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f540ca21c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f540ca21e00"/>
        <function-ref name="setResistor" scoped="" ref="0x7f540ca20020"/>
        <function-ref name="clr" scoped="" ref="0x7f540ca1fc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f540ca20340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f540ca204d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f540ca20660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f540ca207f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f540ca20980"/>
        <function-ref name="get" scoped="" ref="0x7f540ca20b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f540ca20ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f540ca20e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f540ca1f020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f540ca1f2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f540ca1f440"/>
        <function-ref name="set" scoped="" ref="0x7f540ca1f5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f540ca1f760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f540ca201b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f540ca1f8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f540ca1fa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f540c9987b0" loc="43:../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f540c9987b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f540dcff020"/>
            <typename><typedef-ref name="T32khz" ref="0x7f540dcff390"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f540c995620"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f540c993020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f540c995ae0"/>
        <function-ref name="overflow" scoped="" ref="0x7f540c9934e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f540bf69a90" loc="43:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f540bf69a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f540bf69e10"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540bf68020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f540bf63be0" loc="48:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540bf63be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f540bf61020"/>
        <function-ref name="configure" scoped="" ref="0x7f540bf611b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f540bf63440" loc="46:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f540bf63440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540bf637c0"/>
        <function-ref name="txDone" scoped="" ref="0x7f540bf63950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540bf6ae00" loc="42:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540bf6ae00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540bf691c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540bf69350"/>
        <function-ref name="request" scoped="" ref="0x7f540bf694e0"/>
        <function-ref name="granted" scoped="" ref="0x7f540bf69670"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540bf69800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f540bf68a50" loc="45:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f540bf68a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f540bf68dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f540bf67020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f540bf671b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f540bf67340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f540bf674d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f540bf67660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f540bf677f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f540bf67980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f540bf67b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f540bf67ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f540bf67e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f540bf66020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f540bf661b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f540bf66440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f540bf665d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f540bf66760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f540bf668f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f540bf66a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f540bf66c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f540bf66da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f540bf65020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f540bf651b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f540bf65340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f540bf654d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f540bf65660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f540bf659f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f540bf65b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f540bf65d10"/>
        <function-ref name="tx" scoped="" ref="0x7f540bf64020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f540bf641b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f540bf64340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f540bf644d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f540bf64660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f540bf647f0"/>
        <function-ref name="rx" scoped="" ref="0x7f540bf64980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f540bf64b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f540bf64ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f540bf64e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f540bf63020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f540bf631b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f540bf682b0" loc="44:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540bf682b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540bf68630"/>
        <function-ref name="userId" scoped="" ref="0x7f540bf687c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f540c97a510" loc="42:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f540c97a510"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f540c97a890"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540c97aa20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f540c979af0" loc="45:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540c979af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f540c979e70"/>
        <function-ref name="configure" scoped="" ref="0x7f540c978030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f540c97d510" loc="40:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f540c97d510"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540c97d890"/>
        <function-ref name="txDone" scoped="" ref="0x7f540c97da20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540c97c280" loc="41:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540c97c280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540c97c600"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540c97c790"/>
        <function-ref name="request" scoped="" ref="0x7f540c97c920"/>
        <function-ref name="granted" scoped="" ref="0x7f540c97cab0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540c97cc40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f540c97ad20" loc="43:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540c97ad20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540c9790e0"/>
        <function-ref name="userId" scoped="" ref="0x7f540c979270"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f540c975120" loc="43:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540c975120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540c9754a0"/>
        <function-ref name="userId" scoped="" ref="0x7f540c975630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f540c977230" loc="39:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f540c977230"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540c9775d0"/>
        <function-ref name="txDone" scoped="" ref="0x7f540c977760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f540c976ad0" loc="42:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f540c976ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540c976e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f540c977b60" loc="40:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f540c977b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f540c976020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f540c9762f0" loc="41:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f540c9762f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f540c976670"/>
        <function-ref name="txDone" scoped="" ref="0x7f540c976800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f540c971bd0" loc="59:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f540c971bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f540c970020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540c9701b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f540c96f950" loc="64:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540c96f950"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f540c96fcf0"/>
        <function-ref name="configure" scoped="" ref="0x7f540c96fe80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f540c970400" loc="60:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f540c970400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540c970780"/>
        <function-ref name="requested" scoped="" ref="0x7f540c970910"/>
        <function-ref name="granted" scoped="" ref="0x7f540c970aa0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540c970c30"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540c970dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540c973e30" loc="58:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540c973e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540c971210"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540c9713a0"/>
        <function-ref name="request" scoped="" ref="0x7f540c971530"/>
        <function-ref name="granted" scoped="" ref="0x7f540c9716c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540c971850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f540c96e0f0" loc="65:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f540c96e0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540c96e470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f540c96f060" loc="61:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540c96f060"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540c96f3e0"/>
        <function-ref name="userId" scoped="" ref="0x7f540c96f570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f540bef4020" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f540bef4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f540bef43a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f540bef4630" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f540bef4630"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f540bef49b0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f540bef4b40"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f540bef4cd0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f540bef4e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f540bef06c0" loc="99:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f540bef06c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f540bef0a60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540bef0bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f540beee9d0" loc="105:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f540beee9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f540beeed70"/>
        <function-ref name="configure" scoped="" ref="0x7f540beed020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f540beed2b0" loc="106:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f540beed2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f540beed630"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f540beed7c0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f540beed950"/>
        <function-ref name="dequeue" scoped="" ref="0x7f540beedae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f540bef0e40" loc="100:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f540bef0e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540beef1e0"/>
        <function-ref name="requested" scoped="" ref="0x7f540beef370"/>
        <function-ref name="granted" scoped="" ref="0x7f540beef500"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540beef690"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540beef820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f540beedd30" loc="107:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f540beedd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f540beec0e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f540beec270"/>
        <function-ref name="led1On" scoped="" ref="0x7f540beec400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f540beec590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f540beec720"/>
        <function-ref name="get" scoped="" ref="0x7f540beec8b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f540beeca40"/>
        <function-ref name="led0On" scoped="" ref="0x7f540beeb1b0"/>
        <function-ref name="set" scoped="" ref="0x7f540beecd60"/>
        <function-ref name="led2On" scoped="" ref="0x7f540beecbd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f540beeb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f540bef1850" loc="98:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540bef1850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540bef1bf0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540bef1d80"/>
        <function-ref name="request" scoped="" ref="0x7f540bef0020"/>
        <function-ref name="granted" scoped="" ref="0x7f540bef01b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540bef0340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f540beee2d0" loc="104:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f540beee2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540beee650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f540beefa70" loc="101:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540beefa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540beefdf0"/>
        <function-ref name="userId" scoped="" ref="0x7f540beee020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f540beeb480" loc="155:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f540beeb480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f540beeb800"/>
        <function-ref name="runTask" scoped="" ref="0x7f540beeb990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f540c968780" loc="72:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f540c968780"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f540c968b00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f540c968d50" loc="73:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f540c968d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540c951100"/>
        <function-ref name="requested" scoped="" ref="0x7f540c951290"/>
        <function-ref name="granted" scoped="" ref="0x7f540c951420"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540c9515b0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540c951740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7f540c968020" loc="70:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f540c968020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f540c9683a0"/>
        <function-ref name="stop" scoped="" ref="0x7f540c968530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f540c951990" loc="74:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540c951990"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540c951d10"/>
        <function-ref name="userId" scoped="" ref="0x7f540c950020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f540beb6e00" loc="62:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f540beb6e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f540beb51c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f540beb5410" loc="63:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f540beb5410"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540beb5790"/>
        <function-ref name="requested" scoped="" ref="0x7f540beb5920"/>
        <function-ref name="granted" scoped="" ref="0x7f540beb5ab0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540beb5c40"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f540beb5dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7f540beb66a0" loc="60:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f540beb66a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f540beb6a20"/>
        <function-ref name="stop" scoped="" ref="0x7f540beb6bb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f540beb4060" loc="64:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f540beb4060"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f540beb43e0"/>
        <function-ref name="userId" scoped="" ref="0x7f540beb4570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7f540c9318e0" loc="3:../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f540c9318e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f540c931c60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f540c930020" loc="4:../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f540c930020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f540c9303a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f540c930530"/>
        <function-ref name="request" scoped="" ref="0x7f540c9306c0"/>
        <function-ref name="granted" scoped="" ref="0x7f540c930850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f540c9309e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f540c931080" loc="2:../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f540c931080"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f540c931400"/>
        <function-ref name="stop" scoped="" ref="0x7f540c931590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7f540c91ea30" loc="47:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x7f540c91ea30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f540c91edb0"/>
        <function-ref name="offset" scoped="" ref="0x7f540c91b020"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f540c91b1b0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../tos/interfaces/Init.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f540e163640" loc="62:../../tos/interfaces/Init.nc">
        <documentation loc="53:../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f540e164270" loc="60:../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Platform" loc="51:../../tos/interfaces/Platform.nc">
      <function command="" provided="0" name="jiffiesRawSize" ref="0x7f540e15a7c0" loc="109:../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="node_id" ref="0x7f540e157660" loc="182:../../tos/interfaces/Platform.nc">
        <documentation loc="164:../../tos/interfaces/Platform.nc">
          <short>&#10; Platform dependent node id.</short>
          <long>&#10; Platform dependent node id.&#10;&#10; Get a Platform defined node id.  This will typically be a serial number&#10; or mac address.&#10;&#10; Platform define PLATFORM_SERIAL_NUM_SIZE determines the&#10; size.  If not defined defaults to 4 bytes (uint32_t).  But platforms&#10; really should define it to be clear.  (see platform.h)&#10;&#10; input:  *lenp      pointer where to place the length of the number.&#10;&#10; output: *lenp      length filled in if non-null.&#10; return: *uint8_t   pointer to the serial_num or NULL.&#10;&#10; a Node Id is assumed to be a sequence of bytes starting with the&#10; msb first.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lenp" ref="0x7f540e1573a0" loc="182:../../tos/interfaces/Platform.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRawSize" ref="0x7f540e15da00" loc="79:../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRaw" ref="0x7f540e15d270" loc="78:../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesExpired" ref="0x7f540e159610" loc="126:../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f540e159020" loc="126:../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f540e159380" loc="126:../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIntPriority" ref="0x7f540e158a60" loc="162:../../tos/interfaces/Platform.nc">
        <documentation loc="153:../../tos/interfaces/Platform.nc">
          <short>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.</short>
          <long>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.&#10;   modern computer hardware allows the assignment of different priorities&#10;   to interrupt sources.  This is inherently a platform thing.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="irq_number" ref="0x7f540e1587e0" loc="162:../../tos/interfaces/Platform.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set_unaligned_traps" ref="0x7f540e1580b0" loc="150:../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on_off" ref="0x7f540e159dc0" loc="150:../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesRaw" ref="0x7f540e15a020" loc="108:../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="localTime" ref="0x7f540e161a60" loc="64:../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsExpired" ref="0x7f540e15c7e0" loc="95:../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f540e15c1f0" loc="95:../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f540e15c550" loc="95:../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../tos/chips/msp430/Msp430ClockInit.nc">
      <documentation loc="33:../../tos/chips/msp430/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f540e1195b0" loc="48:../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f540e11b870" loc="43:../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f540e11ae60" loc="47:../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f540e11b190" loc="42:../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f540e11a020" loc="45:../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f540e11d350" loc="40:../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f540e11da30" loc="41:../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f540e11a740" loc="46:../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f540e2827e0" loc="62:../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f540e54a700"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f540e1a8a80" loc="85:../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f540e1a61f0" loc="86:../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f540e1a82b0" loc="79:../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f540e320020" loc="52:../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f540e8a6e80" loc="57:../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f540e608e20" loc="72:../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f540e608610" loc="65:../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f540e5fc770" loc="67:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event.&#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f540e5fa020" loc="75:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f540e0aa5c0" loc="113:../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f540e0aa340" loc="113:../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f540e0a8ab0" loc="138:../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f540e0a8830" loc="138:../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f540e0ab920" loc="104:../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f540e0aae10" loc="130:../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f540e057020" loc="78:../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
              <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540e058690" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f540e0589e0" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540e058d10" loc="78:../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f540e03e2a0" loc="177:../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f540e0ba210"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f540e03e020" loc="177:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f540e048d60" loc="88:../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f540e0ba5f0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f540e048ae0" loc="88:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f540e04a1f0" loc="68:../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f540e0ba5f0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f540e04acb0" loc="78:../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f540e0ba5f0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f540e04aa30" loc="78:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f540e0457a0" loc="121:../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f540e0ba5f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f540e0451c0" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f540e045510" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f540e0ba5f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f540e0472b0" loc="103:../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f540e0ba5f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f540e049c40" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f540e047020" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f540e0ba5f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f540e041bf0" loc="147:../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f540e041970" loc="147:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f540e03f020" loc="162:../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f540e0409a0" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f540e040cc0" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f540e0bbde0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f540e0439f0" loc="136:../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f540e043770" loc="136:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f540e03d730" loc="187:../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f540e0ba210"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f540e03d150" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f540e03d4a0" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f540e0ba210"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f540e03c580" loc="195:../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f540e0ba210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f540e0530b0" loc="65:../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540e05cdb0" loc="65:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f540e0522a0" loc="78:../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540e052020" loc="78:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f540e04f620" loc="126:../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540e04f020" loc="126:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540e04f350" loc="126:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f540e04e6d0" loc="106:../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f540e051730" loc="94:../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540e051170" loc="94:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540e0514a0" loc="94:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f540e02f020" loc="61:../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f540e02f7d0" loc="67:../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f540e02e020" loc="72:../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f540e02d020" loc="83:../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f540e02c7d0" loc="100:../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f540e02a020" loc="117:../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f540e02e7b0" loc="77:../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f540e02ab90" loc="134:../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f540e02a910" loc="134:../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f540e031850" loc="56:../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f540e02d800" loc="89:../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f540e02c020" loc="94:../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../tos/interfaces/AMSend.nc">
      <function command="" provided="0" name="send" ref="0x7f540e0632c0" loc="80:../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f540e0ba5f0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f540e0647e0" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f540e0ba5f0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f540e064b60" loc="80:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540e063020" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f540e05f970" loc="135:../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540e05f370" loc="135:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540e05f6a0" loc="135:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f540e05ea60" loc="123:../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f540e061630" loc="96:../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540e0613b0" loc="96:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f540e060b80" loc="110:../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540e0605a0" loc="110:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f540e0608f0" loc="110:../../tos/interfaces/AMSend.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f540dfcc730" loc="44:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f540dfcce60" loc="45:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f540dfce880" loc="42:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f540dfcbcf0" loc="47:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f540dfcc020" loc="43:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f540dfcb5b0" loc="46:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f540dfd1a90" loc="40:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f540dfce190" loc="41:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="45:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f540dfa17c0" loc="79:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="76:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f540dfa0020" loc="80:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f540df9cb10" loc="107:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="100:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f540df9c890" loc="107:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullUp" ref="0x7f540df9a5d0" loc="126:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f540dfa3020" loc="59:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="56:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f540df9f020" loc="86:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f540df9ad60" loc="134:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="129:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDriveStrength" ref="0x7f540df99860" loc="144:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="136:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short> &#10; Set port drive strength.</short>
          <long> &#10; Set port drive strength.&#10; @param mode: MSP430_PORT_DRIVE_STRENGTH_*&#10; @return EINVAL if invalid mode or pin doesn't support drive&#10;     strength config.&#10; FAIL if pin is not an output&#10; SUCCESS if pin supports it, is an output, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f540df995e0" loc="144:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f540dfa0760" loc="85:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f540dfa1020" loc="74:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="69:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getDriveStrength" ref="0x7f540df97190" loc="150:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="146:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get drive strength.</short>
          <long>&#10; Get drive strength.&#10; @return MSP430_PORT_DRIVE_STRENGTH_*&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f540df9d770" loc="97:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="94:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullDown" ref="0x7f540df9be30" loc="125:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f540dfa37c0" loc="67:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="61:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorOff" ref="0x7f540df9b3e0" loc="124:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="109:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; set resistor mode directly.</short>
          <long>&#10; set resistor mode directly.&#10;&#10; You have to know what you are doing when you use these.  These routines&#10; assume that the port is set for input (PxDIR).  The routines explicitly&#10; change the value of the bits setting in PxOUT.&#10;&#10; The advantage of using these routines is efficiency because there is no&#10; mode checking.  In addition, no error check is done to make sure that the&#10; port is in input mode.  The thing is, first, this is something that you&#10; get right once and then it doesn't change so why check and, second no&#10; one actually checks the error return because there really isn't any&#10; point to doing the check because this isn't something you actually need&#10; to check the return code for.  So why have one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f540dfa4020" loc="49:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="46:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f540df9f7a0" loc="91:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="88:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f540df9c020" loc="98:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f540df9d020" loc="92:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f540dfa4750" loc="54:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="51:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f540dcf21e0" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f540dcf21e0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f540dcf2420" loc="35:../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540dcf2420"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x7f540dced2a0" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540dcf2420"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dced020" loc="63:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7f540dcec430" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcec1b0" loc="70:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x7f540dcee020" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcf2d60" loc="49:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f540dcea740" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540dcf2420"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcea150" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f540dcea4b0" loc="78:../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540dcf2420"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x7f540dcde990" loc="65:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcde370" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x7f540dcde700" loc="65:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x7f540dcdcb30" loc="71:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcdc8b0" loc="71:../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x7f540dce0ae0" loc="57:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x7f540dce0120" loc="52:../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x7f540dce3e80" loc="52:../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f540dcf55f0" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcf5370" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f540dcf37d0" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcf3550" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f540dcf1940" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcf16c0" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioBackoff" loc="54:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
      <documentation loc="32:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <short>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.</short>
        <long>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.  &#10; &#10; This is because of fan-out issues with multiple components wanting to&#10; affect backoffs for whatever they're interested in:&#10; If you signal out an *event* to request an initial backoff and&#10; several components happen to be listening, then those components&#10; would be required to return a backoff value.  We don't want that&#10; behavior.&#10; With this strategy, components can listen for the requests and then&#10; decide if they want to affect the behavior.  If the component wants to&#10; affect the behavior, it calls back using the setXYZBackoff(..) command.&#10; If several components call back, then the last component to get its &#10; word in has the final say. &#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="requestCca" ref="0x7f540dcb56e0" loc="95:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="90:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on whether or not to use CCA on the outbound packet.</short>
          <long>&#10; Request for input on whether or not to use CCA on the outbound packet.&#10; Replies should come in the form of setCca(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcb5460" loc="95:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestInitialBackoff" ref="0x7f540dcb7980" loc="81:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="76:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; </short>
          <long>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcb7700" loc="81:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCongestionBackoff" ref="0x7f540dcb90b0" loc="66:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="62:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestCongestionBackoff event&#10; </short>
          <long>&#10; Must be called within a requestCongestionBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f540dcbadc0" loc="66:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInitialBackoff" ref="0x7f540dcba520" loc="60:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="56:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestInitialBackoff event&#10; </short>
          <long>&#10; Must be called within a requestInitialBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f540dcba2a0" loc="60:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCca" ref="0x7f540dcb9ae0" loc="73:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="68:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Enable CCA for the outbound packet.</short>
          <long>&#10; Enable CCA for the outbound packet.  Must be called within a requestCca&#10; event&#10; @param ccaOn TRUE to enable CCA, which is the default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ccaOn" ref="0x7f540dcb9860" loc="73:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestCongestionBackoff" ref="0x7f540dcb6860" loc="88:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="83:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; </short>
          <long>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcb65e0" loc="88:../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x7f540dca8020" loc="59:../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f540e0ba5f0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7f540dca98b0" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f540e0ba5f0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f540dca9c30" loc="59:../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Packet" loc="40:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
      <documentation loc="32:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <function command="" provided="0" name="setPower" ref="0x7f540dcc4420" loc="56:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="49:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Set transmission power for a given packet.</short>
          <long>&#10; Set transmission power for a given packet. Valid ranges are&#10; between 0 and 31.&#10;&#10; @param p_msg the message.&#10; @param power transmission power.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f540dcc5e10" loc="56:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="power" ref="0x7f540dcc4190" loc="56:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setNetwork" ref="0x7f540dcc0b20" loc="77:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f540dcc0520" loc="77:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="networkId" ref="0x7f540dcc0890" loc="77:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRssi" ref="0x7f540dcc2020" loc="64:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="58:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get rssi value for a given packet.</short>
          <long>&#10; Get rssi value for a given packet. For received packets, it is&#10; the received signal strength when receiving that packet. For sent&#10; packets, it is the received signal strength of the ack if an ack&#10; was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="signed char" size="I:1" alignment="I:1">
            <typename><typedef-ref name="int8_t" ref="0x7f540e89a110"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f540dcc4c80" loc="64:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNetwork" ref="0x7f540dcc1a30" loc="75:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f540dcc17b0" loc="75:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPower" ref="0x7f540dcc5610" loc="47:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="42:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get transmission power setting for current packet.</short>
          <long>&#10; Get transmission power setting for current packet.&#10;&#10; @param the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f540dcc5390" loc="47:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLqi" ref="0x7f540dcc2b50" loc="72:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="66:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get lqi value for a given packet.</short>
          <long>&#10; Get lqi value for a given packet. For received packets, it is the&#10; link quality indicator value when receiving that packet. For sent&#10; packets, it is the link quality indicator value of the ack if an&#10; ack was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f540dcc28d0" loc="72:../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x7f540dcad830" loc="65:../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcad5b0" loc="65:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x7f540dcb18f0" loc="46:../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcb12d0" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x7f540dcb1660" loc="46:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x7f540dcae810" loc="59:../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcae590" loc="59:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x7f540dcafd20" loc="53:../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcaf700" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x7f540dcafa90" loc="53:../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x7f540dcac810" loc="71:../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcac590" loc="71:../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x7f540dcbc430" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dcbc1b0" loc="47:../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../tos/interfaces/Send.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f540dc9b3c0" loc="75:../../tos/interfaces/Send.nc">
        <documentation loc="57:../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dca3dd0" loc="75:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540dc9b130" loc="75:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f540dc97970" loc="125:../../tos/interfaces/Send.nc">
        <documentation loc="115:../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dc97370" loc="125:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540dc976a0" loc="125:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f540dc96aa0" loc="112:../../tos/interfaces/Send.nc">
        <documentation loc="102:../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f540dc9a6c0" loc="89:../../tos/interfaces/Send.nc">
        <documentation loc="77:../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dc9a440" loc="89:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f540dc99b80" loc="100:../../tos/interfaces/Send.nc">
        <documentation loc="91:../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dc995a0" loc="100:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f540dc998f0" loc="100:../../tos/interfaces/Send.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f540dc9f270" loc="120:../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.&#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource&#10;&#10; @note This command should never be called between putting in a request&#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event,&#10;       we have opted to keep thing simple and warn you about the potential&#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f540dca0270" loc="97:../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f540dca18c0" loc="88:../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f540dca0a60" loc="102:../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f540dc9fcc0" loc="128:../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Transmit" loc="42:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
      <documentation loc="32:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <short>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f540dc763a0" loc="51:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="44:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send a message&#10;&#10; </short>
          <long>&#10; Send a message&#10;&#10; @param p_msg message to send.&#10; @param useCca TRUE if this Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f540dc7adc0" loc="51:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="useCca" ref="0x7f540dc76110" loc="51:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f540dc756a0" loc="65:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="60:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Cancel sending of the message.</short>
          <long>&#10; Cancel sending of the message.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="modify" ref="0x7f540dc72e70" loc="84:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="75:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Modify the contents of a packet.</short>
          <long>&#10; Modify the contents of a packet. This command can only be used&#10; when an SFD capture event for the sending packet is signalled.&#10;&#10; @param offset in the message to start modifying.&#10; @param buf to data to write&#10; @param len of bytes to write&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f540dc72060" loc="84:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f540dc728a0" loc="84:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540dc72bd0" loc="84:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f540dc73840" loc="73:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="67:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Signal that a message has been sent&#10;&#10; </short>
          <long>&#10; Signal that a message has been sent&#10;&#10; @param p_msg message to send.&#10; @param error notifaction of how the operation went.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f540dc73260" loc="73:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f540dc735b0" loc="73:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resend" ref="0x7f540dc76e30" loc="58:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="53:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send the previous message again&#10; </short>
          <long>&#10; Send the previous message again&#10; @param useCca TRUE if this re-Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="useCca" ref="0x7f540dc76bb0" loc="58:../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../tos/interfaces/Random.nc">
      <documentation loc="34:../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7f540dc6d0e0" loc="52:../../tos/interfaces/Random.nc">
        <documentation loc="48:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 16-bit pseudorandom number.</short>
          <long> &#10; Produces a 16-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7f540dc77860" loc="46:../../tos/interfaces/Random.nc">
        <documentation loc="42:../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f540dc80a40" loc="95:../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f540dc78270" loc="105:../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420PacketBody" loc="37:../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
      <documentation loc="32:../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <short>&#10; Internal interface for the CC2420 to get portions of a packet.</short>
        <long>&#10; Internal interface for the CC2420 to get portions of a packet.&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="getPayload" ref="0x7f540dc682e0" loc="49:../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="45:../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the payload region of the message, after any headers&#10;    works with extended addressing mode&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dc68020" loc="49:../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getHeader" ref="0x7f540dc69710" loc="42:../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="39:../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_header_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_header" ref="0x7f540e0a4de0"/>
              <typename><typedef-ref name="cc2420_header_t" ref="0x7f540e0a27d0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dc69410" loc="42:../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMetadata" ref="0x7f540dc66620" loc="53:../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="50:../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_metadata_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_metadata" ref="0x7f540e0a03b0"/>
              <typename><typedef-ref name="cc2420_metadata_t" ref="0x7f540e09fc60"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540dc66320" loc="53:../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Power" loc="42:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
      <documentation loc="32:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio power operations (e.g. voltage&#10; regulator, oscillator, etc). However, it does not include&#10; transmission power, see the CC2420Config interface.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="startOscillator" ref="0x7f540dc7e6e0" loc="71:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="65:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the oscillator.</short>
          <long>&#10; Start the oscillator. On SUCCESS, &#60;code>startOscillator&#60;/code>&#10; will be signalled when the oscillator has been started.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rfOff" ref="0x7f540dc7c840" loc="97:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="92:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Disable RX.</short>
          <long>&#10; Disable RX.&#10;&#10; @return SUCCESS if receive mode has been disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxOn" ref="0x7f540dc7c070" loc="90:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="85:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Enable RX.</short>
          <long>&#10; Enable RX.&#10;&#10; @return SUCCESS if receive mode has been enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startVReg" ref="0x7f540dc83e20" loc="51:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="44:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the voltage regulator on the CC2420.</short>
          <long>&#10; Start the voltage regulator on the CC2420. On SUCCESS,&#10; &#60;code>startVReg()&#60;/code> will be signalled when the voltage&#10; regulator is fully on.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopVReg" ref="0x7f540dc7fe80" loc="63:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="58:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the voltage regulator immediately.</short>
          <long>&#10; Stop the voltage regulator immediately.&#10;&#10; @return SUCCESS always&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startOscillatorDone" ref="0x7f540dc7d020" loc="76:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="73:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the oscillator has been started.</short>
          <long>&#10; Signals that the oscillator has been started.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopOscillator" ref="0x7f540dc7d840" loc="83:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="78:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the oscillator.</short>
          <long>&#10; Stop the oscillator.&#10;&#10; @return SUCCESS if the oscillator was stopped, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startVRegDone" ref="0x7f540dc7f6c0" loc="56:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="53:../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the voltage regulator has been started.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="State" loc="38:../../tos/interfaces/State.nc">
      <documentation loc="33:../../tos/interfaces/State.nc">
        <short>&#10; State machine interface&#10; </short>
        <long>&#10; State machine interface&#10; @author David Moss - dmm@rincon.com&#10;</long>
      </documentation>
      <function command="" provided="0" name="getState" ref="0x7f540dc61d00" loc="71:../../tos/interfaces/State.nc">
        <documentation loc="68:../../tos/interfaces/State.nc">
          <short>&#10; Get the current state&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toIdle" ref="0x7f540dc63350" loc="56:../../tos/interfaces/State.nc">
        <documentation loc="53:../../tos/interfaces/State.nc">
          <short>&#10; Set the current state back to S_IDLE&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isState" ref="0x7f540dc61530" loc="66:../../tos/interfaces/State.nc">
        <documentation loc="63:../../tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in the given state&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="myState" ref="0x7f540dc612b0" loc="66:../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isIdle" ref="0x7f540dc63ac0" loc="61:../../tos/interfaces/State.nc">
        <documentation loc="58:../../tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in S_IDLE&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requestState" ref="0x7f540dc64020" loc="45:../../tos/interfaces/State.nc">
        <documentation loc="40:../../tos/interfaces/State.nc">
          <short>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.</short>
          <long>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.&#10; @return SUCCESS if the state is change, FAIL if it isn't&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7f540dc6bc80" loc="45:../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="forceState" ref="0x7f540dc64ad0" loc="51:../../tos/interfaces/State.nc">
        <documentation loc="47:../../tos/interfaces/State.nc">
          <short>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.</short>
          <long>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7f540dc64850" loc="51:../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Config" loc="46:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
      <documentation loc="32:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio configurations. All get() and set()&#10; commands are single-phase. After setting some values, a call to&#10; sync() is required for the changes to propagate to the cc2420&#10; hardware chip. This interface allows setting multiple parameters&#10; before calling sync().&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/06/16 15:33:32 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="setAutoAck" ref="0x7f540dc06870" loc="106:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="100:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync must be called for acknowledgement changes to take effect&#10; </short>
          <long>&#10; Sync must be called for acknowledgement changes to take effect&#10; @param enableAutoAck TRUE to enable auto acknowledgements&#10; @param hwAutoAck TRUE to default to hardware auto acks, FALSE to&#10;     default to software auto acknowledgements&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAutoAck" ref="0x7f540dc06290" loc="106:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </variable>
          <variable name="hwAutoAck" ref="0x7f540dc065e0" loc="106:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAddressRecognitionEnabled" ref="0x7f540dc071f0" loc="93:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="90:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddressRecognition" ref="0x7f540dc09880" loc="87:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="81:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @param enableAddressRecognition TRUE to turn address recognition on&#10; @param useHwAddressRecognition TRUE to perform address recognition first&#10;     in hardware. This doesn't affect software address recognition. The&#10;     driver must sync with the chip after changing this value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAddressRecognition" ref="0x7f540dc09210" loc="87:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </variable>
          <variable name="useHwAddressRecognition" ref="0x7f540dc095f0" loc="87:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="syncDone" ref="0x7f540dc0fc10" loc="55:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f540dc0f990" loc="55:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAddressRecognitionDefault" ref="0x7f540dc07a70" loc="98:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="95:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is performed first in hardware.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShortAddr" ref="0x7f540dc0b730" loc="72:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f540dc0b4b0" loc="72:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f540dc0ed30" loc="61:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f540dc0eab0" loc="61:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAutoAckEnabled" ref="0x7f540dc05ae0" loc="117:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="114:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if auto acks are enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPanAddr" ref="0x7f540dc0a9c0" loc="78:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f540dc0a740" loc="78:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAutoAckDefault" ref="0x7f540dc052b0" loc="112:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="108:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if hardware auto acks are the default, FALSE if software&#10;     acks are the default&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getExtAddr" ref="0x7f540dc0c4d0" loc="66:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="63:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Get the long address of the radio: set in hardware&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7f540dce2e00"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7f540dcda5a0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShortAddr" ref="0x7f540dc0ccc0" loc="71:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="68:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the short address of the radio.</short>
          <long>&#10; Change the short address of the radio.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sync" ref="0x7f540dc0f1f0" loc="54:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="48:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync configuration changes with the radio hardware.</short>
          <long>&#10; Sync configuration changes with the radio hardware. This only&#10; applies to set commands below.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f540dc0e390" loc="60:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="57:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the channel of the radio, between 11 and 26&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPanAddr" ref="0x7f540dc0a020" loc="77:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="74:../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the PAN address of the radio.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../tos/interfaces/Read.nc">
      <documentation loc="33:../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10;&#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f540dc034a0" loc="49:../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f540dc034a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7f540dc03d60" loc="55:../../tos/interfaces/Read.nc">
        <documentation loc="50:../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10;&#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f540dbffac0" loc="63:../../tos/interfaces/Read.nc">
        <documentation loc="57:../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f540dc034a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f540dbff510" loc="63:../../tos/interfaces/Read.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </variable>
          <variable name="val" ref="0x7f540dbff830" loc="63:../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f540dc034a0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Register" loc="47:../../tos/chips/cc2420/interfaces/CC2420Register.nc">
      <documentation loc="33:../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <short>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio.</short>
        <long>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio. The return values (when appropriate) refer to the&#10; status byte returned on the CC2420 SO pin. A full list of RW&#10; registers can be found on page 61 of the CC2420 datasheet (rev&#10; 1.2). Page 25 of the same document describes the protocol for&#10; interacting with these registers over the CC2420 SPI bus.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f540dbd5c10" loc="55:../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="49:../../tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Read a 16-bit data word from the register.</short>
          <long>&#10; Read a 16-bit data word from the register.&#10;&#10; @param data pointer to place the register value.&#10; @return status byte from the read.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f540e0a5020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540dbd5990" loc="55:../../tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f540dbd3710" loc="63:../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="57:../../tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Write a 16-bit data word to the register.</short>
          <long>&#10; Write a 16-bit data word to the register.&#10; &#10; @param data value to write to register.&#10; @return status byte from the write.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f540e0a5020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540dbd3490" loc="63:../../tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalIeeeEui64" loc="43:../../tos/interfaces/LocalIeeeEui64.nc">
      <documentation loc="39:../../tos/interfaces/LocalIeeeEui64.nc">
        <short>&#10; Interface to read the 64-bit IEEE EUI.</short>
        <long>&#10; Interface to read the 64-bit IEEE EUI.&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="getId" ref="0x7f540dbf4c50" loc="48:../../tos/interfaces/LocalIeeeEui64.nc">
        <documentation loc="44:../../tos/interfaces/LocalIeeeEui64.nc">
          <short>&#10; Get the 64-bit IEEE EUI.</short>
          <long>&#10; Get the 64-bit IEEE EUI.&#10; @returns the 64-bit IEEE EUI type, defined in tos/types/IeeeEui64.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalIeeeEui64"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7f540dce2e00"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7f540dcda5a0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f540dbf0020" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f540dbf0020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f540dbf0260" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540dbf0260"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f540dbece00" loc="109:../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540dbf0260"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f540dbefe40" loc="78:../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f540dbec460" loc="103:../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540dbf0260"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540dbf0260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f540dbeee60" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540dbf0260"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f540dbec1d0" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540dbf0260"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f540dbee640" loc="88:../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f540dbeb620" loc="116:../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540dbf0260"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f540dbf0dc0" loc="66:../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540dbf0260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f540dbf0b40" loc="66:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540dbf0260"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f540dbef680" loc="73:../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x7f540dbdd560" loc="50:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f540e0ba5f0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x7f540dbdc4f0" loc="60:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x7f540dbddd40" loc="55:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f540e0ba210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x7f540dbdecd0" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f540e0ba210"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f540e0ba5f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x7f540dbde6f0" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f540e0ba210"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7f540dbdea40" loc="45:../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f540e0ba5f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Strobe" loc="44:../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
      <documentation loc="33:../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <short>&#10; Interface representing one of the CC2420 command strobe registers.</short>
        <long>&#10; Interface representing one of the CC2420 command strobe registers.&#10; Writing to one of these registers enacts a command on the CC2420,&#10; such as power-up, transmission, or clear a FIFO.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="strobe" ref="0x7f540dbd0e40" loc="53:../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <documentation loc="46:../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
          <short>&#10; Send a command strobe to the register.</short>
          <long>&#10; Send a command strobe to the register. The return value is the&#10; CC2420 status register. Table 5 on page 27 of the CC2420&#10; datasheet (v1.2) describes the contents of this register.&#10; &#10; @return Status byte from the CC2420.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Strobe"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f540e0a5020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Ram" loc="41:../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
      <documentation loc="32:../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <short>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f540dbdae80" loc="52:../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="43:../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Read data from a RAM.</short>
          <long>&#10; Read data from a RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f540e0a5020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f540dbda020" loc="52:../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f540dbda890" loc="52:../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f540dbdabe0" loc="52:../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f540dbd7610" loc="63:../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="54:../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Write data to RAM.</short>
          <long>&#10; Write data to RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f540e0a5020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f540dbd8770" loc="63:../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f540dbd7020" loc="63:../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f540dbd7370" loc="63:../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="43:../../tos/interfaces/GpioInterrupt.nc">
      <documentation loc="34:../../tos/interfaces/GpioInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.5 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f540dbe1c30" loc="68:../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="63:../../tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f540dbe1470" loc="61:../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="56:../../tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; </short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0x7f540dbe2ce0" loc="54:../../tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0x7f540dbe2420" loc="53:../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:../../tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="40:../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f540db16560" loc="41:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f540db15020" loc="42:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f540db16c60" loc="42:../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f540db15a00" loc="43:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f540db15780" loc="43:../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f540db13410" loc="44:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f540db13190" loc="44:../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f540db13b00" loc="46:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f540db233e0" loc="52:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f540db22c60" loc="55:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f540db229e0" loc="55:../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f540db23b10" loc="53:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f540db27650" loc="45:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f540db22270" loc="54:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f540db26570" loc="47:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f540db24cc0" loc="51:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f540db27de0" loc="46:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f540db26c80" loc="48:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f540db245c0" loc="50:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f540db24340" loc="50:../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f540db216a0" loc="56:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f540db21420" loc="56:../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f540db1bbc0" loc="74:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="58:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10;&#10; It has a predefined idea of what mode that capture should occur in.&#10; If that doesn't work for you, use setControl.&#10;&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; @param ccis configures which input channel to use.&#10;&#10; Msp430Timer.h has convenience definitions:&#10;&#10;     MSP430TIMER_CM_NONE,            MSP430TIMER_CCI_A&#10;     MSP430TIMER_CM_RISING,          MSP430TIMER_CCI_B&#10;     MSP430TIMER_CM_FALLING,         MSP430TIMER_CCI_GND&#10;     MSP430TIMER_CM_BOTH             MSP430TIMER_CCI_VCC&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f540db1b5f0" loc="74:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
          <variable name="ccis" ref="0x7f540db1b930" loc="74:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f540db28b60" loc="41:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f540e110550"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f540e10e020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f540db195c0" loc="76:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f540db184d0" loc="78:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f540db1cd30" loc="56:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="47:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short>&#10; Sets the time in compare mode.</short>
          <long>&#10; Sets the time in compare mode.&#10;&#10; setControlAsCompare has a predefined, hardcoded idea of&#10; how the control register should be set for doing a compare.&#10;&#10; Your mileage may vary and this may not work for you.   In&#10; which case you set use setControl.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f540db19d00" loc="77:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f540db1d350" loc="42:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f540db1dae0" loc="43:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f540db1c5a0" loc="45:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f540e110550"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f540e10e020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f540db1c320" loc="45:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f540e110550"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f540e10e020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="41:../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f540db02020" loc="45:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="42:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f540daff6a0" loc="85:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="76:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f540daff420" loc="85:../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f540dafe2a0" loc="92:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="87:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f540dafe020" loc="92:../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f540db00c10" loc="74:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="71:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f540db00350" loc="69:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="59:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f540db029d0" loc="57:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="47:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f540db02750" loc="57:../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f540dad41f0" loc="39:../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f540d983df0" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f540d983df0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f540d97e070" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540d97e070"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f540d97e990" loc="64:../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../tos/lib/timer/Counter.nc">
          <short>&#10; Return counter value.</short>
          <long>&#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540d97e070"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f540d97dad0" loc="76:../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f540d97d270" loc="71:../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../tos/lib/timer/Counter.nc">
          <short>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f540d97c270" loc="82:../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x7f540d8b1190" loc="54:../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f540d8af350" loc="66:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f540d8b1b30" loc="61:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f540d8b18b0" loc="61:../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x7f540d8b48f0" loc="53:../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Interrupt" loc="39:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
      <documentation loc="34:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f540d886070" loc="54:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="51:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.</short>
          <long> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f540d883b30" loc="85:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="82:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port.</short>
          <long>&#10; Signalled when an interrupt occurs on a port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f540d887880" loc="49:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="46:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Disables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Disables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0x7f540d8832a0" loc="80:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="69:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Sets whether the edge should be high to low or low to high.</short>
          <long>&#10; Sets whether the edge should be high to low or low to high.&#10;&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition.&#10;&#10; DEPRECATED.&#10;&#10; The if generates extra code that doesn't need to be there.   Replaced&#10; by edge{Rising,Falling}();&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0x7f540d883020" loc="80:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="edgeFalling" ref="0x7f540d8857d0" loc="67:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x7f540d8870e0" loc="44:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="41:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Enables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Enables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edgeRising" ref="0x7f540d885070" loc="66:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="63:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Sets rising or falling edge for the interrupt generation&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x7f540d886870" loc="61:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="56:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Gets the current input value of a port.</short>
          <long> &#10; Gets the current input value of a port.&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ChipSpiResource" loc="17:../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
      <documentation loc="2:../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <short>&#10; Interface for the SPI resource for an entire chip.</short>
        <long>&#10; Interface for the SPI resource for an entire chip.  The chip accesses&#10; the platform SPI resource one time, but can have multiple clients &#10; using the SPI bus on top.  When all of the clients are released, the&#10; chip will normally try to release itself from the platforms SPI bus.&#10; In some cases, this isn't desirable - so even though upper components&#10; aren't actively using the SPI bus, they can tell the chip to hold onto&#10; it so they can have immediate access when they need. &#10;&#10; Any component that aborts a release MUST attempt the release at a later&#10; time if they don't acquire and release the SPI bus naturally after the&#10; abort.&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="releasing" ref="0x7f540d731810" loc="24:../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="19:../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; The SPI bus is about to be automatically released.</short>
          <long>&#10; The SPI bus is about to be automatically released.  Modules that aren't&#10; using the SPI bus but still want the SPI bus to stick around must call&#10; abortRelease() within the event.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="abortRelease" ref="0x7f540d72f0e0" loc="31:../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="27:../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Abort the release of the SPI bus.</short>
          <long>&#10; Abort the release of the SPI bus.  This must be called only with the&#10; releasing() event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="attemptRelease" ref="0x7f540d72f920" loc="39:../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="33:../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Release the SPI bus if there are no objections&#10; </short>
          <long>&#10; Release the SPI bus if there are no objections&#10; @return SUCCESS if the SPI bus is released from the chip.&#10;      FAIL if the SPI bus is already in use.&#10;      EBUSY if some component aborted the release.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Fifo" loc="40:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
      <documentation loc="32:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <short>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="continueRead" ref="0x7f540d708420" loc="62:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="53:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Continue reading from the FIFO without having to send the address&#10; byte again.</short>
          <long>&#10; Continue reading from the FIFO without having to send the address&#10; byte again. The &#60;code>readDone&#60;/code> event will be signalled&#10; upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540d709e10" loc="62:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f540d708190" loc="62:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="writeDone" ref="0x7f540d703700" loc="91:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="84:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a write operation.</short>
          <long>&#10; Signals the completion of a write operation.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes written.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540d704d90" loc="91:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f540d703110" loc="91:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f540d703460" loc="91:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f540d704020" loc="82:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="73:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start writing the FIFO.</short>
          <long>&#10; Start writing the FIFO. The &#60;code>writeDone&#60;/code> event will be&#10; signalled upon completion.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f540e0a5020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540d706970" loc="82:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f540d706cc0" loc="82:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="beginRead" ref="0x7f540d709020" loc="51:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="42:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start reading from the FIFO.</short>
          <long>&#10; Start reading from the FIFO. The &#60;code>readDone&#60;/code> event will&#10; be signalled upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f540e0a5020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540d70b9d0" loc="51:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f540d70bd20" loc="51:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f540d707b90" loc="71:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="64:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a read operation.</short>
          <long>&#10; Signals the completion of a read operation.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes read.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540d707250" loc="71:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f540d7075a0" loc="71:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f540d7078f0" loc="71:../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="60:../../tos/interfaces/SpiPacket.nc">
      <documentation loc="34:../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both.&#10;&#10; The SPI bus both sends and receives at the same time.  So this interface&#10; can be used to send, receive, or both.  The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; This is split phase and typically is implemented using interrupts.  However&#10; as the SPI clock is increased the interrupt overhead become more onerous&#10; wrt each byte time being transfered.  See SpiBLock for a single phase&#10; transfer mechanism that doesn't have interrupt overhead issues.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f540d6e9a40" loc="76:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="62:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f540d6e90d0" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f540d6e9460" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540d6e97a0" loc="76:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f540d6e5020" loc="88:../../tos/interfaces/SpiPacket.nc">
        <documentation loc="78:../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f540d6e82a0" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f540d6e8630" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540d6e8970" loc="88:../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f540d6e8ce0" loc="89:../../tos/interfaces/SpiPacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7f540d6eb8a0" loc="45:../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7f540d6eb620" loc="45:../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f540d60ab70" loc="53:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f540d6074e0" loc="61:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430SpiConfigure" loc="38:../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
      <documentation loc="30:../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
        <short>&#10; Interface used by Msp430Spi clients to reconfigure the SPI before use&#10; </short>
        <long>&#10; Interface used by Msp430Spi clients to reconfigure the SPI before use&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f540d605aa0" loc="39:../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
        <interfacedef-ref qname="Msp430SpiConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f540d63b2b0"/></typename>
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f540d63ce00"/></type-tag>
            </type-qualified>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x7f540d6046f0" loc="62:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540d604470" loc="62:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x7f540d603b30" loc="74:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540d6038b0" loc="74:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x7f540d603020" loc="68:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f540d6025f0" loc="81:../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540d602370" loc="81:../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f540d5f8020" loc="65:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f540d5f9750" loc="59:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="30:../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART. &#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information.&#10;&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7f540d5f1740" loc="54:../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540d5f14c0" loc="54:../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f540d5f4cd0" loc="49:../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="30:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART.&#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information. I.e. calling &#60;code>tx&#60;/done> will transmit a byte of&#10; data in the mode (SPI or UART) the USART has been set to before.&#10;&#10; @author Vlado Handziski (handzisk@tkn.tu-berlin.de)&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f540d5cc7c0" loc="213:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7f540d5d82d0" loc="143:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7f540d5e4020" loc="50:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f540d658020"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f540d658860"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f540d5e7ce0" loc="50:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f540d658020"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f540d658860"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7f540d5da3b0" loc="123:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7f540d5e2530" loc="70:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f540d653020"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f540d653860"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f540d5e22b0" loc="70:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f540d653020"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f540d653860"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f540d5d19e0" loc="180:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7f540d5cd020" loc="197:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7f540d5e3a90" loc="65:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f540d656ec0"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7f540d655680"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7f540d5e2d20" loc="75:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f540d653020"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7f540d653860"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7f540d5deb90" loc="97:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7f540d5de910" loc="97:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7f540d5de1f0" loc="95:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7f540d5d12b0" loc="179:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7f540d5e32a0" loc="60:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f540d656ec0"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f540d655680"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f540d5e3020" loc="60:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f540d656ec0"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f540d655680"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7f540d5df020" loc="85:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f540d5d0190" loc="181:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7f540d5dfa00" loc="90:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7f540d5df780" loc="90:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7f540d5db480" loc="113:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7f540d5dbc00" loc="118:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f540d5d3420" loc="177:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7f540d5d5190" loc="163:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7f540d5d9350" loc="133:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f540d5d3b60" loc="178:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7f540d5d8ab0" loc="148:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7f540d5d08b0" loc="182:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f540d5dd390" loc="103:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f540d65fd80"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7f540d65a4d0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7f540d5cf070" loc="187:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7f540d5cc020" loc="207:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7f540d5e0700" loc="80:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7f540d5e0480" loc="80:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f540d5cb2a0" loc="220:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540d5cb020" loc="220:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7f540d5e4800" loc="55:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f540d658020"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7f540d658860"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7f540d5dab20" loc="128:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f540d5d6270" loc="153:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7f540d5d4ba0" loc="174:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f540d627b50"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f540d627730"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f540d5d4920" loc="174:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f540d627b50"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f540d627730"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7f540d5d5ca0" loc="168:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f540d63b2b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f540d63ce00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f540d5d5a20" loc="168:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f540d63b2b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f540d63ce00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f540d5cbac0" loc="227:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="222:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return byte received&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7f540d5cf860" loc="192:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7f540d5ddba0" loc="108:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7f540d5cd780" loc="202:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7f540d5d69e0" loc="158:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7f540d5d9b30" loc="138:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f540d564020" loc="39:../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <function command="" provided="0" name="disableOwnAddress" ref="0x7f540d53e9d0" loc="80:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7f540d54f020" loc="31:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7f540d544620" loc="62:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f540d5443a0" loc="62:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7f540d5585b0" loc="11:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7f540d541c50" loc="71:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7f540d5495e0" loc="49:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7f540d551070" loc="28:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7f540d54e020" loc="34:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f540d552020" loc="25:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7f540d553d30" loc="25:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7f540d5544b0" loc="21:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7f540d54b020" loc="41:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7f540d543550" loc="66:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7f540d53e270" loc="78:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7f540d545c30" loc="61:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7f540d538350" loc="91:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7f540d5359d0" loc="100:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7f540d557420" loc="14:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7f540d54d740" loc="38:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7f540d54a1f0" loc="45:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7f540d5528e0" loc="27:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7f540d559350" loc="7:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7f540d545460" loc="58:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f540d5451e0" loc="58:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7f540d55dc00" loc="6:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7f540d5414d0" loc="69:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7f540d53c190" loc="81:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7f540d537b00" loc="94:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7f540d535270" loc="97:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7f540d540b90" loc="74:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7f540d53c8c0" loc="83:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7f540d544db0" loc="65:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7f540d53a390" loc="87:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7f540d557b40" loc="15:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7f540d5487e0" loc="53:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7f540d53b7b0" loc="86:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7f540d53fac0" loc="77:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7f540d54ade0" loc="46:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7f540d54ab60" loc="46:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7f540d5362d0" loc="95:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7f540d546a60" loc="57:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7f540d540420" loc="72:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7f540d559e10" loc="8:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f540d6134a0"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f540d613080"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f540d559b90" loc="8:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f540d6134a0"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f540d613080"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7f540d54d020" loc="37:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7f540d556cb0" loc="19:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f540d556a30" loc="19:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7f540d54b980" loc="42:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540d54b700" loc="42:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7f540d53ab60" loc="90:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7f540d553620" loc="24:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7f540d556350" loc="18:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7f540d5462a0" loc="54:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7f540d546020" loc="54:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7f540d558ce0" loc="12:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7f540d53b020" loc="84:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7f540d53f350" loc="75:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7f540d543cc0" loc="68:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7f540d548020" loc="50:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7f540d549d30" loc="50:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7f540d54e740" loc="35:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7f540d5517b0" loc="29:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7f540d536a40" loc="96:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7f540d554e30" loc="22:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f540d554bb0" loc="22:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7f540d538b10" loc="92:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7f540d54f750" loc="32:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7f540d537350" loc="93:../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f540d490020" loc="90:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f540d490880" loc="98:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="38:../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f540d45bdc0" loc="54:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="46:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f540d458020" loc="71:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="65:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f540d45b530" loc="44:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="39:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f540d45a6d0" loc="63:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="56:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f540d458950" loc="79:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="73:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwnerInfo" loc="2:../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
      <function command="" provided="0" name="inUse" ref="0x7f540d457b20" loc="9:../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
        <documentation loc="3:../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
          <short>&#10; Check whether a DefaultOwner has an active client.</short>
          <long>&#10; Check whether a DefaultOwner has an active client.&#10;&#10; @return TRUE If client is active.&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f540d44c4c0" loc="79:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f540d455490"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f540d44c240" loc="79:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f540d455490"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f540d44e420" loc="53:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f540d44d020" loc="62:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f540d455490"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f540d44eca0" loc="62:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f540d455490"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f540d44d930" loc="70:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f540d455490"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadId48" loc="8:../../tos/chips/ds2411/ReadId48.nc">
      <documentation loc="4:../../tos/chips/ds2411/ReadId48.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f540d2425e0" loc="13:../../tos/chips/ds2411/ReadId48.nc">
        <interfacedef-ref qname="ReadId48"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f540d242360" loc="13:../../tos/chips/ds2411/ReadId48.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="OneWireReadWrite" loc="9:../../tos/lib/onewire/OneWireReadWrite.nc">
      <documentation loc="5:../../tos/lib/onewire/OneWireReadWrite.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f540d22fb00" loc="10:../../tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7f540d22f1c0" loc="10:../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f540d22f530" loc="10:../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540d22f860" loc="10:../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f540d22d880" loc="11:../../tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f540d22d2c0" loc="11:../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540d22d5f0" loc="11:../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f540d2154d0" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f540d2154d0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f540d215710" loc="59:../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540d215710"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7f540d2142a0" loc="66:../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540d215710"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f540d214020" loc="66:../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f540d215710"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveIndicator" loc="37:../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
      <documentation loc="32:../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <short>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; </short>
        <long>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="isReceiving" ref="0x7f540d1af580" loc="43:../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <documentation loc="39:../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the indicator is showing we are actively receiving at this&#10; level&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveIndicator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Receive" loc="42:../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
      <documentation loc="32:../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <short>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2008-06-17 07:28:24 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f540d17e9e0" loc="63:../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="57:../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Signals that a message has been received.</short>
          <long>&#10; Signals that a message has been received.&#10;&#10; @param type of the message received.&#10; @param message pointer to message received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0x7f540d17e020" loc="63:../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
          <variable name="message" ref="0x7f540d17e750" loc="63:../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd_dropped" ref="0x7f540d17f7f0" loc="55:../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="51:../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that the packet has been dropped by the radio&#10; (e.g.</short>
          <long>&#10; Notification that the packet has been dropped by the radio&#10; (e.g. due to address rejection).&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd" ref="0x7f540d17f020" loc="49:../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="44:../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that an SFD capture has occured.</short>
          <long>&#10; Notification that an SFD capture has occured.&#10;&#10; @param time at which the capture happened.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f540d184d30" loc="49:../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeSyncOffset" loc="43:../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
      <function command="" provided="0" name="get" ref="0x7f540d1953d0" loc="58:../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="52:../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns the offset of where the timesync timestamp is sotred in a&#10; CC2420 packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540d195150" loc="58:../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x7f540d1963d0" loc="50:../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="45:../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns TRUE if the current message should be timestamped.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540d196150" loc="50:../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f540d192350" loc="72:../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="67:../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10; Cancels any pending requests to timestamp the message in MAC.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540d1920d0" loc="72:../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f540d193390" loc="65:../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="60:../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10;  Sets the current message to be timestamped in the MAC layer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540d193110" loc="65:../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f540d01c910" loc="53:../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f540d01c910"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f540d019270" loc="61:../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f540cfb6350" loc="53:../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f540cfb6350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f540cfae1f0" loc="136:../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f540cfb3a60" loc="83:../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f540cfb1820" loc="114:../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f540cfb1250" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f540cfb1590" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f540cfb2a60" loc="98:../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f540cfad270" loc="151:../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f540cfae980" loc="144:../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f540cfb2270" loc="92:../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f540cfb4020" loc="64:../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f540cfb6c40" loc="64:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f540cfaf820" loc="129:../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f540cfaf250" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f540cfaf590" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f540cfb4ae0" loc="73:../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f540cfb4860" loc="73:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f540e899920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f540cfb3350" loc="78:../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSkew" loc="51:../../tos/lib/timer/TimeSkew.nc">
      <documentation loc="35:../../tos/lib/timer/TimeSkew.nc">
        <short>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.</short>
        <long>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.  Under various circumstances&#10; adjustments may be made by this underlying timing that can result&#10; in time skew.&#10;&#10; Typically this can occur when the RTC (Real Time Clock) subsystem&#10; has had its time adjusted for example via a GPS providing synchronized&#10; time.  If this skew is below a reasonable threshold (platform dependent)&#10; TimeSkew.skew(skew_val) will be signalled.  Beyond that threshold&#10; it might be better to reboot and reestablish reasonable time via&#10; those mechanisms.&#10;&#10; @author Eric B.Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function event="" provided="0" name="skew" ref="0x7f540cf31a30" loc="62:../../tos/lib/timer/TimeSkew.nc">
        <documentation loc="52:../../tos/lib/timer/TimeSkew.nc">
          <short>&#10; Signaled when the underlying timing system has detected timing&#10; skew.</short>
          <long>&#10; Signaled when the underlying timing system has detected timing&#10; skew.&#10;&#10; @param skew    estimated skew computed.  in millisecs (units platform&#10;                dependent, typically binary millisecs).&#10;                > 0, time has been moved into the future (we were slow).&#10;                &#60; 0, time has been shifted backwards, (we were fast).&#10;                = 0, skew is beyond platform limits.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSkew"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f540e89a930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skew" ref="0x7f540cf317b0" loc="62:../../tos/lib/timer/TimeSkew.nc">
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f540e89a930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7f540ce4e5e0" loc="53:../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f540ce4e5e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7f540ce4b2a0" loc="64:../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f540ce4e5e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7f540ce4b020" loc="64:../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f540ce4e5e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7f540cc35b00" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540cc354f0" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7f540cc35870" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7f540cc39c70" loc="15:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7f540cc36b60" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f540cc36560" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f540e0661c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f540e064020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7f540cc368d0" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7f540cc1c960" loc="54:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f540cc1c1f0" loc="49:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7f540cc2ec20" loc="56:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7f540cc230e0" loc="72:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7f540cc22d00" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540cc22a80" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7f540cc23960" loc="79:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7f540cc247e0" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540cc24560" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7f540cc205b0" loc="100:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7f540cc22270" loc="85:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7f540cc2c780" loc="71:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7f540cc2b0e0" loc="81:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7f540cc2fd80" loc="62:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7f540cc2fb00" loc="62:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7f540cc2bc60" loc="91:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f540cc2b9e0" loc="91:../../tos/lib/serial/SendBytePacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7f540cc298f0" loc="62:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7f540cc285b0" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f540cc28330" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7f540cc260b0" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f540cc28e00" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f540caf2c40" loc="48:../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f540caf2670" loc="48:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540caf29b0" loc="48:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f540caeca70" loc="79:../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f540caec7f0" loc="79:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f540caeb890" loc="90:../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f540caeb2c0" loc="90:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540caeb600" loc="90:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f540caee610" loc="65:../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f540caea2c0" loc="99:../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f540cae9820" loc="99:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540cae9b60" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f540caea020" loc="99:../../tos/interfaces/UartStream.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f540caec020" loc="72:../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f540caf0610" loc="57:../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f540caefbd0" loc="57:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f540caf0020" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f540e899520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f540caf0370" loc="57:../../tos/interfaces/UartStream.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
              <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f540cac95b0" loc="50:../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f540cac9330" loc="50:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7f540cac9df0" loc="59:../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f540cac8cf0" loc="69:../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f540cac8700" loc="69:../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f540cac8a60" loc="69:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f540e899160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7f540cac6b50" loc="79:../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f540e60c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="30:../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <short>&#10; Interface used by Msp430Uart clients to reconfigure the UART before use&#10; </short>
        <long>&#10; Interface used by Msp430Uart clients to reconfigure the UART before use&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f540cabe4c0" loc="39:../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f540d627b50"/></typename>
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f540d627730"/></type-tag>
            </type-qualified>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f540ca2f860" loc="95:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f540ca2e0e0" loc="105:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f540e606020"/>
            <typename><typedef-ref name="error_t" ref="0x7f540e6011b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:../../tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:../../tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x7f540c966ce0" loc="62:../../tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:../../tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
