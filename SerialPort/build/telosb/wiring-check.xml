<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="69:TestSerialAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f3a153fd640"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f3a14ff8500"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f3a14ff8500"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f3a14ff2280"/></to>
    </wire>
    <wire loc="70:TestSerialAppC.nc">
      <from><interface-ref name="Control" scoped="" ref="0x7f3a1540a960"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f3a14ff6740"/></to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f3a14ff6740"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f3a14f5f8d0"/></to>
    </wire>
    <wire loc="71:TestSerialAppC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f3a153a9a80"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f3a14fe4b20"/>
      <arguments>
        <value cst="I:137">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:TestSerialAppC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f3a153a0950"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f3a14fe57f0"/>
      <arguments>
        <value cst="I:137">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:TestSerialAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f3a153ff0d0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f3a153680f0"/></to>
    </wire>
    <wire loc="51:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f3a153680f0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f3a15361840"/></to>
    </wire>
    <wire loc="74:TestSerialAppC.nc">
      <from><interface-ref name="MilliTimer" scoped="" ref="0x7f3a153ab060"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a149c0980"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f3a149c0980"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f3a149b7b60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:TestSerialAppC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f3a153887a0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f3a14fe32b0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f3a14fe32b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f3a14f67a40"/></to>
    </wire>
    <wire loc="53:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f3a1533a2e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f3a15361240"/></to>
    </wire>
    <wire loc="54:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f3a15360020"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f3a15365ae0"/></to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f3a15365ae0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f3a150239e0"/></to>
    </wire>
    <wire loc="55:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f3a1535f340"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f3a1533dce0"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f3a1533dce0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f3a1500d020"/></to>
    </wire>
    <wire loc="56:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f3a1535a660"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f3a1533b020"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f3a1533b020"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f3a15007630"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f3a15124a60"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f3a1533a2e0"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f3a15012c50"/></from>
      <to><interface-ref name="Port54" scoped="" ref="0x7f3a152cd8a0"/></to>
    </wire>
    <wire loc="737:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f3a152cd8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15176540"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f3a1500c2f0"/></from>
      <to><interface-ref name="Port55" scoped="" ref="0x7f3a152ca020"/></to>
    </wire>
    <wire loc="738:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f3a152ca020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15170b90"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f3a150067a0"/></from>
      <to><interface-ref name="Port56" scoped="" ref="0x7f3a152c88a0"/></to>
    </wire>
    <wire loc="739:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f3a152c88a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1516a060"/></to>
    </wire>
    <wire loc="693:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f3a1531e580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15225b90"/></to>
    </wire>
    <wire loc="706:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f3a15305710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151ed060"/></to>
    </wire>
    <wire loc="844:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f3a1527cd30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151dd060"/></to>
    </wire>
    <wire loc="864:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f3a15281d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1513fb90"/></to>
    </wire>
    <wire loc="845:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f3a152a9d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151d8540"/></to>
    </wire>
    <wire loc="711:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f3a15300710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151e3b90"/></to>
    </wire>
    <wire loc="724:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f3a152e68a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151ac060"/></to>
    </wire>
    <wire loc="748:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f3a152b98a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1514a060"/></to>
    </wire>
    <wire loc="848:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f3a152a4d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151cd060"/></to>
    </wire>
    <wire loc="858:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f3a15290d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15160b90"/></to>
    </wire>
    <wire loc="870:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f3a15271d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15139060"/></to>
    </wire>
    <wire loc="696:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f3a15317d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15214b90"/></to>
    </wire>
    <wire loc="849:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f3a152a1580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151c8540"/></to>
    </wire>
    <wire loc="701:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f3a15312d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15209540"/></to>
    </wire>
    <wire loc="714:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f3a152f9e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151d3b90"/></to>
    </wire>
    <wire loc="727:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f3a152de020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1519b060"/></to>
    </wire>
    <wire loc="740:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f3a152c5020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15165540"/></to>
    </wire>
    <wire loc="751:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f3a152b0020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15139060"/></to>
    </wire>
    <wire loc="691:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f3a15323580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1522f060"/></to>
    </wire>
    <wire loc="704:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f3a1530a580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151f96d0"/></to>
    </wire>
    <wire loc="717:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f3a152f1710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151c2b90"/></to>
    </wire>
    <wire loc="843:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f3a152ab580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151dd060"/></to>
    </wire>
    <wire loc="861:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f3a15288570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15150b90"/></to>
    </wire>
    <wire loc="868:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f3a15273570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15139060"/></to>
    </wire>
    <wire loc="854:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f3a15297580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1517b060"/></to>
    </wire>
    <wire loc="722:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f3a152eb710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151b7740"/></to>
    </wire>
    <wire loc="735:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f3a152d28a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15181b90"/></to>
    </wire>
    <wire loc="746:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f3a152be8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15155540"/></to>
    </wire>
    <wire loc="862:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f3a15286d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1514a060"/></to>
    </wire>
    <wire loc="851:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f3a1529fd40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1518b060"/></to>
    </wire>
    <wire loc="694:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f3a1531cd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1521f060"/></to>
    </wire>
    <wire loc="707:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f3a15303e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151e8540"/></to>
    </wire>
    <wire loc="744:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f3a152c38a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15160b90"/></to>
    </wire>
    <wire loc="712:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f3a152fee50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151dd060"/></to>
    </wire>
    <wire loc="725:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f3a152e3020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151a7540"/></to>
    </wire>
    <wire loc="749:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f3a152b5020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15144540"/></to>
    </wire>
    <wire loc="853:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f3a1529ad50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15181b90"/></to>
    </wire>
    <wire loc="689:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f3a15327530"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1523a540"/></to>
    </wire>
    <wire loc="702:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f3a1530f580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15204b90"/></to>
    </wire>
    <wire loc="715:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f3a152f6710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151cd060"/></to>
    </wire>
    <wire loc="728:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f3a152dc8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15196540"/></to>
    </wire>
    <wire loc="855:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f3a15295d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151c2b90"/></to>
    </wire>
    <wire loc="859:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f3a1528d570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1515a060"/></to>
    </wire>
    <wire loc="865:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f3a1527e570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15139060"/></to>
    </wire>
    <wire loc="733:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f3a152d78a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1518b060"/></to>
    </wire>
    <wire loc="856:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f3a15292580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151bc060"/></to>
    </wire>
    <wire loc="692:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f3a15321d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1522a540"/></to>
    </wire>
    <wire loc="705:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f3a15308e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151f4b90"/></to>
    </wire>
    <wire loc="718:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f3a152eee50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151bc060"/></to>
    </wire>
    <wire loc="852:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f3a1529c580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15186540"/></to>
    </wire>
    <wire loc="863:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f3a15283570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15144540"/></to>
    </wire>
    <wire loc="723:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f3a152e8020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151b2b90"/></to>
    </wire>
    <wire loc="736:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f3a152cf020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1517b060"/></to>
    </wire>
    <wire loc="747:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f3a152bb020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15150b90"/></to>
    </wire>
    <wire loc="695:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f3a15319580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15219540"/></to>
    </wire>
    <wire loc="745:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f3a152c0020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1515a060"/></to>
    </wire>
    <wire loc="700:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f3a15314580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1520e060"/></to>
    </wire>
    <wire loc="713:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f3a152fb710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151d8540"/></to>
    </wire>
    <wire loc="726:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f3a152e18a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151a2b90"/></to>
    </wire>
    <wire loc="750:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f3a152b38a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1513fb90"/></to>
    </wire>
    <wire loc="690:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f3a15335d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15235b90"/></to>
    </wire>
    <wire loc="703:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f3a1530dd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151fe060"/></to>
    </wire>
    <wire loc="716:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f3a152f4e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151c8540"/></to>
    </wire>
    <wire loc="729:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f3a152d9020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15191b90"/></to>
    </wire>
    <wire loc="860:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f3a1528bd40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15155540"/></to>
    </wire>
    <wire loc="847:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f3a15278560"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151d3b90"/></to>
    </wire>
    <wire loc="846:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f3a152a6580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151d3b90"/></to>
    </wire>
    <wire loc="734:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f3a152d4020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15186540"/></to>
    </wire>
    <wire loc="867:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f3a15276d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a1513fb90"/></to>
    </wire>
    <wire loc="871:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f3a1526e580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a15165540"/></to>
    </wire>
    <wire loc="842:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f3a152ae8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f3a151e3b90"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f3a15136b40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f3a15131e40"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f3a1512ad70"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f3a151264d0"/></to>
    </wire>
    <wire loc="50:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f3a15125b80"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f3a15127900"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/telosb/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f3a15127900"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f3a150f5850"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f3a15124380"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f3a1510d450"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f3a150f5850"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f3a150db1c0"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f3a150ecde0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f3a150db830"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f3a15535c80"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f3a150daaf0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f3a14ff8c00"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f3a149b08c0"/></to>
    </wire>
    <wire loc="73:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f3a14ff8c00"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f3a141d4cf0"/></to>
    </wire>
    <wire loc="59:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f3a14ff8c00"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f3a14f5f280"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f3a14ff28f0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f3a158ba1e0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f3a158ba1e0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f3a1545f140"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f3a14ff13a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f3a15136b40"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f3a14ff1aa0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f3a14ff8c00"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f3a158ad940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f3a1545e040"/></to>
    </wire>
    <wire loc="56:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f3a15459490"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f3a156929a0"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f3a14f5f8d0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f3a14f4f810"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f3a14fe57f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f3a14f69110"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f3a14fe4b20"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f3a14f69e70"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f3a14fc84c0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f3a14f66720"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f3a14fd01e0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f3a14f68490"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f3a14f5f280"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f3a14f4f1c0"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f3a14f5bdc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f3a14fc8e40"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f3a14f65120"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f3a14f5d480"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f3a14f65d70"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f3a14f5e940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f3a14f5b4a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7f3a149d2a30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f3a14f5d480"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f3a14e1dde0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f3a14f5e940"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f3a14e1d6c0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7f3a14e1cc20"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f3a14f5b4a0"/></to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f3a14f44020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f3a14f5bdc0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f3a14e1a920"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f3a14f5bdc0"/></to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f3a14e11cc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f3a14f5bdc0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f3a14e1b590"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f3a14f45c40"/></to>
    </wire>
    <wire loc="75:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7f3a14e1be80"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7f3a14f487d0"/></to>
    </wire>
    <wire loc="77:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7f3a14f47020"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7f3a14e16e00"/></to>
    </wire>
    <wire loc="78:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f3a14f39580"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f3a14deb080"/></to>
    </wire>
    <wire loc="17:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f3a14deb080"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f3a149e5080"/></to>
    </wire>
    <wire loc="80:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f3a14e08d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f3a14deb890"/></to>
    </wire>
    <wire loc="13:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f3a14deb890"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f3a149eb440"/></to>
    </wire>
    <wire loc="332:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7f3a14ee76e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f3a158ad940"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7f3a14f1e4f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f3a158ad940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7f3a14eeac70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f3a158ad940"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f3a14ee3a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f3a158ad940"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7f3a14e18020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f3a158ad940"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7f3a14e18800"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f3a158ad940"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="14:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f3a14de9020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f3a149ea440"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f3a149ea440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f3a14d7e5c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f3a149eb440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f3a14d81040"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="18:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f3a149e9020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f3a149e58e0"/></to>
    </wire>
    <wire loc="19:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f3a149e4020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f3a149ec020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f3a149ec020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f3a14d847a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f3a149ecc70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f3a143bf020"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f3a143bf020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f3a14abad50"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f3a14d7ca40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f3a149e9020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a143b8440"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a14d822c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f3a14d7d730"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f3a143c0340"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f3a143c0340"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f3a14abba60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f3a14d791d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f3a143b9c10"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f3a143b9c10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f3a14abecd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a14d822c0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a14cec190"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f3a14d7e5c0"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f3a14cebbb0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f3a14d81040"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f3a14ceca80"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f3a14d847a0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f3a14ced3c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f3a14ce9700"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f3a14d7ca40"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f3a14cea8d0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f3a14d7d730"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f3a14ce48d0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f3a14d791d0"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f3a14ce9d70"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f3a14cd60c0"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f3a14cd60c0"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f3a14ccd8d0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f3a14ce3300"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f3a14c3e9a0"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f3a14c3e9a0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f3a14c399c0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f3a14ce0450"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f3a153680f0"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f3a14cd1d10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f3a14cc8460"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f3a14cd4840"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f3a14ccd020"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f3a14cc8d30"/></from>
      <to><interface-ref name="SIMO1" scoped="" ref="0x7f3a1529c580"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f3a14cc5570"/></from>
      <to><interface-ref name="SOMI1" scoped="" ref="0x7f3a1529ad50"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f3a14cc3d40"/></from>
      <to><interface-ref name="UCLK1" scoped="" ref="0x7f3a15297580"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f3a14cbf570"/></from>
      <to><interface-ref name="URXD1" scoped="" ref="0x7f3a15292580"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f3a14cbdd40"/></from>
      <to><interface-ref name="UTXD1" scoped="" ref="0x7f3a15295d50"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f3a14c399c0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f3a14aeab80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f3a14ad6c50"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f3a14c0dcd0"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f3a14c0dcd0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a14bb7260"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f3a14c10a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f3a14b5c220"/></to>
    </wire>
    <wire loc="139:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f3a14c0b5a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f3a14b546d0"/></to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f3a14c11ae0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f3a14b62cb0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f3a14bfe3e0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f3a14b3b7a0"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f3a14c17d40"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f3a14b62020"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f3a14bff570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f3a14b3cac0"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f3a14bf5da0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f3a14b237a0"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f3a14bfd410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f3a14b35b30"/></to>
    </wire>
    <wire loc="112:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f3a14c1d380"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f3a14bb06d0"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f3a14c06da0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f3a14b4bcb0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f3a14c06020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f3a14b4b020"/></to>
    </wire>
    <wire loc="146:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f3a14c08a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f3a14b4db30"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f3a14c0eda0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f3a14b5a2f0"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f3a14bfb890"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f3a14b33cb0"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f3a14c05d40"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f3a14b44220"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f3a14c0e020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f3a14b5b610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f3a14c251b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a14bbe3e0"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f3a14bfc890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f3a14b33020"/></to>
    </wire>
    <wire loc="119:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f3a14c1c8c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f3a14b64b30"/></to>
    </wire>
    <wire loc="175:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f3a14bfa8c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f3a14b2d220"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f3a14c128d0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f3a14b6a7a0"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f3a14c02020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f3a14b422f0"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f3a14c18a70"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f3a14b6bac0"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f3a14c03160"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f3a14b43610"/></to>
    </wire>
    <wire loc="177:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f3a14bf8ae0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f3a14b2b2f0"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f3a14c00020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f3a14b3d6d0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f3a14c09a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f3a14b527a0"/></to>
    </wire>
    <wire loc="176:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f3a14bf9d40"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f3a14b2c610"/></to>
    </wire>
    <wire loc="183:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f3a14bf5020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f3a14b24ac0"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f3a14c0aa20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f3a14b53ac0"/></to>
    </wire>
    <wire loc="182:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f3a14bf7a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f3a14b256d0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f3a14bbc2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f3a14bbdbf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f3a14bbc940"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f3a14b1c3f0"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f3a14bbb020"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f3a14b1cb80"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f3a14b68610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a14bbe3e0"/></to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f3a14b67c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f3a14bbdbf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f3a14b61b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a14bbe3e0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f3a14b5f2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f3a14bbdbf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f3a14b58160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a14bbe3e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f3a14b577a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f3a14bbdbf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f3a14bb4100"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f3a14bb6a60"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f3a14bb4750"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f3a14b1b430"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f3a14bb4da0"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f3a14b1bbc0"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f3a14b51610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a14bb7260"/></to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f3a14b50c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f3a14bb6a60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f3a14b4ab40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a14bb7260"/></to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f3a14b472f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f3a14bb6a60"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f3a14b41160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a14bb7260"/></to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f3a14b407a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f3a14bb6a60"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f3a14b3a610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a14bb7260"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f3a14b38c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f3a14bb6a60"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f3a14b32b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a14bb7260"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f3a14b302f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f3a14bb6a60"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f3a14b2a160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a14bb7260"/></to>
    </wire>
    <wire loc="179:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f3a14b297a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f3a14bb6a60"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f3a14b22610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a14bb7260"/></to>
    </wire>
    <wire loc="186:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f3a14b21c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f3a14bb6a60"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f3a143bd020"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f3a14cd60c0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a143bf7c0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a14ab9590"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a14ab9590"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a14a21e80"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a14ab7370"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a143b8440"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f3a14abad50"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f3a14a22a60"/></to>
    </wire>
    <wire loc="81:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f3a14a22a60"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f3a141d03a0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f3a14abecd0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f3a14ab30d0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f3a14abba60"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f3a14a23ca0"/></to>
    </wire>
    <wire loc="80:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f3a14a23ca0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f3a141d1540"/></to>
    </wire>
    <wire loc="83:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a14a21e80"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a141cf8b0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f3a14aa20a0"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f3a14cd1d10"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a14a20790"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a14ab7370"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a14aa0020"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a14a21e80"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f3a14a1bd50"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f3a14a21270"/></to>
    </wire>
    <wire loc="82:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f3a14a21270"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f3a141d0b20"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f3a14a1b020"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f3a14cd4840"/></to>
    </wire>
    <wire loc="84:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a141ce7e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a14a20790"/></to>
    </wire>
    <wire loc="85:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f3a141ce0e0"/></from>
      <to><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f3a14a1f020"/></to>
    </wire>
    <wire loc="87:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f3a141cd020"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f3a141d3330"/></to>
    </wire>
    <wire loc="155:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f3a141ca160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f3a158ad940"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f3a14196470"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f3a14a1b020"/></to>
    </wire>
    <wire loc="82:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f3a14196bd0"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f3a14a1b780"/></to>
    </wire>
    <wire loc="84:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f3a14195270"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f3a14a1bd50"/></to>
    </wire>
    <wire loc="85:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a14195e80"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a14a04990"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f3a149b7b60"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f3a149ad700"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f3a149ad700"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a148218e0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f3a149b08c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f3a148cf020"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f3a148218e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a1410d440"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f3a149a61a0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f3a14811020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f3a148cf020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f3a14185490"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f3a1481a020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f3a148a22f0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f3a1489d850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f3a148cf870"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f3a148cf870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f3a1417e140"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f3a14807300"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f3a14933b70"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f3a14933b70"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f3a1492bcf0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f3a14185490"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f3a14169e60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f3a14178b90"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f3a14185ce0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f3a14185ce0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f3a14168720"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f3a1417a690"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f3a14933b70"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f3a14164910"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f3a1416fc50"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f3a1416fc50"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f3a14988bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f3a14162020"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f3a1416c2b0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f3a1416c2b0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f3a149848b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f3a14161440"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f3a1416b5d0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f3a1416b5d0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f3a14981210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f3a14988bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f3a14c0dcd0"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f3a149848b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f3a14c0b5a0"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f3a14981210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f3a14c0aa20"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f3a14988bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f3a14c0dcd0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f3a149848b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f3a14c05d40"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f3a14981210"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f3a14c03160"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f3a14988bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f3a14c0dcd0"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f3a149848b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f3a14c00020"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f3a14981210"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f3a14bff570"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f3a14988bf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f3a14c0dcd0"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f3a149848b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f3a14bfd410"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f3a14981210"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f3a14bfc890"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f3a14988bf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f3a14c0dcd0"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f3a149848b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f3a14bfa8c0"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f3a14981210"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f3a14bf9d40"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f3a14988bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f3a14c0dcd0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f3a149848b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f3a14bf7a50"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f3a14981210"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f3a14bf5020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f3a1490d0f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f3a14c399c0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f3a1489a9c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f3a158ad940"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f3a14107a90"/></from>
      <to><interface-ref name="TimerFrom" scoped="" ref="0x7f3a1481a020"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimeSkew" scoped="" ref="0x7f3a140ff270"/></from>
      <to><interface-ref name="TimeSkew" scoped="" ref="0x7f3a14815450"/></to>
    </wire>
    <wire loc="68:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f3a14102d10"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f3a1512ad70"/></to>
    </wire>
    <wire loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f3a140ff8c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f3a158ad940"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="TestSerialC" loc="57:TestSerialC.nc">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../../tos/system/LedsC.nc">
      <documentation loc="34:../../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="40:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="37:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; Digital pin i/o abstraction, TI MSP430 processors.</short>
        <long>&#10; Digital pin i/o abstraction, TI MSP430 processors.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @author Joao Goncalves &#60;joao.m.goncalves@ist.utl.pt>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="79(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="79(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="79(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="79(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="79(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="79(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="79(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="79(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="79(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="79(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="79(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="79(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="79(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="79(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="79(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="79(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="79(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="79(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="79(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="79(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="79(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="79(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="79(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="79(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="79(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="79(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="79(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="79(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="79(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="79(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="79(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="79(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="79(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="79(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="79(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="79(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="79(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="79(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="79(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="79(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="79(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="79(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="79(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="79(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="79(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="79(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="79(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="79(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformC" loc="41:../../../tos/platforms/telosa/PlatformC.nc">
      <documentation loc="35:../../../tos/platforms/telosa/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/telosa/PlatformP.nc" safe="">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="1:../../../tos/platforms/telosb/MotePlatformC.nc" safe="">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/telosb/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="200:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/x1xxx/McuSleepC.nc" safe="">
      <documentation loc="36:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MoteClockP" loc="38:../../../tos/platforms/telosb/MoteClockP.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockP.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RealMainP" loc="65:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="45:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="33:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="53:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="2:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <instance number="0">
        <component-ref qname="Msp430Uart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P" loc="39:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P.UartP" loc="44(Msp430Uart1P.UartP):../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <documentation loc="36:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart1C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <documentation loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
        <short>&#10; An HPL abstraction of USART1 on the MSP430.</short>
        <long>&#10; An HPL abstraction of USART1 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart1P" loc="59:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC" loc="48:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <documentation loc="36:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="41(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="41(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="41(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="41(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="41(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="41(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="41(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="41(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="41(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="41(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="41(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="41(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15412640"/>
            <typename><typedef-ref name="T32khz" ref="0x7f3a154129b0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="40(PlatformSerialC.UartC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P" loc="38:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.UsartShareP" loc="37(Msp430UsartShare1P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC" loc="56(Msp430UsartShare1P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart1.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Queue" loc="42(Msp430UsartShare1P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Arbiter" loc="96(Msp430UsartShare1P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC" loc="67(Msp430UsartShare1P.PowerManagerC):../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC.PowerManager" loc="58(Msp430UsartShare1P.PowerManagerC.PowerManager):../../../tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:../../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="TelosSerialP" loc="1:../../../tos/platforms/telosa/TelosSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TestSerialAppC.TimerMilliC" loc="44(TestSerialAppC.TimerMilliC):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15412640"/>
            <typename><typedef-ref name="T32khz" ref="0x7f3a154129b0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15412640"/>
            <typename><typedef-ref name="T32khz" ref="0x7f3a154129b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15412640"/>
            <typename><typedef-ref name="T32khz" ref="0x7f3a154129b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="55(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC.VT" loc="61(HilTimerMilliC.VirtualizeTimerC.VT):../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerImplP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f3a14894530"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f3a152687d0" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f3a15268b80" loc="81:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f3a15267020" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f3a152673d0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f3a15267740" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart1C" loc="42:../../../tos/chips/msp430/usart/Msp430Uart1C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="44:../../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <documentation loc="36:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f3a14bf0930" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f3a14bf0cd0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f3a14bef0d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f3a14bef450" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f3a14bef7d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f3a14befb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f3a14bee020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f3a14bee3b0" loc="49:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f3a14bee780" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f3a14bb2c80" loc="42:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f3a14baf0d0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f3a14aebc80" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f3a14aebc80"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart1C" loc="40:../../../tos/chips/msp430/usart/Msp430Usart1C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="56:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f3a14a9e9a0" loc="56:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f3a14a91cf0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="96:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f3a14a72200" loc="96:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:../../../tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:../../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f3a149633b0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f3a149633b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f3a1492a6b0" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f3a1492a6b0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f3a1492ae80" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f3a1492ae80"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f3a14929290" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f3a14929290"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f3a14929a70" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f3a14929a70"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f3a14929e40" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f3a14927670" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f3a14927670"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f3a149316d0" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f3a149316d0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f3a14906020" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f3a14906020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f3a14906410" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f3a14906410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f3a14906bf0" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f3a14906bf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f3a14905020" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f3a148cacc0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f3a148cacc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f3a14894530" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f3a14894530"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f3a14894880" loc="56:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="VirtualizeTimerImplP" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f3a14886980" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f3a14886980"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f3a14886cd0" loc="62:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f3a14810550" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f3a14810550"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="Boot" ref="0x7f3a153fd640" loc="61:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f3a153fd640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f3a153fd9c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f3a153a0950" loc="63:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f3a153a0950"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f3a153a0cd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f3a153a0e60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f3a153fe020"/>
        <function-ref name="cancel" scoped="" ref="0x7f3a153fe1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f3a153fe340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f3a153887a0" loc="65:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f3a153887a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a15388b20"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f3a15388cb0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f3a15388e40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f3a15392020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f3a153921b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x7f3a153a9a80" loc="62:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f3a153a9a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f3a153a9e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MilliTimer" ref="0x7f3a153ab060" loc="64:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MilliTimer" scoped="" ref="0x7f3a153ab060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f3a15394630"/>
        <function-ref name="fired" scoped="" ref="0x7f3a153a1ac0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f3a15396920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f3a153964a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f3a15393020"/>
        <function-ref name="gett0" scoped="" ref="0x7f3a15394ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f3a15396020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f3a153abc50"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f3a15394020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f3a153a1170"/>
        <function-ref name="stop" scoped="" ref="0x7f3a153a1640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f3a153ff0d0" loc="60:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f3a153ff0d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f3a153ff450"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f3a153ff5e0"/>
        <function-ref name="led1On" scoped="" ref="0x7f3a153ff770"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f3a153ff900"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f3a153ffa90"/>
        <function-ref name="get" scoped="" ref="0x7f3a153ffc20"/>
        <function-ref name="led1Off" scoped="" ref="0x7f3a153ffdb0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f3a1540e4d0"/>
        <function-ref name="set" scoped="" ref="0x7f3a1540e020"/>
        <function-ref name="led0On" scoped="" ref="0x7f3a1540e1b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f3a1540e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Control" ref="0x7f3a1540a960" loc="59:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f3a1540a960"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f3a1540ace0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f3a1540ae70"/>
        <function-ref name="start" scoped="" ref="0x7f3a15410030"/>
        <function-ref name="stop" scoped="" ref="0x7f3a154101c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f3a153680f0" loc="46:../../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f3a153680f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f3a15368470"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f3a15368600"/>
        <function-ref name="led1On" scoped="" ref="0x7f3a15368790"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f3a15368920"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f3a15368ab0"/>
        <function-ref name="get" scoped="" ref="0x7f3a15368c40"/>
        <function-ref name="led1Off" scoped="" ref="0x7f3a15368dd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f3a153674d0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15367020"/>
        <function-ref name="led0On" scoped="" ref="0x7f3a153671b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f3a15367340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f3a15360020" loc="50:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f3a15360020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a153603a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15360530"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a153606c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a15360850"/>
        <function-ref name="get" scoped="" ref="0x7f3a153609e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15360b70"/>
        <function-ref name="set" scoped="" ref="0x7f3a15360d00"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1535f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f3a15361240" loc="46:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f3a15361240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a153615c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f3a1535f340" loc="51:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f3a1535f340"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1535f6c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1535f850"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1535f9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1535fb70"/>
        <function-ref name="get" scoped="" ref="0x7f3a1535fd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1535a020"/>
        <function-ref name="set" scoped="" ref="0x7f3a1535a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1535a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f3a15361840" loc="47:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f3a15361840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f3a15361bc0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f3a15361d50"/>
        <function-ref name="led1On" scoped="" ref="0x7f3a15363020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f3a153631b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f3a15363340"/>
        <function-ref name="get" scoped="" ref="0x7f3a153634d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f3a15363660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f3a15363ca0"/>
        <function-ref name="set" scoped="" ref="0x7f3a153637f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f3a15363980"/>
        <function-ref name="led2On" scoped="" ref="0x7f3a15363b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f3a1535a660" loc="52:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f3a1535a660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1535a9e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1535ab70"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1535ad00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a15359020"/>
        <function-ref name="get" scoped="" ref="0x7f3a153591b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15359340"/>
        <function-ref name="set" scoped="" ref="0x7f3a153594d0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15359660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f3a15365ae0" loc="41:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f3a15365ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15365e60"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1533d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1533d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1533d340"/>
        <function-ref name="get" scoped="" ref="0x7f3a1533d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1533d660"/>
        <function-ref name="set" scoped="" ref="0x7f3a1533d7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1533d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f3a1533dce0" loc="42:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f3a1533dce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1533c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1533c230"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1533c3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1533c550"/>
        <function-ref name="get" scoped="" ref="0x7f3a1533c6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1533c870"/>
        <function-ref name="set" scoped="" ref="0x7f3a1533ca00"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1533cb90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f3a1533a2e0" loc="44:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f3a1533a2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a1533a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f3a1533b020" loc="43:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f3a1533b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1533b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1533b530"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1533b6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1533b850"/>
        <function-ref name="get" scoped="" ref="0x7f3a1533b9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1533bb70"/>
        <function-ref name="set" scoped="" ref="0x7f3a1533bd00"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1533a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f3a1531e580" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f3a1531e580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1531e900"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1531ea90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1531ec20"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1531c980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1531d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1531d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1531d340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1531d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1531d660"/>
        <function-ref name="get" scoped="" ref="0x7f3a1531d7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1531d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1531db10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1531dca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1531c020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1531c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a1531c340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1531c4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1531edb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1531c660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1531c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f3a15305710" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f3a15305710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15305a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15305c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15305db0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15303a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a153041b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a15304340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a153044d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15304660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a153047f0"/>
        <function-ref name="get" scoped="" ref="0x7f3a15304980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15304b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15304ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15304e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15303120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a153032b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15303440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a153035d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15304020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15303760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a153038f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f3a1527cd30" loc="205:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f3a1527cd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1527a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1527a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1527a400"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152781b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1527a720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1527a8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1527aa40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1527abd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1527ad60"/>
        <function-ref name="get" scoped="" ref="0x7f3a15279020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152791b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15279340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152794d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15279760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152798f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15279a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15279c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1527a590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15279da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15278020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f3a15281d40" loc="201:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f3a15281d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152800e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15280270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15280400"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1527e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15280720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152808b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15280a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15280bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15280d60"/>
        <function-ref name="get" scoped="" ref="0x7f3a1527f020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1527f1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1527f340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1527f4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1527f760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1527f8f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a1527fa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1527fc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15280590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1527fda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1527e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f3a152a9d50" loc="183:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f3a152a9d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152a8100"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152a8290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152a8420"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152a61b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152a8740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152a88d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152a8a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152a8bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152a8d80"/>
        <function-ref name="get" scoped="" ref="0x7f3a152a7020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152a71b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152a7340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152a74d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152a7760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152a78f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a152a7a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152a7c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152a85b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152a7da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152a6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f3a15300710" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f3a15300710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15300a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15300c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15300db0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152fea80"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152ff1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152ff340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152ff4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152ff660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152ff7f0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152ff980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152ffb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152ffca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152ffe30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152fe120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152fe2b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a152fe440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152fe5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152ff020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152fe760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152fe8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f3a152e68a0" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f3a152e68a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152e6c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152e6db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152e5020"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152e4c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152e5340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152e54d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152e5660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152e57f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152e5980"/>
        <function-ref name="get" scoped="" ref="0x7f3a152e5b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152e5ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152e5e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152e4020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152e42b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152e4440"/>
        <function-ref name="set" scoped="" ref="0x7f3a152e45d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152e4760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152e51b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152e48f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152e4a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f3a152cd8a0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f3a152cd8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152cdc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152cddb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152cc020"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152cbc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152cc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152cc4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152cc660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152cc7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152cc980"/>
        <function-ref name="get" scoped="" ref="0x7f3a152ccb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152ccca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152cce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152cb020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152cb2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152cb440"/>
        <function-ref name="set" scoped="" ref="0x7f3a152cb5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152cb760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152cc1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152cb8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152cba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f3a152b98a0" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f3a152b98a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152b9c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152b9db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152b8020"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152b7c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152b8340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152b84d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152b8660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152b87f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152b8980"/>
        <function-ref name="get" scoped="" ref="0x7f3a152b8b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152b8ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152b8e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152b7020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152b72b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152b7440"/>
        <function-ref name="set" scoped="" ref="0x7f3a152b75d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152b7760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152b81b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152b78f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152b7a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f3a152a4d50" loc="185:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f3a152a4d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152a3100"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152a3290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152a3420"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152a11b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152a3740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152a38d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152a3a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152a3bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152a3d80"/>
        <function-ref name="get" scoped="" ref="0x7f3a152a2020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152a21b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152a2340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152a24d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152a2760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152a28f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a152a2a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152a2c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152a35b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152a2da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152a1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f3a15290d40" loc="195:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f3a15290d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1528f0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1528f270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1528f400"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1528d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1528f720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1528f8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1528fa40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1528fbd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1528fd60"/>
        <function-ref name="get" scoped="" ref="0x7f3a1528e020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1528e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1528e340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1528e4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1528e760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1528e8f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a1528ea80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1528ec10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1528f590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1528eda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1528d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f3a15271d50" loc="211:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f3a15271d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15270100"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15270290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15270420"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1526e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15270740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152708d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15270a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15270bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15270d80"/>
        <function-ref name="get" scoped="" ref="0x7f3a1526f020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1526f1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1526f340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1526f4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1526f760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1526f8f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a1526fa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1526fc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152705b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1526fda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1526e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f3a15317d50" loc="57:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f3a15317d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15316100"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15316290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15316420"/>
        <function-ref name="clr" scoped="" ref="0x7f3a153141b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15316740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a153168d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15316a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15316bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15316d80"/>
        <function-ref name="get" scoped="" ref="0x7f3a15315020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a153151b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15315340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a153154d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15315760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a153158f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15315a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15315c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a153165b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15315da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15314020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f3a152a1580" loc="186:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f3a152a1580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152a1900"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152a1a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152a1c20"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1529f980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152a0020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152a01b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152a0340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152a04d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152a0660"/>
        <function-ref name="get" scoped="" ref="0x7f3a152a07f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152a0980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152a0b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152a0ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1529f020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1529f1b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a1529f340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1529f4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152a1db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1529f660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1529f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f3a15312d50" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f3a15312d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15311100"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15311290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15311420"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1530f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15311740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a153118d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15311a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15311bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15311d80"/>
        <function-ref name="get" scoped="" ref="0x7f3a15310020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a153101b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15310340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a153104d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15310760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a153108f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15310a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15310c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a153115b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15310da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1530f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f3a152f9e50" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f3a152f9e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152f8210"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152f83a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152f8530"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152f6340"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152f8850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152f89e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152f8b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152f8d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152f7020"/>
        <function-ref name="get" scoped="" ref="0x7f3a152f71b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152f7340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152f74d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152f7660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152f78f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152f7a80"/>
        <function-ref name="set" scoped="" ref="0x7f3a152f7c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152f7da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152f86c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152f6020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152f61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f3a152de020" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f3a152de020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152de3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152de530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152de6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152dc4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152de9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152deb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152ded00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152dd020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152dd1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152dd340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152dd4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152dd660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152dd7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152dda80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152ddc10"/>
        <function-ref name="set" scoped="" ref="0x7f3a152ddda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152dc020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152de850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152dc1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152dc340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f3a152c5020" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f3a152c5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152c53a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152c5530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152c56c0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152c34d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152c59e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152c5b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152c5d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152c4020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152c41b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152c4340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152c44d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152c4660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152c47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152c4a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152c4c10"/>
        <function-ref name="set" scoped="" ref="0x7f3a152c4da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152c3020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152c5850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152c31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152c3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f3a152b0020" loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f3a152b0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152b03a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152b0530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152b06c0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152ae4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152b09e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152b0b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152b0d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152af020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152af1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152af340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152af4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152af660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152af7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152afa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152afc10"/>
        <function-ref name="set" scoped="" ref="0x7f3a152afda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152ae020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152b0850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152ae1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152ae340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f3a15323580" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f3a15323580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15323900"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15323a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15323c20"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15321980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15322020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a153221b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15322340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a153224d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15322660"/>
        <function-ref name="get" scoped="" ref="0x7f3a153227f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15322980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15322b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15322ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15321020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a153211b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15321340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a153214d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15323db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15321660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a153217f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f3a1530a580" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f3a1530a580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1530aa00"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1530ab90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1530ad20"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15308a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a153091b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a15309340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a153094d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15309660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a153097f0"/>
        <function-ref name="get" scoped="" ref="0x7f3a15309980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15309b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15309ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15309e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15308120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a153082b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15308440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a153085d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15309020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15308760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a153088f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f3a152f1710" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f3a152f1710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152f1a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152f1c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152f1db0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152eea80"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152ef1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152ef340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152ef4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152ef660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152ef7f0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152ef980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152efb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152efca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152efe30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152ee120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152ee2b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a152ee440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152ee5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152ef020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152ee760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152ee8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f3a152ab580" loc="182:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f3a152ab580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152ab900"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152aba90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152abc20"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152a9980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152aa020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152aa1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152aa340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152aa4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152aa660"/>
        <function-ref name="get" scoped="" ref="0x7f3a152aa7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152aa980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152aab10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152aaca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152a9020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152a91b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a152a9340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152a94d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152abdb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152a9660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152a97f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f3a15288570" loc="198:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f3a15288570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152888f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15288a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15288c10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15286980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15287020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152871b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15287340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152874d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15287660"/>
        <function-ref name="get" scoped="" ref="0x7f3a152877f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15287980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15287b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15287ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15286020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152861b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15286340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152864d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15288da0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15286660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152867f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f3a15273570" loc="209:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f3a15273570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152738f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15273a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15273c10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15271980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15272020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152721b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15272340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152724d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15272660"/>
        <function-ref name="get" scoped="" ref="0x7f3a152727f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15272980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15272b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15272ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15271020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152711b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15271340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152714d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15273da0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15271660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152717f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f3a15297580" loc="191:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f3a15297580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15297900"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15297a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15297c20"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15295980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15296020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152961b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15296340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152964d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15296660"/>
        <function-ref name="get" scoped="" ref="0x7f3a152967f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15296980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15296b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15296ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15295020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152951b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15295340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152954d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15297db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15295660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152957f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f3a152eb710" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f3a152eb710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152ebc90"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152ebe20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152ea020"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152e9c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152ea340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152ea4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152ea660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152ea7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152ea980"/>
        <function-ref name="get" scoped="" ref="0x7f3a152eab10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152eaca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152eae30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152e9020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152e92b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152e9440"/>
        <function-ref name="set" scoped="" ref="0x7f3a152e95d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152e9760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152ea1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152e98f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152e9a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f3a152d28a0" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f3a152d28a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152d2c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152d2db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152d1020"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152d0c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152d1340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152d14d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152d1660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152d17f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152d1980"/>
        <function-ref name="get" scoped="" ref="0x7f3a152d1b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152d1ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152d1e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152d0020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152d02b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152d0440"/>
        <function-ref name="set" scoped="" ref="0x7f3a152d05d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152d0760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152d11b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152d08f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152d0a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f3a152be8a0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f3a152be8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152bec20"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152bedb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152bd020"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152bcc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152bd340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152bd4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152bd660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152bd7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152bd980"/>
        <function-ref name="get" scoped="" ref="0x7f3a152bdb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152bdca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152bde30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152bc020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152bc2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152bc440"/>
        <function-ref name="set" scoped="" ref="0x7f3a152bc5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152bc760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152bd1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152bc8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152bca80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f3a15286d40" loc="199:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f3a15286d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152850e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15285270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15285400"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152831b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15285720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152858b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15285a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15285bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15285d60"/>
        <function-ref name="get" scoped="" ref="0x7f3a15284020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152841b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15284340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152844d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15284760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152848f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15284a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15284c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15285590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15284da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15283020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f3a1529fd40" loc="188:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f3a1529fd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1529e0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1529e270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1529e400"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1529c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1529e720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1529e8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1529ea40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1529ebd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1529ed60"/>
        <function-ref name="get" scoped="" ref="0x7f3a1529d020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1529d1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1529d340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1529d4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1529d760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1529d8f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a1529da80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1529dc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1529e590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1529dda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1529c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f3a1531cd50" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f3a1531cd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1531b100"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1531b290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1531b420"/>
        <function-ref name="clr" scoped="" ref="0x7f3a153191b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1531b740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1531b8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1531ba60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1531bbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1531bd80"/>
        <function-ref name="get" scoped="" ref="0x7f3a1531a020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1531a1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1531a340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1531a4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1531a760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1531a8f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a1531aa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1531ac10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1531b5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1531ada0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15319020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f3a15303e50" loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f3a15303e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15302210"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a153023a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15302530"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15300340"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15302850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a153029e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15302b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15302d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15301020"/>
        <function-ref name="get" scoped="" ref="0x7f3a153011b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15301340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a153014d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15301660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a153018f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a15301a80"/>
        <function-ref name="set" scoped="" ref="0x7f3a15301c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15301da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a153026c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15300020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a153001b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f3a152c38a0" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f3a152c38a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152c3c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152c3db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152c2020"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152c1c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152c2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152c24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152c2660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152c27f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152c2980"/>
        <function-ref name="get" scoped="" ref="0x7f3a152c2b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152c2ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152c2e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152c1020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152c12b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152c1440"/>
        <function-ref name="set" scoped="" ref="0x7f3a152c15d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152c1760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152c21b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152c18f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152c1a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f3a152fee50" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f3a152fee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152fd210"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152fd3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152fd530"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152fb340"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152fd850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152fd9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152fdb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152fdd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152fc020"/>
        <function-ref name="get" scoped="" ref="0x7f3a152fc1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152fc340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152fc4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152fc660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152fc8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152fca80"/>
        <function-ref name="set" scoped="" ref="0x7f3a152fcc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152fcda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152fd6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152fb020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152fb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f3a152e3020" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f3a152e3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152e33a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152e3530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152e36c0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152e14d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152e39e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152e3b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152e3d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152e2020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152e21b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152e2340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152e24d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152e2660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152e27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152e2a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152e2c10"/>
        <function-ref name="set" scoped="" ref="0x7f3a152e2da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152e1020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152e3850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152e11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152e1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f3a152ca020" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f3a152ca020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152ca3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152ca530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152ca6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152c84d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152ca9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152cab70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152cad00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152c9020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152c91b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152c9340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152c94d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152c9660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152c97f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152c9a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152c9c10"/>
        <function-ref name="set" scoped="" ref="0x7f3a152c9da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152c8020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152ca850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152c81b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152c8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f3a152b5020" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f3a152b5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152b53a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152b5530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152b56c0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152b34d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152b59e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152b5b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152b5d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152b4020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152b41b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152b4340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152b44d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152b4660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152b47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152b4a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152b4c10"/>
        <function-ref name="set" scoped="" ref="0x7f3a152b4da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152b3020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152b5850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152b31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152b3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f3a1529ad50" loc="190:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f3a1529ad50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15299100"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15299290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15299420"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152971b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15299740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152998d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15299a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15299bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15299d80"/>
        <function-ref name="get" scoped="" ref="0x7f3a15298020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152981b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15298340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152984d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15298760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152988f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15298a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15298c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152995b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15298da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15297020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f3a15327530" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f3a15327530"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a153278b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15327a40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15327bd0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15335980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15336020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a153361b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15336340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a153364d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15336660"/>
        <function-ref name="get" scoped="" ref="0x7f3a153367f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15336980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15336b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15336ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15335020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a153351b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15335340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a153354d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15327d60"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15335660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a153357f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f3a1530f580" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f3a1530f580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1530f900"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1530fa90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1530fc20"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1530d980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1530e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1530e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1530e340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1530e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1530e660"/>
        <function-ref name="get" scoped="" ref="0x7f3a1530e7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1530e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1530eb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1530eca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1530d020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1530d1b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a1530d340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1530d4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1530fdb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1530d660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1530d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f3a152f6710" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f3a152f6710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152f6a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152f6c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152f6db0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152f4a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152f51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152f5340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152f54d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152f5660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152f57f0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152f5980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152f5b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152f5ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152f5e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152f4120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152f42b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a152f4440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152f45d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152f5020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152f4760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152f48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f3a152dc8a0" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f3a152dc8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152dcc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152dcdb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152db020"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152dac10"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152db340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152db4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152db660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152db7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152db980"/>
        <function-ref name="get" scoped="" ref="0x7f3a152dbb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152dbca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152dbe30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152da020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152da2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152da440"/>
        <function-ref name="set" scoped="" ref="0x7f3a152da5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152da760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152db1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152da8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152daa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f3a15295d50" loc="192:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f3a15295d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15294100"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15294290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15294420"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152921b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15294740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152948d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15294a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15294bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15294d80"/>
        <function-ref name="get" scoped="" ref="0x7f3a15293020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152931b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15293340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152934d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15293760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152938f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15293a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15293c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152945b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15293da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15292020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f3a1528d570" loc="196:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f3a1528d570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1528d8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1528da80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1528dc10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1528b980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1528c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1528c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1528c340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1528c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1528c660"/>
        <function-ref name="get" scoped="" ref="0x7f3a1528c7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1528c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1528cb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1528cca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1528b020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1528b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a1528b340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1528b4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1528dda0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1528b660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1528b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f3a1527e570" loc="202:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f3a1527e570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1527e8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1527ea80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1527ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1527c980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1527d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1527d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1527d340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1527d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1527d660"/>
        <function-ref name="get" scoped="" ref="0x7f3a1527d7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1527d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1527db10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1527dca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1527c020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1527c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a1527c340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1527c4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1527eda0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1527c660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1527c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f3a152d78a0" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f3a152d78a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152d7c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152d7db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152d6020"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152d5c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152d6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152d64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152d6660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152d67f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152d6980"/>
        <function-ref name="get" scoped="" ref="0x7f3a152d6b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152d6ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152d6e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152d5020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152d52b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152d5440"/>
        <function-ref name="set" scoped="" ref="0x7f3a152d55d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152d5760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152d61b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152d58f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152d5a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f3a15292580" loc="193:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f3a15292580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15292900"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15292a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15292c20"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15290980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15291020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152911b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15291340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152914d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15291660"/>
        <function-ref name="get" scoped="" ref="0x7f3a152917f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15291980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15291b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15291ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15290020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152901b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15290340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152904d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15292db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15290660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152907f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f3a15321d50" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f3a15321d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15320100"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15320290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15320420"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1531e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15320740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a153208d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15320a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15320bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15320d80"/>
        <function-ref name="get" scoped="" ref="0x7f3a1531f020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1531f1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1531f340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1531f4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1531f760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1531f8f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a1531fa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1531fc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a153205b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1531fda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1531e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f3a15308e50" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f3a15308e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15307210"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a153073a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15307530"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15305340"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15307850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a153079e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15307b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15307d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15306020"/>
        <function-ref name="get" scoped="" ref="0x7f3a153061b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15306340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a153064d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15306660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a153068f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a15306a80"/>
        <function-ref name="set" scoped="" ref="0x7f3a15306c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15306da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a153076c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15305020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a153051b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f3a152eee50" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f3a152eee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152ed210"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152ed3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152ed530"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152eb340"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152ed850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152ed9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152edb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152edd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152ec020"/>
        <function-ref name="get" scoped="" ref="0x7f3a152ec1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152ec340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152ec4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152ec660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152ec8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152eca80"/>
        <function-ref name="set" scoped="" ref="0x7f3a152ecc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152ecda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152ed6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152eb020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152eb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f3a1529c580" loc="189:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f3a1529c580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1529c900"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1529ca90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1529cc20"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1529a980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1529b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1529b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1529b340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1529b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1529b660"/>
        <function-ref name="get" scoped="" ref="0x7f3a1529b7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1529b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1529bb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1529bca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1529a020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1529a1b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a1529a340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1529a4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1529cdb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1529a660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1529a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f3a15283570" loc="200:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f3a15283570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152838f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15283a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15283c10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15281980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15282020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152821b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15282340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152824d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15282660"/>
        <function-ref name="get" scoped="" ref="0x7f3a152827f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15282980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15282b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15282ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15281020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152811b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15281340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152814d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15283da0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15281660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152817f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f3a152e8020" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f3a152e8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152e83a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152e8530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152e86c0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152e64d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152e89e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152e8b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152e8d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152e7020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152e71b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152e7340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152e74d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152e7660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152e77f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152e7a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152e7c10"/>
        <function-ref name="set" scoped="" ref="0x7f3a152e7da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152e6020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152e8850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152e61b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152e6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f3a152cf020" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f3a152cf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152cf3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152cf530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152cf6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152cd4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152cf9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152cfb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152cfd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152ce020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152ce1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152ce340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152ce4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152ce660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152ce7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152cea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152cec10"/>
        <function-ref name="set" scoped="" ref="0x7f3a152ceda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152cd020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152cf850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152cd1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152cd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f3a152bb020" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f3a152bb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152bb3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152bb530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152bb6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152b94d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152bb9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152bbb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152bbd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152ba020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152ba1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152ba340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152ba4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152ba660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152ba7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152baa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152bac10"/>
        <function-ref name="set" scoped="" ref="0x7f3a152bada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152b9020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152bb850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152b91b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152b9340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f3a15319580" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f3a15319580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15319900"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15319a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15319c20"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15317980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15318020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a153181b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15318340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a153184d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15318660"/>
        <function-ref name="get" scoped="" ref="0x7f3a153187f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15318980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15318b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15318ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15317020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a153171b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15317340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a153174d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15319db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15317660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a153177f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f3a152c0020" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f3a152c0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152c03a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152c0530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152c06c0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152be4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152c09e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152c0b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152c0d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152bf020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152bf1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152bf340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152bf4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152bf660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152bf7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152bfa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152bfc10"/>
        <function-ref name="set" scoped="" ref="0x7f3a152bfda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152be020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152c0850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152be1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152be340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f3a15314580" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f3a15314580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15314900"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15314a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15314c20"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15312980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15313020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a153131b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15313340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a153134d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15313660"/>
        <function-ref name="get" scoped="" ref="0x7f3a153137f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15313980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15313b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15313ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15312020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a153121b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15312340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a153124d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15314db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15312660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a153127f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f3a152fb710" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f3a152fb710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152fba90"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152fbc20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152fbdb0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152f9a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152fa1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152fa340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152fa4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152fa660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152fa7f0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152fa980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152fab10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152faca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152fae30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152f9120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152f92b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a152f9440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152f95d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152fa020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152f9760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152f98f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f3a152e18a0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f3a152e18a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152e1c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152e1db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152e0020"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152dfc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152e0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152e04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152e0660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152e07f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152e0980"/>
        <function-ref name="get" scoped="" ref="0x7f3a152e0b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152e0ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152e0e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152df020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152df2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152df440"/>
        <function-ref name="set" scoped="" ref="0x7f3a152df5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152df760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152e01b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152df8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152dfa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f3a152c88a0" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f3a152c88a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152c8c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152c8db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152c7020"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152c6c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152c7340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152c74d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152c7660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152c77f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152c7980"/>
        <function-ref name="get" scoped="" ref="0x7f3a152c7b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152c7ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152c7e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152c6020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152c62b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152c6440"/>
        <function-ref name="set" scoped="" ref="0x7f3a152c65d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152c6760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152c71b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152c68f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152c6a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f3a152b38a0" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f3a152b38a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152b3c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152b3db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152b2020"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152b1c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152b2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152b24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152b2660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152b27f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152b2980"/>
        <function-ref name="get" scoped="" ref="0x7f3a152b2b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152b2ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152b2e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152b1020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152b12b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152b1440"/>
        <function-ref name="set" scoped="" ref="0x7f3a152b15d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152b1760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152b21b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152b18f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152b1a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f3a15335d50" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f3a15335d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15325100"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15325290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15325420"/>
        <function-ref name="clr" scoped="" ref="0x7f3a153231b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15325740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a153258d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15325a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15325bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15325d80"/>
        <function-ref name="get" scoped="" ref="0x7f3a15324020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a153241b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15324340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a153244d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15324760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a153248f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15324a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15324c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a153255b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15324da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15323020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f3a1530dd50" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f3a1530dd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1530c100"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1530c290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1530c420"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1530a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1530c740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1530c8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1530ca60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1530cbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1530cd80"/>
        <function-ref name="get" scoped="" ref="0x7f3a1530b020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1530b1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1530b340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1530b4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1530b760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1530b8f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a1530ba80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1530bc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1530c5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1530bda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1530a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f3a152f4e50" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f3a152f4e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152f3210"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152f33a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152f3530"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152f1340"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152f3850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152f39e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152f3b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152f3d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152f2020"/>
        <function-ref name="get" scoped="" ref="0x7f3a152f21b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152f2340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152f24d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152f2660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152f28f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152f2a80"/>
        <function-ref name="set" scoped="" ref="0x7f3a152f2c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152f2da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152f36c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152f1020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152f11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f3a152d9020" loc="90:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f3a152d9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152d93a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152d9530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152d96c0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152d74d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152d99e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152d9b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152d9d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152d8020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152d81b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152d8340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152d84d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152d8660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152d87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152d8a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152d8c10"/>
        <function-ref name="set" scoped="" ref="0x7f3a152d8da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152d7020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152d9850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152d71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152d7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f3a1528bd40" loc="197:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f3a1528bd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1528a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1528a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1528a400"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152881b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1528a720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1528a8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1528aa40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1528abd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1528ad60"/>
        <function-ref name="get" scoped="" ref="0x7f3a15289020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152891b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15289340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152894d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15289760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152898f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15289a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15289c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1528a590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15289da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15288020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f3a15278560" loc="206:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f3a15278560"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152788e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15278a70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15278c00"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15276980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15277020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152771b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15277340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152774d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15277660"/>
        <function-ref name="get" scoped="" ref="0x7f3a152777f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15277980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15277b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15277ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15276020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152761b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15276340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152764d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15278d90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15276660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152767f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f3a152a6580" loc="184:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f3a152a6580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152a6900"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152a6a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152a6c20"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152a4980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152a5020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152a51b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152a5340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152a54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152a5660"/>
        <function-ref name="get" scoped="" ref="0x7f3a152a57f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152a5980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152a5b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152a5ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152a4020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152a41b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a152a4340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152a44d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152a6db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152a4660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152a47f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f3a152d4020" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f3a152d4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152d43a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152d4530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152d46c0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152d24d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152d49e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152d4b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152d4d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152d3020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152d31b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a152d3340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152d34d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152d3660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152d37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152d3a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152d3c10"/>
        <function-ref name="set" scoped="" ref="0x7f3a152d3da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152d2020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152d4850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152d21b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152d2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f3a15276d40" loc="208:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f3a15276d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152750e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15275270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15275400"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152731b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15275720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152758b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15275a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15275bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15275d60"/>
        <function-ref name="get" scoped="" ref="0x7f3a15274020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152741b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15274340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152744d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15274760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152748f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15274a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15274c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15275590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15274da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15273020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f3a1526e580" loc="212:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f3a1526e580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1526e900"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1526ea90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1526ec20"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1526c980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1526d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1526d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1526d340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1526d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1526d660"/>
        <function-ref name="get" scoped="" ref="0x7f3a1526d7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1526d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1526db10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1526dca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1526c020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1526c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a1526c340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1526c4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1526edb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1526c660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1526c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f3a152ae8f0" loc="181:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f3a152ae8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152ad0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152ad230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a152ad3c0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152ab1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a152ad6e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152ad870"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a152ada00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152adb90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a152add20"/>
        <function-ref name="get" scoped="" ref="0x7f3a152ac020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a152ac1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152ac340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a152ac4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152ac760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152ac8f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a152aca80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152acc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a152ad550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152acda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a152ab020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a1523a540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a1523a540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1523a8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1523aa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1523abe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15238980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15239020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152391b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15239340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152394d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15239660"/>
        <function-ref name="get" scoped="" ref="0x7f3a152397f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15239980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15239b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15239ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15238020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152381b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15238340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152384d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15238660"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1523ad70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152387f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15235b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15235b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15234020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152341b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15234340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15232020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15234660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152347f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15234980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15234b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15234ca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a15234e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15233020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152331b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15233340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152335d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a15233760"/>
        <function-ref name="set" scoped="" ref="0x7f3a152338f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15233a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15233c10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152344d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15233da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a1522f060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a1522f060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1522f3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1522f570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1522f700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1522d4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1522fa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1522fbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1522fd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1522e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1522e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a1522e340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1522e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1522e660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1522e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1522ea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1522ec10"/>
        <function-ref name="set" scoped="" ref="0x7f3a1522eda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1522d020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1522d1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1522f890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1522d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a1522a540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a1522a540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1522a8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1522aa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1522abe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15228980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15229020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152291b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15229340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152294d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15229660"/>
        <function-ref name="get" scoped="" ref="0x7f3a152297f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15229980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15229b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15229ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15228020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152281b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15228340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152284d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15228660"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1522ad70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152287f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15225b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15225b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15224020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152241b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15224340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15222020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15224660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152247f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15224980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15224b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15224ca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a15224e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15223020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152231b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15223340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152235d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a15223760"/>
        <function-ref name="set" scoped="" ref="0x7f3a152238f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15223a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15223c10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152244d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15223da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a1521f060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a1521f060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1521f3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1521f570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1521f700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1521d4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1521fa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1521fbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1521fd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1521e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1521e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a1521e340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1521e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1521e660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1521e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1521ea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1521ec10"/>
        <function-ref name="set" scoped="" ref="0x7f3a1521eda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1521d020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1521d1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1521f890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1521d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15219540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15219540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152198c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15219a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15219be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15217980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15218020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152181b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15218340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152184d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15218660"/>
        <function-ref name="get" scoped="" ref="0x7f3a152187f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15218980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15218b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15218ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15217020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152171b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15217340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152174d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15217660"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15219d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152177f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15214b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15214b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15213020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152131b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15213340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15211020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15213660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152137f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15213980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15213b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15213ca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a15213e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15212020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152121b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15212340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152125d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a15212760"/>
        <function-ref name="set" scoped="" ref="0x7f3a152128f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15212a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15212c10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152134d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15212da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a1520e060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a1520e060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1520e3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1520e570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1520e700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1520c4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1520ea20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1520ebb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1520ed40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1520d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1520d1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a1520d340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1520d4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1520d660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1520d7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1520da80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1520dc10"/>
        <function-ref name="set" scoped="" ref="0x7f3a1520dda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1520c020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1520c1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1520e890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1520c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15209540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15209540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a152098c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15209a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15209be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15207980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15208020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152081b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15208340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a152084d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15208660"/>
        <function-ref name="get" scoped="" ref="0x7f3a152087f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15208980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15208b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15208ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15207020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a152071b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15207340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a152074d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15207660"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15209d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a152077f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15204b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15204b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15203020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a152031b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15203340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15201020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15203660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a152037f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15203980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15203b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15203ca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a15203e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15202020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a152021b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15202340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a152025d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a15202760"/>
        <function-ref name="set" scoped="" ref="0x7f3a152028f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15202a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15202c10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a152034d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15202da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151fe060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151fe060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151fe3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151fe570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151fe700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151fc4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151fea20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151febb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151fed40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151fd020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151fd1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a151fd340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151fd4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151fd660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151fd7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151fda80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151fdc10"/>
        <function-ref name="set" scoped="" ref="0x7f3a151fdda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151fc020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151fc1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151fe890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151fc340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151f96d0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151f96d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151f9a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151f9be0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151f9d70"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151f7a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151f81b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151f8340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151f84d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151f8660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151f87f0"/>
        <function-ref name="get" scoped="" ref="0x7f3a151f8980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151f8b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151f8ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151f8e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151f7120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151f72b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a151f7440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151f75d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151f7760"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151f8020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151f78f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151f4b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151f4b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151f2020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151f21b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151f2340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151f0020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151f2660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151f27f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151f2980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151f2b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151f2ca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a151f2e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151f1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151f11b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151f1340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151f15d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151f1760"/>
        <function-ref name="set" scoped="" ref="0x7f3a151f18f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151f1a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151f1c10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151f24d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151f1da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151ed060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151ed060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151ed3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151ed570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151ed700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151eb4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151eda20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151edbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151edd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151ec020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151ec1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a151ec340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151ec4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151ec660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151ec7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151eca80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151ecc10"/>
        <function-ref name="set" scoped="" ref="0x7f3a151ecda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151eb020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151eb1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151ed890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151eb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151e8540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151e8540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151e88c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151e8a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151e8be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151e6980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151e7020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151e71b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151e7340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151e74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151e7660"/>
        <function-ref name="get" scoped="" ref="0x7f3a151e77f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151e7980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151e7b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151e7ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151e6020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151e61b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a151e6340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151e64d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151e6660"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151e8d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151e67f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151e3b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151e3b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151e2020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151e21b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151e2340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151e0020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151e2660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151e27f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151e2980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151e2b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151e2ca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a151e2e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151e1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151e11b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151e1340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151e15d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151e1760"/>
        <function-ref name="set" scoped="" ref="0x7f3a151e18f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151e1a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151e1c10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151e24d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151e1da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151dd060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151dd060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151dd3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151dd570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151dd700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151db4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151dda20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151ddbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151ddd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151dc020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151dc1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a151dc340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151dc4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151dc660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151dc7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151dca80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151dcc10"/>
        <function-ref name="set" scoped="" ref="0x7f3a151dcda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151db020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151db1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151dd890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151db340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151d8540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151d8540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151d88c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151d8a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151d8be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151d6980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151d7020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151d71b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151d7340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151d74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151d7660"/>
        <function-ref name="get" scoped="" ref="0x7f3a151d77f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151d7980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151d7b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151d7ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151d6020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151d61b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a151d6340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151d64d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151d6660"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151d8d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151d67f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151d3b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151d3b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151d2020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151d21b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151d2340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151d0020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151d2660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151d27f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151d2980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151d2b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151d2ca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a151d2e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151d1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151d11b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151d1340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151d15d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151d1760"/>
        <function-ref name="set" scoped="" ref="0x7f3a151d18f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151d1a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151d1c10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151d24d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151d1da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151cd060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151cd060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151cd3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151cd570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151cd700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151cb4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151cda20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151cdbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151cdd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151cc020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151cc1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a151cc340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151cc4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151cc660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151cc7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151cca80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151ccc10"/>
        <function-ref name="set" scoped="" ref="0x7f3a151ccda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151cb020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151cb1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151cd890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151cb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151c8540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151c8540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151c88c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151c8a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151c8be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151c5980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151c6020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151c61b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151c6340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151c64d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151c6660"/>
        <function-ref name="get" scoped="" ref="0x7f3a151c67f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151c6980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151c6b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151c6ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151c5020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151c51b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a151c5340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151c54d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151c5660"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151c8d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151c57f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151c2b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151c2b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151c1020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151c11b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151c1340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151bf020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151c1660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151c17f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151c1980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151c1b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151c1ca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a151c1e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151c0020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151c01b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151c0340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151c05d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151c0760"/>
        <function-ref name="set" scoped="" ref="0x7f3a151c08f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151c0a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151c0c10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151c14d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151c0da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151bc060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151bc060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151bc3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151bc570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151bc700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151ba4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151bca20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151bcbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151bcd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151bb020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151bb1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a151bb340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151bb4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151bb660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151bb7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151bba80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151bbc10"/>
        <function-ref name="set" scoped="" ref="0x7f3a151bbda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151ba020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151ba1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151bc890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151ba340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151b7740" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151b7740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151b7ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151b7c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151b7de0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151b5a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151b61b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151b6340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151b64d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151b6660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151b67f0"/>
        <function-ref name="get" scoped="" ref="0x7f3a151b6980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151b6b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151b6ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151b6e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151b5120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151b52b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a151b5440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151b55d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151b5760"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151b6020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151b58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151b2b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151b2b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151b1020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151b11b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151b1340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151af020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151b1660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151b17f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151b1980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151b1b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151b1ca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a151b1e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151b0020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151b01b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151b0340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151b05d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151b0760"/>
        <function-ref name="set" scoped="" ref="0x7f3a151b08f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151b0a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151b0c10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151b14d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151b0da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151ac060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151ac060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151ac3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151ac570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151ac700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151aa4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151aca20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151acbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151acd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151ab020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151ab1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a151ab340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151ab4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151ab660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151ab7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151aba80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151abc10"/>
        <function-ref name="set" scoped="" ref="0x7f3a151abda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151aa020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151aa1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151ac890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151aa340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151a7540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151a7540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151a78c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151a7a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151a7be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151a5980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151a6020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151a61b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151a6340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151a64d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151a6660"/>
        <function-ref name="get" scoped="" ref="0x7f3a151a67f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151a6980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151a6b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151a6ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151a5020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151a51b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a151a5340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151a54d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151a5660"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151a7d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151a57f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a151a2b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a151a2b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151a1020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151a11b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a151a1340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1519f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a151a1660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151a17f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a151a1980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151a1b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151a1ca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a151a1e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151a0020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a151a01b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151a0340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a151a05d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151a0760"/>
        <function-ref name="set" scoped="" ref="0x7f3a151a08f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151a0a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151a0c10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151a14d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151a0da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a1519b060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a1519b060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1519b3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1519b570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1519b700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151994d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1519ba20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1519bbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1519bd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1519a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1519a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a1519a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1519a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1519a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1519a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1519aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1519ac10"/>
        <function-ref name="set" scoped="" ref="0x7f3a1519ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15199020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151991b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1519b890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15199340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15196540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15196540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151968c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15196a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15196be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15194980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15195020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151951b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15195340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151954d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15195660"/>
        <function-ref name="get" scoped="" ref="0x7f3a151957f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15195980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15195b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15195ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15194020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151941b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15194340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151944d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15194660"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15196d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151947f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15191b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15191b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15190020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151901b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15190340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1518e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15190660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151907f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15190980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15190b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15190ca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a15190e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1518f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1518f1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1518f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1518f5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1518f760"/>
        <function-ref name="set" scoped="" ref="0x7f3a1518f8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1518fa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1518fc10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151904d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1518fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a1518b060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a1518b060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1518b3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1518b570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1518b700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151894d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1518ba20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1518bbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1518bd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1518a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1518a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a1518a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1518a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1518a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1518a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1518aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1518ac10"/>
        <function-ref name="set" scoped="" ref="0x7f3a1518ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15189020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151891b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1518b890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15189340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15186540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15186540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151868c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15186a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15186be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15184980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15185020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151851b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15185340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151854d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15185660"/>
        <function-ref name="get" scoped="" ref="0x7f3a151857f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15185980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15185b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15185ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15184020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151841b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15184340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151844d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15184660"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15186d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151847f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15181b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15181b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15180020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a151801b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15180340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1517e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15180660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151807f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15180980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15180b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15180ca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a15180e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1517f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1517f1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1517f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1517f5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1517f760"/>
        <function-ref name="set" scoped="" ref="0x7f3a1517f8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1517fa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1517fc10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a151804d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1517fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a1517b060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a1517b060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1517b3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1517b570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1517b700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151794d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1517ba20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1517bbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1517bd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1517a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1517a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a1517a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1517a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1517a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1517a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1517aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1517ac10"/>
        <function-ref name="set" scoped="" ref="0x7f3a1517ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15179020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151791b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1517b890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15179340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15176540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15176540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151768c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15176a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15176be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15173980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15174020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151741b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15174340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151744d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15174660"/>
        <function-ref name="get" scoped="" ref="0x7f3a151747f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15174980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15174b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15174ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15173020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151731b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15173340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151734d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15173660"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15176d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151737f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15170b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15170b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1516f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1516f1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1516f340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1516d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1516f660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1516f7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1516f980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1516fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1516fca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a1516fe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1516e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1516e1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1516e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1516e5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1516e760"/>
        <function-ref name="set" scoped="" ref="0x7f3a1516e8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1516ea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1516ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1516f4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1516eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a1516a060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a1516a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1516a3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1516a570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1516a700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151684d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1516aa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1516abb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1516ad40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15169020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151691b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a15169340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151694d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15169660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151697f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15169a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a15169c10"/>
        <function-ref name="set" scoped="" ref="0x7f3a15169da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15168020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151681b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1516a890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15168340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15165540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15165540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151658c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15165a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15165be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15163980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15164020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151641b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15164340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151644d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15164660"/>
        <function-ref name="get" scoped="" ref="0x7f3a151647f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15164980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15164b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15164ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15163020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151631b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15163340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151634d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15163660"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15165d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151637f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15160b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15160b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1515f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1515f1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1515f340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1515d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1515f660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1515f7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1515f980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1515fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1515fca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a1515fe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1515e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1515e1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1515e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1515e5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1515e760"/>
        <function-ref name="set" scoped="" ref="0x7f3a1515e8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1515ea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1515ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1515f4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1515eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a1515a060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a1515a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1515a3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1515a570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1515a700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151584d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1515aa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1515abb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1515ad40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15159020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151591b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a15159340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151594d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15159660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151597f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15159a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a15159c10"/>
        <function-ref name="set" scoped="" ref="0x7f3a15159da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15158020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151581b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1515a890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15158340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15155540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15155540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151558c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15155a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15155be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15153980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15154020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151541b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15154340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151544d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15154660"/>
        <function-ref name="get" scoped="" ref="0x7f3a151547f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15154980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15154b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15154ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15153020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151531b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15153340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151534d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15153660"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15155d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151537f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15150b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15150b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1514f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1514f1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1514f340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1514d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1514f660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1514f7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1514f980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1514fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1514fca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a1514fe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1514e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1514e1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1514e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1514e5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1514e760"/>
        <function-ref name="set" scoped="" ref="0x7f3a1514e8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1514ea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1514ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1514f4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1514eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a1514a060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a1514a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1514a3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1514a570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1514a700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151474d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1514aa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1514abb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1514ad40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15148020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151481b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a15148340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151484d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15148660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151487f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15148a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a15148c10"/>
        <function-ref name="set" scoped="" ref="0x7f3a15148da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15147020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151471b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1514a890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15147340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15144540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15144540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151448c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15144a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15144be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15142980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15143020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a151431b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15143340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a151434d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15143660"/>
        <function-ref name="get" scoped="" ref="0x7f3a151437f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15143980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15143b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15143ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15142020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a151421b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15142340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a151424d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15142660"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15144d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a151427f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a1513fb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a1513fb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1513e020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1513e1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1513e340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1513c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1513e660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1513e7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1513e980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1513eb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1513eca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a1513ee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1513d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1513d1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1513d340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1513d5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1513d760"/>
        <function-ref name="set" scoped="" ref="0x7f3a1513d8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a1513da80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a1513dc10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1513e4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a1513dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f3a15139060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f3a15139060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a151393e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15139570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15139700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a151374d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15139a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a15139bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15139d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15138020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a151381b0"/>
        <function-ref name="get" scoped="" ref="0x7f3a15138340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a151384d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15138660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a151387f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15138a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a15138c10"/>
        <function-ref name="set" scoped="" ref="0x7f3a15138da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15137020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a151371b0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15139890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15137340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f3a15136b40" loc="42:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f3a15136b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a15133020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f3a1512ad70" loc="43:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f3a1512ad70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f3a15132e00"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f3a15131020"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f3a151324a0"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f3a15132630"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f3a151327c0"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f3a15132950"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f3a15132ae0"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f3a15132c70"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f3a15132180"/>
        <function-ref name="node_id" scoped="" ref="0x7f3a15132310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f3a15124380" loc="7:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f3a15124380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a15124700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f3a15131e40" loc="4:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f3a15131e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a151261e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f3a15125b80" loc="6:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f3a15125b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a15124020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f3a15124a60" loc="8:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f3a15124a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a15124de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f3a151264d0" loc="5:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f3a151264d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f3a15125660"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f3a151257f0"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f3a15126b70"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f3a15126d00"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f3a15125020"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f3a151251b0"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f3a15125340"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f3a151254d0"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f3a15126850"/>
        <function-ref name="node_id" scoped="" ref="0x7f3a151269e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f3a1510d450" loc="2:../../../tos/platforms/telosb/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f3a1510d450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a1510d7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f3a15127900" loc="39:../../../tos/platforms/telosb/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f3a15127900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a15127c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f3a150ecde0" loc="40:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f3a150ecde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f3a150f1c70"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f3a150f1310"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f3a150f14a0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f3a150f1630"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f3a150f1180"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f3a150f17c0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f3a150f1950"/>
        <function-ref name="initClocks" scoped="" ref="0x7f3a150f1ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f3a150f5850" loc="39:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f3a150f5850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a150f5bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f3a150db830" loc="203:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f3a150db830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f3a150da7f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f3a150dbd40"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f3a150da020"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f3a150da1b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f3a150dbbb0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f3a150da340"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f3a150da4d0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f3a150da660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f3a150daaf0" loc="204:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f3a150daaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f3a150dae70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f3a150db1c0" loc="202:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f3a150db1c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a150db540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f3a15535c80" loc="55:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f3a15535c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f3a157100a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f3a156929a0" loc="51:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f3a156929a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f3a15692d20"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f3a157ad020"/>
        <function-ref name="sleep" scoped="" ref="0x7f3a157ad1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f3a155d33d0" loc="52:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f3a155d33d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f3a155d3750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430ClockInit" ref="0x7f3a150f38b0" loc="39:../../../tos/platforms/telosb/MoteClockP.nc">
      <component-ref qname="MoteClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f3a150f38b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f3a150a67f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f3a150f3dc0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f3a150a6020"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f3a150a61b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f3a150f3c30"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f3a150a6340"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f3a150a64d0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f3a150a6660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f3a15012c50" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f3a15012c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15011020"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a150111b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15011340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a1500f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15011660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a150117f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a15011980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15011b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15011ca0"/>
        <function-ref name="get" scoped="" ref="0x7f3a15011e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15010020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a150101b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15010340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a150105d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a15010760"/>
        <function-ref name="set" scoped="" ref="0x7f3a150108f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a15010a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15010c10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a150114d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a15010da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f3a150239e0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f3a150239e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15023d60"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15012020"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a150121b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a15012340"/>
        <function-ref name="get" scoped="" ref="0x7f3a150124d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a15012660"/>
        <function-ref name="set" scoped="" ref="0x7f3a150127f0"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15012980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f3a1500c2f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f3a1500c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1500c670"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1500c800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a1500c990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15009660"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1500ccb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1500ce40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a1500a020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a1500a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1500a340"/>
        <function-ref name="get" scoped="" ref="0x7f3a1500a4d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a1500a660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a1500a7f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a1500a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a1500ac10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a1500ada0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15009020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a150091b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15009340"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1500cb20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a150094d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f3a1500d020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f3a1500d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a1500d3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a1500d530"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a1500d6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a1500d850"/>
        <function-ref name="get" scoped="" ref="0x7f3a1500d9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a1500db70"/>
        <function-ref name="set" scoped="" ref="0x7f3a1500dd00"/>
        <function-ref name="clr" scoped="" ref="0x7f3a1500c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f3a150067a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f3a150067a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a15006b20"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15006cb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a15006e40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a15004a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a150051b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a15005340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a150054d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a15005660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a150057f0"/>
        <function-ref name="get" scoped="" ref="0x7f3a15005980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a15005b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a15005ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a15005e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a15004120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a150042b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15004440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a150045d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a15004760"/>
        <function-ref name="clr" scoped="" ref="0x7f3a15005020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a150048f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f3a15007630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f3a15007630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a150079b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a15007b40"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a15007cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a15007e60"/>
        <function-ref name="get" scoped="" ref="0x7f3a15006020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a150061b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a15006340"/>
        <function-ref name="clr" scoped="" ref="0x7f3a150064d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f3a14ff8c00" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f3a14ff8c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a14ff5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f3a14ff8500" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f3a14ff8500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f3a14ff8880"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f3a14ff1aa0" loc="69:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f3a14ff1aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a14ff1e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f3a14ff2280" loc="66:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f3a14ff2280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f3a14ff2600"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f3a14ff13a0" loc="68:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f3a14ff13a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a14ff1720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f3a14ff28f0" loc="67:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f3a14ff28f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a14ff2c70"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f3a14ff2e00"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f3a14ff1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f3a158ad940" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f3a158ad940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f3a158adcc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f3a158ade50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f3a158ba1e0" loc="46:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f3a158ba1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a158ba560"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f3a158ba6f0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f3a158ba880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f3a1545e040" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f3a1545e040"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f3a1545e3c0"/>
        <function-ref name="runTask" scoped="" ref="0x7f3a1545e550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f3a15459490" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f3a15459490"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f3a15459810"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f3a154599a0"/>
        <function-ref name="sleep" scoped="" ref="0x7f3a15459b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f3a1545f140" loc="54:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f3a1545f140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a1545f4c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f3a1545f650"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f3a1545f7e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f3a14ff6740" loc="46:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f3a14ff6740"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f3a14ff6ac0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f3a14ff6c50"/>
        <function-ref name="start" scoped="" ref="0x7f3a14ff6de0"/>
        <function-ref name="stop" scoped="" ref="0x7f3a14fe5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f3a14fe57f0" loc="47:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f3a14fe57f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f3a153bf550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f3a14fe5b70"/>
        <function-ref name="getPayload" scoped="" ref="0x7f3a14fe5d00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f3a14fe4020"/>
        <function-ref name="cancel" scoped="" ref="0x7f3a14fe41b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f3a14fe4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f3a14fe32b0" loc="49:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f3a14fe32b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14fe3630"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f3a14fe37c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f3a14fe3950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f3a14fe3ae0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f3a14fe3c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f3a14fe4b20" loc="48:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f3a14fe4b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f3a153bf550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f3a14fe3020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f3a14fc8e40" loc="53:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f3a14fc8e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f3a14fcf1e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f3a14fcf370"/>
        <function-ref name="led1On" scoped="" ref="0x7f3a14fcf500"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f3a14fcf690"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f3a14fcf820"/>
        <function-ref name="get" scoped="" ref="0x7f3a14fcf9b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f3a14fcfb40"/>
        <function-ref name="led2Off" scoped="" ref="0x7f3a14fce1b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a14fcfcd0"/>
        <function-ref name="led0On" scoped="" ref="0x7f3a14fcfe60"/>
        <function-ref name="led2On" scoped="" ref="0x7f3a14fce020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f3a14fc84c0" loc="51:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f3a14fc84c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f3a14fc8840"/>
        <function-ref name="noAck" scoped="" ref="0x7f3a14fc89d0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f3a14fc8b60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f3a14fd01e0" loc="50:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f3a14fd01e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f3a14fd0560"/>
        <function-ref name="source" scoped="" ref="0x7f3a14fd06f0"/>
        <function-ref name="address" scoped="" ref="0x7f3a14fd0880"/>
        <function-ref name="destination" scoped="" ref="0x7f3a14fd0a10"/>
        <function-ref name="setSource" scoped="" ref="0x7f3a14fd0ba0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f3a14fd0d30"/>
        <function-ref name="type" scoped="" ref="0x7f3a14fe0020"/>
        <function-ref name="setType" scoped="" ref="0x7f3a14fe01b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f3a14fe0340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f3a14fe04d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f3a14fe0660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f3a14f65120" loc="54:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f3a14f65120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f3a14f654a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f3a14f65630"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f3a14f657c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f3a14f65950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f3a14f65ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f3a14f65d70" loc="55:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f3a14f65d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f3a14f63180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f3a14f69110" loc="47:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f3a14f69110"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f3a153bf550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f3a14f694b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f3a14f69640"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f3a14f697d0"/>
        <function-ref name="cancel" scoped="" ref="0x7f3a14f69960"/>
        <function-ref name="sendDone" scoped="" ref="0x7f3a14f69af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f3a14f67a40" loc="50:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f3a14f67a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14f67dc0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f3a14f66020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f3a14f661b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f3a14f66340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f3a14f664d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f3a14f69e70" loc="48:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f3a14f69e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f3a153bf550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f3a14f68240"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f3a14f66720" loc="51:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f3a14f66720"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f3a14f66aa0"/>
        <function-ref name="noAck" scoped="" ref="0x7f3a14f66c30"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f3a14f66dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f3a14f68490" loc="49:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f3a14f68490"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f3a14f68810"/>
        <function-ref name="source" scoped="" ref="0x7f3a14f689a0"/>
        <function-ref name="address" scoped="" ref="0x7f3a14f68b30"/>
        <function-ref name="destination" scoped="" ref="0x7f3a14f68cc0"/>
        <function-ref name="setSource" scoped="" ref="0x7f3a14f68e50"/>
        <function-ref name="setDestination" scoped="" ref="0x7f3a14f67020"/>
        <function-ref name="type" scoped="" ref="0x7f3a14f671b0"/>
        <function-ref name="setType" scoped="" ref="0x7f3a14f67340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f3a14f674d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f3a14f67660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f3a14f677f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f3a14f5f8d0" loc="50:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f3a14f5f8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f3a14f5fc50"/>
        <function-ref name="stopDone" scoped="" ref="0x7f3a14f5fde0"/>
        <function-ref name="start" scoped="" ref="0x7f3a14f5e020"/>
        <function-ref name="stop" scoped="" ref="0x7f3a14f5e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f3a14f5d480" loc="52:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f3a14f5d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f3a153bd0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f3a14f5d800"/>
        <function-ref name="getPayload" scoped="" ref="0x7f3a14f5d990"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f3a14f5db20"/>
        <function-ref name="cancel" scoped="" ref="0x7f3a14f5dcb0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f3a14f5de40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f3a14f5f280" loc="49:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f3a14f5f280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a14f5f600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f3a14f5e940" loc="51:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f3a14f5e940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f3a153bd0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f3a14f5ecc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f3a14f5bdc0" loc="56:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f3a14f5bdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f3a14f5a180"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f3a14f5a310"/>
        <function-ref name="led1On" scoped="" ref="0x7f3a14f5a4a0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f3a14f5a630"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f3a14f5a7c0"/>
        <function-ref name="get" scoped="" ref="0x7f3a14f5a950"/>
        <function-ref name="led1Off" scoped="" ref="0x7f3a14f5aae0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f3a14f561b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a14f5ac70"/>
        <function-ref name="led0On" scoped="" ref="0x7f3a14f5ae00"/>
        <function-ref name="led2On" scoped="" ref="0x7f3a14f56020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7f3a14f5b4a0" loc="55:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f3a14f5b4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f3a153bd0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f3a14f5b820"/>
        <function-ref name="offset" scoped="" ref="0x7f3a14f5b9b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f3a14f5bb40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f3a14f4f810" loc="66:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f3a14f4f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f3a14f4fb90"/>
        <function-ref name="stopDone" scoped="" ref="0x7f3a14f4fd20"/>
        <function-ref name="start" scoped="" ref="0x7f3a14f4e020"/>
        <function-ref name="stop" scoped="" ref="0x7f3a14f4e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7f3a14ee76e0" loc="332:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x7f3a14ee76e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f3a14ee7a60"/>
        <function-ref name="runTask" scoped="" ref="0x7f3a14ee7bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f3a14f39580" loc="74:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f3a14f39580"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f3a14f39900"/>
        <function-ref name="stop" scoped="" ref="0x7f3a14f39a90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7f3a14f1e4f0" loc="191:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x7f3a14f1e4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f3a14f1e870"/>
        <function-ref name="runTask" scoped="" ref="0x7f3a14f1ea00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f3a14f4f1c0" loc="65:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f3a14f4f1c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a14f4f540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7f3a14f37180" loc="75:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x7f3a14f37180"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7f3a14f37500"/>
        <function-ref name="flush" scoped="" ref="0x7f3a14f37690"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7f3a14eeac70" loc="322:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x7f3a14eeac70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f3a14ee9020"/>
        <function-ref name="runTask" scoped="" ref="0x7f3a14ee91b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7f3a14f47020" loc="72:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f3a14f47020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f3a14f473a0"/>
        <function-ref name="resetSend" scoped="" ref="0x7f3a14f47530"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f3a14f476c0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f3a14f47850"/>
        <function-ref name="putData" scoped="" ref="0x7f3a14f479e0"/>
        <function-ref name="putDone" scoped="" ref="0x7f3a14f47b70"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f3a14f47d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f3a14f44020" loc="73:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f3a14f44020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f3a14f443a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f3a14f44530"/>
        <function-ref name="led1On" scoped="" ref="0x7f3a14f446c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f3a14f44850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f3a14f449e0"/>
        <function-ref name="get" scoped="" ref="0x7f3a14f44b70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f3a14f44d00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f3a14f3e4d0"/>
        <function-ref name="set" scoped="" ref="0x7f3a14f3e020"/>
        <function-ref name="led0On" scoped="" ref="0x7f3a14f3e1b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f3a14f3e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7f3a14ee3a00" loc="341:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f3a14ee3a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f3a14ee3d80"/>
        <function-ref name="runTask" scoped="" ref="0x7f3a14ee2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7f3a14f487d0" loc="67:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f3a14f487d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f3a14f48b50"/>
        <function-ref name="nextByte" scoped="" ref="0x7f3a14f48ce0"/>
        <function-ref name="startSend" scoped="" ref="0x7f3a14f48e70"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f3a14f4d030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7f3a14f45c40" loc="68:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f3a14f45c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f3a14f4c020"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f3a14f4c1b0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f3a14f4c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7f3a14e18020" loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x7f3a14e18020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f3a14e183a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f3a14e18530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f3a14e1dde0" loc="51:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f3a14e1dde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f3a153bd0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f3a14e1c1c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f3a14e1c350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f3a14e1c4e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f3a14e1c670"/>
        <function-ref name="sendDone" scoped="" ref="0x7f3a14e1c800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7f3a14e18800" loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x7f3a14e18800"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f3a14e18b80"/>
        <function-ref name="runTask" scoped="" ref="0x7f3a14e18d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f3a14e1d6c0" loc="50:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f3a14e1d6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f3a153bd0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f3a14e1da60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7f3a14e1cc20" loc="54:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x7f3a14e1cc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f3a153bd0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f3a14e1b020"/>
        <function-ref name="offset" scoped="" ref="0x7f3a14e1b1b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f3a14e1b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f3a14e1a920" loc="57:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f3a14e1a920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f3a14e1aca0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f3a14e1ae30"/>
        <function-ref name="led1On" scoped="" ref="0x7f3a14e19020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f3a14e191b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f3a14e19340"/>
        <function-ref name="get" scoped="" ref="0x7f3a14e194d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f3a14e19660"/>
        <function-ref name="led2On" scoped="" ref="0x7f3a14e19ca0"/>
        <function-ref name="set" scoped="" ref="0x7f3a14e19980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f3a14e197f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f3a14e19b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7f3a14e1be80" loc="56:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f3a14e1be80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f3a14e1a220"/>
        <function-ref name="nextByte" scoped="" ref="0x7f3a14e1a3b0"/>
        <function-ref name="startSend" scoped="" ref="0x7f3a14e1a540"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f3a14e1a6d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7f3a14e1b590" loc="55:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f3a14e1b590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f3a14e1b910"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f3a14e1baa0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f3a14e1bc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7f3a14e08d20" loc="50:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f3a14e08d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f3a14e110e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f3a14e11270"/>
        <function-ref name="receive" scoped="" ref="0x7f3a14e11400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f3a14e11590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f3a14e11720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f3a14e118b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f3a14e11a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7f3a14e16e00" loc="48:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f3a14e16e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f3a14e131c0"/>
        <function-ref name="resetSend" scoped="" ref="0x7f3a14e13350"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f3a14e134e0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f3a14e13670"/>
        <function-ref name="putData" scoped="" ref="0x7f3a14e13800"/>
        <function-ref name="putDone" scoped="" ref="0x7f3a14e13990"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f3a14e13b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f3a14e11cc0" loc="51:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f3a14e11cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f3a14e100a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f3a14e10230"/>
        <function-ref name="led1On" scoped="" ref="0x7f3a14e103c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f3a14e10550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f3a14e106e0"/>
        <function-ref name="get" scoped="" ref="0x7f3a14e10870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f3a14e10a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f3a14e061b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a14e10b90"/>
        <function-ref name="led0On" scoped="" ref="0x7f3a14e10d20"/>
        <function-ref name="led2On" scoped="" ref="0x7f3a14e06020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f3a14de9020" loc="6:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f3a14de9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f3a14de93a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f3a14de9530"/>
        <function-ref name="receive" scoped="" ref="0x7f3a14de96c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f3a14de9850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f3a14deb890" loc="5:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f3a14deb890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f3a14debc10"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f3a14debda0"/>
        <function-ref name="receive" scoped="" ref="0x7f3a14dea020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f3a14dea1b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f3a14dea340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f3a14dea4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f3a14dea660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f3a14deb080" loc="4:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f3a14deb080"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f3a14deb400"/>
        <function-ref name="stop" scoped="" ref="0x7f3a14deb590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f3a149ecc70" loc="45:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f3a149ecc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f3a149eb020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f3a149eb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f3a149ea440" loc="47:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f3a149ea440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f3a149ea7c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f3a149ea950"/>
        <function-ref name="receive" scoped="" ref="0x7f3a149eaae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f3a149eac70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f3a149e9020" loc="49:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f3a149e9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f3a149e93a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f3a149eb440" loc="46:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f3a149eb440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f3a149eb7c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f3a149eb950"/>
        <function-ref name="receive" scoped="" ref="0x7f3a149ebae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f3a149ebc70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f3a149ebe00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f3a149ea020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f3a149ea1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f3a149ec020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f3a149ec020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f3a149ec3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f3a149ec530"/>
        <function-ref name="request" scoped="" ref="0x7f3a149ec6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f3a149ec850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f3a149ec9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f3a14d822c0" loc="42:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a14d822c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f3a14d82640"/>
        <function-ref name="configure" scoped="" ref="0x7f3a14d827d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f3a14d7e5c0" loc="44:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f3a14d7e5c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f3a14d7e940"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f3a14d7ead0"/>
        <function-ref name="receive" scoped="" ref="0x7f3a14d7ec60"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f3a14d7edf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f3a14d7ca40" loc="47:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f3a14d7ca40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f3a14d7cdc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f3a14d81040" loc="43:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f3a14d81040"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f3a14d813c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f3a14d81550"/>
        <function-ref name="receive" scoped="" ref="0x7f3a14d816e0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f3a14d81870"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f3a14d81a00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f3a14d81b90"/>
        <function-ref name="sendDone" scoped="" ref="0x7f3a14d81d20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f3a14d7d730" loc="46:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f3a14d7d730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f3a14d7dab0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f3a14d7dc40"/>
        <function-ref name="request" scoped="" ref="0x7f3a14d7ddd0"/>
        <function-ref name="granted" scoped="" ref="0x7f3a14d7c020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f3a14d7c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f3a14d847a0" loc="41:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f3a14d847a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f3a14d84b20"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f3a14d84cb0"/>
        <function-ref name="request" scoped="" ref="0x7f3a14d84e40"/>
        <function-ref name="granted" scoped="" ref="0x7f3a14d83020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f3a14d831b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f3a14d791d0" loc="48:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f3a14d791d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f3a14d79550"/>
        <function-ref name="txDone" scoped="" ref="0x7f3a14d796e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f3a14cec190" loc="47:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a14cec190"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f3a14cec530"/>
        <function-ref name="configure" scoped="" ref="0x7f3a14cec6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f3a14cebbb0" loc="49:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f3a14cebbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f3a14cea020"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f3a14cea1b0"/>
        <function-ref name="receive" scoped="" ref="0x7f3a14cea340"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f3a14cea4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f3a14ce9700" loc="52:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f3a14ce9700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f3a14ce9aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f3a14ce9d70" loc="53:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f3a14ce9d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f3a14ce8180"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f3a14ce8310"/>
        <function-ref name="setUctl" scoped="" ref="0x7f3a14ce84a0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f3a14ce8630"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f3a14ce87c0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f3a14ce8950"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f3a14ce8ae0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f3a14ce8c70"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f3a14ce8e00"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f3a14ce7020"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f3a14ce71b0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f3a14ce7340"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f3a14ce74d0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f3a14ce7760"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f3a14ce78f0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f3a14ce7a80"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f3a14ce7c10"/>
        <function-ref name="isUart" scoped="" ref="0x7f3a14ce7da0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f3a14ce6020"/>
        <function-ref name="isSpi" scoped="" ref="0x7f3a14ce61b0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f3a14ce6340"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f3a14ce64d0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f3a14ce6660"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f3a14ce67f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14ce6980"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f3a14ce6d10"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f3a14ce5020"/>
        <function-ref name="setUbr" scoped="" ref="0x7f3a14ce51b0"/>
        <function-ref name="tx" scoped="" ref="0x7f3a14ce5340"/>
        <function-ref name="getUctl" scoped="" ref="0x7f3a14ce54d0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f3a14ce5660"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f3a14ce57f0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f3a14ce5980"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f3a14ce5b10"/>
        <function-ref name="rx" scoped="" ref="0x7f3a14ce5ca0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f3a14ce5e30"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f3a14ce4020"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f3a14ce41b0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f3a14ce4340"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f3a14ce44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f3a14ceca80" loc="48:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f3a14ceca80"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f3a14cece20"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f3a14ceb020"/>
        <function-ref name="receive" scoped="" ref="0x7f3a14ceb1b0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f3a14ceb340"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f3a14ceb4d0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f3a14ceb660"/>
        <function-ref name="sendDone" scoped="" ref="0x7f3a14ceb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f3a14ce3300" loc="55:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f3a14ce3300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15412640"/>
            <typename><typedef-ref name="T32khz" ref="0x7f3a154129b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f3a14ce2150"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14ce2ad0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14ce2610"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14ce0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f3a14cea8d0" loc="51:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f3a14cea8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f3a14ceac70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f3a14ceae00"/>
        <function-ref name="request" scoped="" ref="0x7f3a14ce9020"/>
        <function-ref name="granted" scoped="" ref="0x7f3a14ce91b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f3a14ce9340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f3a14ced3c0" loc="46:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f3a14ced3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f3a14ced760"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f3a14ced8f0"/>
        <function-ref name="request" scoped="" ref="0x7f3a14ceda80"/>
        <function-ref name="granted" scoped="" ref="0x7f3a14cedc10"/>
        <function-ref name="isOwner" scoped="" ref="0x7f3a14cedda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f3a14ce48d0" loc="54:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f3a14ce48d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f3a14ce4c70"/>
        <function-ref name="txDone" scoped="" ref="0x7f3a14ce4e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f3a14ce0450" loc="56:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f3a14ce0450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f3a14ce07d0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f3a14ce0960"/>
        <function-ref name="led1On" scoped="" ref="0x7f3a14ce0af0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f3a14ce0c80"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f3a14ce0e10"/>
        <function-ref name="get" scoped="" ref="0x7f3a14cdf020"/>
        <function-ref name="led1Off" scoped="" ref="0x7f3a14cdf1b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f3a14cdf7f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a14cdf4d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f3a14cdf340"/>
        <function-ref name="led0On" scoped="" ref="0x7f3a14cdf660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f3a14cd1d10" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f3a14cd1d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f3a14cd00e0"/>
        <function-ref name="txDone" scoped="" ref="0x7f3a14cd0270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f3a14cd4840" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f3a14cd4840"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f3a14cd4bc0"/>
        <function-ref name="stop" scoped="" ref="0x7f3a14cd4d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f3a14cd60c0" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f3a14cd60c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f3a14cd6440"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f3a14cd65d0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f3a14cd6760"/>
        <function-ref name="enableUart" scoped="" ref="0x7f3a14cd68f0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f3a14cd6a80"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f3a14cd6c10"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f3a14cd6da0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f3a14cd5020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f3a14cd51b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f3a14cd5340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f3a14cd54d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f3a14cd5660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f3a14cd57f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f3a14cd5a80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f3a14cd5c10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f3a14cd5da0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f3a14cd3020"/>
        <function-ref name="isUart" scoped="" ref="0x7f3a14cd31b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f3a14cd3340"/>
        <function-ref name="isSpi" scoped="" ref="0x7f3a14cd34d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f3a14cd3660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f3a14cd37f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f3a14cd3980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f3a14cd3b10"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14cd3ca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f3a14cd2220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f3a14cd23b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f3a14cd2540"/>
        <function-ref name="tx" scoped="" ref="0x7f3a14cd26d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f3a14cd2860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f3a14cd29f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f3a14cd2b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f3a14cd2d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f3a14cd1020"/>
        <function-ref name="rx" scoped="" ref="0x7f3a14cd11b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f3a14cd1340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f3a14cd14d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f3a14cd1660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f3a14cd17f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f3a14cd1980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f3a14cc3d40" loc="66:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f3a14cc3d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a14cc10e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a14cc1270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a14cc1400"/>
        <function-ref name="clr" scoped="" ref="0x7f3a14cbf1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a14cc1720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a14cc18b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a14cc1a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a14cc1bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a14cc1d60"/>
        <function-ref name="get" scoped="" ref="0x7f3a14cc0020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a14cc01b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a14cc0340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a14cc04d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a14cc0760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a14cc08f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a14cc0a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a14cc0c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a14cc1590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a14cc0da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a14cbf020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f3a14cc8460" loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f3a14cc8460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f3a14cc87e0"/>
        <function-ref name="txDone" scoped="" ref="0x7f3a14cc8970"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f3a14cbf570" loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f3a14cbf570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a14cbf8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a14cbfa80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a14cbfc10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a14cbd980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a14cbe020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a14cbe1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a14cbe340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a14cbe4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a14cbe660"/>
        <function-ref name="get" scoped="" ref="0x7f3a14cbe7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a14cbe980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a14cbeb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a14cbeca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a14cbd020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a14cbd1b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a14cbd340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a14cbd4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a14cbfda0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a14cbd660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a14cbd7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f3a14cbdd40" loc="68:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f3a14cbdd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a14cbc0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a14cbc270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a14cbc400"/>
        <function-ref name="clr" scoped="" ref="0x7f3a14cba1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a14cbc720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a14cbc8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a14cbca40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a14cbcbd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a14cbcd60"/>
        <function-ref name="get" scoped="" ref="0x7f3a14cbb020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a14cbb1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a14cbb340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a14cbb4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a14cbb760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a14cbb8f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a14cbba80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a14cbbc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a14cbc590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a14cbbda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a14cba020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f3a14ccd8d0" loc="61:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f3a14ccd8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f3a14ccdc50"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f3a14ccdde0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f3a14ccc020"/>
        <function-ref name="enableUart" scoped="" ref="0x7f3a14ccc1b0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f3a14ccc340"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f3a14ccc4d0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f3a14ccc660"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f3a14ccc7f0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f3a14ccc980"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f3a14cccb10"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f3a14cccca0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f3a14ccce30"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f3a14ccb020"/>
        <function-ref name="getUbr" scoped="" ref="0x7f3a14ccb2b0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f3a14ccb440"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f3a14ccb5d0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f3a14ccb760"/>
        <function-ref name="isUart" scoped="" ref="0x7f3a14ccb8f0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f3a14ccba80"/>
        <function-ref name="isSpi" scoped="" ref="0x7f3a14ccbc10"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f3a14ccbda0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f3a14cca020"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f3a14cca1b0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f3a14cca340"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14cca4d0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f3a14cca860"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f3a14cca9f0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f3a14ccab80"/>
        <function-ref name="tx" scoped="" ref="0x7f3a14ccad10"/>
        <function-ref name="getUctl" scoped="" ref="0x7f3a14cc9020"/>
        <function-ref name="disableUart" scoped="" ref="0x7f3a14cc91b0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f3a14cc9340"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f3a14cc94d0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f3a14cc9660"/>
        <function-ref name="rx" scoped="" ref="0x7f3a14cc97f0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f3a14cc9980"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f3a14cc9b10"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f3a14cc9ca0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f3a14cc9e30"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f3a14cc8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f3a14ccd020" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f3a14ccd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f3a14ccd3a0"/>
        <function-ref name="stop" scoped="" ref="0x7f3a14ccd530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f3a14cc5570" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f3a14cc5570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a14cc58f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a14cc5a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a14cc5c10"/>
        <function-ref name="clr" scoped="" ref="0x7f3a14cc3980"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a14cc4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a14cc41b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a14cc4340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a14cc44d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a14cc4660"/>
        <function-ref name="get" scoped="" ref="0x7f3a14cc47f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a14cc4980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a14cc4b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a14cc4ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a14cc3020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a14cc31b0"/>
        <function-ref name="set" scoped="" ref="0x7f3a14cc3340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a14cc34d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a14cc5da0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a14cc3660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a14cc37f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f3a14cc8d30" loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f3a14cc8d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f3a14cc70e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f3a14cc7270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f3a14cc7400"/>
        <function-ref name="clr" scoped="" ref="0x7f3a14cc51b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f3a14cc7720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f3a14cc78b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f3a14cc7a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f3a14cc7bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f3a14cc7d60"/>
        <function-ref name="get" scoped="" ref="0x7f3a14cc6020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f3a14cc61b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f3a14cc6340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f3a14cc64d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f3a14cc6760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f3a14cc68f0"/>
        <function-ref name="set" scoped="" ref="0x7f3a14cc6a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f3a14cc6c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f3a14cc7590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f3a14cc6da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f3a14cc5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f3a14c3e9a0" loc="43:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f3a14c3e9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15412640"/>
            <typename><typedef-ref name="T32khz" ref="0x7f3a154129b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f3a14c3b7e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14c3a1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14c3bca0"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14c3a670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f3a14c399c0" loc="43:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f3a14c399c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15412640"/>
            <typename><typedef-ref name="T32khz" ref="0x7f3a154129b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f3a14c35810"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14c341b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14c35cd0"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14c34670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f3a14c10a50" loc="56:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f3a14c10a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14c10dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14c0f020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14c0f1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14c0f340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14c0f4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14c0f660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14c0f7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14c0f980"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14c0fb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f3a14c0b5a0" loc="61:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f3a14c0b5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14c0b920"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14c0bab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14c0bc40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14c0bdd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14c0a020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14c0a1b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14c0a340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14c0a4d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14c0a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f3a14c11ae0" loc="55:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f3a14c11ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14c11e60"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14c10020"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14c101b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14c10340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14c104d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14c10660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f3a14bfe3e0" loc="73:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f3a14bfe3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14bfe760"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14bfe8f0"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14bfea80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14bfec10"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14bfeda0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14bfd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f3a14c17d40" loc="54:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f3a14c17d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14c110e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14c11270"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14c11400"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14c11590"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14c11720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f3a14bff570" loc="72:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f3a14bff570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14bff8f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14bffa80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14bffc10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14bffda0"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14bfe020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f3a14bf5da0" loc="82:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f3a14bf5da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14bf4180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14bf4310"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14bf44a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14bf4630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14bf47c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14bf4950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f3a14bfd410" loc="74:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f3a14bfd410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14bfd790"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14bfd920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14bfdab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14bfdc40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14bfddd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14bfc020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14bfc1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14bfc340"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14bfc4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f3a14c1d380" loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f3a14c1d380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14c1d700"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14c1d890"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14c1da20"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14c1dbb0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14c1dd40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14c2f020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14c2f1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14c2f340"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14c2f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f3a14c06da0" loc="66:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f3a14c06da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14c05180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14c05310"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14c054a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14c05630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14c057c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14c05950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f3a14c06020" loc="65:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f3a14c06020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14c063a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14c06530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14c066c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14c06850"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14c069e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f3a14c08a50" loc="64:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f3a14c08a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14c08dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14c07020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14c071b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14c07340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14c074d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14c07660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14c077f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14c07980"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14c07b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f3a14c0eda0" loc="58:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f3a14c0eda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14c0d180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14c0d310"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14c0d4a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14c0d630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14c0d7c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14c0d950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f3a14bfb890" loc="76:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f3a14bfb890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14bfbc10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14bfbda0"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14bfa020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14bfa1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14bfa340"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14bfa4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f3a14c05d40" loc="67:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f3a14c05d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14c040e0"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14c04270"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14c04400"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14c04590"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14c04720"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14c048b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14c04a40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14c04bd0"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14c04d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f3a14c0e020" loc="57:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f3a14c0e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14c0e3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14c0e530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14c0e6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14c0e850"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14c0e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f3a14c251b0" loc="49:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f3a14c251b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14c25530"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14c256c0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14c25850"/>
        <function-ref name="get" scoped="" ref="0x7f3a14c259e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14c25b70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14c25d00"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14c30020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14c301b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14c30340"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14c304d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14c30660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f3a14bfc890" loc="75:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f3a14bfc890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14bfce10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14bfb020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14bfb1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14bfb340"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14bfb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f3a14c1c8c0" loc="53:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f3a14c1c8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14c1cc40"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14c1cdd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14c17020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14c171b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14c17340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14c174d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14c17660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14c177f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14c17980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f3a14bfa8c0" loc="77:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f3a14bfa8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14bfac40"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14bfadd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14bf9020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14bf91b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14bf9340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14bf94d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14bf9660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14bf97f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14bf9980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f3a14c128d0" loc="52:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f3a14c128d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14c12c50"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14c12de0"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14c1c020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14c1c1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14c1c340"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14c1c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f3a14c02020" loc="69:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f3a14c02020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14c023a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14c02530"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14c026c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14c02850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14c029e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14c02b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f3a14c18a70" loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f3a14c18a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14c18df0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14c24020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14c241b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14c24340"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14c244d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f3a14c03160" loc="68:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f3a14c03160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14c034e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14c03670"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14c03800"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14c03990"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14c03b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f3a14bf8ae0" loc="79:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f3a14bf8ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14bf8e60"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14bf7020"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14bf71b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14bf7340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14bf74d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14bf7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f3a14c00020" loc="71:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f3a14c00020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14c003a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14c00530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14c006c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14c00850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14c009e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14c00b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14c00d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14bff020"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14bff1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f3a14c0dcd0" loc="60:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f3a14c0dcd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14c0c0a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14c0c230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14c0c3c0"/>
        <function-ref name="get" scoped="" ref="0x7f3a14c0c550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14c0c6e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14c0c870"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14c0ca00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14c0cb90"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14c0cd20"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14c0b020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14c0b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f3a14c09a20" loc="63:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f3a14c09a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14c09da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14c08020"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14c081b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14c08340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14c084d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14c08660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f3a14bf9d40" loc="78:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f3a14bf9d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14bf80e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14bf8270"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14bf8400"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14bf8590"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14bf8720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f3a14bf5020" loc="81:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f3a14bf5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14bf53a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14bf5530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14bf56c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14bf5850"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14bf59e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f3a14c0aa20" loc="62:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f3a14c0aa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14c09020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14c091b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14c09340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14c094d0"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14c09660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f3a14bf7a50" loc="80:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f3a14bf7a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14bf7dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14bf6020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14bf61b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14bf6340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14bf64d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14bf6660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14bf67f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14bf6980"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14bf6b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f3a14bbc940" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f3a14bbc940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14bbccc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f3a14bbc2f0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f3a14bbc2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14bbc670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f3a14bbb020" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f3a14bbb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14bbb3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f3a14bbdbf0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f3a14bbdbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14bbc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f3a14bbe3e0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a14bbe3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14bbe760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14bbe8f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14bbea80"/>
        <function-ref name="get" scoped="" ref="0x7f3a14bbec10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14bbeda0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14bbd020"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14bbd1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14bbd340"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14bbd4d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14bbd660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14bbd7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f3a14bb4750" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f3a14bb4750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14bb4ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f3a14bb4100" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f3a14bb4100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14bb4480"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f3a14bb4da0" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f3a14bb4da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14bb3180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f3a14bb6a60" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f3a14bb6a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14bb6e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f3a14bb7260" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a14bb7260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14bb75e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14bb7770"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14bb7900"/>
        <function-ref name="get" scoped="" ref="0x7f3a14bb7a90"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14bb7c20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14bb7db0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14bb6020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14bb61b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14bb6340"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14bb64d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14bb6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f3a14b6a7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f3a14b6a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b6ab20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14b6acb0"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14b6ae40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b68020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b681b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14b68340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f3a14bb06d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f3a14bb06d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14bb0a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14bb0be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14bb0d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14b6b020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14b6b1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b6b340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14b6b4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14b6b660"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14b6b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f3a14b67c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f3a14b67c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14b66020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f3a14b6bac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f3a14b6bac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b6be40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14b6a020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14b6a1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14b6a340"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14b6a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f3a14b68610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a14b68610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14b68990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14b68b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b68cb0"/>
        <function-ref name="get" scoped="" ref="0x7f3a14b68e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b67020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b671b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14b67340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b674d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14b67660"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14b677f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14b67980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f3a14b62cb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f3a14b62cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b610a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14b61230"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14b613c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b61550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b616e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14b61870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f3a14b64b30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f3a14b64b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14b63020"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14b631b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b63340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14b634d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14b63660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b637f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14b63980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14b63b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14b63ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f3a14b5f2f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f3a14b5f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14b5f670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f3a14b62020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f3a14b62020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b623a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14b62530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14b626c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14b62850"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14b629e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f3a14b61b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a14b61b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14b60020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14b601b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b60340"/>
        <function-ref name="get" scoped="" ref="0x7f3a14b604d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b60660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b607f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14b60980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b60b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14b60ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14b60e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14b5f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f3a14b5a2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f3a14b5a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b5a670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14b5a800"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14b5a990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b5ab20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b5acb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14b5ae40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f3a14b5c220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f3a14b5c220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14b5c5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14b5c730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b5c8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14b5ca50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14b5cbe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b5cd70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14b5b020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14b5b1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14b5b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f3a14b577a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f3a14b577a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14b57b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f3a14b5b610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f3a14b5b610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b5b990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14b5bb20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14b5bcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14b5be40"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14b5a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f3a14b58160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a14b58160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14b584e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14b58670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b58800"/>
        <function-ref name="get" scoped="" ref="0x7f3a14b58990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b58b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b58cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14b58e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b57020"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14b571b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14b57340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14b574d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f3a14b527a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f3a14b527a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b52b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14b52cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14b52e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b51020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b511b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14b51340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f3a14b546d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f3a14b546d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14b54a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14b54be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b54d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14b53020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14b531b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b53340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14b534d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14b53660"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14b537f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f3a14b50c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f3a14b50c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14b4f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f3a14b53ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f3a14b53ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b53e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14b52020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14b521b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14b52340"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14b524d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f3a14b51610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a14b51610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14b51990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14b51b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b51cb0"/>
        <function-ref name="get" scoped="" ref="0x7f3a14b51e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b50020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b501b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14b50340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b504d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14b50660"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14b507f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14b50980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f3a14b4bcb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f3a14b4bcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b4a0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14b4a230"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14b4a3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b4a550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b4a6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14b4a870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f3a14b4db30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f3a14b4db30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14b4c020"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14b4c1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b4c340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14b4c4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14b4c660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b4c7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14b4c980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14b4cb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14b4cca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f3a14b472f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f3a14b472f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14b47670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f3a14b4b020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f3a14b4b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b4b3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14b4b530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14b4b6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14b4b850"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14b4b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f3a14b4ab40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a14b4ab40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14b48020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14b481b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b48340"/>
        <function-ref name="get" scoped="" ref="0x7f3a14b484d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b48660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b487f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14b48980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b48b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14b48ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14b48e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14b47020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f3a14b422f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f3a14b422f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b42670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14b42800"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14b42990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b42b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b42cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14b42e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f3a14b44220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f3a14b44220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14b445a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14b44730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b448c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14b44a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14b44be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b44d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14b43020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14b431b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14b43340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f3a14b407a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f3a14b407a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14b40b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f3a14b43610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f3a14b43610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b43990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14b43b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14b43cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14b43e40"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14b42020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f3a14b41160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a14b41160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14b414e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14b41670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b41800"/>
        <function-ref name="get" scoped="" ref="0x7f3a14b41990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b41b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b41cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14b41e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b40020"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14b401b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14b40340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14b404d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f3a14b3b7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f3a14b3b7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b3bb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14b3bcb0"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14b3be40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b3a020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b3a1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14b3a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f3a14b3d6d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f3a14b3d6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14b3da50"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14b3dbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b3dd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14b3c020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14b3c1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b3c340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14b3c4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14b3c660"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14b3c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f3a14b38c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f3a14b38c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14b37020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f3a14b3cac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f3a14b3cac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b3ce40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14b3b020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14b3b1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14b3b340"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14b3b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f3a14b3a610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a14b3a610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14b3a990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14b3ab20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b3acb0"/>
        <function-ref name="get" scoped="" ref="0x7f3a14b3ae40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b38020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b381b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14b38340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b384d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14b38660"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14b387f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14b38980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f3a14b33cb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f3a14b33cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b320a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14b32230"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14b323c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b32550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b326e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14b32870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f3a14b35b30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f3a14b35b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14b34020"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14b341b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b34340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14b344d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14b34660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b347f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14b34980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14b34b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14b34ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f3a14b302f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f3a14b302f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14b30670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f3a14b33020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f3a14b33020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b333a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14b33530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14b336c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14b33850"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14b339e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f3a14b32b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a14b32b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14b31020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14b311b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b31340"/>
        <function-ref name="get" scoped="" ref="0x7f3a14b314d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b31660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b317f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14b31980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b31b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14b31ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14b31e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14b30020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f3a14b2b2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f3a14b2b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b2b670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14b2b800"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14b2b990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b2bb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b2bcb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14b2be40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f3a14b2d220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f3a14b2d220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14b2d5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14b2d730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b2d8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14b2da50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14b2dbe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b2dd70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14b2c020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14b2c1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14b2c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f3a14b297a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f3a14b297a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14b29b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f3a14b2c610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f3a14b2c610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b2c990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14b2cb20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14b2ccb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14b2ce40"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14b2b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f3a14b2a160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a14b2a160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14b2a4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14b2a670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b2a800"/>
        <function-ref name="get" scoped="" ref="0x7f3a14b2a990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b2ab20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b2acb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14b2ae40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b29020"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14b291b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14b29340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14b294d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f3a14b237a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f3a14b237a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b23b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f3a14b23cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f3a14b23e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b22020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b221b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f3a14b22340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f3a14b256d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f3a14b256d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14b25a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14b25be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b25d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14b24020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14b241b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b24340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14b244d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14b24660"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14b247f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f3a14b21c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f3a14b21c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14b20020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f3a14b24ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f3a14b24ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14b24e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14b23020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14b231b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14b23340"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14b234d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f3a14b22610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a14b22610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14b22990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14b22b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14b22cb0"/>
        <function-ref name="get" scoped="" ref="0x7f3a14b22e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14b21020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14b211b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14b21340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14b214d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14b21660"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14b217f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14b21980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f3a14b1bbc0" loc="7:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f3a14b1bbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14b1a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f3a14b1c3f0" loc="4:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f3a14b1c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14b1c770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f3a14b1cb80" loc="5:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f3a14b1cb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14b1b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f3a14b1b430" loc="6:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f3a14b1b430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14b1b7b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f3a14ad6c50" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f3a14ad6c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14ad5020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14ad51b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14ad5340"/>
        <function-ref name="get" scoped="" ref="0x7f3a14ad54d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14ad5660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14ad57f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14ad5980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14ad5b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14ad5ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14ad5e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14ad4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f3a14aeab80" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f3a14aeab80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15412640"/>
            <typename><typedef-ref name="T32khz" ref="0x7f3a154129b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f3a14ae99b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14ad6360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14ae9e70"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14ad6820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f3a143bf020" loc="43:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f3a143bf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f3a143bf3a0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f3a143bf530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f3a143b8440" loc="48:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a143b8440"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f3a143b87c0"/>
        <function-ref name="configure" scoped="" ref="0x7f3a143b8950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f3a143b9c10" loc="46:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f3a143b9c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f3a143b8020"/>
        <function-ref name="txDone" scoped="" ref="0x7f3a143b81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f3a143c0340" loc="42:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f3a143c0340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f3a143c06c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f3a143c0850"/>
        <function-ref name="request" scoped="" ref="0x7f3a143c09e0"/>
        <function-ref name="granted" scoped="" ref="0x7f3a143c0b70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f3a143c0d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f3a143bd020" loc="45:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f3a143bd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f3a143bd3a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f3a143bd530"/>
        <function-ref name="setUctl" scoped="" ref="0x7f3a143bd6c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f3a143bd850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f3a143bd9e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f3a143bdb70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f3a143bdd00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f3a143bc020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f3a143bc1b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f3a143bc340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f3a143bc4d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f3a143bc660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f3a143bc7f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f3a143bca80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f3a143bcc10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f3a143bcda0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f3a143bb020"/>
        <function-ref name="isUart" scoped="" ref="0x7f3a143bb1b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f3a143bb340"/>
        <function-ref name="isSpi" scoped="" ref="0x7f3a143bb4d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f3a143bb660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f3a143bb7f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f3a143bb980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f3a143bbb10"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a143bbca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f3a143ba220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f3a143ba3b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f3a143ba540"/>
        <function-ref name="tx" scoped="" ref="0x7f3a143ba6d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f3a143ba860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f3a143ba9f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f3a143bab80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f3a143bad10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f3a143b9020"/>
        <function-ref name="rx" scoped="" ref="0x7f3a143b91b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f3a143b9340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f3a143b94d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f3a143b9660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f3a143b97f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f3a143b9980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f3a143bf7c0" loc="44:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a143bf7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f3a143bfb40"/>
        <function-ref name="userId" scoped="" ref="0x7f3a143bfcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f3a14abad50" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f3a14abad50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f3a14ab9100"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f3a14ab9290"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f3a14ab7370" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a14ab7370"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f3a14ab76f0"/>
        <function-ref name="configure" scoped="" ref="0x7f3a14ab7880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f3a14abecd0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f3a14abecd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f3a14abb0a0"/>
        <function-ref name="txDone" scoped="" ref="0x7f3a14abb230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f3a14abba60" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f3a14abba60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f3a14abbde0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f3a14aba020"/>
        <function-ref name="request" scoped="" ref="0x7f3a14aba1b0"/>
        <function-ref name="granted" scoped="" ref="0x7f3a14aba340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f3a14aba4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f3a14ab9590" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a14ab9590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f3a14ab9910"/>
        <function-ref name="userId" scoped="" ref="0x7f3a14ab9aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f3a14aa0020" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a14aa0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f3a14aa03a0"/>
        <function-ref name="userId" scoped="" ref="0x7f3a14aa0530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f3a14ab30d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f3a14ab30d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f3a14ab3470"/>
        <function-ref name="txDone" scoped="" ref="0x7f3a14ab3600"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f3a14aa2880" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f3a14aa2880"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14aa2c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f3a14ab3a00" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f3a14ab3a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f3a14ab3da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f3a14aa20a0" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f3a14aa20a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f3a14aa2420"/>
        <function-ref name="txDone" scoped="" ref="0x7f3a14aa25b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f3a14a22a60" loc="59:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f3a14a22a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f3a14a22e00"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f3a14a21020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f3a14a20790" loc="64:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a14a20790"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f3a14a20b30"/>
        <function-ref name="configure" scoped="" ref="0x7f3a14a20cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f3a14a21270" loc="60:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f3a14a21270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f3a14a215f0"/>
        <function-ref name="requested" scoped="" ref="0x7f3a14a21780"/>
        <function-ref name="granted" scoped="" ref="0x7f3a14a21910"/>
        <function-ref name="isOwner" scoped="" ref="0x7f3a14a21aa0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f3a14a21c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f3a14a23ca0" loc="58:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f3a14a23ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f3a14a220a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f3a14a22230"/>
        <function-ref name="request" scoped="" ref="0x7f3a14a223c0"/>
        <function-ref name="granted" scoped="" ref="0x7f3a14a22550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f3a14a226e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f3a14a1f020" loc="65:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f3a14a1f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f3a14a1f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f3a14a21e80" loc="61:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a14a21e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f3a14a20220"/>
        <function-ref name="userId" scoped="" ref="0x7f3a14a203b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f3a141d4cf0" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f3a141d4cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a141d30a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f3a141d3330" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f3a141d3330"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f3a141d36b0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f3a141d3840"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f3a141d39d0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f3a141d3b60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f3a141d03a0" loc="99:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f3a141d03a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f3a141d0740"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f3a141d08d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f3a141ce7e0" loc="105:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f3a141ce7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f3a141ceb80"/>
        <function-ref name="configure" scoped="" ref="0x7f3a141ced10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f3a141cd020" loc="106:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f3a141cd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f3a141cd3a0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f3a141cd530"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f3a141cd6c0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f3a141cd850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f3a141d0b20" loc="100:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f3a141d0b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f3a141cf020"/>
        <function-ref name="requested" scoped="" ref="0x7f3a141cf1b0"/>
        <function-ref name="granted" scoped="" ref="0x7f3a141cf340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f3a141cf4d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f3a141cf660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f3a141cdaa0" loc="107:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f3a141cdaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f3a141cde20"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f3a141cb020"/>
        <function-ref name="led1On" scoped="" ref="0x7f3a141cb1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f3a141cb340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f3a141cb4d0"/>
        <function-ref name="get" scoped="" ref="0x7f3a141cb660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f3a141cb7f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f3a141cbe30"/>
        <function-ref name="set" scoped="" ref="0x7f3a141cbb10"/>
        <function-ref name="led2On" scoped="" ref="0x7f3a141cb980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f3a141cbca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f3a141d1540" loc="98:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f3a141d1540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f3a141d18e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f3a141d1a70"/>
        <function-ref name="request" scoped="" ref="0x7f3a141d1c00"/>
        <function-ref name="granted" scoped="" ref="0x7f3a141d1d90"/>
        <function-ref name="isOwner" scoped="" ref="0x7f3a141d0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f3a141ce0e0" loc="104:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f3a141ce0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f3a141ce460"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f3a141cf8b0" loc="101:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a141cf8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f3a141cfc30"/>
        <function-ref name="userId" scoped="" ref="0x7f3a141cfdc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f3a141ca160" loc="155:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f3a141ca160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f3a141ca4e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f3a141ca670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f3a14a1b780" loc="72:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f3a14a1b780"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f3a14a1bb00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f3a14a1bd50" loc="73:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f3a14a1bd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f3a14a04100"/>
        <function-ref name="requested" scoped="" ref="0x7f3a14a04290"/>
        <function-ref name="granted" scoped="" ref="0x7f3a14a04420"/>
        <function-ref name="isOwner" scoped="" ref="0x7f3a14a045b0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f3a14a04740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7f3a14a1b020" loc="70:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f3a14a1b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f3a14a1b3a0"/>
        <function-ref name="stop" scoped="" ref="0x7f3a14a1b530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f3a14a04990" loc="74:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a14a04990"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f3a14a04d10"/>
        <function-ref name="userId" scoped="" ref="0x7f3a14a03020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f3a14196bd0" loc="62:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f3a14196bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f3a14195020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f3a14195270" loc="63:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f3a14195270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f3a141955f0"/>
        <function-ref name="requested" scoped="" ref="0x7f3a14195780"/>
        <function-ref name="granted" scoped="" ref="0x7f3a14195910"/>
        <function-ref name="isOwner" scoped="" ref="0x7f3a14195aa0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f3a14195c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7f3a14196470" loc="60:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f3a14196470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f3a141967f0"/>
        <function-ref name="stop" scoped="" ref="0x7f3a14196980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f3a14195e80" loc="64:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f3a14195e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f3a14193220"/>
        <function-ref name="userId" scoped="" ref="0x7f3a141933b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7f3a149e58e0" loc="3:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f3a149e58e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f3a149e5c60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f3a149e4020" loc="4:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f3a149e4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f3a149e43a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f3a149e4530"/>
        <function-ref name="request" scoped="" ref="0x7f3a149e46c0"/>
        <function-ref name="granted" scoped="" ref="0x7f3a149e4850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f3a149e49e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f3a149e5080" loc="2:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f3a149e5080"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f3a149e5400"/>
        <function-ref name="stop" scoped="" ref="0x7f3a149e5590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7f3a149d2a30" loc="47:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x7f3a149d2a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f3a149d2db0"/>
        <function-ref name="offset" scoped="" ref="0x7f3a149cf020"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f3a149cf1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f3a149c0980" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="TestSerialAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a149c0980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f3a147fce80"/>
        <function-ref name="fired" scoped="" ref="0x7f3a147fe4a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f3a147fc260"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f3a147feda0"/>
        <function-ref name="getdt" scoped="" ref="0x7f3a147fb7a0"/>
        <function-ref name="gett0" scoped="" ref="0x7f3a147fb320"/>
        <function-ref name="isRunning" scoped="" ref="0x7f3a147fe920"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f3a147ff5a0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f3a147fc870"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f3a147ffa70"/>
        <function-ref name="stop" scoped="" ref="0x7f3a147fe020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f3a149b7b60" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f3a149b7b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f3a149b2110"/>
        <function-ref name="fired" scoped="" ref="0x7f3a149b45f0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f3a149b34a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f3a149b3020"/>
        <function-ref name="getdt" scoped="" ref="0x7f3a149b2a10"/>
        <function-ref name="gett0" scoped="" ref="0x7f3a149b2590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f3a149b4a70"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f3a149b6790"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f3a149b3ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f3a149b6c60"/>
        <function-ref name="stop" scoped="" ref="0x7f3a149b4170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f3a149ad700" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f3a149ad700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f3a149a9c40"/>
        <function-ref name="fired" scoped="" ref="0x7f3a149ab1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f3a149a9020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f3a149abae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f3a149a8590"/>
        <function-ref name="gett0" scoped="" ref="0x7f3a149a8110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f3a149ab660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f3a149ac390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f3a149a9630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f3a149ac860"/>
        <function-ref name="stop" scoped="" ref="0x7f3a149acd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f3a149a61a0" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f3a149a61a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f3a149a6dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f3a149b08c0" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f3a149b08c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a149b0c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f3a148cf870" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f3a148cf870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f3a148cb090"/>
        <function-ref name="fired" scoped="" ref="0x7f3a148cc090"/>
        <function-ref name="startAt" scoped="" ref="0x7f3a148cca10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f3a148cc550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f3a148cb550"/>
        <function-ref name="start" scoped="" ref="0x7f3a148ce6a0"/>
        <function-ref name="stop" scoped="" ref="0x7f3a148cebb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f3a148cf020" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f3a148cf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a148cf3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f3a14185ce0" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f3a14185ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15412640"/>
            <typename><typedef-ref name="T32khz" ref="0x7f3a154129b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f3a14181670"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14182550"/>
        <function-ref name="startAt" scoped="" ref="0x7f3a14181020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f3a14182a10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f3a14181b30"/>
        <function-ref name="start" scoped="" ref="0x7f3a14183b60"/>
        <function-ref name="stop" scoped="" ref="0x7f3a14182090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f3a14185490" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f3a14185490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a14185810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f3a1416b5d0" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f3a1416b5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a1416b950"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a1416bae0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a1416bc70"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a1416be00"/>
        <function-ref name="fired" scoped="" ref="0x7f3a1416a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f3a1416fc50" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f3a1416fc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a1416d020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a1416d1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a1416d340"/>
        <function-ref name="get" scoped="" ref="0x7f3a1416d4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a1416d660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a1416d7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a1416d980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a1416db10"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a1416dca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a1416de30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a1416c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f3a1416c2b0" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f3a1416c2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a1416c630"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a1416c7c0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a1416c950"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a1416cae0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a1416cc70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a1416ce00"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a1416b020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a1416b1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a1416b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f3a14981210" loc="52:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f3a14981210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a14981590"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14981720"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a149818b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14981a40"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14981bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f3a14988bf0" loc="50:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f3a14988bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14985020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a149851b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14985340"/>
        <function-ref name="get" scoped="" ref="0x7f3a149854d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14985660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a149857f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14985980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14985b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14985ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14985e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14984020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f3a149848b0" loc="51:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f3a149848b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a14984c30"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14984dc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14982020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a149821b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a14982340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a149824d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14982660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a149827f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a14982980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f3a14161440" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f3a14161440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f3a141617c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f3a14161950"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f3a14161ae0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f3a14161c70"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14161e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f3a14164910" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f3a14164910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f3a14164c90"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f3a14164e20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a14163020"/>
        <function-ref name="get" scoped="" ref="0x7f3a141631b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14163340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a141634d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f3a14163660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a141637f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14163980"/>
        <function-ref name="setMode" scoped="" ref="0x7f3a14163b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f3a14163ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f3a14168720" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f3a14168720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15412640"/>
            <typename><typedef-ref name="T32khz" ref="0x7f3a154129b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f3a14164020"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14166020"/>
        <function-ref name="startAt" scoped="" ref="0x7f3a141669a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f3a141664e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f3a141644e0"/>
        <function-ref name="start" scoped="" ref="0x7f3a141675b0"/>
        <function-ref name="stop" scoped="" ref="0x7f3a14167ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f3a14169e60" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f3a14169e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f3a14168210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f3a14162020" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f3a14162020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f3a141623a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f3a14162530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f3a141626c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f3a14162850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f3a141629e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f3a14162b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f3a14162d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f3a14161020"/>
        <function-ref name="setControl" scoped="" ref="0x7f3a141611b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f3a14933b70" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f3a14933b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f3a149309b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a1492e360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14930e70"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a1492e820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f3a1490d0f0" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f3a1490d0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15412640"/>
            <typename><typedef-ref name="T32khz" ref="0x7f3a154129b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f3a1490c020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a1490c9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a1490c4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a1490ce60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f3a1492bcf0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f3a1492bcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f3a1490fb60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a1490e550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a1490e090"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a1490ea10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f3a1417e140" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f3a1417e140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f3a1417bb30"/>
        <function-ref name="fired" scoped="" ref="0x7f3a1417d9f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f3a1417b4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f3a1417b020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f3a1417a020"/>
        <function-ref name="start" scoped="" ref="0x7f3a1417d020"/>
        <function-ref name="stop" scoped="" ref="0x7f3a1417d530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f3a14178b90" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f3a14178b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15412640"/>
            <typename><typedef-ref name="T32khz" ref="0x7f3a154129b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f3a141744e0"/>
        <function-ref name="fired" scoped="" ref="0x7f3a141754e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f3a14175e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f3a141759a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f3a141749a0"/>
        <function-ref name="start" scoped="" ref="0x7f3a141779d0"/>
        <function-ref name="stop" scoped="" ref="0x7f3a14175020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f3a1417a690" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f3a1417a690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f3a141795b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14178020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14179a70"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a141784e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f3a1489a9c0" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f3a1489a9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f3a1489ad40"/>
        <function-ref name="runTask" scoped="" ref="0x7f3a14898020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f3a1489d850" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f3a1489d850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f3a1489a090"/>
        <function-ref name="fired" scoped="" ref="0x7f3a1489b090"/>
        <function-ref name="startAt" scoped="" ref="0x7f3a1489ba10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f3a1489b550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f3a1489a550"/>
        <function-ref name="start" scoped="" ref="0x7f3a1489c6a0"/>
        <function-ref name="stop" scoped="" ref="0x7f3a1489cbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f3a148a22f0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a148a22f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f3a1489f870"/>
        <function-ref name="fired" scoped="" ref="0x7f3a148a1e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f3a148a0c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f3a148a0780"/>
        <function-ref name="getdt" scoped="" ref="0x7f3a1489d1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f3a1489fcf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f3a148a0300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f3a148a1020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f3a1489f260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f3a148a14f0"/>
        <function-ref name="stop" scoped="" ref="0x7f3a148a19c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f3a1481a020" loc="58:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f3a1481a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f3a14816630"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14818a60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f3a14817920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f3a148174a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f3a14815020"/>
        <function-ref name="gett0" scoped="" ref="0x7f3a14816ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f3a14817020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f3a1481ac10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f3a14816020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f3a14818110"/>
        <function-ref name="stop" scoped="" ref="0x7f3a148185e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f3a14815450" loc="59:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f3a14815450"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f3a148157d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f3a148218e0" loc="57:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a148218e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f3a1481b020"/>
        <function-ref name="fired" scoped="" ref="0x7f3a1481e4c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f3a1481d300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f3a1481ee00"/>
        <function-ref name="getdt" scoped="" ref="0x7f3a1481b960"/>
        <function-ref name="gett0" scoped="" ref="0x7f3a1481b4c0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f3a1481e960"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f3a14820560"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f3a1481d930"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f3a14820a50"/>
        <function-ref name="stop" scoped="" ref="0x7f3a1481e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f3a140ff8c0" loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f3a140ff8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f3a140ffc40"/>
        <function-ref name="runTask" scoped="" ref="0x7f3a140ffdd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f3a14107a90" loc="65:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f3a14107a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f3a14102020"/>
        <function-ref name="fired" scoped="" ref="0x7f3a14104510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f3a14103300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f3a14104e10"/>
        <function-ref name="getdt" scoped="" ref="0x7f3a14102920"/>
        <function-ref name="gett0" scoped="" ref="0x7f3a141024a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f3a14104990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f3a141066b0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f3a14103910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f3a14106b80"/>
        <function-ref name="stop" scoped="" ref="0x7f3a14104090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f3a140ff270" loc="67:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f3a140ff270"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f3a140ff5f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Platform" ref="0x7f3a14102d10" loc="66:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f3a14102d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f3a14100d60"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f3a140ff020"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f3a14100400"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f3a14100590"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f3a14100720"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f3a141008b0"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f3a14100a40"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f3a14100bd0"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f3a141000e0"/>
        <function-ref name="node_id" scoped="" ref="0x7f3a14100270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f3a1410d440" loc="63:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f3a1410d440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f3a14108aa0"/>
        <function-ref name="fired" scoped="" ref="0x7f3a1410a020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f3a1410ae00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f3a1410a960"/>
        <function-ref name="getdt" scoped="" ref="0x7f3a141074c0"/>
        <function-ref name="gett0" scoped="" ref="0x7f3a14107020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f3a1410a4c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f3a1410c090"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f3a14108470"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f3a1410c580"/>
        <function-ref name="stop" scoped="" ref="0x7f3a1410ca70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f3a14811020" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f3a14811020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f3a14811c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f3a14807300" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f3a14807300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f3a15415e00"/>
            <typename><typedef-ref name="TMilli" ref="0x7f3a15412200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f3a14806150"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f3a14806ad0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f3a14806610"/>
        <function-ref name="overflow" scoped="" ref="0x7f3a14805020"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f3a153fd270" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f3a153a83d0" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f3a153bfd10"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f3a15409a50" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f3a153bfd10"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f3a15409dd0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f3a153a8130" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f3a153a5a00" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a153a5400" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f3a153a5730" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f3a153a3b60" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f3a153a7740" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a153a74c0" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f3a153a4c70" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a153a4690" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f3a153a49e0" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f3a153900b0" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a15393e00" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f3a1538f2a0" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a1538f020" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f3a1538c620" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a1538c020" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f3a1538c350" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f3a1538b6d0" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f3a1538d730" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a1538d170" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f3a1538d4a0" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <function event="" provided="0" name="receive" ref="0x7f3a153ac300" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
              <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a153ad850" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f3a153adba0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f3a153ac020" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f3a153fed30" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f3a153fed30"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f3a15399a20" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f3a1539c350" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f3a1539a120" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f3a1539bb00" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f3a1539be40" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f3a1539b350" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f3a15397a70" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f3a153971f0" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f3a1539cb30" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f3a1539f8d0" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f3a1539f650" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f3a153990c0" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f3a1539aac0" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f3a1539ae00" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f3a1539e3b0" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f3a1539e130" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f3a1539ebb0" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f3a15405070" loc="61:../../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f3a15405820" loc="67:../../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f3a15404030" loc="72:../../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f3a15402020" loc="83:../../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f3a154017d0" loc="100:../../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f3a15400020" loc="117:../../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f3a154047c0" loc="77:../../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f3a15400b90" loc="134:../../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f3a15400910" loc="134:../../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f3a154068a0" loc="56:../../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f3a15402800" loc="89:../../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f3a15401020" loc="94:../../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f3a1540b020" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f3a1540dc50" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f3a1540a520" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f3a1540a2a0" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f3a1540d270" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f3a1540b870" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f3a1535d5a0" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f3a1535dcd0" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f3a1535e760" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f3a1535bb60" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f3a1535ee60" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f3a1535b420" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f3a15362970" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f3a1535e070" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f3a15364d90" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f3a153307c0" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f3a1532f020" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f3a1532bb10" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f3a1532b890" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullUp" ref="0x7f3a153295d0" loc="126:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f3a15332020" loc="59:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f3a1532e020" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f3a15329d60" loc="134:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="129:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDriveStrength" ref="0x7f3a15328860" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="136:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short> &#10; Set port drive strength.</short>
          <long> &#10; Set port drive strength.&#10; @param mode: MSP430_PORT_DRIVE_STRENGTH_*&#10; @return EINVAL if invalid mode or pin doesn't support drive&#10;     strength config.&#10; FAIL if pin is not an output&#10; SUCCESS if pin supports it, is an output, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f3a153285e0" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f3a1532f760" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f3a15330020" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getDriveStrength" ref="0x7f3a15327190" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get drive strength.</short>
          <long>&#10; Get drive strength.&#10; @return MSP430_PORT_DRIVE_STRENGTH_*&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f3a1532d770" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullDown" ref="0x7f3a1532ae30" loc="125:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f3a153327c0" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorOff" ref="0x7f3a1532a3e0" loc="124:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; set resistor mode directly.</short>
          <long>&#10; set resistor mode directly.&#10;&#10; You have to know what you are doing when you use these.  These routines&#10; assume that the port is set for input (PxDIR).  The routines explicitly&#10; change the value of the bits setting in PxOUT.&#10;&#10; The advantage of using these routines is efficiency because there is no&#10; mode checking.  In addition, no error check is done to make sure that the&#10; port is in input mode.  The thing is, first, this is something that you&#10; get right once and then it doesn't change so why check and, second no&#10; one actually checks the error return because there really isn't any&#10; point to doing the check because this isn't something you actually need&#10; to check the return code for.  So why have one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f3a15333020" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="46:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f3a1532e7a0" loc="91:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f3a1532b020" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f3a1532d020" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f3a15333750" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Platform" loc="51:../../../tos/interfaces/Platform.nc">
      <function command="" provided="0" name="jiffiesRawSize" ref="0x7f3a1512d930" loc="109:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="node_id" ref="0x7f3a1512a870" loc="182:../../../tos/interfaces/Platform.nc">
        <documentation loc="164:../../../tos/interfaces/Platform.nc">
          <short>&#10; Platform dependent node id.</short>
          <long>&#10; Platform dependent node id.&#10;&#10; Get a Platform defined node id.  This will typically be a serial number&#10; or mac address.&#10;&#10; Platform define PLATFORM_SERIAL_NUM_SIZE determines the&#10; size.  If not defined defaults to 4 bytes (uint32_t).  But platforms&#10; really should define it to be clear.  (see platform.h)&#10;&#10; input:  *lenp      pointer where to place the length of the number.&#10;&#10; output: *lenp      length filled in if non-null.&#10; return: *uint8_t   pointer to the serial_num or NULL.&#10;&#10; a Node Id is assumed to be a sequence of bytes starting with the&#10; msb first.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lenp" ref="0x7f3a1512a5b0" loc="182:../../../tos/interfaces/Platform.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRawSize" ref="0x7f3a15130bb0" loc="79:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRaw" ref="0x7f3a15130420" loc="78:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesExpired" ref="0x7f3a1512c700" loc="126:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f3a1512c110" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f3a1512c470" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIntPriority" ref="0x7f3a1512bc50" loc="162:../../../tos/interfaces/Platform.nc">
        <documentation loc="153:../../../tos/interfaces/Platform.nc">
          <short>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.</short>
          <long>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.&#10;   modern computer hardware allows the assignment of different priorities&#10;   to interrupt sources.  This is inherently a platform thing.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="irq_number" ref="0x7f3a1512b9d0" loc="162:../../../tos/interfaces/Platform.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set_unaligned_traps" ref="0x7f3a1512b2a0" loc="150:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on_off" ref="0x7f3a1512b020" loc="150:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesRaw" ref="0x7f3a1512d190" loc="108:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="localTime" ref="0x7f3a15133c50" loc="64:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsExpired" ref="0x7f3a1512f980" loc="95:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f3a1512f390" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f3a1512f6f0" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f3a150ecb40" loc="48:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f3a150eede0" loc="43:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f3a150ec420" loc="47:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f3a150ee700" loc="42:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f3a150ed5a0" loc="45:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f3a150f28f0" loc="40:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f3a150ee020" loc="41:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f3a150edcc0" loc="46:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f3a155357e0" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f3a157fd700"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f3a1545ba80" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f3a154591f0" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f3a1545b2b0" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f3a155d3020" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f3a15f73e80" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f3a158bbe20" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f3a158bb610" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f3a158af770" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event.&#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f3a158ad020" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f3a14fcd770" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a14fcd4f0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f3a14fcb940" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a14fcb6c0" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f3a14fcaab0" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a14fca830" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f3a14fd39f0" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f3a153bf930"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f3a14fd3770" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f3a14fdd6d0" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f3a153bfd10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f3a14fdd450" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f3a14fe1ac0" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f3a153bfd10"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f3a14fde600" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f3a153bfd10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f3a14fde380" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f3a14fda020" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f3a153bfd10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f3a14fd9a00" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f3a14fd9d50" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f3a153bfd10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f3a14fdcac0" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f3a153bfd10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f3a14fdc4e0" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f3a14fdc830" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f3a153bfd10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f3a14fd64a0" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f3a153bf550"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f3a14fd6220" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f3a14fd5850" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f3a153bf550"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f3a14fd52a0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f3a14fd55c0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f3a153bf550"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f3a14fd82a0" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f3a14fd8020" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f3a14fd4020" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f3a153bf930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f3a14fd18c0" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f3a14fd1c10" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f3a153bf930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f3a14fd4e40" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f3a153bf930"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f3a14fbeac0" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a14fbe500" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f3a14fbe830" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f3a14fb9620" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a14fb9020" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f3a14fb9350" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f3a14fb8660" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f3a14fbb2a0" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a14fbb020" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f3a14fba750" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a14fba170" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f3a14fba4c0" loc="100:../../../tos/interfaces/Send.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7f3a14f57b00" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a14f574f0" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7f3a14f57870" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7f3a14f5cc70" loc="15:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7f3a14f59b60" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f3a14f59560" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f3a153b0940"/>
                <typename><typedef-ref name="message_t" ref="0x7f3a153ad020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7f3a14f598d0" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f3a14f3b830" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f3a14f39070" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7f3a14f38e50" loc="54:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f3a14f386e0" loc="49:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7f3a14f43270" loc="56:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7f3a14f416c0" loc="72:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7f3a14f3f390" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f3a14f3f110" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7f3a14f40020" loc="79:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7f3a14f43de0" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f3a14f43b60" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7f3a14f3fbf0" loc="100:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7f3a14f408d0" loc="85:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7f3a14f4bd70" loc="71:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7f3a14f49750" loc="81:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7f3a14f4b400" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7f3a14f4b180" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7f3a14f48350" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f3a14f480d0" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7f3a14f46020" loc="62:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7f3a14f46c40" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f3a14f469c0" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7f3a14f45730" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f3a14f454b0" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f3a14e12dd0" loc="48:../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f3a14e12800" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f3a14e12b40" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f3a14e0cac0" loc="79:../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f3a14e0c840" loc="79:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f3a14e09930" loc="90:../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f3a14e09360" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f3a14e096a0" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f3a14e0b740" loc="65:../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f3a14e082c0" loc="99:../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f3a14e07920" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f3a14e07c60" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f3a14e08020" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f3a14e0c070" loc="72:../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f3a14e0d720" loc="57:../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f3a14e0edb0" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f3a14e0d130" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f3a14e0d480" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
              <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f3a14de75b0" loc="50:../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f3a14de7330" loc="50:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7f3a14de7df0" loc="59:../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f3a14de6cf0" loc="69:../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f3a14de6700" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f3a14de6a60" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7f3a14de4b50" loc="79:../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f3a14d8b580" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f3a14d89020" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <short>&#10; Interface used by Msp430Uart clients to reconfigure the UART before use&#10; </short>
        <long>&#10; Interface used by Msp430Uart clients to reconfigure the UART before use&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f3a14d864c0" loc="39:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f3a14dae020"/></typename>
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f3a14dafb30"/></type-tag>
            </type-qualified>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f3a14d8ebf0" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.&#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource&#10;&#10; @note This command should never be called between putting in a request&#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event,&#10;       we have opted to keep thing simple and warn you about the potential&#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f3a14d8fbe0" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f3a14d8f270" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f3a14d8e420" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f3a14d8d8a0" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f3a14d809b0" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f3a14d80190" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART. &#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information.&#10;&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7f3a14d77740" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f3a14d774c0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f3a14d7acd0" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART.&#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information. I.e. calling &#60;code>tx&#60;/done> will transmit a byte of&#10; data in the mode (SPI or UART) the USART has been set to before.&#10;&#10; @author Vlado Handziski (handzisk@tkn.tu-berlin.de)&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f3a14d50020" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7f3a14d5dc60" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7f3a14d69a30" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f3a14ddf420"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f3a14ddfc60"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f3a14d697b0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f3a14ddf420"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f3a14ddfc60"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7f3a14d5fda0" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7f3a14d65020" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f3a14dda3d0"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f3a14ddac10"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f3a14d67c60" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f3a14dda3d0"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f3a14ddac10"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f3a14d551f0" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7f3a14d527b0" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7f3a14d674c0" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f3a14ddd360"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7f3a14dddaf0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7f3a14d65810" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f3a14dda3d0"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7f3a14ddac10"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7f3a14d625e0" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7f3a14d62360" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7f3a14d63c10" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7f3a14d56a70" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7f3a14d68c90" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f3a14ddd360"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f3a14dddaf0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f3a14d68a10" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f3a14ddd360"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f3a14dddaf0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7f3a14d64a50" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f3a14d55920" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7f3a14d63460" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7f3a14d631e0" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7f3a14d60e50" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7f3a14d5f610" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f3a14d58bb0" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7f3a14d5ab00" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7f3a14d5ecd0" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f3a14d56350" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7f3a14d5b4b0" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7f3a14d54070" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f3a14d62dc0" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f3a14de82e0"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7f3a14de1a10"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7f3a14d54810" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7f3a14d51770" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7f3a14d642a0" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7f3a14d64020" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f3a14d509c0" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f3a14d50740" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7f3a14d68270" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f3a14ddf420"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7f3a14ddfc60"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7f3a14d5e550" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f3a14d5bc00" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7f3a14d58390" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f3a14dae020"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f3a14dafb30"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f3a14d58110" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f3a14dae020"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f3a14dafb30"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7f3a14d59650" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f3a14dc36a0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f3a14dc3280"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f3a14d593d0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f3a14dc36a0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f3a14dc3280"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f3a14d4f270" loc="227:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="222:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return byte received&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7f3a14d52030" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7f3a14d605b0" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7f3a14d51020" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7f3a14d5a390" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7f3a14d5d4f0" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f3a14d4a710" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f3a14d4a710"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f3a14d4a950" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f3a14d4a950"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f3a14d472b0" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return counter value.</short>
          <long>&#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f3a14d4a950"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f3a14d463b0" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f3a14d47b30" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f3a14d46b10" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f3a14cd7b80" loc="95:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f3a14cd4420" loc="105:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f3a14c205f0" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10;&#10; It has a predefined idea of what mode that capture should occur in.&#10; If that doesn't work for you, use setControl.&#10;&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; @param ccis configures which input channel to use.&#10;&#10; Msp430Timer.h has convenience definitions:&#10;&#10;     MSP430TIMER_CM_NONE,            MSP430TIMER_CCI_A&#10;     MSP430TIMER_CM_RISING,          MSP430TIMER_CCI_B&#10;     MSP430TIMER_CM_FALLING,         MSP430TIMER_CCI_GND&#10;     MSP430TIMER_CM_BOTH             MSP430TIMER_CCI_VCC&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f3a14c20020" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
          <variable name="ccis" ref="0x7f3a14c20360" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f3a14c234d0" loc="41:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f3a150e3550"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f3a150e1020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f3a14c1e020" loc="76:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f3a14c1d020" loc="78:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f3a14c21630" loc="56:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short>&#10; Sets the time in compare mode.</short>
          <long>&#10; Sets the time in compare mode.&#10;&#10; setControlAsCompare has a predefined, hardcoded idea of&#10; how the control register should be set for doing a compare.&#10;&#10; Your mileage may vary and this may not work for you.   In&#10; which case you set use setControl.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f3a14c1e760" loc="77:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f3a14c23c70" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f3a14c22420" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f3a14c22e70" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f3a150e3550"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f3a150e1020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f3a14c22bf0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f3a150e3550"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f3a150e1020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f3a14c16270" loc="45:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="42:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f3a14c148c0" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="76:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f3a14c14640" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f3a14c124e0" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="87:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f3a14c12260" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f3a14c15e40" loc="74:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="71:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f3a14c15580" loc="69:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="59:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f3a14c16c20" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f3a14c169a0" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f3a14c1b270" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f3a14c1bbf0" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f3a14c1b970" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f3a14c1a610" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f3a14c1a390" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f3a14c18020" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f3a14c1ad60" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f3a14c18710" loc="46:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f3a14c29b60" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f3a14c27400" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f3a14c27180" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f3a14c282b0" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f3a14c33db0" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f3a14c289f0" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f3a14c2ecc0" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f3a14c29470" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f3a14c2e580" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f3a14c2d420" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f3a14c2dd30" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f3a14c2dab0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f3a14c27e10" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f3a14c27b90" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f3a15f66520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f3a14be81f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f3a14ac5020" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f3a14ac5880" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f3a15f66160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f3a14aaf420" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="38:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f3a14a95270" loc="54:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f3a14a94350" loc="71:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f3a14a99990" loc="44:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="39:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f3a14a95ae0" loc="63:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f3a14a94c80" loc="79:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwnerInfo" loc="2:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
      <function command="" provided="0" name="inUse" ref="0x7f3a14a97e60" loc="9:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
        <documentation loc="3:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
          <short>&#10; Check whether a DefaultOwner has an active client.</short>
          <long>&#10; Check whether a DefaultOwner has an active client.&#10;&#10; @return TRUE If client is active.&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f3a14a88740" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f3a158b9020"/>
            <typename><typedef-ref name="error_t" ref="0x7f3a158b11b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f3a14a917d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f3a14a884c0" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f3a14a917d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f3a14a8a750" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f3a14a892a0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f3a14a917d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f3a14a89020" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f3a14a917d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f3a14a89bb0" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f3a14a917d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:../../../tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:../../../tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x7f3a14a19ce0" loc="62:../../../tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:../../../tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f3a149a4350" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f3a149a4350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f3a149a4c70" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f3a15f66920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f3a149a1c70" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f3a149a1c70"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f3a1499e020" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f3a1499e020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f3a1499ac50" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f3a1499e020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f3a1499dba0" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f3a1499a2b0" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f3a1499e020"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f3a1499e020"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f3a1499cbd0" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f3a1499e020"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f3a1499a020" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f3a1499e020"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f3a1499c3b0" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f3a158bf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f3a14999480" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f3a1499e020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f3a1499eb80" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f3a1499e020"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f3a1499e900" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f3a1499e020"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f3a1499d3e0" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSkew" loc="51:../../../tos/lib/timer/TimeSkew.nc">
      <documentation loc="35:../../../tos/lib/timer/TimeSkew.nc">
        <short>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.</short>
        <long>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.  Under various circumstances&#10; adjustments may be made by this underlying timing that can result&#10; in time skew.&#10;&#10; Typically this can occur when the RTC (Real Time Clock) subsystem&#10; has had its time adjusted for example via a GPS providing synchronized&#10; time.  If this skew is below a reasonable threshold (platform dependent)&#10; TimeSkew.skew(skew_val) will be signalled.  Beyond that threshold&#10; it might be better to reboot and reestablish reasonable time via&#10; those mechanisms.&#10;&#10; @author Eric B.Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function event="" provided="0" name="skew" ref="0x7f3a14887e80" loc="62:../../../tos/lib/timer/TimeSkew.nc">
        <documentation loc="52:../../../tos/lib/timer/TimeSkew.nc">
          <short>&#10; Signaled when the underlying timing system has detected timing&#10; skew.</short>
          <long>&#10; Signaled when the underlying timing system has detected timing&#10; skew.&#10;&#10; @param skew    estimated skew computed.  in millisecs (units platform&#10;                dependent, typically binary millisecs).&#10;                > 0, time has been moved into the future (we were slow).&#10;                &#60; 0, time has been shifted backwards, (we were fast).&#10;                = 0, skew is beyond platform limits.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSkew"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f3a15f67930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skew" ref="0x7f3a14887c00" loc="62:../../../tos/lib/timer/TimeSkew.nc">
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f3a15f67930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
